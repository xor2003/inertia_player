from __future__ import absolute_import
from __future__ import print_function

from tasm import parser
from tasm import cpp
from tasm import op
from tasm import proc
from tasm import lex

from builtins import chr
from builtins import hex
from builtins import object
from builtins import range
from builtins import str
import future.types
from future.types import Integral
import future.types.newobject
from future.types.newobject import newobject
import future.types.newrange
from future.types.newrange import newrange
import future.types.newstr
from future.types.newstr import BaseNewStr
from future.types.newstr import newstr
import logging
from logging import BufferingFormatter
from mock import patch
import ntpath
import re
from re import Scanner
import re, string, os
import sys
import tasm.lex
import tasm.op
from tasm.op import label
from tasm.op import var
import tasm.parser
from tasm.parser import Parser
import tasm.proc
from tasm.proc import Proc
import traceback
import unittest

class ParserTest(unittest.TestCase):

    '''
    def test_convert_data_to_blob(self):
        parser_instance = Parser([])
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'00000000'", '0Dh', '0Ah', "'$'"]), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'07/02/95 12:26:42'", '0']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'100% assembler!'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'1024'", '0']), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'13/02/95 21:15:58'", '0']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'1 Thru 0'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'2:284/116.8'"]), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' 24bit Interpolation'"]), 20)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'256'", '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'512'", '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'768'", '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Adlib SoundCard'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Adlib SoundCard'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' and '"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' and write following text in your message:'"]), 42)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Arpeggio       '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' at'", '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Auto TonePorta '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'BackSpace'"]), 9)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' base port '", '0']), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'BMOD2STM'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'CD81'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'CH'"]), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Channels      :'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'CHN'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Config file not found. Run ISETUP first'", '0Dh', '0Ah', "'$'"]), 42)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Copyright (c) 1994,1995 by Stefan Danes and Ramon van Gorkom'", '0']), 61)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Could not find the Gravis UltraSound at the specified port addres'"]), 65)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Could not find the ULTRASND environment string'", '0Dh', '0Ah', '0']), 49)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Covox'", '0']), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Covox'", '0']), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Dh', '0Ah']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Ctrl Del'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Dh', "'Current Soundcard settings:'", '0Dh', '0Ah']), 30)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Current Track :'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Fh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Cursor '", '1Bh', "' '"]), 9)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Cursor '"]), 7)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Eh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Dec/Inc amplify'"]), 17)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Eh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Dec/Inc volume'"]), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Del'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Delete all files which are marked to delete'"]), 43)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Delete marked files? [Y/N]'", '0']), 27)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Deleting file: '"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Device not initialised!'", '0']), 24)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Eh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' Disable BPM on/off'"]), 19)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["', DMA '"]), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Eh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'DOS Shell (Type EXIT to return)'"]), 31)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  DOS Shell (Type EXIT to return)'"]), 33)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["', DRAM-DMA '"]), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'E_Command      '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'E.G.'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'End'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  End pattern'"]), 13)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'End'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Enter'"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Error: Could not find IRQ/DMA!'", '0Dh', '0Ah', '0']), 33)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Error: Could not find IRQ!'", '0Dh', '0Ah', '0']), 29)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Error: Could not find DMA!'", '0Dh', '0Ah', '0']), 29)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Error: Soundcard not found!'", '0Dh', '0Ah', "'$'", '0']), 31)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'ESC'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'EXIT'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-1'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Fh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-10'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-10'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Fh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-11'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-11'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Fh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-12'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-12'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-2'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-3'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-4'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-5'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-8'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-8'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' [F-9]              '", '0']), 21)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' [F-9]'", '0']), 7)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Fh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-9'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-9'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'F-9'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FAR■'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FAR Fine Tempo '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FAR Tempo      '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Fast(er) forward'"]), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Fast(er) rewind'"]), 17)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  FastFourier Frequency Analysis'"]), 32)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FidoNet  : '"]), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'File'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'File Selector Help'"]), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Filename      : '"]), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FileName.Ext'"]), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Panning   '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Port+VolSl'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Porta Down'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Porta Up  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Tone Porta'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Vibr+VolSl'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Vibrato   '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Fine Vol Slide '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FineSlide Down '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FineSlide Up   '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FineVolume Down'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FineVolume Up  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FLT4'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'FLT8'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'General MIDI'", '0']), 13)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'General MIDI'", '0']), 13)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Glissando Ctrl '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Graphical scopes, one for each channel'"]), 40)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Gravis MAX Codec'", '0']), 17)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Gravis UltraSound'", '0']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Gravis UltraSound'", '0']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Fh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Gray - +'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'GSFT'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Guess...'"]), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'h, GF1-IRQ '"]), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'h, IRQ '"]), 7)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Hit backspace to return to playmode, F-1 for help, QuickRead='"]), 61)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Home'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Hope you liked using the '"]), 25)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'if'"]), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'If you have bug-reports, suggestions or comments send a message t'"]), 65)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' Ignore BPM changes'"]), 19)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Mailinglists'"]), 20)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Module: '", '0']), 17)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Module: '", '0']), 17)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Module: '"]), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Player'"]), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Player V1.22 written by Stefan Danes and Ramon van Gorkom'"]), 65)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Player V1.22 Assembly '", '27h', "'94 CD Edition by Sound Solution'"]), 62)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Player'", '0']), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Inertia Sample: '"]), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Internet : '"]), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Invert Loop    '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'   JanFebMarAprMayJunJulAugSepOctNovDec'"]), 39)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'JN'"]), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Jump To Loop   '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'KB'", '0']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'kHz'", '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'List file not found.'", '0Dh', '0Ah', "'$'"]), 23)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'listserver@oliver.sun.ac.za'"]), 27)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Loading module'", '0']), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Eh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' Loop Module when done'"]), 22)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' Loop module'"]), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Loop pattern'"]), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'M&K!'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'M!K!'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'M.K.'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Main Volume   :'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Mark file to delete'"]), 19)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'<Marked to Delete>    '", '0']), 23)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'MAS_UTrack_V'"]), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["', mixed at '", '0']), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Module is corrupt!'", '0']), 19)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Module load error.'", '0Dh', '0Ah', "'$'"]), 21)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Module not found.'", '0Dh', '0Ah', "'$'"]), 20)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Module Type   : '"]), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'MTM'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'<Mute>                '", '0']), 23)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Mute channel'"]), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'name'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Not enough DRAM on UltraSound'", '0Dh', '0Ah', '0']), 32)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Not enough DRAM on your UltraSound to load all samples!'", '0']), 56)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Not enough memory available to load all samples!'", '0']), 49)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Not enough memory.'", '0Dh', '0Ah', "'$'"]), 21)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Not enough Memory available'", '0Dh', '0Ah', '0']), 30)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Note Cut       '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Note Delay     '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'(NTSC)'", '0']), 7)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'OCTA'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'(PAL) '", '0']), 7)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Pattern Break  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Pattern Delay  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Pause'"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'PC Honker'", '0']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'PC Honker'", '0']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'PgDn'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'PgUp'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Player: '"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' Playing in Stereo, Free:'"]), 25)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'PlayPausLoop'"]), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Port + VolSlide'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Portamento Down'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Portamento Up  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Position Jump  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Press '"]), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Press any key to return to the fileselector'", '0']), 44)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'                 Press F-1 for help, QuickRead='"]), 47)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Pro Audio Spectrum 16'", '0']), 22)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Pro Audio Spectrum 16'", '0']), 22)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Eh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  ProTracker 1.0 compatibility on/off'"]), 37)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' ProTracker 1.0'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'PSM■'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Quit IPLAY'"]), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Realtime VU meters'"]), 20)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Retrig+Volume  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Retrigger Note '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Return to playmode [Only if the music is playing]'"]), 49)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'# SampleName   '"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Samples Used  :'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'!Scream!'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'SCRM'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'ScrollLock'"]), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'sdanes@marvels.hacktic.nl'"]), 25)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Send email to '"]), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set Amplify    '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set Filter     '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set FineTune   '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set Loop Point '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set Panning    '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set Sample Ofs '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set Speed      '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set Speed/BPM  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Set STM Speed  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Shell: 13/02/95 21:15:58'"]), 24)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Shelling to Operating System...'"]), 31)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'~   Size Vol Mode  C-2 Tune LoopPos LoopEnd'", '0']), 44)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'So you wanted some help?'"]), 24)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Some functions of the UltraSound do not work!'", '0Dh', '0Ah']), 47)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Sound Blaster'", '0']), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Sound Blaster 16/16ASP'", '0']), 23)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Sound Blaster 16/16ASP'", '0']), 23)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Sound Blaster Pro'", '0']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Sound Blaster Pro'", '0']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Sound Blaster'", '0']), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Speed'"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Stereo-On-1'", '0']), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Stereo-On-1'", '0']), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'subscribe inertia-list YourRealName'"]), 35)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'subscribe inertia-talk YourRealName'", '0']), 36)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Tab'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Tab'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'TDZ'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'the '"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'This help screen, but I guess you already found it...'"]), 53)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'This program requires the soundcards device driver.'", '0Dh', '0Ah', '0']), 54)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'To connect to Binary Inertia releases: '"]), 39)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'To connect to Discussion Mailing list: '"]), 39)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' to move the highlighted bar'"]), 28)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' to play the module or select the drive/directory'"]), 49)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' to return to '"]), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' to subscribe to one or both of'"]), 31)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Eh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' Toggle 24bit Interpolation'"]), 27)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  Toggle PAL/NTSC'", '0']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Toggle QuickReading of module name'"]), 34)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Tone Portamento'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Track Position:'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Tremolo        '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Tremolo Control'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Tremor         '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Triller        '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Type '"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'\x7f Unused'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Use '"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Vibr + VolSlide'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Vibrato        '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Vibrato Control'", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  View sample names (twice for more)'"]), 36)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Volume Amplify:'"]), 15)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Volume Change  '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Volume Sliding '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' which is written in '"]), 21)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Windows Sound System'", '0']), 21)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Windows Sound System'", '0']), 21)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'xPress F-4 for more'"]), 19)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'.Ext'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'.M.K'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'.MOD.NST.669.STM.S3M.MTM.PSM.WOW.INR.FAR.ULT.OKT.OCT'", '0', '0', '0', '0']), 56)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['100']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=[['offset', '_mysprintf_0_nop']]), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['152h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['8']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0Ah']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '9', '12h', '1Bh', '24h', '2Dh', '36h', '40h', '40h', '4Ah', '53h', '5Ch', '65h', '6Eh']), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['78h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['20h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['20h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['62h','dup','(',['0'],')']), 98)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0FFh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['14h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4Bh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['20h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['10h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['20h dup( ?)']), 32)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['21h dup( ?)']), 33)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['?']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['218Bh']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0FFh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['10524E49h']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['?']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Module not found'", '0Dh', '0Ah', '0']), 19)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['3F8h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'      ██████╔╗╚╝═║┌┐└┘─│╓╖╙╜─║╒╕╘╛═│'", '0']), 37)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['22050']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2Ch']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['3C6h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0FFh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['20202020h']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'    '"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Ah dup(0)']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Searching directory for modules  '", '0']), 34)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Dh', '0Ah', "'$'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['?']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['42h dup(0)']), 66)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'  C-C#D-D#E-F-F#G-G#A-A#B-'"]), 26)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['40h', '40h', '40h', '40h', '40h', '40h', '40h', '40h', '40h', '40h', '3Fh', '3Fh', '3Fh']), 13)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'IPLAY.CFG'", '0']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'─\\\\|/─\\\\|/'"]), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0FFFFh']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['3']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['offset _aGravisUltrasoun']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['140', '50', '25', '15', '10', '7', '6', '4', '3', '3', '2', '2', '2', '2', '1', '1']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0FFh', '80h', '40h', '2Ah', '20h', '19h', '15h', '12h', '10h', '0Eh', '0Ch', '0Bh', '0Ah']), 13)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['8363', '8422', '8482', '8543', '8604', '8667', '8730', '8794', '7901', '7954', '8007']), 22)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['8000h', '9000h', '0A000h', '0A952h', '0B000h', '0B521h', '0B952h', '0BCDEh']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['8000h', '9800h', '0A000h', '0A800h', '0B000h', '0B400h', '0B800h', '0BC00h']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['8000h', '9800h', '0A000h', '0A800h', '0B000h', '0B400h', '0B800h', '0BC00h']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1712', '1616', '1524', '1440', '1356', '1280', '1208', '1140', '1076', '1016', '960', '906', '856', '808', '762', '720', '678', '640', '604', '570', '538', '508', '480', '453']), 48)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '18h', '31h', '4Ah', '61h', '78h', '8Dh', '0A1h', '0B4h', '0C5h', '0D4h', '0E0h']), 12)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '15h', '20h', '29h', '30h', '37h', '3Dh', '44h', '49h', '4Fh', '54h', '59h', '5Eh']), 13)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '4', '8', '0Ch', '10h', '14h', '18h', '1Ch', '20h', '24h', '28h', '2Ch', '30h', '34h']), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '4', '8', '0Ch', '10h', '14h', '18h', '1Ch', '20h', '24h', '28h', '2Ch', '30h', '34h']), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0', '65536', '46340', '25079', '12785', '6423', '3215', '1608', '804', '402']), 40)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['-131072', '-65536', '-19196', '-4989', '-1260', '-316', '-79', '-20', '-5']), 36)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '0', '0']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['100h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['536h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['22Fh']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['22Eh']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1000h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1234h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['378h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['37Ah']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1234h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1234h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1000h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1234h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['3F2h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['49Eh']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['2020h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['2020h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['6B00h', '6500h', '5F40h', '5A00h', '54C0h', '5000h', '4B80h', '4740h', '4340h']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['6B00h', '6500h', '5F40h', '5A00h', '54C0h', '5000h', '4B80h', '4740h', '4340h']), 18)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['4']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['?']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['5513']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['1', '19D7h', '0Fh', '1F40h', '0', '2580h', '0Eh', '2B11h', '3', '3E80h', '2', '49D4h']), 24)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']), 34)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0ffh', '0dfh', '0h']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '18h', '0Bh', '0Dh', '0Ah']), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '0', '1', '3', '0', '2', '0', '4', '0', '0', '0', '5', '6', '0', '0', '7']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '1', '0', '2', '0', '3', '4', '5']), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'                              '"]), 30)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'               '", '0']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'                      '", '0']), 23)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'                                '"]), 32)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'                                '", '0Dh', '0Ah', '1Ah']), 35)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['2']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['3']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Ah']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['20h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['20h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2Ch']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['80h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['8Ah']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' '"]), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["' /?  This help screen'", '0Dh', '0Ah']), 23)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["','"]), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'- +'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["':'"]), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'ABC'", '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['\'Close this DOS session first with the "EXIT" command.\'', '0Dh', '0Ah']), 55)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'OKOKOKOK'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'OKOKOKOK'", '10', '13']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Try changing the AT-BUS Clock in the CMOS Setup.'", '0Dh', '0Ah', '0']), 51)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Usage: IPLAY [Switches] [FileName.Ext|@FileList.Ext]'", '0Dh', '0Ah']), 54)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'[ ]'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'[ ]'", '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'ed again.'", '0Dh', '0Ah']), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'h'"]), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'o:'"]), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'s'"]), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'s'", '0Dh', '0Ah', '0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'─asdkweorjwoerj3434'", '13', '10', '92']), 22)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0', '2Ah', '2Ah']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0A0h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0A0h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0A0h', '0A4h', '0A8h', '0ACh', '0B0h', '0B4h', '0B8h', '0BCh', '0C0h', '0C4h', '0C8h']), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0A1h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0A1h', '0A5h', '0AAh', '0AEh', '0B2h', '0B6h', '0BAh', '0BEh', '0C2h', '0C6h', '0CAh']), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0AAh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Ah']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Ah', "'$'"]), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Ah', '0Bh', '1Bh']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0B8h', '0BBh', '0BEh', '0C1h', '0C3h', '0C6h', '0C9h', '0CCh', '0CFh', '0D1h', '0D4h']), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0C5h', '0B4h', '0A1h', '8Dh', '78h', '61h', '4Ah', '31h', '18h']), 9)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Dh', '0Ah']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0Dh', '0Ah', "'$'"]), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1', '1', '1', '1', '1']), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1', '2', '3', '4']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['10h', '11h', '2Ah']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['12']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['141']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['7Fh']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['8', '8', '8', '7', '7', '7', '7', '6', '6', '6', '6', '6', '6', '5', '5', '5']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['80h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['9', '9', '8']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['-2', '-1', '-1', '-1', '-1', '0']), 24)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['201', '100', '50', '25', '12']), 20)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['111', '1']), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['unk_24453']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'ab''cd'", '"e"']), 7)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']), 32)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['5', '5622h', '7', '6B25h', '4', '7D00h', '6', '8133h', '0Dh', '93A8h', '9', '0AC44h']), 24)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0A06h']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0BE0h', '0B40h', '0AA0h', '0A00h', '970h', '8F0h', '870h', '7F0h', '780h', '710h']), 20)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0Bh', '0BB80h', '0Ch']), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['32Ah']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['5']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['6']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'file1.txt'", '0']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['12345']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['-1']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['offset label2']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['000', '000', '000', '000', '000', '021', '000', '000', '042', '000', '000', '063', '009', '000', '000', '009']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'NOT enought memory for VGA display, controls work for network games'", '13', '10', "'$'"]), 70)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'probleme dans allocation de descriptor..'", '13', '10', "'$'"]), 43)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'probleme dans dans definition de la taille du segment'", '13', '10', "'$'"]), 56)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'abcde'"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'abcde'"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'cdeab'"]), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['0']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']), 14)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['20h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['0']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['49h']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['?']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4 dup (5)']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['10 dup (?)']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1', '2', '3']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['5 dup (0)']), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['5*5 dup (0', 'testEqu*2', '2*2', '3)']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['131']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'abcd'"]), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['9', '8', '7', '1']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['5*5 dup (0', 'testEqu*2', '2*2', '3)']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['000', '009', '000', '000', '009', '021', '000', '009', '042', '000', '009', '063', '009', '009', '000', '009']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'00000000'", '0Dh', '0Ah', "'$'"]), 11)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'Hello World From Protected Mode!'", '10', '13', "'$'"]), 35)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'OKOKOKOK'", '10', '13']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'OKOKOKOK'"]), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'ab''cd'"]), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=["'file.txt'", '0']), 9)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['1']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['10 dup (?)']), 10)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['100 dup (1)']), 100)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['12']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['131']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['141']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2', '5', '6']), 3)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['2']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4 dup (5)']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['4']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['5 dup (0)']), 5)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['5*5 dup (0', 'testEqu*2', '2*2', '3)']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=1, data=['6']), 1)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['11']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['2', '5', '0']), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['2']), 2)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['223', '22']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=2, data=['4', '6', '9']), 6)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['0']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['10 dup (?)']), 40)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['11', '-11', '2', '4']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['11', '-11', '2', '4000000']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['111', '1']), 8)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['3']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['34']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['9', '8', '7', '1']), 16)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['offset var5']), 4)
        self.assertEqual(parser_instance.calculate_data_binary_size(width=4, data=['test2']), 4)
        #self.assertEqual(parser_instance.convert_data_to_blob(width=1,data=[u'2*2 dup (0,testEqu*2,2*2,3)']),[0, 0, 0, 0]))


    @patch.object(logging, 'debug')
    @patch.object(logging, 'warning')
    def test_convert_data_to_c(self, mock_warning, mock_debug):
        mock_warning.return_value = None
        mock_debug.return_value = None
        parser_instance = Parser([])

        #self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'offset var5'],label=''),(['', 'offset(_data,var5)', ', // dummy1\n'], ['dw dummy1', ';\n'], 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'11', u'-11', u'2', u'4'],label=u'var3'),(u'{11,4294967285,2,4}, // var3\n', u'dd var3[4];\n', 4))

        parser_instance = Parser([])
        #self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'offset var5'],label=''),(u'0, // dummy1\n', u'dw dummy1;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'34'],label=u'var3'),(u'34, // var3\n', u'dd var3;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=2,data=[u'2'],label=u'var2'),(u'2, // var2\n', u'dw var2;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=["'*'", '10', '11', '3 * 15 DUP(0)'],label=u'var3'),(u'"*\\n\\x0b", // var3\n', u'char var3[4];\n', 3))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u"'OKOKOKOK'", u'10', u'13'],label=''),(u"{'O','K','O','K','O','K','O','K','\\n','\\r'}, // dummy1\n", u'char dummy1[10];\n', 2))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'111', u'1'],label=''),(u'{111,1}, // dummy1\n', u'dd dummy1[2];\n', 2))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'3'],label=u'var3'),(u'3, // var3\n', u'dd var3;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[[u'100', 'dup', '(',['1'],')']],label=u'var4'),(u'{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}, // var4\n', u'db var4[100];\n', 100))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u"'00000000'", u'0Dh', u'0Ah', u"'$'"],label=u'ASCII'),(u"{'0','0','0','0','0','0','0','0','\\r','\\n','$'}, // ASCII\n", u'char ASCII[11];\n', 2))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'1'],label=u'var1'),(u'1, // var1\n', u'db var1;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u"'Hello World From Protected Mode!'", u'10', u'13', u"'$'"],label=u'_msg'),(u"{'H','e','l','l','o',' ','W','o','r','l','d',' ','F','r','o','m',' ','P','r','o','t','e','c','t','e','d',' ','M','o','d','e','!','\\n','\\r','$'}, // _msg\n", u'char _msg[35];\n', 2))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=2,data=[u'11'],label=u'var2'),(u'11, // var2\n', u'dw var2;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u"'OKOKOKOK'"],label=''),(u"{'O','K','O','K','O','K','O','K'}, // dummy1\n", u'char dummy1[8];\n', 0))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u"'file.txt'", u'0'],label=u'fileName'),(u'"file.txt", // fileName\n', u'char fileName[9];\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=2,data=[u'223', u'22'],label=''),(u'{223,22}, // dummy1\n', u'dw dummy1[2];\n', 2))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'test2'],label=u'var3'),(u'0, // var3\n', u'dd var3;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'12'],label=''),(u'12, // dummy1\n', u'db dummy1;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'2'],label=u'var1'),(u'2, // var1\n', u'db var1;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'6'],label=u'var1'),(u'6, // var1\n', u'db var1;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=2,data=[u'2', u'5', u'0'],label=u'var5'),(u'{2,5,0}, // var5\n', u'dw var5[3];\n', 3))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'4'],label=u'enddata'),(u'4, // enddata\n', u'db enddata;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'11', u'-11', u'2', u'4000000'],label=u'var3'),(u'{11,4294967285,2,4000000}, // var3\n', u'dd var3[4];\n', 4))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'4 dup (5)'],label=''),(u'{5,5,5,5}, // dummy1\n', u'db dummy1[4];\n', 4))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'5*5 dup (0', u'testEqu*2', u'2*2', u'3)'],label=u'var3'),(u'{0,0,4,0}, // var3\n', u'db var3[4];\n', 4))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=["'abcde\x00\x00'"],label=u'var5'),("{'a','b','c','d','e','\\0','\\0'}, // var5\n", 'char var5[7];\n', 0))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'9', u'8', u'7', u'1'],label=u'var6'),(u'{9,8,7,1}, // var6\n', u'dd var6[4];\n', 4))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'4 dup (5)'],label=u'var'),(u'{5,5,5,5}, // var\n', u'db var[4];\n', 4))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'131'],label=u'var4'),(u'131, // var4\n', u'db var4;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'5 dup (0)'],label=u'var2'),(u'{0,0,0,0,0}, // var2\n', u'db var2[5];\n', 5))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'4'],label=u'beginningdata'),(u'4, // beginningdata\n', u'db beginningdata;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'10 dup (?)'],label=u'var5'),(u'{0,0,0,0,0,0,0,0,0,0}, // var5\n', u'dd var5[10];\n', 10))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=4,data=[u'0'],label=u'load_handle'),(u'0, // load_handle\n', u'dd load_handle;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'141'],label=''),(u'141, // dummy1\n', u'db dummy1;\n', 1))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=["'.MOD.'", '0', '0', '0', '0'],label='_a_mod_nst_669_s'),('".MOD.\\0\\0\\0", // _a_mod_nst_669_s\n', u'char _a_mod_nst_669_s[9];\n', 4))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=2,data=[u'4', u'6', u'9'],label=u'var2'),(u'{4,6,9}, // var2\n', u'dw var2[3];\n', 3))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'2', u'5', u'6'],label=u'var1'),(u'{2,5,6}, // var1\n', u'db var1[3];\n', 3))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'10 dup (?)'],label=u'var0'),(u'{0,0,0,0,0,0,0,0,0,0}, // var0\n', u'db var0[10];\n', 10))

        parser_instance = Parser([])
        self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u"'ab''cd'"],label=u'doublequote'),(u"{'a','b','\\'','\\'','c','d'}, // doublequote\n", u'char doublequote[6];\n', 0))

        #parser_instance = Parser([])
        #self.assertEqual(parser_instance.convert_data_to_c(width=1,data=[u'2*2 dup (0,testEqu*2,2*2,3)']),[0, 0, 0, 0])
    '''

    @patch.object(logging, 'debug')
    @patch.object(logging, 'info')
    #@patch.object(parser, 'get_global')
    def test_convert_data(self, mock_info, mock_debug):
        #mock_get_global.return_value = var()
        mock_info.return_value = None
        mock_debug.return_value = None
        parser_instance = Parser([])

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=256, v=u'2*2')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=256, v=u'3)')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=256, v=u'5*5 dup (0')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=256, v=u'testEqu*2')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=4294967296, v=u'test2')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=65536, v=u'2*2')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=65536, v=u'3)')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=65536, v=u'5*5 dup (0')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=65536, v=u'test2')

        with self.assertRaises(KeyError):
            parser_instance.get_global_value(base=65536, v=u'testEqu*2')

        #self.assertEqual(parser_instance.convert_data(base=4294967296,v=u'var5'),u'offset(_data,var5)')

    @patch.object(logging, 'debug')
    def test_fix_dollar(self, mock_debug):
        mock_debug.return_value = None
        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='3'),'3')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='1'),'1')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='-13'),'-13')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='13'),'13')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='4'),'4')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='var1'),'var1')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='1'),'1')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='2'),'2')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='(00+38*3)*320+1/2+33*(3-1)'),'(00+38*3)*320+1/2+33*(3-1)')

        parser_instance = Parser([])
        self.assertEqual(parser_instance.fix_dollar(v='1500 ; 8*2*3 ;+1 +19*13*2*4'),'1500 ; 8*2*3 ;+1 +19*13*2*4')

    def test_parse_int(self):
        parser_instance = Parser([])

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u"'Z' - 'A' +1")
        
        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u"'a'")

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u"'c'")

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u"'d'")

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u"'tseT'")

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'3)')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'5*5 dup (0')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'B')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'CC')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'DDD')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'OFFSET ASCiI')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'OFFSET AsCii')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[doublequote+4]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[edi+1]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[edi]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[load_handle]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var+3]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var+4]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var-1]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var0+5]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var1+1]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var1]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var2+2]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var2-1]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var2]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var3+3*4]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var3+ebp]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var3]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'[var]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'_data')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'al')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'beginningdata')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'bl')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'buffer')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'bx')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'byte ptr [edi+1]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'byte ptr [edi+7]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'byte ptr dl')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'cl')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'cx')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'dl')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'ds')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'ds:[edi]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'dword ptr buffer')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'dx')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'eax')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'ebp')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'ebx')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'ecx')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'edi')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'edx')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'enddata')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'es')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'esi')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'fileName')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'offset _msg')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'offset var1')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'offset var2')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'offset var5')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'teST2')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'test2')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'testEqu*2')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var1')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var1[1]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var1[bx+si]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var1[bx]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var2')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var3')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var3+3*4')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'var3+ebp')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'word ptr [var5+2]')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'word ptr var5')

        with self.assertRaises(ValueError):
            parser_instance.parse_int(v=u'ah')

        self.assertEqual(parser_instance.parse_int(v=u'14*320'),4480)
        self.assertEqual(parser_instance.parse_int(v=u'2*2'),4)
        self.assertEqual(parser_instance.parse_int(v=u'3*4'),12)
        self.assertEqual(parser_instance.parse_int(v=u'-1-(-2+3)'),-2)
        self.assertEqual(parser_instance.parse_int(v=u'-1'),-1)
        self.assertEqual(parser_instance.parse_int(v=u'-11'),-11)
        self.assertEqual(parser_instance.parse_int(v=u'-2'),-2)
        self.assertEqual(parser_instance.parse_int(v=u'0'),0)
        self.assertEqual(parser_instance.parse_int(v=u'00h'),0)
        self.assertEqual(parser_instance.parse_int(v=u'03dh'),61)
        self.assertEqual(parser_instance.parse_int(v=u'03eh'),62)
        self.assertEqual(parser_instance.parse_int(v=u'03fh'),63)
        self.assertEqual(parser_instance.parse_int(v=u'042h'),66)
        self.assertEqual(parser_instance.parse_int(v=u'0Ah'),10)
        self.assertEqual(parser_instance.parse_int(v=u'0Dh'),13)
        self.assertEqual(parser_instance.parse_int(v=u'0Fh'),15)
        self.assertEqual(parser_instance.parse_int(v=u'0ffffff00h'),4294967040)
        self.assertEqual(parser_instance.parse_int(v=u'1'),1)
        self.assertEqual(parser_instance.parse_int(v=u'10'),10)
        self.assertEqual(parser_instance.parse_int(v=u'100'),100)
        self.assertEqual(parser_instance.parse_int(v=u'1000h'),4096)
        self.assertEqual(parser_instance.parse_int(v=u'11'),11)
        self.assertEqual(parser_instance.parse_int(v=u'111'),111)
        self.assertEqual(parser_instance.parse_int(v=u'12'),12)
        self.assertEqual(parser_instance.parse_int(v=u'13'),13)
        self.assertEqual(parser_instance.parse_int(v=u'131'),131)
        self.assertEqual(parser_instance.parse_int(v=u'16'),16)
        self.assertEqual(parser_instance.parse_int(v=u'2'),2)
        self.assertEqual(parser_instance.parse_int(v=u'21h'),33)
        self.assertEqual(parser_instance.parse_int(v=u'22'),22)
        self.assertEqual(parser_instance.parse_int(v=u'223'),223)
        self.assertEqual(parser_instance.parse_int(v=u'25'),25)
        self.assertEqual(parser_instance.parse_int(v=u'3'),3)
        self.assertEqual(parser_instance.parse_int(v=u'30h'),48)
        self.assertEqual(parser_instance.parse_int(v=u'34'),34)
        self.assertEqual(parser_instance.parse_int(v=u'35'),35)
        self.assertEqual(parser_instance.parse_int(v=u'37'),37)
        self.assertEqual(parser_instance.parse_int(v=u'39h'),57)
        self.assertEqual(parser_instance.parse_int(v=u'4'),4)
        self.assertEqual(parser_instance.parse_int(v=u'4000000'),4000000)
        self.assertEqual(parser_instance.parse_int(v=u'4ch'),76)
        self.assertEqual(parser_instance.parse_int(v=u'5'),5)
        self.assertEqual(parser_instance.parse_int(v=u'50'),50)
        self.assertEqual(parser_instance.parse_int(v=u'6'),6)
        self.assertEqual(parser_instance.parse_int(v=u'64000'),64000)
        self.assertEqual(parser_instance.parse_int(v=u'7'),7)
        self.assertEqual(parser_instance.parse_int(v=u'0h'),0)
        self.assertEqual(parser_instance.parse_int(v=u'0b'),0)

    def test_calculate_data_size(self):
        parser_instance = Parser([])
        self.assertEqual(parser_instance.calculate_type_size(type='db'), 1)
        self.assertEqual(parser_instance.calculate_type_size(type='dd'), 4)
        self.assertEqual(parser_instance.calculate_type_size(type='dq'), 8)
        self.assertEqual(parser_instance.calculate_type_size(type='dw'), 2)
        self.assertEqual(parser_instance.calculate_type_size(type='dt'), 10)

    @patch.object(logging, 'debug')
    def test_action_data(self, mock_debug):
        mock_debug.return_value = None
        parser_instance = Parser([])

        self.assertEqual(parser_instance.action_data(line="ASCII DB '00000000',0Dh,0Ah,'$' ; buffer for ASCII string"), ("{'0','0','0','0','0','0','0','0','\\r','\\n','$'}, // ascii\n", 'char ascii[11];\n', 11))
        self.assertEqual(parser_instance.action_data(line="_a070295122642\tdb '07/02/95 12:26:42',0 ; DATA XREF: seg003:off_2462E\x19o"), ('"07/02/95 12:26:42", // _a070295122642\n', 'char _a070295122642[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_a100Assembler\tdb '100% assembler!'"), ("{'1','0','0','%',' ','a','s','s','e','m','b','l','e','r','!'}, // _a100assembler\n", 'char _a100assembler[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_a1024\t\tdb '1024',0"), ('"1024", // _a1024\n', 'char _a1024[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="_a130295211558\tdb '13/02/95 21:15:58',0 ; DATA XREF: _read_module+BE\x18w"), ('"13/02/95 21:15:58", // _a130295211558\n', 'char _a130295211558[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_a1Thru0		db '1 Thru 0'"), ("{'1',' ','T','h','r','u',' ','0'}, // _a1thru0\n", 'char _a1thru0[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="_a2284116_8	db '2:284/116.8'"), ("{'2',':','2','8','4','/','1','1','6','.','8'}, // _a2284116_8\n", 'char _a2284116_8[11];\n', 11))
        self.assertEqual(parser_instance.action_data(line="_a24bitInterpolation db ' 24bit Interpolation'"), ("{' ','2','4','b','i','t',' ','I','n','t','e','r','p','o','l','a','t','i','o','n'}, // _a24bitinterpolation\n", 'char _a24bitinterpolation[20];\n', 20))
        self.assertEqual(parser_instance.action_data(line="_a256		db '256',0              ; DATA XREF: _text_init2+1CEo"), ('"256", // _a256\n', 'char _a256[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_a512		db '512',0"), ('"512", // _a512\n', 'char _a512[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_a768		db '768',0"), ('"768", // _a768\n', 'char _a768[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aAdlibSoundcard	db 'Adlib SoundCard',0  ; DATA XREF: dseg:02BAo"), ('"Adlib SoundCard", // _aadlibsoundcard\n', 'char _aadlibsoundcard[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aAdlibSoundcard_0 db 'Adlib SoundCard',0 ; DATA XREF: seg003:0D6Ao"), ('"Adlib SoundCard", // _aadlibsoundcard_0\n', 'char _aadlibsoundcard_0[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aAnd		db ' and '"), ("{' ','a','n','d',' '}, // _aand\n", 'char _aand[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="_aAndWriteFollowingTe db	' and write following text in your message:'"), ("{' ','a','n','d',' ','w','r','i','t','e',' ','f','o','l','l','o','w','i','n','g',' ','t','e','x','t',' ','i','n',' ','y','o','u','r',' ','m','e','s','s','a','g','e',':'}, // _aandwritefollowingte\n", 'char _aandwritefollowingte[42];\n', 42))
        self.assertEqual(parser_instance.action_data(line="_aArpeggio	db 'Arpeggio       ',0  ; DATA XREF: seg001:loc_1AB0Do"), ('"Arpeggio       ", // _aarpeggio\n', 'char _aarpeggio[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aAt		db ' at',0              ; DATA XREF: seg003:10BFo seg003:1152o ..."), ('" at", // _aat\n', 'char _aat[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aAutoToneporta	db 'Auto TonePorta ',0"), ('"Auto TonePorta ", // _aautotoneporta\n', 'char _aautotoneporta[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aBackspace	db 'BackSpace'"), ("{'B','a','c','k','S','p','a','c','e'}, // _abackspace\n", 'char _abackspace[9];\n', 9))
        self.assertEqual(parser_instance.action_data(line="_aBasePort	db ' base port ',0      ; DATA XREF: seg003:10C3o seg003:1156o ..."), ('" base port ", // _abaseport\n', 'char _abaseport[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aBmod2stm	db 'BMOD2STM'"), ("{'B','M','O','D','2','S','T','M'}, // _abmod2stm\n", 'char _abmod2stm[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="_aCd81		db 'CD81'"), ("{'C','D','8','1'}, // _acd81\n", 'char _acd81[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aCh		db 'CH'"), ("{'C','H'}, // _ach\n", 'char _ach[2];\n', 2))
        self.assertEqual(parser_instance.action_data(line="_aChannels	db 'Channels      :'"), ("{'C','h','a','n','n','e','l','s',' ',' ',' ',' ',' ',' ',':'}, // _achannels\n", 'char _achannels[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aChn		db 'CHN'"), ("{'C','H','N'}, // _achn\n", 'char _achn[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aConfigFileNotF	db 'Config file not found. Run ISETUP first',0Dh,0Ah,'$'"), ("{'C','o','n','f','i','g',' ','f','i','l','e',' ','n','o','t',' ','f','o','u','n','d','.',' ','R','u','n',' ','I','S','E','T','U','P',' ','f','i','r','s','t','\\r','\\n','$'}, // _aconfigfilenotf\n", 'char _aconfigfilenotf[42];\n', 42))
        self.assertEqual(parser_instance.action_data(line="_aCopyrightC1994	db 'Copyright (c) 1994,1995 by Stefan Danes and Ramon van Gorkom',0"), ('"Copyright (c) 1994,1995 by Stefan Danes and Ramon van Gorkom", // _acopyrightc1994\n', 'char _acopyrightc1994[61];\n', 61))
        self.assertEqual(parser_instance.action_data(line="_aCouldNotFindT_0 db 'Could not find the Gravis UltraSound at the specified port addres'"), ("{'C','o','u','l','d',' ','n','o','t',' ','f','i','n','d',' ','t','h','e',' ','G','r','a','v','i','s',' ','U','l','t','r','a','S','o','u','n','d',' ','a','t',' ','t','h','e',' ','s','p','e','c','i','f','i','e','d',' ','p','o','r','t',' ','a','d','d','r','e','s'}, // _acouldnotfindt_0\n", 'char _acouldnotfindt_0[65];\n', 65))
        self.assertEqual(parser_instance.action_data(line="_aCouldNotFindThe db 'Could not find the ULTRASND environment string',0Dh,0Ah,0"), ('"Could not find the ULTRASND environment string\\r\\n", // _acouldnotfindthe\n', 'char _acouldnotfindthe[49];\n', 49))
        self.assertEqual(parser_instance.action_data(line="_aCovox		db 'Covox',0            ; DATA XREF: dseg:02B6o"), ('"Covox", // _acovox\n', 'char _acovox[6];\n', 6))
        self.assertEqual(parser_instance.action_data(line="_aCovox_0	db 'Covox',0            ; DATA XREF: seg003:0D66o"), ('"Covox", // _acovox_0\n', 'char _acovox_0[6];\n', 6))
        self.assertEqual(parser_instance.action_data(line="_aCriticalErrorT	db 0Dh,0Ah		; DATA XREF: _start+31o"), ('{13,10}, // _acriticalerrort\n', 'db _acriticalerrort[2];\n', 2))
        self.assertEqual(parser_instance.action_data(line="_aCtrlDel	db 'Ctrl Del'"), ("{'C','t','r','l',' ','D','e','l'}, // _actrldel\n", 'char _actrldel[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="_aCurrentSoundcard db 0Dh,'Current Soundcard settings:',0Dh,0Ah ; DATA XREF: _start:loc_19057o"), ("{'\\r','C','u','r','r','e','n','t',' ','S','o','u','n','d','c','a','r','d',' ','s','e','t','t','i','n','g','s',':','\\r','\\n'}, // _acurrentsoundcard\n", 'char _acurrentsoundcard[30];\n', 30))
        self.assertEqual(parser_instance.action_data(line="_aCurrentTrack	db 'Current Track :'"), ("{'C','u','r','r','e','n','t',' ','T','r','a','c','k',' ',':'}, // _acurrenttrack\n", 'char _acurrenttrack[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aCursor		db 7Fh"), ('127, // _acursor\n', 'db _acursor;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aCursor_0	db 'Cursor ',1Bh,' '"), ("{'C','u','r','s','o','r',' ',27,' '}, // _acursor_0\n", 'char _acursor_0[9];\n', 9))
        self.assertEqual(parser_instance.action_data(line="_aCursor_1	db 'Cursor '"), ("{'C','u','r','s','o','r',' '}, // _acursor_1\n", 'char _acursor_1[7];\n', 7))
        self.assertEqual(parser_instance.action_data(line="_aDecIncAmplify	db 7Eh"), ('126, // _adecincamplify\n', 'db _adecincamplify;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aDecIncAmplify_0 db '  Dec/Inc amplify'"), ("{' ',' ','D','e','c','/','I','n','c',' ','a','m','p','l','i','f','y'}, // _adecincamplify_0\n", 'char _adecincamplify_0[17];\n', 17))
        self.assertEqual(parser_instance.action_data(line="_aDecIncVolume	db 7Eh"), ('126, // _adecincvolume\n', 'db _adecincvolume;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aDecIncVolume_0	db '  Dec/Inc volume'"), ("{' ',' ','D','e','c','/','I','n','c',' ','v','o','l','u','m','e'}, // _adecincvolume_0\n", 'char _adecincvolume_0[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aDel		db 'Del'"), ("{'D','e','l'}, // _adel\n", 'char _adel[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aDeleteAllFilesWhich db	'Delete all files which are marked to delete'"), ("{'D','e','l','e','t','e',' ','a','l','l',' ','f','i','l','e','s',' ','w','h','i','c','h',' ','a','r','e',' ','m','a','r','k','e','d',' ','t','o',' ','d','e','l','e','t','e'}, // _adeleteallfileswhich\n", 'char _adeleteallfileswhich[43];\n', 43))
        self.assertEqual(parser_instance.action_data(line="_aDeleteMarkedFil db 'Delete marked files? [Y/N]',0 ; DATA XREF: _start+635o"), ('"Delete marked files? [Y/N]", // _adeletemarkedfil\n', 'char _adeletemarkedfil[27];\n', 27))
        self.assertEqual(parser_instance.action_data(line="_aDeletingFile	db 'Deleting file: '    ; DATA XREF: _start+69Fo"), ("{'D','e','l','e','t','i','n','g',' ','f','i','l','e',':',' '}, // _adeletingfile\n", 'char _adeletingfile[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aDeviceNotIniti	db 'Device not initialised!',0 ; DATA XREF: sub_12D05+8o"), ('"Device not initialised!", // _adevicenotiniti\n', 'char _adevicenotiniti[24];\n', 24))
        self.assertEqual(parser_instance.action_data(line="_aDisableBpmOnOf	db 7Eh"), ('126, // _adisablebpmonof\n', 'db _adisablebpmonof;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aDisableBpmOnOff db ' Disable BPM on/off'"), ("{' ','D','i','s','a','b','l','e',' ','B','P','M',' ','o','n','/','o','f','f'}, // _adisablebpmonoff\n", 'char _adisablebpmonoff[19];\n', 19))
        self.assertEqual(parser_instance.action_data(line="_aDma		db ', DMA '"), ("{',',' ','D','M','A',' '}, // _adma\n", 'char _adma[6];\n', 6))
        self.assertEqual(parser_instance.action_data(line="_aDosShellTypeEx	db 7Eh"), ('126, // _adosshelltypeex\n', 'db _adosshelltypeex;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aDosShellTypeExitT_0 db	'DOS Shell (Type EXIT to return)'"), ("{'D','O','S',' ','S','h','e','l','l',' ','(','T','y','p','e',' ','E','X','I','T',' ','t','o',' ','r','e','t','u','r','n',')'}, // _adosshelltypeexitt_0\n", 'char _adosshelltypeexitt_0[31];\n', 31))
        self.assertEqual(parser_instance.action_data(line="_aDosShellTypeExitToR db	'  DOS Shell (Type EXIT to return)'"), ("{' ',' ','D','O','S',' ','S','h','e','l','l',' ','(','T','y','p','e',' ','E','X','I','T',' ','t','o',' ','r','e','t','u','r','n',')'}, // _adosshelltypeexittor\n", 'char _adosshelltypeexittor[33];\n', 33))
        self.assertEqual(parser_instance.action_data(line="_aDramDma	db ', DRAM-DMA '"), ("{',',' ','D','R','A','M','-','D','M','A',' '}, // _adramdma\n", 'char _adramdma[11];\n', 11))
        self.assertEqual(parser_instance.action_data(line="_aE_command	db 'E_Command      ',0"), ('"E_Command      ", // _ae_command\n', 'char _ae_command[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aE_g_		db 'E.G.'"), ("{'E','.','G','.'}, // _ae_g_\n", 'char _ae_g_[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aEnd		db 'End'"), ("{'E','n','d'}, // _aend\n", 'char _aend[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aEndPattern	db '  End pattern'"), ("{' ',' ','E','n','d',' ','p','a','t','t','e','r','n'}, // _aendpattern\n", 'char _aendpattern[13];\n', 13))
        self.assertEqual(parser_instance.action_data(line="_aEnd_0		db 'End'"), ("{'E','n','d'}, // _aend_0\n", 'char _aend_0[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aEnter		db 'Enter'"), ("{'E','n','t','e','r'}, // _aenter\n", 'char _aenter[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="_aErrorCouldNotFi db 'Error: Could not find IRQ/DMA!',0Dh,0Ah,0"), ('"Error: Could not find IRQ/DMA!\\r\\n", // _aerrorcouldnotfi\n', 'char _aerrorcouldnotfi[33];\n', 33))
        self.assertEqual(parser_instance.action_data(line="_aErrorCouldNot_0 db 'Error: Could not find IRQ!',0Dh,0Ah,0 ; DATA XREF: _sb_detect_irq+4Co"), ('"Error: Could not find IRQ!\\r\\n", // _aerrorcouldnot_0\n', 'char _aerrorcouldnot_0[29];\n', 29))
        self.assertEqual(parser_instance.action_data(line="_aErrorCouldNot_1 db 'Error: Could not find DMA!',0Dh,0Ah,0 ; DATA XREF: _sb_detect_irq+D6o"), ('"Error: Could not find DMA!\\r\\n", // _aerrorcouldnot_1\n', 'char _aerrorcouldnot_1[29];\n', 29))
        self.assertEqual(parser_instance.action_data(line="_aErrorSoundcardN db 'Error: Soundcard not found!',0Dh,0Ah,'$',0"), ('"Error: Soundcard not found!\\r\\n$", // _aerrorsoundcardn\n', 'char _aerrorsoundcardn[31];\n', 31))
        self.assertEqual(parser_instance.action_data(line="_aEsc		db 'ESC'"), ("{'E','S','C'}, // _aesc\n", 'char _aesc[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aExit		db 'EXIT'"), ("{'E','X','I','T'}, // _aexit\n", 'char _aexit[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aF1		db 'F-1'"), ("{'F','-','1'}, // _af1\n", 'char _af1[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF10		db 7Fh"), ('127, // _af10\n', 'db _af10;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aF10_0		db 'F-10'"), ("{'F','-','1','0'}, // _af10_0\n", 'char _af10_0[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aF10_1		db 'F-10'"), ("{'F','-','1','0'}, // _af10_1\n", 'char _af10_1[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aF11		db 7Fh"), ('127, // _af11\n', 'db _af11;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aF11_0		db 'F-11'"), ("{'F','-','1','1'}, // _af11_0\n", 'char _af11_0[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aF11_1		db 'F-11'"), ("{'F','-','1','1'}, // _af11_1\n", 'char _af11_1[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aF12		db 7Fh"), ('127, // _af12\n', 'db _af12;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aF12_0		db 'F-12'"), ("{'F','-','1','2'}, // _af12_0\n", 'char _af12_0[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aF12_1		db 'F-12'"), ("{'F','-','1','2'}, // _af12_1\n", 'char _af12_1[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aF2_0		db 'F-2'"), ("{'F','-','2'}, // _af2_0\n", 'char _af2_0[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF3_0		db 'F-3'"), ("{'F','-','3'}, // _af3_0\n", 'char _af3_0[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF4_0		db 'F-4'"), ("{'F','-','4'}, // _af4_0\n", 'char _af4_0[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF5_0		db 'F-5'"), ("{'F','-','5'}, // _af5_0\n", 'char _af5_0[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF8_0		db 'F-8'"), ("{'F','-','8'}, // _af8_0\n", 'char _af8_0[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF8_1		db 'F-8'"), ("{'F','-','8'}, // _af8_1\n", 'char _af8_1[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF9		db ' [F-9]              ',0"), ('" [F-9]              ", // _af9\n', 'char _af9[21];\n', 21))
        self.assertEqual(parser_instance.action_data(line="_aF9_0		db ' [F-9]',0"), ('" [F-9]", // _af9_0\n', 'char _af9_0[7];\n', 7))
        self.assertEqual(parser_instance.action_data(line="_aF9_1		db 7Fh"), ('127, // _af9_1\n', 'db _af9_1;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aF9_2		db 'F-9'"), ("{'F','-','9'}, // _af9_2\n", 'char _af9_2[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF9_3		db 'F-9'"), ("{'F','-','9'}, // _af9_3\n", 'char _af9_3[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aF9_4		db 'F-9'"), ("{'F','-','9'}, // _af9_4\n", 'char _af9_4[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aFar		db 'FAR■'"), ("{'F','A','R','\\xfe'}, // _afar\n", 'char _afar[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aFarFineTempo	db 'FAR Fine Tempo ',0"), ('"FAR Fine Tempo ", // _afarfinetempo\n', 'char _afarfinetempo[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFarTempo	db 'FAR Tempo      ',0"), ('"FAR Tempo      ", // _afartempo\n', 'char _afartempo[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFastErForward	db '  Fast(er) forward'"), ("{' ',' ','F','a','s','t','(','e','r',')',' ','f','o','r','w','a','r','d'}, // _afasterforward\n", 'char _afasterforward[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_aFastErRewind	db '  Fast(er) rewind'"), ("{' ',' ','F','a','s','t','(','e','r',')',' ','r','e','w','i','n','d'}, // _afasterrewind\n", 'char _afasterrewind[17];\n', 17))
        self.assertEqual(parser_instance.action_data(line="_aFastfourierFrequenc db	'  FastFourier Frequency Analysis'"), ("{' ',' ','F','a','s','t','F','o','u','r','i','e','r',' ','F','r','e','q','u','e','n','c','y',' ','A','n','a','l','y','s','i','s'}, // _afastfourierfrequenc\n", 'char _afastfourierfrequenc[32];\n', 32))
        self.assertEqual(parser_instance.action_data(line="_aFidonet	db 'FidoNet  : '"), ("{'F','i','d','o','N','e','t',' ',' ',':',' '}, // _afidonet\n", 'char _afidonet[11];\n', 11))
        self.assertEqual(parser_instance.action_data(line="_aFile		db 'File'               ; DATA XREF: _start+689w _start+6A8o"), ("{'F','i','l','e'}, // _afile\n", 'char _afile[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aFileSelectorHelp db 'File Selector Help'"), ("{'F','i','l','e',' ','S','e','l','e','c','t','o','r',' ','H','e','l','p'}, // _afileselectorhelp\n", 'char _afileselectorhelp[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_aFilename_0	db 'Filename      : '"), ("{'F','i','l','e','n','a','m','e',' ',' ',' ',' ',' ',' ',':',' '}, // _afilename_0\n", 'char _afilename_0[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFilename_ext	db 'FileName.Ext'       ; DATA XREF: _read_module:loc_19E41o"), ("{'F','i','l','e','N','a','m','e','.','E','x','t'}, // _afilename_ext\n", 'char _afilename_ext[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aFinePanning	db 'Fine Panning   ',0"), ('"Fine Panning   ", // _afinepanning\n', 'char _afinepanning[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFinePortVolsl	db 'Fine Port+VolSl',0"), ('"Fine Port+VolSl", // _afineportvolsl\n', 'char _afineportvolsl[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFinePortaDown	db 'Fine Porta Down',0"), ('"Fine Porta Down", // _afineportadown\n', 'char _afineportadown[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFinePortaUp	db 'Fine Porta Up  ',0"), ('"Fine Porta Up  ", // _afineportaup\n', 'char _afineportaup[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFineTonePorta	db 'Fine Tone Porta',0"), ('"Fine Tone Porta", // _afinetoneporta\n', 'char _afinetoneporta[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFineVibrVolsl	db 'Fine Vibr+VolSl',0"), ('"Fine Vibr+VolSl", // _afinevibrvolsl\n', 'char _afinevibrvolsl[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFineVibrato	db 'Fine Vibrato   ',0"), ('"Fine Vibrato   ", // _afinevibrato\n', 'char _afinevibrato[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFineVolSlide	db 'Fine Vol Slide ',0"), ('"Fine Vol Slide ", // _afinevolslide\n', 'char _afinevolslide[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFineslideDown	db 'FineSlide Down ',0"), ('"FineSlide Down ", // _afineslidedown\n', 'char _afineslidedown[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFineslideUp	db 'FineSlide Up   ',0"), ('"FineSlide Up   ", // _afineslideup\n', 'char _afineslideup[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFinevolumeDown	db 'FineVolume Down',0"), ('"FineVolume Down", // _afinevolumedown\n', 'char _afinevolumedown[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFinevolumeUp	db 'FineVolume Up  ',0"), ('"FineVolume Up  ", // _afinevolumeup\n', 'char _afinevolumeup[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aFlt4		db 'FLT4'"), ("{'F','L','T','4'}, // _aflt4\n", 'char _aflt4[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aFlt8		db 'FLT8'"), ("{'F','L','T','8'}, // _aflt8\n", 'char _aflt8[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aGeneralMidi	db 'General MIDI',0     ; DATA XREF: dseg:02BEo"), ('"General MIDI", // _ageneralmidi\n', 'char _ageneralmidi[13];\n', 13))
        self.assertEqual(parser_instance.action_data(line="_aGeneralMidi_0	db 'General MIDI',0     ; DATA XREF: seg003:0D6Eo"), ('"General MIDI", // _ageneralmidi_0\n', 'char _ageneralmidi_0[13];\n', 13))
        self.assertEqual(parser_instance.action_data(line="_aGlissandoCtrl	db 'Glissando Ctrl ',0"), ('"Glissando Ctrl ", // _aglissandoctrl\n', 'char _aglissandoctrl[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aGraphicalScopesOneF db	'  Graphical scopes, one for each channel'"), ("{' ',' ','G','r','a','p','h','i','c','a','l',' ','s','c','o','p','e','s',',',' ','o','n','e',' ','f','o','r',' ','e','a','c','h',' ','c','h','a','n','n','e','l'}, // _agraphicalscopesonef\n", 'char _agraphicalscopesonef[40];\n', 40))
        self.assertEqual(parser_instance.action_data(line="_aGravisMaxCodec	db 'Gravis MAX Codec',0"), ('"Gravis MAX Codec", // _agravismaxcodec\n', 'char _agravismaxcodec[17];\n', 17))
        self.assertEqual(parser_instance.action_data(line="_aGravisUltrasou	db 'Gravis UltraSound',0 ; DATA XREF: dseg:_table_sndcrdnameo"), ('"Gravis UltraSound", // _agravisultrasou\n', 'char _agravisultrasou[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_aGravisUltrasoun db 'Gravis UltraSound',0 ; DATA XREF: seg003:_snd_cards_offso"), ('"Gravis UltraSound", // _agravisultrasoun\n', 'char _agravisultrasoun[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_aGray		db 7Fh"), ('127, // _agray\n', 'db _agray;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aGray_0		db 'Gray - +'"), ("{'G','r','a','y',' ','-',' ','+'}, // _agray_0\n", 'char _agray_0[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="_aGsft		db 'GSFT'"), ("{'G','S','F','T'}, // _agsft\n", 'char _agsft[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aGuess___	db '  Guess...'"), ("{' ',' ','G','u','e','s','s','.','.','.'}, // _aguess___\n", 'char _aguess___[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_aHGf1Irq	db 'h, GF1-IRQ '"), ("{'h',',',' ','G','F','1','-','I','R','Q',' '}, // _ahgf1irq\n", 'char _ahgf1irq[11];\n', 11))
        self.assertEqual(parser_instance.action_data(line="_aHIrq		db 'h, IRQ '"), ("{'h',',',' ','I','R','Q',' '}, // _ahirq\n", 'char _ahirq[7];\n', 7))
        self.assertEqual(parser_instance.action_data(line="_aHitBackspaceToRe db 'Hit backspace to return to playmode, F-1 for help, QuickRead='"), ("{'H','i','t',' ','b','a','c','k','s','p','a','c','e',' ','t','o',' ','r','e','t','u','r','n',' ','t','o',' ','p','l','a','y','m','o','d','e',',',' ','F','-','1',' ','f','o','r',' ','h','e','l','p',',',' ','Q','u','i','c','k','R','e','a','d','='}, // _ahitbackspacetore\n", 'char _ahitbackspacetore[61];\n', 61))
        self.assertEqual(parser_instance.action_data(line="_aHome		db 'Home'"), ("{'H','o','m','e'}, // _ahome\n", 'char _ahome[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aHopeYouLikedUsingTh db	'Hope you liked using the '"), ("{'H','o','p','e',' ','y','o','u',' ','l','i','k','e','d',' ','u','s','i','n','g',' ','t','h','e',' '}, // _ahopeyoulikedusingth\n", 'char _ahopeyoulikedusingth[25];\n', 25))
        self.assertEqual(parser_instance.action_data(line="_aIf		db 'if'"), ("{'i','f'}, // _aif\n", 'char _aif[2];\n', 2))
        self.assertEqual(parser_instance.action_data(line="_aIfYouHaveBugReports db	'If you have bug-reports, suggestions or comments send a message t'"), ("{'I','f',' ','y','o','u',' ','h','a','v','e',' ','b','u','g','-','r','e','p','o','r','t','s',',',' ','s','u','g','g','e','s','t','i','o','n','s',' ','o','r',' ','c','o','m','m','e','n','t','s',' ','s','e','n','d',' ','a',' ','m','e','s','s','a','g','e',' ','t'}, // _aifyouhavebugreports\n", 'char _aifyouhavebugreports[65];\n', 65))
        self.assertEqual(parser_instance.action_data(line="_aIgnoreBpmChanges db ' Ignore BPM changes'"), ("{' ','I','g','n','o','r','e',' ','B','P','M',' ','c','h','a','n','g','e','s'}, // _aignorebpmchanges\n", 'char _aignorebpmchanges[19];\n', 19))
        self.assertEqual(parser_instance.action_data(line="_aInertiaMailinglists db	'Inertia Mailinglists'"), ("{'I','n','e','r','t','i','a',' ','M','a','i','l','i','n','g','l','i','s','t','s'}, // _ainertiamailinglists\n", 'char _ainertiamailinglists[20];\n', 20))
        self.assertEqual(parser_instance.action_data(line="_aInertiaModule	db 'Inertia Module: ',0 ; DATA XREF: _useless_writeinr+29o"), ('"Inertia Module: ", // _ainertiamodule\n', 'char _ainertiamodule[17];\n', 17))
        self.assertEqual(parser_instance.action_data(line="_aInertiaModule_0 db 'Inertia Module: ',0 ; DATA XREF: _useless_writeinr+23o"), ('"Inertia Module: ", // _ainertiamodule_0\n', 'char _ainertiamodule_0[17];\n', 17))
        self.assertEqual(parser_instance.action_data(line="_aInertiaModule_1 db 'Inertia Module: '"), ("{'I','n','e','r','t','i','a',' ','M','o','d','u','l','e',':',' '}, // _ainertiamodule_1\n", 'char _ainertiamodule_1[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aInertiaPlayer	db 'Inertia Player'"), ("{'I','n','e','r','t','i','a',' ','P','l','a','y','e','r'}, // _ainertiaplayer\n", 'char _ainertiaplayer[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_aInertiaPlayerV1_ db 'Inertia Player V1.22 written by Stefan Danes and Ramon van Gorkom'"), ("{'I','n','e','r','t','i','a',' ','P','l','a','y','e','r',' ','V','1','.','2','2',' ','w','r','i','t','t','e','n',' ','b','y',' ','S','t','e','f','a','n',' ','D','a','n','e','s',' ','a','n','d',' ','R','a','m','o','n',' ','v','a','n',' ','G','o','r','k','o','m'}, // _ainertiaplayerv1_\n", 'char _ainertiaplayerv1_[65];\n', 65))
        self.assertEqual(parser_instance.action_data(line="_aInertiaPlayerV1_22A db	'Inertia Player V1.22 Assembly ',27h,'94 CD Edition by Sound Solution'"), ("{'I','n','e','r','t','i','a',' ','P','l','a','y','e','r',' ','V','1','.','2','2',' ','A','s','s','e','m','b','l','y',' ',39,'9','4',' ','C','D',' ','E','d','i','t','i','o','n',' ','b','y',' ','S','o','u','n','d',' ','S','o','l','u','t','i','o','n'}, // _ainertiaplayerv1_22a\n", 'char _ainertiaplayerv1_22a[62];\n', 62))
        self.assertEqual(parser_instance.action_data(line="_aInertiaPlayer_0 db 'Inertia Player',0"), ('"Inertia Player", // _ainertiaplayer_0\n', 'char _ainertiaplayer_0[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aInertiaSample	db 'Inertia Sample: '   ; DATA XREF: _useless_writeinr_118+11o"), ("{'I','n','e','r','t','i','a',' ','S','a','m','p','l','e',':',' '}, // _ainertiasample\n", 'char _ainertiasample[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aInternet	db 'Internet : '"), ("{'I','n','t','e','r','n','e','t',' ',':',' '}, // _ainternet\n", 'char _ainternet[11];\n', 11))
        self.assertEqual(parser_instance.action_data(line="_aInvertLoop	db 'Invert Loop    ',0"), ('"Invert Loop    ", // _ainvertloop\n', 'char _ainvertloop[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aJanfebmaraprmayj db '   JanFebMarAprMayJunJulAugSepOctNovDec'"), ("{' ',' ',' ','J','a','n','F','e','b','M','a','r','A','p','r','M','a','y','J','u','n','J','u','l','A','u','g','S','e','p','O','c','t','N','o','v','D','e','c'}, // _ajanfebmaraprmayj\n", 'char _ajanfebmaraprmayj[39];\n', 39))
        self.assertEqual(parser_instance.action_data(line="_aJn		db 'JN'"), ("{'J','N'}, // _ajn\n", 'char _ajn[2];\n', 2))
        self.assertEqual(parser_instance.action_data(line="_aJumpToLoop	db 'Jump To Loop   ',0"), ('"Jump To Loop   ", // _ajumptoloop\n', 'char _ajumptoloop[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aKb		db 'KB',0               ; DATA XREF: _text_init2+1D7o"), ('"KB", // _akb\n', 'char _akb[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aKhz		db 'kHz',0              ; DATA XREF: seg003:117Bo seg003:11ADo ..."), ('"kHz", // _akhz\n', 'char _akhz[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aListFileNotFou	db 'List file not found.',0Dh,0Ah,'$' ; DATA XREF: _start+D07o"), ("{'L','i','s','t',' ','f','i','l','e',' ','n','o','t',' ','f','o','u','n','d','.','\\r','\\n','$'}, // _alistfilenotfou\n", 'char _alistfilenotfou[23];\n', 23))
        self.assertEqual(parser_instance.action_data(line="_aListserver@oliver_s db	'listserver@oliver.sun.ac.za'"), ("{'l','i','s','t','s','e','r','v','e','r','@','o','l','i','v','e','r','.','s','u','n','.','a','c','.','z','a'}, // _alistserverarboliver_s\n", 'char _alistserverarboliver_s[27];\n', 27))
        self.assertEqual(parser_instance.action_data(line="_aLoadingModule	db 'Loading module',0   ; DATA XREF: _start+41Ao"), ('"Loading module", // _aloadingmodule\n', 'char _aloadingmodule[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aLoopModule	db 7Eh"), ('126, // _aloopmodule\n', 'db _aloopmodule;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aLoopModuleWhenDone db ' Loop Module when done'"), ("{' ','L','o','o','p',' ','M','o','d','u','l','e',' ','w','h','e','n',' ','d','o','n','e'}, // _aloopmodulewhendone\n", 'char _aloopmodulewhendone[22];\n', 22))
        self.assertEqual(parser_instance.action_data(line="_aLoopModule_0	db ' Loop module'"), ("{' ','L','o','o','p',' ','m','o','d','u','l','e'}, // _aloopmodule_0\n", 'char _aloopmodule_0[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aLoopPattern	db '  Loop pattern'"), ("{' ',' ','L','o','o','p',' ','p','a','t','t','e','r','n'}, // _alooppattern\n", 'char _alooppattern[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_aMK		db 'M&K!'"), ("{'M','&','K','!'}, // _amk\n", 'char _amk[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aMK_0		db 'M!K!'"), ("{'M','!','K','!'}, // _amk_0\n", 'char _amk_0[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aM_k_		db 'M.K.'"), ("{'M','.','K','.'}, // _am_k_\n", 'char _am_k_[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aMainVolume	db 'Main Volume   :'"), ("{'M','a','i','n',' ','V','o','l','u','m','e',' ',' ',' ',':'}, // _amainvolume\n", 'char _amainvolume[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aMarkFileToDelete db 'Mark file to delete'"), ("{'M','a','r','k',' ','f','i','l','e',' ','t','o',' ','d','e','l','e','t','e'}, // _amarkfiletodelete\n", 'char _amarkfiletodelete[19];\n', 19))
        self.assertEqual(parser_instance.action_data(line="_aMarkedToDelete	db '<Marked to Delete>    ',0 ; DATA XREF: _filelist_198B8+10Do"), ('"<Marked to Delete>    ", // _amarkedtodelete\n', 'char _amarkedtodelete[23];\n', 23))
        self.assertEqual(parser_instance.action_data(line="_aMas_utrack_v	db 'MAS_UTrack_V'"), ("{'M','A','S','_','U','T','r','a','c','k','_','V'}, // _amas_utrack_v\n", 'char _amas_utrack_v[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aMixedAt	db ', mixed at ',0      ; DATA XREF: seg003:1173o seg003:11A5o ..."), ('", mixed at ", // _amixedat\n', 'char _amixedat[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aModuleIsCorrupt db 'Module is corrupt!',0 ; DATA XREF: _start+439o"), ('"Module is corrupt!", // _amoduleiscorrupt\n', 'char _amoduleiscorrupt[19];\n', 19))
        self.assertEqual(parser_instance.action_data(line="_aModuleLoadErro	db 'Module load error.',0Dh,0Ah,'$' ; DATA XREF: _readallmoules+1Bo"), ("{'M','o','d','u','l','e',' ','l','o','a','d',' ','e','r','r','o','r','.','\\r','\\n','$'}, // _amoduleloaderro\n", 'char _amoduleloaderro[21];\n', 21))
        self.assertEqual(parser_instance.action_data(line="_aModuleNotFound	db 'Module not found.',0Dh,0Ah,'$' ; DATA XREF: _find_mods+88o"), ("{'M','o','d','u','l','e',' ','n','o','t',' ','f','o','u','n','d','.','\\r','\\n','$'}, // _amodulenotfound\n", 'char _amodulenotfound[20];\n', 20))
        self.assertEqual(parser_instance.action_data(line="_aModuleType_0	db 'Module Type   : '"), ("{'M','o','d','u','l','e',' ','T','y','p','e',' ',' ',' ',':',' '}, // _amoduletype_0\n", 'char _amoduletype_0[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aMtm		db 'MTM'"), ("{'M','T','M'}, // _amtm\n", 'char _amtm[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aMute		db '<Mute>                ',0 ; DATA XREF: seg001:1949o"), ('"<Mute>                ", // _amute\n', 'char _amute[23];\n', 23))
        self.assertEqual(parser_instance.action_data(line="_aMuteChannel	db '  Mute channel'"), ("{' ',' ','M','u','t','e',' ','c','h','a','n','n','e','l'}, // _amutechannel\n", 'char _amutechannel[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_aName		db 'name'               ; DATA XREF: _start+692w"), ("{'n','a','m','e'}, // _aname\n", 'char _aname[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aNotEnoughDramOn db 'Not enough DRAM on UltraSound',0Dh,0Ah,0"), ('"Not enough DRAM on UltraSound\\r\\n", // _anotenoughdramon\n', 'char _anotenoughdramon[32];\n', 32))
        self.assertEqual(parser_instance.action_data(line="_aNotEnoughDram_0 db 'Not enough DRAM on your UltraSound to load all samples!',0"), ('"Not enough DRAM on your UltraSound to load all samples!", // _anotenoughdram_0\n', 'char _anotenoughdram_0[56];\n', 56))
        self.assertEqual(parser_instance.action_data(line="_aNotEnoughMemo_0 db 'Not enough memory available to load all samples!',0"), ('"Not enough memory available to load all samples!", // _anotenoughmemo_0\n', 'char _anotenoughmemo_0[49];\n', 49))
        self.assertEqual(parser_instance.action_data(line="_aNotEnoughMemor	db 'Not enough memory.',0Dh,0Ah,'$' ; DATA XREF: _start+23Do"), ("{'N','o','t',' ','e','n','o','u','g','h',' ','m','e','m','o','r','y','.','\\r','\\n','$'}, // _anotenoughmemor\n", 'char _anotenoughmemor[21];\n', 21))
        self.assertEqual(parser_instance.action_data(line="_aNotEnoughMemory db 'Not enough Memory available',0Dh,0Ah,0"), ('"Not enough Memory available\\r\\n", // _anotenoughmemory\n', 'char _anotenoughmemory[30];\n', 30))
        self.assertEqual(parser_instance.action_data(line="_aNoteCut	db 'Note Cut       ',0"), ('"Note Cut       ", // _anotecut\n', 'char _anotecut[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aNoteDelay	db 'Note Delay     ',0"), ('"Note Delay     ", // _anotedelay\n', 'char _anotedelay[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aNtsc		db '(NTSC)',0           ; DATA XREF: _txt_draw_bottom+53o"), ('"(NTSC)", // _antsc\n', 'char _antsc[7];\n', 7))
        self.assertEqual(parser_instance.action_data(line="_aOcta		db 'OCTA'"), ("{'O','C','T','A'}, // _aocta\n", 'char _aocta[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aPal		db '(PAL) ',0           ; DATA XREF: _txt_draw_bottom+49o"), ('"(PAL) ", // _apal\n', 'char _apal[7];\n', 7))
        self.assertEqual(parser_instance.action_data(line="_aPatternBreak	db 'Pattern Break  ',0"), ('"Pattern Break  ", // _apatternbreak\n', 'char _apatternbreak[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aPatternDelay	db 'Pattern Delay  ',0"), ('"Pattern Delay  ", // _apatterndelay\n', 'char _apatterndelay[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aPause		db 'Pause'"), ("{'P','a','u','s','e'}, // _apause\n", 'char _apause[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="_aPcHonker	db 'PC Honker',0        ; DATA XREF: dseg:02BCo"), ('"PC Honker", // _apchonker\n', 'char _apchonker[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_aPcHonker_0	db 'PC Honker',0        ; DATA XREF: seg003:0D6Co"), ('"PC Honker", // _apchonker_0\n', 'char _apchonker_0[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_aPgdn		db 'PgDn'"), ("{'P','g','D','n'}, // _apgdn\n", 'char _apgdn[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aPgup		db 'PgUp'"), ("{'P','g','U','p'}, // _apgup\n", 'char _apgup[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aPlayer13029521	db 'Player: '"), ("{'P','l','a','y','e','r',':',' '}, // _aplayer13029521\n", 'char _aplayer13029521[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="_aPlayingInStereoFree db	' Playing in Stereo, Free:'"), ("{' ','P','l','a','y','i','n','g',' ','i','n',' ','S','t','e','r','e','o',',',' ','F','r','e','e',':'}, // _aplayinginstereofree\n", 'char _aplayinginstereofree[25];\n', 25))
        self.assertEqual(parser_instance.action_data(line="_aPlaypausloop	db 'PlayPausLoop'       ; DATA XREF: _txt_draw_bottom+164o"), ("{'P','l','a','y','P','a','u','s','L','o','o','p'}, // _aplaypausloop\n", 'char _aplaypausloop[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aPortVolslide	db 'Port + VolSlide',0"), ('"Port + VolSlide", // _aportvolslide\n', 'char _aportvolslide[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aPortamentoDown	db 'Portamento Down',0"), ('"Portamento Down", // _aportamentodown\n', 'char _aportamentodown[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aPortamentoUp	db 'Portamento Up  ',0"), ('"Portamento Up  ", // _aportamentoup\n', 'char _aportamentoup[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aPositionJump	db 'Position Jump  ',0"), ('"Position Jump  ", // _apositionjump\n', 'char _apositionjump[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aPress		db 'Press '"), ("{'P','r','e','s','s',' '}, // _apress\n", 'char _apress[6];\n', 6))
        self.assertEqual(parser_instance.action_data(line="_aPressAnyKeyToReturn db	'Press any key to return to the fileselector',0"), ('"Press any key to return to the fileselector", // _apressanykeytoreturn\n', 'char _apressanykeytoreturn[44];\n', 44))
        self.assertEqual(parser_instance.action_data(line="_aPressF1ForHelpQu db '                 Press F-1 for help, QuickRead='"), ("{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','r','e','s','s',' ','F','-','1',' ','f','o','r',' ','h','e','l','p',',',' ','Q','u','i','c','k','R','e','a','d','='}, // _apressf1forhelpqu\n", 'char _apressf1forhelpqu[47];\n', 47))
        self.assertEqual(parser_instance.action_data(line="_aProAudioSpectr	db 'Pro Audio Spectrum 16',0 ; DATA XREF: dseg:02ACo"), ('"Pro Audio Spectrum 16", // _aproaudiospectr\n', 'char _aproaudiospectr[22];\n', 22))
        self.assertEqual(parser_instance.action_data(line="_aProAudioSpectrum db 'Pro Audio Spectrum 16',0 ; DATA XREF: seg003:0D5Co"), ('"Pro Audio Spectrum 16", // _aproaudiospectrum\n', 'char _aproaudiospectrum[22];\n', 22))
        self.assertEqual(parser_instance.action_data(line="_aProtracker1_0C	db 7Eh"), ('126, // _aprotracker1_0c\n', 'db _aprotracker1_0c;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aProtracker1_0Compat db	'  ProTracker 1.0 compatibility on/off'"), ("{' ',' ','P','r','o','T','r','a','c','k','e','r',' ','1','.','0',' ','c','o','m','p','a','t','i','b','i','l','i','t','y',' ','o','n','/','o','f','f'}, // _aprotracker1_0compat\n", 'char _aprotracker1_0compat[37];\n', 37))
        self.assertEqual(parser_instance.action_data(line="_aProtracker1_0_0 db ' ProTracker 1.0'"), ("{' ','P','r','o','T','r','a','c','k','e','r',' ','1','.','0'}, // _aprotracker1_0_0\n", 'char _aprotracker1_0_0[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aPsm		db 'PSM■'"), ("{'P','S','M','\\xfe'}, // _apsm\n", 'char _apsm[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aQuitIplay	db 'Quit IPLAY'"), ("{'Q','u','i','t',' ','I','P','L','A','Y'}, // _aquitiplay\n", 'char _aquitiplay[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_aRealtimeVuMeters db '  Realtime VU meters'"), ("{' ',' ','R','e','a','l','t','i','m','e',' ','V','U',' ','m','e','t','e','r','s'}, // _arealtimevumeters\n", 'char _arealtimevumeters[20];\n', 20))
        self.assertEqual(parser_instance.action_data(line="_aRetrigVolume	db 'Retrig+Volume  ',0"), ('"Retrig+Volume  ", // _aretrigvolume\n', 'char _aretrigvolume[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aRetriggerNote	db 'Retrigger Note ',0"), ('"Retrigger Note ", // _aretriggernote\n', 'char _aretriggernote[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aReturnToPlaymodeOnl db	'Return to playmode [Only if the music is playing]'"), ("{'R','e','t','u','r','n',' ','t','o',' ','p','l','a','y','m','o','d','e',' ','[','O','n','l','y',' ','i','f',' ','t','h','e',' ','m','u','s','i','c',' ','i','s',' ','p','l','a','y','i','n','g',']'}, // _areturntoplaymodeonl\n", 'char _areturntoplaymodeonl[49];\n', 49))
        self.assertEqual(parser_instance.action_data(line="_aSamplename	db '# SampleName   '    ; DATA XREF: seg001:1B7Co"), ("{'#',' ','S','a','m','p','l','e','N','a','m','e',' ',' ',' '}, // _asamplename\n", 'char _asamplename[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aSamplesUsed	db 'Samples Used  :'"), ("{'S','a','m','p','l','e','s',' ','U','s','e','d',' ',' ',':'}, // _asamplesused\n", 'char _asamplesused[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aScream		db '!Scream!'"), ("{'!','S','c','r','e','a','m','!'}, // _ascream\n", 'char _ascream[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="_aScrm		db 'SCRM'"), ("{'S','C','R','M'}, // _ascrm\n", 'char _ascrm[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aScrolllock	db 'ScrollLock'"), ("{'S','c','r','o','l','l','L','o','c','k'}, // _ascrolllock\n", 'char _ascrolllock[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_aSdanes@marvels_hack db	'sdanes@marvels.hacktic.nl'"), ("{'s','d','a','n','e','s','@','m','a','r','v','e','l','s','.','h','a','c','k','t','i','c','.','n','l'}, // _asdanesarbmarvels_hack\n", 'char _asdanesarbmarvels_hack[25];\n', 25))
        self.assertEqual(parser_instance.action_data(line="_aSendEmailTo	db 'Send email to '"), ("{'S','e','n','d',' ','e','m','a','i','l',' ','t','o',' '}, // _asendemailto\n", 'char _asendemailto[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_aSetAmplify	db 'Set Amplify    ',0"), ('"Set Amplify    ", // _asetamplify\n', 'char _asetamplify[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetFilter	db 'Set Filter     ',0  ; DATA XREF: seg001:1A9Ao"), ('"Set Filter     ", // _asetfilter\n', 'char _asetfilter[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetFinetune	db 'Set FineTune   ',0"), ('"Set FineTune   ", // _asetfinetune\n', 'char _asetfinetune[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetLoopPoint	db 'Set Loop Point ',0  ; DATA XREF: seg001:1A8Fo"), ('"Set Loop Point ", // _asetlooppoint\n', 'char _asetlooppoint[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetPanning	db 'Set Panning    ',0"), ('"Set Panning    ", // _asetpanning\n', 'char _asetpanning[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetSampleOfs	db 'Set Sample Ofs ',0"), ('"Set Sample Ofs ", // _asetsampleofs\n', 'char _asetsampleofs[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetSpeed	db 'Set Speed      ',0"), ('"Set Speed      ", // _asetspeed\n', 'char _asetspeed[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetSpeedBpm	db 'Set Speed/BPM  ',0"), ('"Set Speed/BPM  ", // _asetspeedbpm\n', 'char _asetspeedbpm[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aSetStmSpeed	db 'Set STM Speed  ',0"), ('"Set STM Speed  ", // _asetstmspeed\n', 'char _asetstmspeed[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aShell130295211	db 'Shell: 13/02/95 21:15:58'"), ("{'S','h','e','l','l',':',' ','1','3','/','0','2','/','9','5',' ','2','1',':','1','5',':','5','8'}, // _ashell130295211\n", 'char _ashell130295211[24];\n', 24))
        self.assertEqual(parser_instance.action_data(line="_aShellingToOperating db	'Shelling to Operating System...'"), ("{'S','h','e','l','l','i','n','g',' ','t','o',' ','O','p','e','r','a','t','i','n','g',' ','S','y','s','t','e','m','.','.','.'}, // _ashellingtooperating\n", 'char _ashellingtooperating[31];\n', 31))
        self.assertEqual(parser_instance.action_data(line="_aSizeVolModeC2T	db '~   Size Vol Mode  C-2 Tune LoopPos LoopEnd',0"), ('"~   Size Vol Mode  C-2 Tune LoopPos LoopEnd", // _asizevolmodec2t\n', 'char _asizevolmodec2t[44];\n', 44))
        self.assertEqual(parser_instance.action_data(line="_aSoYouWantedSomeHelp db	'So you wanted some help?'"), ("{'S','o',' ','y','o','u',' ','w','a','n','t','e','d',' ','s','o','m','e',' ','h','e','l','p','?'}, // _asoyouwantedsomehelp\n", 'char _asoyouwantedsomehelp[24];\n', 24))
        self.assertEqual(parser_instance.action_data(line="_aSomeFunctionsOf db 'Some functions of the UltraSound do not work!',0Dh,0Ah"), ("{'S','o','m','e',' ','f','u','n','c','t','i','o','n','s',' ','o','f',' ','t','h','e',' ','U','l','t','r','a','S','o','u','n','d',' ','d','o',' ','n','o','t',' ','w','o','r','k','!','\\r','\\n'}, // _asomefunctionsof\n", 'char _asomefunctionsof[47];\n', 47))
        self.assertEqual(parser_instance.action_data(line="_aSoundBlaster	db 'Sound Blaster',0    ; DATA XREF: dseg:02B4o"), ('"Sound Blaster", // _asoundblaster\n', 'char _asoundblaster[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_aSoundBlaster16	db 'Sound Blaster 16/16ASP',0 ; DATA XREF: dseg:02B0o"), ('"Sound Blaster 16/16ASP", // _asoundblaster16\n', 'char _asoundblaster16[23];\n', 23))
        self.assertEqual(parser_instance.action_data(line="_aSoundBlaster1616 db 'Sound Blaster 16/16ASP',0 ; DATA XREF: seg003:0D60o"), ('"Sound Blaster 16/16ASP", // _asoundblaster1616\n', 'char _asoundblaster1616[23];\n', 23))
        self.assertEqual(parser_instance.action_data(line="_aSoundBlasterPr	db 'Sound Blaster Pro',0 ; DATA XREF: dseg:02B2o"), ('"Sound Blaster Pro", // _asoundblasterpr\n', 'char _asoundblasterpr[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_aSoundBlasterPro db 'Sound Blaster Pro',0 ; DATA XREF: seg003:0D62o"), ('"Sound Blaster Pro", // _asoundblasterpro\n', 'char _asoundblasterpro[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_aSoundBlaster_0	db 'Sound Blaster',0    ; DATA XREF: seg003:0D64o"), ('"Sound Blaster", // _asoundblaster_0\n', 'char _asoundblaster_0[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_aSpeed		db 'Speed'"), ("{'S','p','e','e','d'}, // _aspeed\n", 'char _aspeed[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="_aStereoOn1	db 'Stereo-On-1',0      ; DATA XREF: dseg:02B8o"), ('"Stereo-On-1", // _astereoon1\n', 'char _astereoon1[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aStereoOn1_0	db 'Stereo-On-1',0      ; DATA XREF: seg003:0D68o"), ('"Stereo-On-1", // _astereoon1_0\n', 'char _astereoon1_0[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_aSubscribeInertiaLis db	'subscribe inertia-list YourRealName'"), ("{'s','u','b','s','c','r','i','b','e',' ','i','n','e','r','t','i','a','-','l','i','s','t',' ','Y','o','u','r','R','e','a','l','N','a','m','e'}, // _asubscribeinertialis\n", 'char _asubscribeinertialis[35];\n', 35))
        self.assertEqual(parser_instance.action_data(line="_aSubscribeInertiaTal db	'subscribe inertia-talk YourRealName',0"), ('"subscribe inertia-talk YourRealName", // _asubscribeinertiatal\n', 'char _asubscribeinertiatal[36];\n', 36))
        self.assertEqual(parser_instance.action_data(line="_aTab		db 'Tab'"), ("{'T','a','b'}, // _atab\n", 'char _atab[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aTab_0		db 'Tab'"), ("{'T','a','b'}, // _atab_0\n", 'char _atab_0[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aTdz		db 'TDZ'"), ("{'T','D','Z'}, // _atdz\n", 'char _atdz[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_aThe		db 'the '"), ("{'t','h','e',' '}, // _athe\n", 'char _athe[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aThisHelpScreenButIG db	'This help screen, but I guess you already found it...'"), ("{'T','h','i','s',' ','h','e','l','p',' ','s','c','r','e','e','n',',',' ','b','u','t',' ','I',' ','g','u','e','s','s',' ','y','o','u',' ','a','l','r','e','a','d','y',' ','f','o','u','n','d',' ','i','t','.','.','.'}, // _athishelpscreenbutig\n", 'char _athishelpscreenbutig[53];\n', 53))
        self.assertEqual(parser_instance.action_data(line="_aThisProgramRequ db 'This program requires the soundcards device driver.',0Dh,0Ah,0"), ('"This program requires the soundcards device driver.\\r\\n", // _athisprogramrequ\n', 'char _athisprogramrequ[54];\n', 54))
        self.assertEqual(parser_instance.action_data(line="_aToConnectToBinaryIn db	'To connect to Binary Inertia releases: '"), ("{'T','o',' ','c','o','n','n','e','c','t',' ','t','o',' ','B','i','n','a','r','y',' ','I','n','e','r','t','i','a',' ','r','e','l','e','a','s','e','s',':',' '}, // _atoconnecttobinaryin\n", 'char _atoconnecttobinaryin[39];\n', 39))
        self.assertEqual(parser_instance.action_data(line="_aToConnectToDiscussi db	'To connect to Discussion Mailing list: '"), ("{'T','o',' ','c','o','n','n','e','c','t',' ','t','o',' ','D','i','s','c','u','s','s','i','o','n',' ','M','a','i','l','i','n','g',' ','l','i','s','t',':',' '}, // _atoconnecttodiscussi\n", 'char _atoconnecttodiscussi[39];\n', 39))
        self.assertEqual(parser_instance.action_data(line="_aToMoveTheHighlighte db	' to move the highlighted bar'"), ("{' ','t','o',' ','m','o','v','e',' ','t','h','e',' ','h','i','g','h','l','i','g','h','t','e','d',' ','b','a','r'}, // _atomovethehighlighte\n", 'char _atomovethehighlighte[28];\n', 28))
        self.assertEqual(parser_instance.action_data(line="_aToPlayTheModuleOrSe db	' to play the module or select the drive/directory'"), ("{' ','t','o',' ','p','l','a','y',' ','t','h','e',' ','m','o','d','u','l','e',' ','o','r',' ','s','e','l','e','c','t',' ','t','h','e',' ','d','r','i','v','e','/','d','i','r','e','c','t','o','r','y'}, // _atoplaythemoduleorse\n", 'char _atoplaythemoduleorse[49];\n', 49))
        self.assertEqual(parser_instance.action_data(line="_aToReturnTo	db ' to return to '"), ("{' ','t','o',' ','r','e','t','u','r','n',' ','t','o',' '}, // _atoreturnto\n", 'char _atoreturnto[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_aToSubscribeToOneOrB db	' to subscribe to one or both of'"), ("{' ','t','o',' ','s','u','b','s','c','r','i','b','e',' ','t','o',' ','o','n','e',' ','o','r',' ','b','o','t','h',' ','o','f'}, // _atosubscribetooneorb\n", 'char _atosubscribetooneorb[31];\n', 31))
        self.assertEqual(parser_instance.action_data(line="_aToggle24bitInt	db 7Eh"), ('126, // _atoggle24bitint\n', 'db _atoggle24bitint;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_aToggle24bitInterpol db	' Toggle 24bit Interpolation'"), ("{' ','T','o','g','g','l','e',' ','2','4','b','i','t',' ','I','n','t','e','r','p','o','l','a','t','i','o','n'}, // _atoggle24bitinterpol\n", 'char _atoggle24bitinterpol[27];\n', 27))
        self.assertEqual(parser_instance.action_data(line="_aTogglePalNtsc	db '  Toggle PAL/NTSC',0"), ('"  Toggle PAL/NTSC", // _atogglepalntsc\n', 'char _atogglepalntsc[18];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_aToggleQuickreadingO db	'Toggle QuickReading of module name'"), ("{'T','o','g','g','l','e',' ','Q','u','i','c','k','R','e','a','d','i','n','g',' ','o','f',' ','m','o','d','u','l','e',' ','n','a','m','e'}, // _atogglequickreadingo\n", 'char _atogglequickreadingo[34];\n', 34))
        self.assertEqual(parser_instance.action_data(line="_aTonePortamento	db 'Tone Portamento',0"), ('"Tone Portamento", // _atoneportamento\n', 'char _atoneportamento[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aTrackPosition	db 'Track Position:'"), ("{'T','r','a','c','k',' ','P','o','s','i','t','i','o','n',':'}, // _atrackposition\n", 'char _atrackposition[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aTremolo	db 'Tremolo        ',0"), ('"Tremolo        ", // _atremolo\n', 'char _atremolo[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aTremoloControl	db 'Tremolo Control',0"), ('"Tremolo Control", // _atremolocontrol\n', 'char _atremolocontrol[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aTremor		db 'Tremor         ',0"), ('"Tremor         ", // _atremor\n', 'char _atremor[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aTriller	db 'Triller        ',0"), ('"Triller        ", // _atriller\n', 'char _atriller[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aType		db 'Type '"), ("{'T','y','p','e',' '}, // _atype\n", 'char _atype[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="_aUnused256	db ' Unused'"), ("{'\x7f',' ','U','n','u','s','e','d'}, // _aunused256\n", 'char _aunused256[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="_aUse		db 'Use '"), ("{'U','s','e',' '}, // _ause\n", 'char _ause[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_aVibrVolslide	db 'Vibr + VolSlide',0"), ('"Vibr + VolSlide", // _avibrvolslide\n', 'char _avibrvolslide[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aVibrato	db 'Vibrato        ',0"), ('"Vibrato        ", // _avibrato\n', 'char _avibrato[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aVibratoControl	db 'Vibrato Control',0"), ('"Vibrato Control", // _avibratocontrol\n', 'char _avibratocontrol[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aViewSampleNamesTwic db	'  View sample names (twice for more)'"), ("{' ',' ','V','i','e','w',' ','s','a','m','p','l','e',' ','n','a','m','e','s',' ','(','t','w','i','c','e',' ','f','o','r',' ','m','o','r','e',')'}, // _aviewsamplenamestwic\n", 'char _aviewsamplenamestwic[36];\n', 36))
        self.assertEqual(parser_instance.action_data(line="_aVolumeAmplify	db 'Volume Amplify:'"), ("{'V','o','l','u','m','e',' ','A','m','p','l','i','f','y',':'}, // _avolumeamplify\n", 'char _avolumeamplify[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_aVolumeChange	db 'Volume Change  ',0"), ('"Volume Change  ", // _avolumechange\n', 'char _avolumechange[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aVolumeSliding	db 'Volume Sliding ',0"), ('"Volume Sliding ", // _avolumesliding\n', 'char _avolumesliding[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_aWhichIsWrittenIn db ' which is written in '"), ("{' ','w','h','i','c','h',' ','i','s',' ','w','r','i','t','t','e','n',' ','i','n',' '}, // _awhichiswrittenin\n", 'char _awhichiswrittenin[21];\n', 21))
        self.assertEqual(parser_instance.action_data(line="_aWindowsSoundSy	db 'Windows Sound System',0 ; DATA XREF: dseg:02AEo"), ('"Windows Sound System", // _awindowssoundsy\n', 'char _awindowssoundsy[21];\n', 21))
        self.assertEqual(parser_instance.action_data(line="_aWindowsSoundSyst db 'Windows Sound System',0 ; DATA XREF: seg003:0D5Eo"), ('"Windows Sound System", // _awindowssoundsyst\n', 'char _awindowssoundsyst[21];\n', 21))
        self.assertEqual(parser_instance.action_data(line="_aXpressF4ForMor	db 'xPress F-4 for more'"), ("{'x','P','r','e','s','s',' ','F','-','4',' ','f','o','r',' ','m','o','r','e'}, // _axpressf4formor\n", 'char _axpressf4formor[19];\n', 19))
        self.assertEqual(parser_instance.action_data(line="_a_ext		db '.Ext'               ; DATA XREF: _start+69Bw"), ("{'.','E','x','t'}, // _a_ext\n", 'char _a_ext[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_a_m_k		db '.M.K'"), ("{'.','M','.','K'}, // _a_m_k\n", 'char _a_m_k[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_a_mod_nst_669_s	db '.MOD.NST.669.STM.S3M.MTM.PSM.WOW.INR.FAR.ULT.OKT.OCT',0,0,0,0"), ('".MOD.NST.669.STM.S3M.MTM.PSM.WOW.INR.FAR.ULT.OKT.OCT\\0\\0\\0", // _a_mod_nst_669_s\n', 'char _a_mod_nst_669_s[56];\n', 56))
        self.assertEqual(parser_instance.action_data(line="_amount_of_x	dw 0			; DATA XREF: _read_module+75w"), ('0, // _amount_of_x\n', 'dw _amount_of_x;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_amplification	dw 100			; DATA XREF: _clean_11C43+83w"), ('100, // _amplification\n', 'dw _amplification;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_asmprintf_tbl	dw offset _mysprintf_0_nop ; DATA XREF: _myasmsprintf+1Cr"), ('0, // _asmprintf_tbl\n', 'dw _asmprintf_tbl;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_atop_title	dw 152h			; DATA XREF: _txt_draw_top_title+12o"), ('338, // _atop_title\n', 'dw _atop_title;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_base_port2	dw 0			; DATA XREF: _wss_init:loc_147C3w"), ('0, // _base_port2\n', 'dw _base_port2;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_bit_mode	db 8			; DATA XREF: sub_12DA8+55w"), ('8, // _bit_mode\n', 'db _bit_mode;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_bottom_menu	dw 0Ah			; DATA XREF: _text_init2+21Fo"), ('10, // _bottom_menu\n', 'dw _bottom_menu;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_buffer_1DBEC	db 0			; DATA XREF: _find_mods+32o"), ('0, // _buffer_1dbec\n', 'db _buffer_1dbec;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_buffer_1DC6C	dd 0			; DATA XREF: _start+2C5w _start+2D3o ..."), ('0, // _buffer_1dc6c\n', 'dd _buffer_1dc6c;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_buffer_1seg	dw 0			; DATA XREF: _text_init2+18Bw"), ('0, // _buffer_1seg\n', 'dw _buffer_1seg;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_buffer_2seg	dw 0			; DATA XREF: seg001:loc_1A913w"), ('0, // _buffer_2seg\n', 'dw _buffer_2seg;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_byte_11C29	db 0			; DATA XREF: sub_11C0C:loc_11C14r"), ('0, // _byte_11c29\n', 'db _byte_11c29;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_13C54	db 0,9,12h,1Bh,24h,2Dh,36h,40h,40h,4Ah,53h,5Ch,65h,6Eh"), ('{0,9,18,27,36,45,54,64,64,74,83,92,101,110}, // _byte_13c54\n', 'db _byte_13c54[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_byte_14F70	db 0			; DATA XREF: _configure_timer+12w"), ('0, // _byte_14f70\n', 'db _byte_14f70;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_14F71	db 0			; DATA XREF: sub_12D35:loc_12D41w"), ('0, // _byte_14f71\n', 'db _byte_14f71;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_14F72	db 0			; DATA XREF: sub_13CF6+Dw _text:4F51r"), ('0, // _byte_14f72\n', 'db _byte_14f72;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_14F73	db 0			; DATA XREF: sub_13CF6+11w"), ('0, // _byte_14f73\n', 'db _byte_14f73;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1C1B8	db 0			; DATA XREF: _int9_keybr _dosexec+58w ..."), ('0, // _byte_1c1b8\n', 'db _byte_1c1b8;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1CCEB	db 78h			; DATA XREF: _text_init2:loc_1A6C2w"), ('120, // _byte_1cceb\n', 'db _byte_1cceb;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1D616	db 20h			; DATA XREF: _useless_197F2+Dw"), ('32, // _byte_1d616\n', 'db _byte_1d616;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1D66B	db 20h			; DATA XREF: _useless_197F2+18w"), ('32, // _byte_1d66b\n', 'db _byte_1d66b;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1DC0A	db 62h dup(0)		; DATA XREF: _find_mods+6Fo"), ('{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // _byte_1dc0a\n', 'db _byte_1dc0a[98];\n', 98))
        self.assertEqual(parser_instance.action_data(line="_byte_1DCF7	db 0FFh			; DATA XREF: _callsubx+1Cr _callsubx+55w"), ('255, // _byte_1dcf7\n', 'db _byte_1dcf7;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1DCF8	db 14h			; DATA XREF: _start+DAr	_callsubx+20r ..."), ('20, // _byte_1dcf8\n', 'db _byte_1dcf8;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1DCFB	db 4Bh			; DATA XREF: _callsubx+13r"), ('75, // _byte_1dcfb\n', 'db _byte_1dcfb;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_1DE70	db 0			; DATA XREF: _start+168w _start+268w ..."), ('0, // _byte_1de70\n', 'db _byte_1de70;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_24629	db 20h			; DATA XREF: _someplaymode+64r"), ('32, // _byte_24629\n', 'db _byte_24629;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_257DA	db 10h			; DATA XREF: _useless_writeinr+3Fw"), ('16, // _byte_257da\n', 'db _byte_257da;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_280E7	db ?			; DATA XREF: _s3m_module+1F3w"), ('0, // _byte_280e7\n', 'db _byte_280e7;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_282E8	db 20h dup( ?)		; DATA XREF: _clean_11C43+AEo"), ('{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // _byte_282e8\n', 'db _byte_282e8[32];\n', 32))
        self.assertEqual(parser_instance.action_data(line="_byte_30577	db ?			; DATA XREF: _e669_module+32r"), ('0, // _byte_30577\n', 'db _byte_30577;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_30579	db 21h dup( ?)		; DATA XREF: _e669_module:loc_1096Fr"), ('{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // _byte_30579\n', 'db _byte_30579[33];\n', 33))
        self.assertEqual(parser_instance.action_data(line="_byte_30639	db ?			; DATA XREF: _ult_module+169r"), ('0, // _byte_30639\n', 'db _byte_30639;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_byte_3150A	db ?			; DATA XREF: _psm_module+139r"), ('0, // _byte_3150a\n', 'db _byte_3150a;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_cfg_buffer	db    4			; DATA XREF: _loadcfg+Co _loadcfg+1Er"), ('4, // _cfg_buffer\n', 'db _cfg_buffer;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_chrin		dd ?			; DATA XREF: _moduleread:loc_10033o"), ('0, // _chrin\n', 'dd _chrin;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_config_word	dw 0			; DATA XREF: _ems_init+8r"), ('0, // _config_word\n', 'dw _config_word;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_configword	dw 218Bh		; DATA XREF: _start+60w	_start+6Cw ..."), ('8587, // _configword\n', 'dw _configword;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_covox_txt	db    2			; DATA XREF: seg003:0D7Co seg003:0D7Eo"), ('2, // _covox_txt\n', 'db _covox_txt;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_critsectpoint_off dw 0			; DATA XREF: _start+150w"), ('0, // _critsectpoint_off\n', 'dw _critsectpoint_off;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_critsectpoint_seg dw 0			; DATA XREF: _start+154w"), ('0, // _critsectpoint_seg\n', 'dw _critsectpoint_seg;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_current_patterns dw 0			; DATA XREF: _read_module+5Fw"), ('0, // _current_patterns\n', 'dw _current_patterns;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_dma_buf_pointer	dd 0			; DATA XREF: _mod_readfile_11F4E+9Cw"), ('0, // _dma_buf_pointer\n', 'dd _dma_buf_pointer;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_dma_channel	db 0			; DATA XREF: _read_sndsettings+11r"), ('0, // _dma_channel\n', 'db _dma_channel;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_dma_channel2	db 0			; DATA XREF: _wss_init:loc_147DCw"), ('0, // _dma_channel2\n', 'db _dma_channel2;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_dma_channel_0	db 0			; DATA XREF: _mod_readfile_11F4E+8Er"), ('0, // _dma_channel_0\n', 'db _dma_channel_0;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_dma_channel_1	db 0FFh			; DATA XREF: _callsubx+Br _callsubx+4Dw"), ('255, // _dma_channel_1\n', 'db _dma_channel_1;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_dma_chn_mask	db 0			; DATA XREF: _sb16_init+4Bw"), ('0, // _dma_chn_mask\n', 'db _dma_chn_mask;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_dma_mode	db 0			; DATA XREF: _proaud_set+3w _wss_set+3w	..."), ('0, // _dma_mode\n', 'db _dma_mode;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_dword_1DCEC	dd 10524E49h		; DATA XREF: _loadcfg+1Ar"), ('273829449, // _dword_1dcec\n', 'dd _dword_1dcec;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_dword_1DE2C	dd 0			; DATA XREF: _text_init2+22Aw"), ('0, // _dword_1de2c\n', 'dd _dword_1de2c;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_dword_3063D	dd ?			; DATA XREF: _ult_module+225r"), ('0, // _dword_3063d\n', 'dd _dword_3063d;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_eModuleNotFound	db 'Module not found',0Dh,0Ah,0 ; DATA XREF: _moduleread+1Co"), ('"Module not found\\r\\n", // _emodulenotfound\n', 'char _emodulenotfound[19];\n', 19))

        #self.assertEqual(parser_instance.action_data(line="_effoff_18F60	dw offset _eff_nullsub	; DATA XREF: sub_137D5+16r"),('k_eff_nullsub, // _effoff_18f60\n','dw _effoff_18f60;\n', 2))

        self.assertEqual(parser_instance.action_data(line="_ems_enabled	db 0			; DATA XREF: _ems_initw	_ems_init+78w ..."), ('0, // _ems_enabled\n', 'db _ems_enabled;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_ems_handle	dw 0			; DATA XREF: _ems_init+74w"), ('0, // _ems_handle\n', 'dw _ems_handle;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_ems_log_pagenum	dw 0			; DATA XREF: _ems_init+7Dw"), ('0, // _ems_log_pagenum\n', 'dw _ems_log_pagenum;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_ems_pageframe	dw 0			; DATA XREF: _useless_11787+3Er"), ('0, // _ems_pageframe\n', 'dw _ems_pageframe;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_esseg_atstart	dw 0			; DATA XREF: _start+5w _parse_cmdline+7r ..."), ('0, // _esseg_atstart\n', 'dw _esseg_atstart;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_f1_help_text	dw 3F8h			; DATA XREF: seg001:1CD8o"), ('1016, // _f1_help_text\n', 'dw _f1_help_text;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_fhandle_1DE68	dw 0			; DATA XREF: _init_vga_waves+42w"), ('0, // _fhandle_1de68\n', 'dw _fhandle_1de68;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_fhandle_module	dw 0			; DATA XREF: _moduleread+19w"), ('0, // _fhandle_module\n', 'dw _fhandle_module;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_flag_playsetttings db 0			; DATA XREF: _clean_11C43+68r"), ('0, // _flag_playsetttings\n', 'db _flag_playsetttings;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_flg_play_settings db 0			; DATA XREF: _keyb_screen_loop+2Fw"), ('0, // _flg_play_settings\n', 'db _flg_play_settings;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_frameborder	db '      ██████╔╗╚╝═║┌┐└┘─│╓╖╙╜─║╒╕╘╛═│',0 ; DATA XREF: _draw_frame+3Do"), ('"      ██████╔╗╚╝═║┌┐└┘─│╓╖╙╜─║╒╕╘╛═│", // _frameborder\n', 'char _frameborder[37];\n', 37))
        self.assertEqual(parser_instance.action_data(line="_freq1		dw 22050		; DATA XREF: _volume_prepare_waves+48r"), ('22050, // _freq1\n', 'dw _freq1;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_freq2		dw 0			; DATA XREF: _read_sndsettings+2Cr"), ('0, // _freq2\n', 'dw _freq2;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_freq_1DCF6	db 2Ch			; DATA XREF: _callsubx+Fr _callsubx+51w"), ('44, // _freq_1dcf6\n', 'db _freq_1dcf6;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_freq_245DE	dw 0			; DATA XREF: _mod_1024A+40r"), ('0, // _freq_245de\n', 'dw _freq_245de;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_freq_246D7	db 0			; DATA XREF: _read_sndsettings+15r"), ('0, // _freq_246d7\n', 'db _freq_246d7;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_gravis_port	dw 0			; DATA XREF: _volume_prep+61r"), ('0, // _gravis_port\n', 'dw _gravis_port;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_gravis_txt	db    1			; DATA XREF: seg003:_sndcards_text_tblo"), ('1, // _gravis_txt\n', 'db _gravis_txt;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_hopeyoulike	dw 3C6h			; DATA XREF: _start+204o"), ('966, // _hopeyoulike\n', 'dw _hopeyoulike;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_int1Avect	dd 0			; DATA XREF: _int1a_timer+12r"), ('0, // _int1avect\n', 'dd _int1avect;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_int8addr	dd 0			; DATA XREF: sub_12DA8+6Aw"), ('0, // _int8addr\n', 'dd _int8addr;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_interrupt_mask	dw 0			; DATA XREF: _setsnd_handler+Cw"), ('0, // _interrupt_mask\n', 'dw _interrupt_mask;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_intvectoffset	dw 0			; DATA XREF: _setsnd_handler+2Dw"), ('0, // _intvectoffset\n', 'dw _intvectoffset;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_irq_number	db 0			; DATA XREF: _read_sndsettings+Dr"), ('0, // _irq_number\n', 'db _irq_number;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_irq_number2	db 0			; DATA XREF: _wss_init:loc_147D0w"), ('0, // _irq_number2\n', 'db _irq_number2;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_irq_number_0	db 0			; DATA XREF: _gravis_init+35w"), ('0, // _irq_number_0\n', 'db _irq_number_0;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_irq_number_1	db 0FFh			; DATA XREF: _callsubx+7r _callsubx+49w"), ('255, // _irq_number_1\n', 'db _irq_number_1;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_is_stereo	db 0			; DATA XREF: sub_1265D+33r"), ('0, // _is_stereo\n', 'db _is_stereo;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_key_code	dw 0			; DATA XREF: _start:loc_193FFr"), ('0, // _key_code\n', 'dw _key_code;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_keyb_switches	dw 0			; DATA XREF: _start+5D8r"), ('0, // _keyb_switches\n', 'dw _keyb_switches;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_memflg_2469A	db 0			; DATA XREF: _alloc_dma_buf+8w"), ('0, // _memflg_2469a\n', 'db _memflg_2469a;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_messagepointer	dd 0			; DATA XREF: _start+228r _start+23Dw ..."), ('0, // _messagepointer\n', 'dd _messagepointer;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_midi_txt	db    2			; DATA XREF: seg003:0D84o"), ('2, // _midi_txt\n', 'db _midi_txt;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_mod_channels_number	dw 0			; DATA XREF: _moduleread+81r"), ('0, // _mod_channels_number\n', 'dw _mod_channels_number;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_module_type_text dd 20202020h		; DATA XREF: _mod_n_t_modulew"), ('538976288, // _module_type_text\n', 'dd _module_type_text;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_module_type_txt	db '    '               ; DATA XREF: _read_module+6Fw"), ("{' ',' ',' ',' '}, // _module_type_txt\n", 'char _module_type_txt[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="_moduleflag_246D0 dw 0			; DATA XREF: _mod_n_t_module+3Dw"), ('0, // _moduleflag_246d0\n', 'dw _moduleflag_246d0;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_mouse_exist_flag db 0			; DATA XREF: _mouse_init:loc_1C6EFw"), ('0, // _mouse_exist_flag\n', 'db _mouse_exist_flag;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_mouse_visible	db 0Ah dup(0)		; DATA XREF: _mouse_initw"), ('{0,0,0,0,0,0,0,0,0,0}, // _mouse_visible\n', 'db _mouse_visible[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_mousecolumn	dw 0			; DATA XREF: _start+7A0r _start+7BCr ..."), ('0, // _mousecolumn\n', 'dw _mousecolumn;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_mouserow	dw 0			; DATA XREF: _start+7A3r _start+7BFr ..."), ('0, // _mouserow\n', 'dw _mouserow;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_msg		db 'Searching directory for modules  ',0 ; DATA XREF: _start+2F7o"), ('"Searching directory for modules  ", // _msg\n', 'char _msg[34];\n', 34))
        self.assertEqual(parser_instance.action_data(line="_multip_244CC	dd 0			; DATA XREF: _spectr_1B084+2Fw"), ('0, // _multip_244cc\n', 'dd _multip_244cc;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_multip_244D0	dd 0			; DATA XREF: _spectr_1B084+25w"), ('0, // _multip_244d0\n', 'dd _multip_244d0;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_my_in		db ?			; DATA XREF: __2stm_module+50o"), ('0, // _my_in\n', 'db _my_in;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_my_seg_index	dw 0			; DATA XREF: _psm_module+136r"), ('0, // _my_seg_index\n', 'dw _my_seg_index;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_my_size		dw 0			; DATA XREF: _volume_prep+9w"), ('0, // _my_size\n', 'dw _my_size;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_myendl		db 0Dh,0Ah,'$'          ; DATA XREF: _start-1Do"), ("{'\\r','\\n','$'}, // _myendl\n", 'char _myendl[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_myin		dd ?			; DATA XREF: _mtm_module+22o"), ('0, // _myin\n', 'dd _myin;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_myin_0		db ?			; DATA XREF: _ult_module+3Ao"), ('0, // _myin_0\n', 'db _myin_0;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_myseg_24698	dw 0			; DATA XREF: _alloc_dma_buf+31w"), ('0, // _myseg_24698\n', 'dw _myseg_24698;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_mystr		db 42h dup(0)		; DATA XREF: _start:loc_192E0o"), ('{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // _mystr\n', 'db _mystr[66];\n', 66))
        self.assertEqual(parser_instance.action_data(line="_notes		db '  C-C#D-D#E-F-F#G-G#A-A#B-' ; DATA XREF: seg001:1930r"), ("{' ',' ','C','-','C','#','D','-','D','#','E','-','F','-','F','#','G','-','G','#','A','-','A','#','B','-'}, // _notes\n", 'char _notes[26];\n', 26))
        #self.assertEqual(parser_instance.action_data(line="_offs_draw	dw offset loc_19050	; DATA XREF: _keyb_screen_loop+32r"),('kloc_19050, // _offs_draw\n','dw _offs_draw;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_oint24_1C1AC	dd 0			; DATA XREF: _start+115w _start+1D4r ..."), ('0, // _oint24_1c1ac\n', 'dd _oint24_1c1ac;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_oint2f_1C1B4	dd 0			; DATA XREF: _start+124w _start+1C8r ..."), ('0, // _oint2f_1c1b4\n', 'dd _oint2f_1c1b4;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_oint8off_1DE14	dw 0			; DATA XREF: _start+F9w"), ('0, // _oint8off_1de14\n', 'dw _oint8off_1de14;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_oint8seg_1DE16	dw 0			; DATA XREF: _start+FDw"), ('0, // _oint8seg_1de16\n', 'dw _oint8seg_1de16;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_oint9_1C1A4	dd 0			; DATA XREF: _start+106w _start+1E0r ..."), ('0, // _oint9_1c1a4\n', 'dd _oint9_1c1a4;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_old_intprocoffset dw 0			; DATA XREF: _setsnd_handler+3Aw"), ('0, // _old_intprocoffset\n', 'dw _old_intprocoffset;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_old_intprocseg	dw 0			; DATA XREF: _setsnd_handler+3Ew"), ('0, // _old_intprocseg\n', 'dw _old_intprocseg;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_outp_freq	dw 0			; DATA XREF: _read_module+82w"), ('0, // _outp_freq\n', 'dw _outp_freq;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_palette_24404	db    0			; DATA XREF: _init_vga_waves+17o"), ('0, // _palette_24404\n', 'db _palette_24404;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_pc_timer_tbl	db 40h,40h,40h,40h,40h,40h,40h,40h,40h,40h,3Fh,3Fh,3Fh"), ('{64,64,64,64,64,64,64,64,64,64,63,63,63}, // _pc_timer_tbl\n', 'db _pc_timer_tbl[13];\n', 13))
        self.assertEqual(parser_instance.action_data(line="_pcspeaker_txt	db    2			; DATA XREF: seg003:0D80o seg003:0D82o"), ('2, // _pcspeaker_txt\n', 'db _pcspeaker_txt;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_play_state	db 0			; DATA XREF: _getset_playstate+Bw"), ('0, // _play_state\n', 'db _play_state;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_pointer_245B4	dd 0			; DATA XREF: sub_135CA+1Cr"), ('0, // _pointer_245b4\n', 'dd _pointer_245b4;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_prev_scan_code	db 0			; DATA XREF: _int9_keyb+19r"), ('0, // _prev_scan_code\n', 'db _prev_scan_code;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_s3mtable_108D6	db 0FFh,10h,0Bh,0Dh,15h,12h,11h,13h,14h,1Bh,1Dh,17h,16h"), ('{255,16,11,13,21,18,17,19,20,27,29,23,22}, // _s3mtable_108d6\n', 'db _s3mtable_108d6[13];\n', 13))
        self.assertEqual(parser_instance.action_data(line="_s3mtable_108F0	db 0,3,5,4,7,0FFh,0FFh,0FFh,8,0FFh,0FFh,6,0Ch,0Dh,0FFh"), ('{0,3,5,4,7,255,255,255,8,255,255,6,12,13,255}, // _s3mtable_108f0\n', 'db _s3mtable_108f0[15];\n', 15))
        self.assertEqual(parser_instance.action_data(line="_sIplay_cfg	db 'IPLAY.CFG',0     ; DATA XREF: _loadcfgo"), ('"IPLAY.CFG", // _siplay_cfg\n', 'char _siplay_cfg[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_samples_outoffs_24600	dw 0			; DATA XREF: sub_12EBA+2Cw"), ('0, // _samples_outoffs_24600\n', 'dw _samples_outoffs_24600;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_savesp_245D0	dw 0			; DATA XREF: _moduleread+15w"), ('0, // _savesp_245d0\n', 'dw _savesp_245d0;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_sb16_txt	db    2			; DATA XREF: seg003:0D72o seg003:0D74o ..."), ('2, // _sb16_txt\n', 'db _sb16_txt;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_sb_base_port	dw 0			; DATA XREF: _sb16_on+17r _sb16_on+44r ..."), ('0, // _sb_base_port\n', 'dw _sb_base_port;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_sb_int_counter	db 0			; DATA XREF: _sb_test_interruptw"), ('0, // _sb_int_counter\n', 'db _sb_int_counter;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_sb_irq_number	db 0			; DATA XREF: _sb16_init+1Cw"), ('0, // _sb_irq_number\n', 'db _sb_irq_number;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_sb_timeconst	db 0			; DATA XREF: _sbpro_init+51w _sb_set-D1r ..."), ('0, // _sb_timeconst\n', 'db _sb_timeconst;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_segfsbx_1DE28	dd 0			; DATA XREF: _read_module+99w"), ('0, // _segfsbx_1de28\n', 'dd _segfsbx_1de28;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_slider		db '─\|/─\|/'           ; DATA XREF: _modules_search+7Fr"), ("{'\\xc4','\\\\','\\\\','|','/','\\xc4','\\\\','\\\\','|','/'}, // _slider\n", 'char _slider[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="_snd_base_port	dw 0			; DATA XREF: _read_sndsettings+9r"), ('0, // _snd_base_port\n', 'dw _snd_base_port;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_snd_base_port_0	dw 0FFFFh		; DATA XREF: _callsubx+3r _callsubx+45w"), ('65535, // _snd_base_port_0\n', 'dw _snd_base_port_0;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_snd_card_type	db 3			; DATA XREF: _text_init2+18Er"), ('3, // _snd_card_type\n', 'db _snd_card_type;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_snd_cards_offs	dw offset _aGravisUltrasoun ; DATA XREF:	seg003:114Eo"), ('offset(default_seg,_agravisultrasoun), // _snd_cards_offs\n', 'dw _snd_cards_offs;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_snd_init	db 0			; DATA XREF: sub_12D05+Br"), ('0, // _snd_init\n', 'db _snd_init;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_snd_set_flag	db 0			; DATA XREF: sub_12DA8+60w _snd_on+7r ..."), ('0, // _snd_set_flag\n', 'db _snd_set_flag;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_sndcard_type	db 0			; DATA XREF: _mtm_module+2Er"), ('0, // _sndcard_type\n', 'db _sndcard_type;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_sndflags_24622	db 0			; DATA XREF: _useless_11787+9r"), ('0, // _sndflags_24622\n', 'db _sndflags_24622;\n', 1))
        self.assertEqual(parser_instance.action_data(line="_sound_port	dw 0			; DATA XREF: _proaud_init+42w"), ('0, // _sound_port\n', 'dw _sound_port;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_swapdata_off	dw 0			; DATA XREF: _start+161w"), ('0, // _swapdata_off\n', 'dw _swapdata_off;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_swapdata_seg	dw 0			; DATA XREF: _start+165w"), ('0, // _swapdata_seg\n', 'dw _swapdata_seg;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_table_13EC3	db 140,50,25,15,10,7,6,4,3,3,2,2,2,2,1,1 ; DATA	XREF: sub_13E9B+Dr"), ('{140,50,25,15,10,7,6,4,3,3,2,2,2,2,1,1}, // _table_13ec3\n', 'db _table_13ec3[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_table_14057	db 0FFh,80h,40h,2Ah,20h,19h,15h,12h,10h,0Eh,0Ch,0Bh,0Ah"), ('{255,128,64,42,32,25,21,18,16,14,12,11,10}, // _table_14057\n', 'db _table_14057[13];\n', 13))
        self.assertEqual(parser_instance.action_data(line="_table_246F6	dw 8363,8422,8482,8543,8604,8667,8730,8794,7901,7954,8007"), ('{8363,8422,8482,8543,8604,8667,8730,8794,7901,7954,8007}, // _table_246f6\n', 'dw _table_246f6[11];\n', 22))
        self.assertEqual(parser_instance.action_data(line="_table_24716	dw 8000h,9000h,0A000h,0A952h,0B000h,0B521h,0B952h,0BCDEh"), ('{32768,36864,40960,43346,45056,46369,47442,48350}, // _table_24716\n', 'dw _table_24716[8];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_table_24798	dw 8000h,9800h,0A000h,0A800h,0B000h,0B400h,0B800h,0BC00h"), ('{32768,38912,40960,43008,45056,46080,47104,48128}, // _table_24798\n', 'dw _table_24798[8];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_table_24818	dw 8000h,9800h,0A000h,0A800h,0B000h,0B400h,0B800h,0BC00h"), ('{32768,38912,40960,43008,45056,46080,47104,48128}, // _table_24818\n', 'dw _table_24818[8];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_table_24898	db 1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh"), ('{30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30}, // _table_24898\n', 'db _table_24898[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="_table_25118	dw 1712,1616,1524,1440,1356,1280,1208,1140,1076,1016,960,906,856,808,762,720,678,640,604,570,538,508,480,453"), ('{1712,1616,1524,1440,1356,1280,1208,1140,1076,1016,960,906,856,808,762,720,678,640,604,570,538,508,480,453}, // _table_25118\n', 'dw _table_25118[24];\n', 48))
        self.assertEqual(parser_instance.action_data(line="_table_251C0	db  0,18h,31h,4Ah,61h,78h,8Dh,0A1h,0B4h,0C5h,0D4h,0E0h"), ('{0,24,49,74,97,120,141,161,180,197,212,224}, // _table_251c0\n', 'db _table_251c0[12];\n', 12))
        self.assertEqual(parser_instance.action_data(line="_table_251E0	db  0,15h,20h,29h,30h,37h,3Dh,44h,49h,4Fh,54h,59h,5Eh"), ('{0,21,32,41,48,55,61,68,73,79,84,89,94}, // _table_251e0\n', 'db _table_251e0[13];\n', 13))
        self.assertEqual(parser_instance.action_data(line="_table_25221	db  0, 4, 8,0Ch,10h,14h,18h,1Ch,20h,24h,28h,2Ch,30h,34h"), ('{0,4,8,12,16,20,24,28,32,36,40,44,48,52}, // _table_25221\n', 'db _table_25221[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="_table_25261	db  0, 4, 8,0Ch,10h,14h,18h,1Ch,20h,24h,28h,2Ch,30h,34h"), ('{0,4,8,12,16,20,24,28,32,36,40,44,48,52}, // _table_25261\n', 'db _table_25261[14];\n', 14))

        #self.assertEqual(parser_instance.action_data(line="_table_sndcrdname dw offset _aGravisUltrasou ; DATA XREF:	_text_init2+19Dr"),('0, // _table_sndcrdname\n','dw _table_sndcrdname;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_tabledword_24526 dd    0,65536,46340,25079,12785,6423,3215,1608, 804, 402"), ('{0,65536,46340,25079,12785,6423,3215,1608,804,402}, // _tabledword_24526\n', 'dd _tabledword_24526[10];\n', 40))
        self.assertEqual(parser_instance.action_data(line="_tabledword_24562 dd -131072,-65536,-19196,-4989,-1260,-316, -79, -20,  -5"), ('{4294836224,4294901760,4294948100,4294962307,4294966036,4294966980,4294967217,4294967276,4294967291}, // _tabledword_24562\n', 'dd _tabledword_24562[9];\n', 36))
        self.assertEqual(parser_instance.action_data(line="_timer_word_14F6E dw 0			; DATA XREF: _set_timerw _text:4F59r"), ('0, // _timer_word_14f6e\n', 'dw _timer_word_14f6e;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_vga_palette	db 0,0,0		; DATA XREF: _init_vga_waves+1Fo"), ('{0,0,0}, // _vga_palette\n', 'db _vga_palette[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="_videomempointer	dd 0			; DATA XREF: _start:loc_1917Dw"), ('0, // _videomempointer\n', 'dd _videomempointer;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_videopoint_shiftd dd 0			; DATA XREF: _text_init2+5Fw"), ('0, // _videopoint_shiftd\n', 'dd _videopoint_shiftd;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_volume_1DE34	dd 0			; DATA XREF: _read_module+DAw"), ('0, // _volume_1de34\n', 'dd _volume_1de34;\n', 4))
        self.assertEqual(parser_instance.action_data(line="_volume_245FC	dw 100h			; DATA XREF: sub_1265D+5r"), ('256, // _volume_245fc\n', 'dw _volume_245fc;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_14913	dw 536h			; DATA XREF: _wss_set+14w"), ('1334, // _word_14913\n', 'dw _word_14913;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_14BBB	dw 22Fh			; DATA XREF: _sb16_on+49w _sb16_on+57w"), ('559, // _word_14bbb\n', 'dw _word_14bbb;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_14CEB	dw 22Eh			; DATA XREF: _sb_set-108w"), ('558, // _word_14ceb\n', 'dw _word_14ceb;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_14FC0	dw 1000h		; DATA XREF: _covox_init+33w"), ('4096, // _word_14fc0\n', 'dw _word_14fc0;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_14FC8	dw 378h			; DATA XREF: _covox_init+24w"), ('888, // _word_14fc8\n', 'dw _word_14fc8;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_1504D	dw 37Ah			; DATA XREF: _stereo_init+27w"), ('890, // _word_1504d\n', 'dw _word_1504d;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_15056	dw 1234h		; DATA XREF: _stereo_init+3Aw"), ('4660, // _word_15056\n', 'dw _word_15056;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_1519B	dw 1000h		; DATA XREF: _pcspeaker_init+1Ew"), ('4096, // _word_1519b\n', 'dw _word_1519b;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_151A3	dw 1234h		; DATA XREF: _pcspeaker_init+22w"), ('4660, // _word_151a3\n', 'dw _word_151a3;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_1D26D	dw 3F2h			; DATA XREF: _dosexec+19o"), ('1010, // _word_1d26d\n', 'dw _word_1d26d;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_1D3B0	dw 49Eh			; DATA XREF: _start+723o"), ('1182, // _word_1d3b0\n', 'dw _word_1d3b0;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_1D614	dw 2020h		; DATA XREF: _useless_197F2+7w"), ('8224, // _word_1d614\n', 'dw _word_1d614;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_1D669	dw 2020h		; DATA XREF: _useless_197F2+12w"), ('8224, // _word_1d669\n', 'dw _word_1d669;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_1DE46	dw 0			; DATA XREF: _keyb_screen_loop+316r"), ('0, // _word_1de46\n', 'dw _word_1de46;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_246DE	dw 6B00h,6500h,5F40h,5A00h,54C0h,5000h,4B80h,4740h,4340h"), ('{27392,25856,24384,23040,21696,20480,19328,18240,17216}, // _word_246de\n', 'dw _word_246de[9];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_word_24998	dw 6B00h,6500h,5F40h,5A00h,54C0h,5000h,4B80h,4740h,4340h"), ('{27392,25856,24384,23040,21696,20480,19328,18240,17216}, // _word_24998\n', 'dw _word_24998[9];\n', 18))
        self.assertEqual(parser_instance.action_data(line="_word_257A4	dw 0			; DATA XREF: _useless_writeinr+106w"), ('0, // _word_257a4\n', 'dw _word_257a4;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_257E6	dw 4			; DATA XREF: _useless_writeinr+53w"), ('4, // _word_257e6\n', 'dw _word_257e6;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_257E8	dw 0			; DATA XREF: _useless_writeinr+59w"), ('0, // _word_257e8\n', 'dw _word_257e8;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_word_31508	dw ?			; DATA XREF: _mod_read_10311+5o"), ('0, // _word_31508\n', 'dw _word_31508;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_wss_freq_table	dw 5513			; DATA XREF: _wss_test+3Er"), ('5513, // _wss_freq_table\n', 'dw _wss_freq_table;\n', 2))
        self.assertEqual(parser_instance.action_data(line="_wss_freq_table2	dw  1,19D7h,0Fh,1F40h, 0,2580h,0Eh,2B11h, 3,3E80h, 2,49D4h"), ('{1,6615,15,8000,0,9600,14,11025,3,16000,2,18900}, // _wss_freq_table2\n', 'dw _wss_freq_table2[12];\n', 24))
        self.assertEqual(parser_instance.action_data(line="_x_storage	dw  0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0"), ('{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // _x_storage\n', 'dw _x_storage[17];\n', 34))
        self.assertEqual(parser_instance.action_data(line="a db 0ffh,0dfh,0h"), ('{255,223,0}, // a\n', 'db a[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="asc_1058C	db 0,18h,0Bh,0Dh,0Ah	; DATA XREF: __2stm_module+171r"), ('{0,24,11,13,10}, // asc_1058c\n', 'db asc_1058c[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="asc_182C3	db 0,0,1,3,0,2,0,4,0,0,0,5,6,0,0,7 ; DATA XREF:	_gravis_18216+5r"), ('{0,0,1,3,0,2,0,4,0,0,0,5,6,0,0,7}, // asc_182c3\n', 'db asc_182c3[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="asc_182D3	db 0,1,0,2,0,3,4,5	; DATA XREF: _gravis_18216+19r"), ('{0,1,0,2,0,3,4,5}, // asc_182d3\n', 'db asc_182d3[8];\n', 8))
        self.assertEqual(parser_instance.action_data(line="asc_1CC2D	db '                              ' ; DATA XREF: _read_module+A3o"), ("{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, // asc_1cc2d\n", 'char asc_1cc2d[30];\n', 30))
        self.assertEqual(parser_instance.action_data(line="asc_1D6E0	db '               ',0  ; DATA XREF: seg001:1A80o"), ('"               ", // asc_1d6e0\n', 'char asc_1d6e0[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="asc_1DA00	db '                      ',0 ; DATA XREF: _modules_search:loc_19BDDo"), ('"                      ", // asc_1da00\n', 'char asc_1da00[23];\n', 23))
        self.assertEqual(parser_instance.action_data(line="asc_246B0	db '                                ' ; DATA XREF: _mod_1021E+22o"), ("{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, // asc_246b0\n", 'char asc_246b0[32];\n', 32))
        self.assertEqual(parser_instance.action_data(line="asc_25856	db '                                ',0Dh,0Ah,1Ah"), ("{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','\\r','\\n',26}, // asc_25856\n", 'char asc_25856[35];\n', 35))
        self.assertEqual(parser_instance.action_data(line="audio_len	dw 0			; DATA XREF: _configure_timer+1Bw"), ('0, // audio_len\n', 'dw audio_len;\n', 2))
        self.assertEqual(parser_instance.action_data(line="b dw 2"), ('2, // b\n', 'dw b;\n', 2))
        self.assertEqual(parser_instance.action_data(line="beginningdata db 4"), ('4, // beginningdata\n', 'db beginningdata;\n', 1))
        self.assertEqual(parser_instance.action_data(line="cc db 3"), ('3, // cc\n', 'db cc;\n', 1))
        self.assertEqual(parser_instance.action_data(line="d db 4"), ('4, // d\n', 'db d;\n', 1))
        self.assertEqual(parser_instance.action_data(line="db    0"), ('0, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db    ?	;"), ('0, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db  0Ah"), ('10, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db  20h"), ('32, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db  20h"), ('32, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db  2Ch	; ,"), ('44, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db  80h	; Ç"), ('128, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db  8Ah	; è"), ('138, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db ' '"), ("{' '}, // dummy1\n", 'char dummy1[1];\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db ' /?  This help screen',0Dh,0Ah"), ("{' ','/','?',' ',' ','T','h','i','s',' ','h','e','l','p',' ','s','c','r','e','e','n','\\r','\\n'}, // dummy1\n", 'char dummy1[23];\n', 23))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db ','"), ("{','}, // dummy1\n", 'char dummy1[1];\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db '- +'"), ("{'-',' ','+'}, // dummy1\n", 'char dummy1[3];\n', 3))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db ':'"), ("{':'}, // dummy1\n", 'char dummy1[1];\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'ABC',0"), ('"ABC", // dummy1\n', 'char dummy1[4];\n', 4))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'Close this DOS session first with the \"EXIT\" command.',0Dh,0Ah"), ("{'C','l','o','s','e',' ','t','h','i','s',' ','D','O','S',' ','s','e','s','s','i','o','n',' ','f','i','r','s','t',' ','w','i','t','h',' ','t','h','e',' ','\\\"','E','X','I','T','\\\"',' ','c','o','m','m','a','n','d','.','\\r','\\n'}, // dummy1\n", 'char dummy1[55];\n', 55))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'OKOKOKOK'"), ("{'O','K','O','K','O','K','O','K'}, // dummy1\n", 'char dummy1[8];\n', 8))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'OKOKOKOK',10,13"), ("{'O','K','O','K','O','K','O','K','\\n','\\r'}, // dummy1\n", 'char dummy1[10];\n', 10))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'Try changing the AT-BUS Clock in the CMOS Setup.',0Dh,0Ah,0"), ('"Try changing the AT-BUS Clock in the CMOS Setup.\\r\\n", // dummy1\n', 'char dummy1[51];\n', 51))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'Usage: IPLAY [Switches] [FileName.Ext|@FileList.Ext]',0Dh,0Ah"), ("{'U','s','a','g','e',':',' ','I','P','L','A','Y',' ','[','S','w','i','t','c','h','e','s',']',' ','[','F','i','l','e','N','a','m','e','.','E','x','t','|','@','F','i','l','e','L','i','s','t','.','E','x','t',']','\\r','\\n'}, // dummy1\n", 'char dummy1[54];\n', 54))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db '[ ]'"), ("{'[',' ',']'}, // dummy1\n", 'char dummy1[3];\n', 3))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db '[ ]',0"), ('"[ ]", // dummy1\n', 'char dummy1[4];\n', 4))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'ed again.',0Dh,0Ah"), ("{'e','d',' ','a','g','a','i','n','.','\\r','\\n'}, // dummy1\n", 'char dummy1[11];\n', 11))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'h'"), ("{'h'}, // dummy1\n", 'char dummy1[1];\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 'o:'"), ("{'o',':'}, // dummy1\n", 'char dummy1[2];\n', 2))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 's'"), ("{'s'}, // dummy1\n", 'char dummy1[1];\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 's',0Dh,0Ah,0"), ('"s\\r\\n", // dummy1\n', 'char dummy1[4];\n', 4))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db '─asdkweorjwoerj3434',13,10,92"), ("{'\\xc4','a','s','d','k','w','e','o','r','j','w','o','e','r','j','3','4','3','4','\\r','\\n',92}, // dummy1\n", 'char dummy1[22];\n', 22))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0"), ('0, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0,2Ah,2Ah"), ('{0,42,42}, // dummy1\n', 'db dummy1[3];\n', 3))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0A0h	; á		; self modifying"), ('160, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0A0h	; á"), ('160, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0A0h,0A4h,0A8h,0ACh,0B0h,0B4h,0B8h,0BCh,0C0h,0C4h,0C8h"), ('{160,164,168,172,176,180,184,188,192,196,200}, // dummy1\n', 'db dummy1[11];\n', 11))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0A1h"), ('161, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0A1h,0A5h,0AAh,0AEh,0B2h,0B6h,0BAh,0BEh,0C2h,0C6h,0CAh"), ('{161,165,170,174,178,182,186,190,194,198,202}, // dummy1\n', 'db dummy1[11];\n', 11))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0AAh	; ¬"), ('170, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0Ah"), ('10, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0Ah,'$'"), ("{'\\n','$'}, // dummy1\n", 'char dummy1[2];\n', 2))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0Ah,0Bh,1Bh"), ('{10,11,27}, // dummy1\n', 'db dummy1[3];\n', 3))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0B8h,0BBh,0BEh,0C1h,0C3h,0C6h,0C9h,0CCh,0CFh,0D1h,0D4h"), ('{184,187,190,193,195,198,201,204,207,209,212}, // dummy1\n', 'db dummy1[11];\n', 11))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0C5h,0B4h,0A1h,8Dh,78h,61h,4Ah,31h,18h"), ('{197,180,161,141,120,97,74,49,24}, // dummy1\n', 'db dummy1[9];\n', 9))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0Dh,0Ah"), ('{13,10}, // dummy1\n', 'db dummy1[2];\n', 2))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 0Dh,0Ah,'$'"), ("{'\\r','\\n','$'}, // dummy1\n", 'char dummy1[3];\n', 3))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 1"), ('1, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 1,1,1,1,1"), ('{1,1,1,1,1}, // dummy1\n', 'db dummy1[5];\n', 5))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 1,2,3,4"), ('{1,2,3,4}, // dummy1\n', 'db dummy1[4];\n', 4))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 10h,11h,2Ah"), ('{16,17,42}, // dummy1\n', 'db dummy1[3];\n', 3))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 12"), ('12, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 141"), ('141, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 7Fh"), ('127, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 8,8,8,7,7,7,7,6,6,6,6,6,6,5,5,5"), ('{8,8,8,7,7,7,7,6,6,6,6,6,6,5,5,5}, // dummy1\n', 'db dummy1[16];\n', 16))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 80h"), ('128, // dummy1\n', 'db dummy1;\n', 1))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 9,9,8"), ('{9,9,8}, // dummy1\n', 'db dummy1[3];\n', 3))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dd   -2,  -1,  -1,  -1,	 -1,   0"), ('{4294967294,4294967295,4294967295,4294967295,4294967295,0}, // dummy1\n', 'dd dummy1[6];\n', 24))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dd  201, 100,  50,  25,	 12"), ('{201,100,50,25,12}, // dummy1\n', 'dd dummy1[5];\n', 20))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dd 111,1"), ('{111,1}, // dummy1\n', 'dd dummy1[2];\n', 8))
        parser_instance = Parser([])
        #self.assertEqual(parser_instance.action_data(line="dd offset var5"),('offset(_data,var5), // dummy1\n','dw dummy1;\n', 4))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dd unk_24453"), ('0, // dummy1\n', 'dd dummy1;\n', 4))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="doublequote db 'ab''cd',\"e\""), ("{'a','b','\\'','c','d','e'}, // doublequote\n", 'char doublequote[6];\n', 6))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dw  0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0"), ('{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // dummy1\n', 'dw dummy1[16];\n', 32))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dw  5,5622h, 7,6B25h, 4,7D00h, 6,8133h,0Dh,93A8h, 9,0AC44h"), ('{5,22050,7,27429,4,32000,6,33075,13,37800,9,44100}, // dummy1\n', 'dw dummy1[12];\n', 24))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dw 0A06h"), ('2566, // dummy1\n', 'dw dummy1;\n', 2))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dw 0BE0h,0B40h,0AA0h,0A00h,970h,8F0h,870h,7F0h,780h,710h"), ('{3040,2880,2720,2560,2416,2288,2160,2032,1920,1808}, // dummy1\n', 'dw dummy1[10];\n', 20))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dw 0Bh,0BB80h,0Ch"), ('{11,48000,12}, // dummy1\n', 'dw dummy1[3];\n', 6))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="dw 32Ah"), ('810, // dummy1\n', 'dw dummy1;\n', 2))
        parser_instance = Parser([])
        #self.assertEqual(parser_instance.action_data(line="dw @df@@@@8"),('karbdfarbarbarbarb8, // dummy1\n','dw dummy1;\n', 2))
        parser_instance = Parser([])
        #self.assertEqual(parser_instance.action_data(line="dw offset __2stm_module	; 2STM"),('k__2stm_module, // dummy1\n','dw dummy1;\n', 2))
        parser_instance = Parser([])
        #self.assertEqual(parser_instance.action_data(line="dw offset loc_17BEB"),('kloc_17beb, // dummy1\n','dw dummy1;\n', 2))
        self.assertEqual(parser_instance.action_data(line="e db 5"), ('5, // e\n', 'db e;\n', 1))
        self.assertEqual(parser_instance.action_data(line="enddata db 4"), ('4, // enddata\n', 'db enddata;\n', 1))
        self.assertEqual(parser_instance.action_data(line="f db 6"), ('6, // f\n', 'db f;\n', 1))
        self.assertEqual(parser_instance.action_data(line="fileName db 'file1.txt',0"), ('"file1.txt", // filename\n', 'char filename[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="g dd 12345"), ('12345, // g\n', 'dd g;\n', 4))
        self.assertEqual(parser_instance.action_data(line="h db -1"), ('255, // h\n', 'db h;\n', 1))
        self.assertEqual(parser_instance.action_data(line="h2 db 1"), ('1, // h2\n', 'db h2;\n', 1))
        self.assertEqual(parser_instance.action_data(line="load_handle dd 0"), ('0, // load_handle\n', 'dd load_handle;\n', 4))
        self.assertEqual(parser_instance.action_data(line="myoffs		dw offset label2"), ('0, // myoffs\n', 'dw myoffs;\n', 2))
        #self.assertEqual(parser_instance.action_data(line="off_18E00	dw offset loc_16A89	; DATA XREF: sub_1609F:loc_16963r"),('kloc_16a89, // off_18e00\n','dw off_18e00;\n', 2))
        #self.assertEqual(parser_instance.action_data(line="off_25326	dw offset _inr_module	; DATA XREF: _moduleread:loc_10040o"),('k_inr_module, // off_25326\n','dw off_25326;\n', 2))
        self.assertEqual(parser_instance.action_data(line="pal_jeu db 000,000,000,000,000,021,000,000,042,000,000,063,009,000,000,009"), ('{0,0,0,0,0,21,0,0,42,0,0,63,9,0,0,9}, // pal_jeu\n', 'db pal_jeu[16];\n', 16))
        self.assertEqual(parser_instance.action_data(line="pas_de_mem  db 'NOT enought memory for VGA display, controls work for network games',13,10,'$'"), ("{'N','O','T',' ','e','n','o','u','g','h','t',' ','m','e','m','o','r','y',' ','f','o','r',' ','V','G','A',' ','d','i','s','p','l','a','y',',',' ','c','o','n','t','r','o','l','s',' ','w','o','r','k',' ','f','o','r',' ','n','e','t','w','o','r','k',' ','g','a','m','e','s','\\r','\\n','$'}, // pas_de_mem\n", 'char pas_de_mem[70];\n', 70))
        self.assertEqual(parser_instance.action_data(line="pbs1        db 'probleme dans allocation de descriptor..',13,10,'$'"), ("{'p','r','o','b','l','e','m','e',' ','d','a','n','s',' ','a','l','l','o','c','a','t','i','o','n',' ','d','e',' ','d','e','s','c','r','i','p','t','o','r','.','.','\\r','\\n','$'}, // pbs1\n", 'char pbs1[43];\n', 43))
        self.assertEqual(parser_instance.action_data(line="pbs2        db 'probleme dans dans definition de la taille du segment',13,10,'$'"), ("{'p','r','o','b','l','e','m','e',' ','d','a','n','s',' ','d','a','n','s',' ','d','e','f','i','n','i','t','i','o','n',' ','d','e',' ','l','a',' ','t','a','i','l','l','e',' ','d','u',' ','s','e','g','m','e','n','t','\\r','\\n','$'}, // pbs2\n", 'char pbs2[56];\n', 56))
        self.assertEqual(parser_instance.action_data(line="str1 db 'abcde'"), ("{'a','b','c','d','e'}, // str1\n", 'char str1[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="str2 db 'abcde'"), ("{'a','b','c','d','e'}, // str2\n", 'char str2[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="str3 db 'cdeab'"), ("{'c','d','e','a','b'}, // str3\n", 'char str3[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="str4 db 33,'cdeab',34"), ("{33,'c','d','e','a','b',34}, // str4\n", 'char str4[7];\n', 7))
        self.assertEqual(parser_instance.action_data(line="table   dw 0"), ('0, // table\n', 'dw table;\n', 2))
        self.assertEqual(parser_instance.action_data(line="testOVerlap db 1,2,3,4,5,6,7,8,9,10,11,12,13,14"), ('{1,2,3,4,5,6,7,8,9,10,11,12,13,14}, // testoverlap\n', 'db testoverlap[14];\n', 14))
        self.assertEqual(parser_instance.action_data(line="unk_16464	db    0			; DATA XREF: sub_1609F+235w"), ('0, // unk_16464\n', 'db unk_16464;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_165AD	db    0			; DATA XREF: sub_1609F+251w"), ('0, // unk_165ad\n', 'db unk_165ad;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_1D516	db    2"), ('2, // unk_1d516\n', 'db unk_1d516;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_1D6C3	db    2			; DATA XREF: seg001:1BDAo"), ('2, // unk_1d6c3\n', 'db unk_1d6c3;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_1DC01	db    0			; DATA XREF: _modules_search+8Fr"), ('0, // unk_1dc01\n', 'db unk_1dc01;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_24456	db  20h			; DATA XREF: dseg:7C5Bo dseg:7C5Fo"), ('32, // unk_24456\n', 'db unk_24456;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_244C4	db    0			; DATA XREF: _spectr_1B084+14Ew"), ('0, // unk_244c4\n', 'db unk_244c4;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_257D9	db    0"), ('0, // unk_257d9\n', 'db unk_257d9;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_258A6	db  49h	; I		; DATA XREF: _useless_writeinr_118+Eo"), ('73, // unk_258a6\n', 'db unk_258a6;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_30528	db    ?	;		; DATA XREF: _s3m_module+102r"), ('0, // unk_30528\n', 'db unk_30528;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_3054A	db    ?	;		; DATA XREF: _mtm_module+7Bo"), ('0, // unk_3054a\n', 'db unk_3054a;\n', 1))
        self.assertEqual(parser_instance.action_data(line="unk_30941	db    ?	;		; DATA XREF: _mod_n_t_module+ACr"), ('0, // unk_30941\n', 'db unk_30941;\n', 1))
        self.assertEqual(parser_instance.action_data(line="var db 4 dup (5)"), ('{5,5,5,5}, // var\n', 'db var[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="var0 db 10 dup (?)"), ('{0,0,0,0,0,0,0,0,0,0}, // var0\n', 'db var0[10];\n', 10))
        self.assertEqual(parser_instance.action_data(line="var1 db 1,2,3"), ('{1,2,3}, // var1\n', 'db var1[3];\n', 3))
        self.assertEqual(parser_instance.action_data(line="var2 db 5 dup (0)"), ('{0,0,0,0,0}, // var2\n', 'db var2[5];\n', 5))
        self.assertEqual(parser_instance.action_data(line="var3 db 5*5 dup (0,testEqu*2,2*2,3)"), ('{0,testEqu*2,2*2,3,0,testEqu*2,2*2,3,0,testEqu*2,2*2,3,0,testEqu*2,2*2,3,0,testEqu*2,2*2,3,0,testEqu*2,2*2,3,0}, // var3\n', 'db var3[25];\n', 25))
        self.assertEqual(parser_instance.action_data(line="var4 db 131"), ('131, // var4\n', 'db var4;\n', 1))
        self.assertEqual(parser_instance.action_data(line="var5 db 'abcd'"), ("{'a','b','c','d'}, // var5\n", 'char var5[4];\n', 4))
        self.assertEqual(parser_instance.action_data(line="var6 dd 9,8,7,1"), ('{9,8,7,1}, // var6\n', 'dd var6[4];\n', 16))
        parser_instance = Parser([])
        self.assertEqual(parser_instance.action_data(line="db 000,009,000,000,009,021,000,009,042,000,009,063,009,009,000,009"), ('{0,9,0,0,9,21,0,9,42,0,9,63,9,9,0,9}, // dummy1\n', 'db dummy1[16];\n', 16))

    @patch.object(logging, 'debug')
    @patch.object(logging, 'info')
    # @patch.object(parser, 'get_global')
    def test_equ(self, mock_info, mock_debug):
            # mock_get_global.return_value = var()
            mock_info.return_value = None
            mock_debug.return_value = None
            parser_instance = Parser([])

            cpp_instance = cpp.Cpp(parser_instance)
            proc_instance = Proc('mainproc', False)
            cpp_instance.proc = proc_instance
            self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'aaaa = 1')), '#undef aaaa\n#define aaaa 1\n')

            self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'B = 1')), '#undef B\n#define B 1\n')
            self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(
                u'DDD = var1 ; actually it is address of var1')), '#undef DDD\n#define DDD var1\n')

            self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'left equ 0')), '#define left 0\n')
            self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'col equ 40')), '#define col 40\n')
            self.assertEqual(
                proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'right equ left+col')), '#define right left + col\n')
            self.assertEqual(
                proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'scale_mod equ -19*32*4; ')), '#define scale_mod -19 * 32 * 4\n')
            self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(
                u'tempo equ 1193182/256/targetFPS')), '#define tempo 1193182 / 256 / targetFPS\n')
            self.assertEqual(
                proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'sierp_color equ 2Ah')), '#define sierp_color 0x2A\n')
            self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                          parser_instance.action_data(u'tilt_plate_pattern equ 4+8+16')), '#define tilt_plate_pattern 4 +8 +16\n')

            # wrong
            # TODO
            #self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'l equ byte ptr aaa')), '#define l byte aaa\n')
            self.assertEqual(
                proc_instance.generate_c_cmd(cpp_instance, parser_instance.action_data(u'res = edx ; int')), '#undef res\n#define res edx\n')

    '''
    def test_generate_c_cmddd(self):
        p = Parser([])
        cpp_instance = cpp.Cpp(p)
        proc_instance = Proc('mainproc', False)
        cpp_instance.proc = proc_instance
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     edx, dword ptr [ebp+var_20]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));\n')
    '''

    def test_generate_c_cmd(self):
        p = Parser([])
        cpp_instance = cpp.Cpp(p)
        proc_instance = Proc('mainproc', False)
        cpp_instance.proc = proc_instance

        proc_instance.add_assignment(line_number=0, label='B', value=u'1')
        proc_instance.add_assignment(line_number=0, label='DDD', value=u'var1')
        proc_instance.add_assignment(line_number=0, label='argc', value=u'8')
        proc_instance.add_assignment(line_number=0, label='argv', value=u'0x0C')
        proc_instance.add_assignment(line_number=0, label='eax_0', value=u'eax')
        proc_instance.add_assignment(line_number=0, label='ecx_0', value=u'-0x2C')
        proc_instance.add_assignment(line_number=0, label='ecx_0_0', value=u'ecx')
        proc_instance.add_assignment(line_number=0, label='ecx_vals', value=u'-0x28')
        proc_instance.add_assignment(line_number=0, label='edi_0', value=u'edi')
        proc_instance.add_assignment(line_number=0, label='edx_0', value=u'-0x2C')
        proc_instance.add_assignment(line_number=0, label='edx_0_0', value=u'edx')
        proc_instance.add_assignment(line_number=0, label='eflags', value=u'eax')
        proc_instance.add_assignment(line_number=0, label='esi_0', value=u'ebx')
        proc_instance.add_assignment(line_number=0, label='esi_0', value=u'esi')
        proc_instance.add_assignment(line_number=0, label='flags', value=u'eax')
        proc_instance.add_assignment(line_number=0, label='i', value=u'eax')
        proc_instance.add_assignment(line_number=0, label='iflags', value=u'0x10')
        proc_instance.add_assignment(line_number=0, label='iflags', value=u'0x14')
        proc_instance.add_assignment(line_number=0, label='op0', value=u'0x0C')
        proc_instance.add_assignment(line_number=0, label='op0h', value=u'8')
        proc_instance.add_assignment(line_number=0, label='op1', value=u'eax')
        proc_instance.add_assignment(line_number=0, label='r', value=u'eax')
        proc_instance.add_assignment(line_number=0, label='res', value=u'eax')
        proc_instance.add_assignment(line_number=0, label='resh', value=u'ebx')
        proc_instance.add_assignment(line_number=0, label='resz', value=u'ecx')
        proc_instance.add_assignment(line_number=0, label='rh', value=u'edx')
        proc_instance.add_assignment(line_number=0, label='s0', value=u'0x0C')
        proc_instance.add_assignment(line_number=0, label='s0_0', value=u'ebx')
        proc_instance.add_assignment(line_number=0, label='s1', value=u'0x0C')
        proc_instance.add_assignment(line_number=0, label='s1_0', value=u'ecx')
        proc_instance.add_assignment(line_number=0, label='s2', value=u'8')
        proc_instance.add_assignment(line_number=0, label='table', value=u'-0x108')
        proc_instance.add_assignment(line_number=0, label='val', value=u'-0x1C')
        proc_instance.add_assignment(line_number=0, label='var_1C', value=u'-0x1C')
        proc_instance.add_assignment(line_number=0, label='var_20', value=u'-0x20')
        proc_instance.add_assignment(line_number=0, label='var_2C', value=u'-0x2C')
        proc_instance.add_assignment(line_number=0, label='var_4', value=u'-4')
        proc_instance.add_equ(line_number=0, label='CC', value=u'4')
        proc_instance.add_equ(line_number=0, label='T', value=u'4')
        proc_instance.add_equ(line_number=0, label='TEST2', value=u'-13')
        proc_instance.add_equ(line_number=0, label='dubsize', value=u'13')
        proc_instance.add_equ(line_number=0, label='tWO', value=u'2')
        proc_instance.add_equ(line_number=0, label='taille_moire', value=u'((((2030080+64000*26)/4096)+1)*4096)-1')
        proc_instance.add_equ(line_number=0, label='test1', value=u'(00+38*3)*320+1/2+33*(3-1)')
        proc_instance.add_equ(line_number=0, label='test3', value=u'1500')
        proc_instance.add_equ(line_number=0, label='testEqu', value=u'1')

        p.set_global("_data", op.var(1, 0, issegment=True))
        p.set_global("var1", op.var(size=1, offset=1, name="var1", segment="_data", elements=1))

        p.set_global('__dynamically_loaded', op.var(name=u'__dynamically_loaded', offset=1, segment=u'_bss', size=4))
        p.set_global('_a070295122642', op.var(name=u'_a070295122642', offset=1, segment=u'seg003', size=1))
        p.set_global('_a100assembler', op.var(elements=0, name=u'_a100Assembler', offset=1, segment=u'dseg', size=1))
        p.set_global('_a1024', op.var(name=u'_a1024', offset=1, segment=u'dseg', size=1))
        p.set_global('_a130295211558', op.var(name=u'_a130295211558', offset=1, segment=u'dseg', size=1))
        p.set_global('_a1thru0', op.var(elements=0, name=u'_a1Thru0', offset=1, segment=u'dseg', size=1))
        p.set_global('_a2284116_8', op.var(elements=0, name=u'_a2284116_8', offset=1, segment=u'dseg', size=1))
        p.set_global('_a24bitinterpolation', op.var(elements=0, name=u'_a24bitInterpolation', offset=1, segment=u'dseg', size=1))
        p.set_global('_a256', op.var(name=u'_a256', offset=1, segment=u'dseg', size=1))
        p.set_global('_a512', op.var(name=u'_a512', offset=1, segment=u'dseg', size=1))
        p.set_global('_a768', op.var(name=u'_a768', offset=1, segment=u'dseg', size=1))
        p.set_global('_a_ext', op.var(elements=0, name=u'_a_ext', offset=1, segment=u'dseg', size=1))
        p.set_global('_a_m_k', op.var(elements=0, name=u'_a_m_k', offset=1, segment=u'seg003', size=1))
        p.set_global('_a_mod_nst_669_s', op.var(elements=4, name=u'_a_mod_nst_669_s', offset=1, segment=u'dseg', size=1))
        p.set_global('_aadlibsoundcard', op.var(name=u'_aAdlibSoundcard', offset=1, segment=u'dseg', size=1))
        p.set_global('_aadlibsoundcard_0', op.var(name=u'_aAdlibSoundcard_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_aand', op.var(elements=0, name=u'_aAnd', offset=1, segment=u'dseg', size=1))
        p.set_global('_aandwritefollowingte', op.var(elements=0, name=u'_aAndWriteFollowingTe', offset=1, segment=u'dseg', size=1))
        p.set_global('_aarpeggio', op.var(name=u'_aArpeggio', offset=1, segment=u'dseg', size=1))
        p.set_global('_aat', op.var(name=u'_aAt', offset=1, segment=u'seg003', size=1))
        p.set_global('_aautotoneporta', op.var(name=u'_aAutoToneporta', offset=1, segment=u'dseg', size=1))
        p.set_global('_abackspace', op.var(elements=0, name=u'_aBackspace', offset=1, segment=u'dseg', size=1))
        p.set_global('_abaseport', op.var(name=u'_aBasePort', offset=1, segment=u'seg003', size=1))
        p.set_global('_abmod2stm', op.var(elements=0, name=u'_aBmod2stm', offset=1, segment=u'seg003', size=1))
        p.set_global('_acd81', op.var(elements=0, name=u'_aCd81', offset=1, segment=u'seg003', size=1))
        p.set_global('_ach', op.var(elements=0, name=u'_aCh', offset=1, segment=u'seg003', size=1))
        p.set_global('_achannels', op.var(elements=0, name=u'_aChannels', offset=1, segment=u'dseg', size=1))
        p.set_global('_achn', op.var(elements=0, name=u'_aChn', offset=1, segment=u'seg003', size=1))
        p.set_global('_aconfigfilenotf', op.var(elements=2, name=u'_aConfigFileNotF', offset=1, segment=u'seg001', size=1))
        p.set_global('_acopyrightc1994', op.var(name=u'_aCopyrightC1994', offset=1, segment=u'dseg', size=1))
        p.set_global('_acouldnotfindt_0', op.var(elements=0, name=u'_aCouldNotFindT_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_acouldnotfindthe', op.var(elements=3, name=u'_aCouldNotFindThe', offset=1, segment=u'seg003', size=1))
        p.set_global('_acovox', op.var(name=u'_aCovox', offset=1, segment=u'dseg', size=1))
        p.set_global('_acovox_0', op.var(name=u'_aCovox_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_acriticalerrort', op.var(elements=2, name=u'_aCriticalErrorT', offset=1, segment=u'dseg', size=1))
        p.set_global('_actrldel', op.var(elements=0, name=u'_aCtrlDel', offset=1, segment=u'dseg', size=1))
        p.set_global('_acurrentsoundcard', op.var(elements=3, name=u'_aCurrentSoundcard', offset=1, segment=u'dseg', size=1))
        p.set_global('_acurrenttrack', op.var(elements=0, name=u'_aCurrentTrack', offset=1, segment=u'dseg', size=1))
        p.set_global('_acursor', op.var(name=u'_aCursor', offset=1, segment=u'dseg', size=1))
        p.set_global('_acursor_0', op.var(name=u'_aCursor_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_acursor_1', op.var(elements=0, name=u'_aCursor_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincamplify', op.var(name=u'_aDecIncAmplify', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincamplify_0', op.var(elements=0, name=u'_aDecIncAmplify_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincvolume', op.var(name=u'_aDecIncVolume', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincvolume_0', op.var(elements=0, name=u'_aDecIncVolume_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_adel', op.var(elements=0, name=u'_aDel', offset=1, segment=u'dseg', size=1))
        p.set_global('_adeleteallfileswhich', op.var(elements=0, name=u'_aDeleteAllFilesWhich', offset=1, segment=u'dseg', size=1))
        p.set_global('_adeletemarkedfil', op.var(name=u'_aDeleteMarkedFil', offset=1, segment=u'dseg', size=1))
        p.set_global('_adeletingfile', op.var(elements=0, name=u'_aDeletingFile', offset=1, segment=u'dseg', size=1))
        p.set_global('_adevicenotiniti', op.var(name=u'_aDeviceNotIniti', offset=1, segment=u'seg003', size=1))
        p.set_global('_adisablebpmonof', op.var(name=u'_aDisableBpmOnOf', offset=1, segment=u'dseg', size=1))
        p.set_global('_adisablebpmonoff', op.var(elements=0, name=u'_aDisableBpmOnOff', offset=1, segment=u'dseg', size=1))
        p.set_global('_adma', op.var(elements=0, name=u'_aDma', offset=1, segment=u'seg003', size=1))
        p.set_global('_adosshelltypeex', op.var(name=u'_aDosShellTypeEx', offset=1, segment=u'dseg', size=1))
        p.set_global('_adosshelltypeexitt_0', op.var(elements=0, name=u'_aDosShellTypeExitT_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_adosshelltypeexittor', op.var(elements=0, name=u'_aDosShellTypeExitToR', offset=1, segment=u'dseg', size=1))
        p.set_global('_adramdma', op.var(elements=0, name=u'_aDramDma', offset=1, segment=u'seg003', size=1))
        p.set_global('_ae_command', op.var(name=u'_aE_command', offset=1, segment=u'dseg', size=1))
        p.set_global('_ae_g_', op.var(elements=0, name=u'_aE_g_', offset=1, segment=u'seg003', size=1))
        p.set_global('_aend', op.var(elements=0, name=u'_aEnd', offset=1, segment=u'dseg', size=1))
        p.set_global('_aend_0', op.var(elements=0, name=u'_aEnd_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_aendpattern', op.var(elements=0, name=u'_aEndPattern', offset=1, segment=u'dseg', size=1))
        p.set_global('_aenter', op.var(elements=0, name=u'_aEnter', offset=1, segment=u'dseg', size=1))
        p.set_global('_aerrorcouldnot_0', op.var(elements=3, name=u'_aErrorCouldNot_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_aerrorcouldnot_1', op.var(elements=3, name=u'_aErrorCouldNot_1', offset=1, segment=u'seg003', size=1))
        p.set_global('_aerrorcouldnotfi', op.var(elements=3, name=u'_aErrorCouldNotFi', offset=1, segment=u'seg003', size=1))
        p.set_global('_aerrorsoundcardn', op.var(elements=3, name=u'_aErrorSoundcardN', offset=1, segment=u'seg003', size=1))
        p.set_global('_aesc', op.var(elements=0, name=u'_aEsc', offset=1, segment=u'dseg', size=1))
        p.set_global('_aexit', op.var(elements=0, name=u'_aExit', offset=1, segment=u'dseg', size=1))
        p.set_global('_af1', op.var(elements=0, name=u'_aF1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af10', op.var(name=u'_aF10', offset=1, segment=u'dseg', size=1))
        p.set_global('_af10_0', op.var(elements=0, name=u'_aF10_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af10_1', op.var(elements=0, name=u'_aF10_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af11', op.var(name=u'_aF11', offset=1, segment=u'dseg', size=1))
        p.set_global('_af11_0', op.var(elements=0, name=u'_aF11_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af11_1', op.var(elements=0, name=u'_aF11_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af12', op.var(name=u'_aF12', offset=1, segment=u'dseg', size=1))
        p.set_global('_af12_0', op.var(elements=0, name=u'_aF12_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af12_1', op.var(elements=0, name=u'_aF12_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af2_0', op.var(elements=0, name=u'_aF2_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af3_0', op.var(elements=0, name=u'_aF3_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af4_0', op.var(elements=0, name=u'_aF4_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af5_0', op.var(elements=0, name=u'_aF5_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af8_0', op.var(elements=0, name=u'_aF8_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af8_1', op.var(elements=0, name=u'_aF8_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9', op.var(name=u'_aF9', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_0', op.var(name=u'_aF9_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_1', op.var(name=u'_aF9_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_2', op.var(elements=0, name=u'_aF9_2', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_3', op.var(elements=0, name=u'_aF9_3', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_4', op.var(elements=0, name=u'_aF9_4', offset=1, segment=u'dseg', size=1))
        p.set_global('_afar', op.var(elements=0, name=u'_aFar', offset=1, segment=u'seg003', size=1))
        p.set_global('_afarfinetempo', op.var(name=u'_aFarFineTempo', offset=1, segment=u'dseg', size=1))
        p.set_global('_afartempo', op.var(name=u'_aFarTempo', offset=1, segment=u'dseg', size=1))
        p.set_global('_afasterforward', op.var(elements=0, name=u'_aFastErForward', offset=1, segment=u'dseg', size=1))
        p.set_global('_afasterrewind', op.var(elements=0, name=u'_aFastErRewind', offset=1, segment=u'dseg', size=1))
        p.set_global('_afastfourierfrequenc', op.var(elements=0, name=u'_aFastfourierFrequenc', offset=1, segment=u'dseg', size=1))
        p.set_global('_afidonet', op.var(elements=0, name=u'_aFidonet', offset=1, segment=u'dseg', size=1))
        p.set_global('_afile', op.var(elements=0, name=u'_aFile', offset=1, segment=u'dseg', size=1))
        p.set_global('_afilename_0', op.var(elements=0, name=u'_aFilename_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_afilename_ext', op.var(elements=0, name=u'_aFilename_ext', offset=1, segment=u'dseg', size=1))
        p.set_global('_afileselectorhelp', op.var(elements=0, name=u'_aFileSelectorHelp', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinepanning', op.var(name=u'_aFinePanning', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineportadown', op.var(name=u'_aFinePortaDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineportaup', op.var(name=u'_aFinePortaUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineportvolsl', op.var(name=u'_aFinePortVolsl', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineslidedown', op.var(name=u'_aFineslideDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineslideup', op.var(name=u'_aFineslideUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinetoneporta', op.var(name=u'_aFineTonePorta', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevibrato', op.var(name=u'_aFineVibrato', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevibrvolsl', op.var(name=u'_aFineVibrVolsl', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevolslide', op.var(name=u'_aFineVolSlide', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevolumedown', op.var(name=u'_aFinevolumeDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevolumeup', op.var(name=u'_aFinevolumeUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_aflt4', op.var(elements=0, name=u'_aFlt4', offset=1, segment=u'seg003', size=1))
        p.set_global('_aflt8', op.var(elements=0, name=u'_aFlt8', offset=1, segment=u'seg003', size=1))
        p.set_global('_ageneralmidi', op.var(name=u'_aGeneralMidi', offset=1, segment=u'dseg', size=1))
        p.set_global('_ageneralmidi_0', op.var(name=u'_aGeneralMidi_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_aglissandoctrl', op.var(name=u'_aGlissandoCtrl', offset=1, segment=u'dseg', size=1))
        p.set_global('_agraphicalscopesonef', op.var(elements=0, name=u'_aGraphicalScopesOneF', offset=1, segment=u'dseg', size=1))
        p.set_global('_agravismaxcodec', op.var(name=u'_aGravisMaxCodec', offset=1, segment=u'dseg', size=1))
        p.set_global('_agravisultrasou', op.var(name=u'_aGravisUltrasou', offset=1, segment=u'dseg', size=1))
        p.set_global('_agravisultrasoun', op.var(name=u'_aGravisUltrasoun', offset=1, segment=u'seg003', size=1))
        p.set_global('_agray', op.var(name=u'_aGray', offset=1, segment=u'dseg', size=1))
        p.set_global('_agray_0', op.var(elements=0, name=u'_aGray_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_agsft', op.var(elements=0, name=u'_aGsft', offset=1, segment=u'seg003', size=1))
        p.set_global('_aguess___', op.var(elements=0, name=u'_aGuess___', offset=1, segment=u'dseg', size=1))
        p.set_global('_ahgf1irq', op.var(elements=0, name=u'_aHGf1Irq', offset=1, segment=u'seg003', size=1))
        p.set_global('_ahirq', op.var(elements=0, name=u'_aHIrq', offset=1, segment=u'seg003', size=1))
        p.set_global('_ahitbackspacetore', op.var(elements=0, name=u'_aHitBackspaceToRe', offset=1, segment=u'dseg', size=1))
        p.set_global('_ahome', op.var(elements=0, name=u'_aHome', offset=1, segment=u'dseg', size=1))
        p.set_global('_ahopeyoulikedusingth', op.var(elements=0, name=u'_aHopeYouLikedUsingTh', offset=1, segment=u'dseg', size=1))
        p.set_global('_aif', op.var(elements=0, name=u'_aIf', offset=1, segment=u'seg003', size=1))
        p.set_global('_aifyouhavebugreports', op.var(elements=0, name=u'_aIfYouHaveBugReports', offset=1, segment=u'dseg', size=1))
        p.set_global('_aignorebpmchanges', op.var(elements=0, name=u'_aIgnoreBpmChanges', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiamailinglists', op.var(elements=0, name=u'_aInertiaMailinglists', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiamodule', op.var(name=u'_aInertiaModule', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainertiamodule_0', op.var(name=u'_aInertiaModule_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainertiamodule_1', op.var(elements=0, name=u'_aInertiaModule_1', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainertiaplayer', op.var(elements=0, name=u'_aInertiaPlayer', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiaplayer_0', op.var(name=u'_aInertiaPlayer_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiaplayerv1_', op.var(elements=0, name=u'_aInertiaPlayerV1_', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiaplayerv1_22a', op.var(name=u'_aInertiaPlayerV1_22A', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiasample', op.var(elements=0, name=u'_aInertiaSample', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainternet', op.var(elements=0, name=u'_aInternet', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainvertloop', op.var(name=u'_aInvertLoop', offset=1, segment=u'dseg', size=1))
        p.set_global('_ajanfebmaraprmayj', op.var(elements=0, name=u'_aJanfebmaraprmayj', offset=1, segment=u'dseg', size=1))
        p.set_global('_ajn', op.var(elements=0, name=u'_aJn', offset=1, segment=u'seg003', size=1))
        p.set_global('_ajumptoloop', op.var(name=u'_aJumpToLoop', offset=1, segment=u'dseg', size=1))
        p.set_global('_akb', op.var(name=u'_aKb', offset=1, segment=u'dseg', size=1))
        p.set_global('_akhz', op.var(name=u'_aKhz', offset=1, segment=u'seg003', size=1))
        p.set_global('_alistfilenotfou', op.var(elements=2, name=u'_aListFileNotFou', offset=1, segment=u'dseg', size=1))
        p.set_global('_alistserverarboliver_s', op.var(elements=0, name=u'_aListserverarboliver_s', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloadingmodule', op.var(name=u'_aLoadingModule', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloopmodule', op.var(name=u'_aLoopModule', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloopmodule_0', op.var(elements=0, name=u'_aLoopModule_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloopmodulewhendone', op.var(elements=0, name=u'_aLoopModuleWhenDone', offset=1, segment=u'dseg', size=1))
        p.set_global('_alooppattern', op.var(elements=0, name=u'_aLoopPattern', offset=1, segment=u'dseg', size=1))
        p.set_global('_am_k_', op.var(elements=0, name=u'_aM_k_', offset=1, segment=u'seg003', size=1))
        p.set_global('_amainvolume', op.var(elements=0, name=u'_aMainVolume', offset=1, segment=u'dseg', size=1))
        p.set_global('_amarkedtodelete', op.var(name=u'_aMarkedToDelete', offset=1, segment=u'dseg', size=1))
        p.set_global('_amarkfiletodelete', op.var(elements=0, name=u'_aMarkFileToDelete', offset=1, segment=u'dseg', size=1))
        p.set_global('_amas_utrack_v', op.var(elements=0, name=u'_aMas_utrack_v', offset=1, segment=u'seg003', size=1))
        p.set_global('_amixedat', op.var(name=u'_aMixedAt', offset=1, segment=u'seg003', size=1))
        p.set_global('_amk', op.var(elements=0, name=u'_aMK', offset=1, segment=u'seg003', size=1))
        p.set_global('_amk_0', op.var(elements=0, name=u'_aMK_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_amoduleiscorrupt', op.var(name=u'_aModuleIsCorrupt', offset=1, segment=u'dseg', size=1))
        p.set_global('_amoduleloaderro', op.var(elements=2, name=u'_aModuleLoadErro', offset=1, segment=u'dseg', size=1))
        p.set_global('_amodulenotfound', op.var(elements=2, name=u'_aModuleNotFound', offset=1, segment=u'dseg', size=1))
        p.set_global('_amoduletype_0', op.var(elements=0, name=u'_aModuleType_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_amount_of_x', op.var(name=u'_amount_of_x', offset=1, segment=u'dseg', size=2))
        p.set_global('_amplification', op.var(name=u'_amplification', offset=1, segment=u'seg003', size=2))
        p.set_global('_amtm', op.var(elements=0, name=u'_aMtm', offset=1, segment=u'seg003', size=1))
        p.set_global('_amute', op.var(name=u'_aMute', offset=1, segment=u'dseg', size=1))
        p.set_global('_amutechannel', op.var(elements=0, name=u'_aMuteChannel', offset=1, segment=u'dseg', size=1))
        p.set_global('_aname', op.var(elements=0, name=u'_aName', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotecut', op.var(name=u'_aNoteCut', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotedelay', op.var(name=u'_aNoteDelay', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughdram_0', op.var(name=u'_aNotEnoughDram_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughdramon', op.var(elements=3, name=u'_aNotEnoughDramOn', offset=1, segment=u'seg003', size=1))
        p.set_global('_anotenoughmemo_0', op.var(name=u'_aNotEnoughMemo_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughmemor', op.var(elements=2, name=u'_aNotEnoughMemor', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughmemory', op.var(elements=3, name=u'_aNotEnoughMemory', offset=1, segment=u'seg003', size=1))
        p.set_global('_antsc', op.var(name=u'_aNtsc', offset=1, segment=u'dseg', size=1))
        p.set_global('_aocta', op.var(elements=0, name=u'_aOcta', offset=1, segment=u'seg003', size=1))
        p.set_global('_apal', op.var(name=u'_aPal', offset=1, segment=u'dseg', size=1))
        p.set_global('_apatternbreak', op.var(name=u'_aPatternBreak', offset=1, segment=u'dseg', size=1))
        p.set_global('_apatterndelay', op.var(name=u'_aPatternDelay', offset=1, segment=u'dseg', size=1))
        p.set_global('_apause', op.var(elements=0, name=u'_aPause', offset=1, segment=u'dseg', size=1))
        p.set_global('_apchonker', op.var(name=u'_aPcHonker', offset=1, segment=u'dseg', size=1))
        p.set_global('_apchonker_0', op.var(name=u'_aPcHonker_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_apgdn', op.var(elements=0, name=u'_aPgdn', offset=1, segment=u'dseg', size=1))
        p.set_global('_apgup', op.var(elements=0, name=u'_aPgup', offset=1, segment=u'dseg', size=1))
        p.set_global('_aplayer13029521', op.var(elements=0, name=u'_aPlayer13029521', offset=1, segment=u'dseg', size=1))
        p.set_global('_aplayinginstereofree', op.var(elements=0, name=u'_aPlayingInStereoFree', offset=1, segment=u'dseg', size=1))
        p.set_global('_aplaypausloop', op.var(elements=0, name=u'_aPlaypausloop', offset=1, segment=u'dseg', size=1))
        p.set_global('_aportamentodown', op.var(name=u'_aPortamentoDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_aportamentoup', op.var(name=u'_aPortamentoUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_aportvolslide', op.var(name=u'_aPortVolslide', offset=1, segment=u'dseg', size=1))
        p.set_global('_apositionjump', op.var(name=u'_aPositionJump', offset=1, segment=u'dseg', size=1))
        p.set_global('_apress', op.var(elements=0, name=u'_aPress', offset=1, segment=u'dseg', size=1))
        p.set_global('_apressanykeytoreturn', op.var(name=u'_aPressAnyKeyToReturn', offset=1, segment=u'dseg', size=1))
        p.set_global('_apressf1forhelpqu', op.var(elements=0, name=u'_aPressF1ForHelpQu', offset=1, segment=u'dseg', size=1))
        p.set_global('_aproaudiospectr', op.var(name=u'_aProAudioSpectr', offset=1, segment=u'dseg', size=1))
        p.set_global('_aproaudiospectrum', op.var(name=u'_aProAudioSpectrum', offset=1, segment=u'seg003', size=1))
        p.set_global('_aprotracker1_0_0', op.var(elements=0, name=u'_aProtracker1_0_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_aprotracker1_0c', op.var(name=u'_aProtracker1_0C', offset=1, segment=u'dseg', size=1))
        p.set_global('_aprotracker1_0compat', op.var(elements=0, name=u'_aProtracker1_0Compat', offset=1, segment=u'dseg', size=1))
        p.set_global('_apsm', op.var(elements=0, name=u'_aPsm', offset=1, segment=u'seg003', size=1))
        p.set_global('_aquitiplay', op.var(elements=0, name=u'_aQuitIplay', offset=1, segment=u'dseg', size=1))
        p.set_global('_arealtimevumeters', op.var(elements=0, name=u'_aRealtimeVuMeters', offset=1, segment=u'dseg', size=1))
        p.set_global('_aretriggernote', op.var(name=u'_aRetriggerNote', offset=1, segment=u'dseg', size=1))
        p.set_global('_aretrigvolume', op.var(name=u'_aRetrigVolume', offset=1, segment=u'dseg', size=1))
        p.set_global('_areturntoplaymodeonl', op.var(elements=0, name=u'_aReturnToPlaymodeOnl', offset=1, segment=u'dseg', size=1))
        p.set_global('_asamplename', op.var(elements=0, name=u'_aSamplename', offset=1, segment=u'dseg', size=1))
        p.set_global('_asamplesused', op.var(elements=0, name=u'_aSamplesUsed', offset=1, segment=u'dseg', size=1))
        p.set_global('_ascream', op.var(elements=0, name=u'_aScream', offset=1, segment=u'seg003', size=1))
        p.set_global('_ascrm', op.var(elements=0, name=u'_aScrm', offset=1, segment=u'seg003', size=1))
        p.set_global('_ascrolllock', op.var(elements=0, name=u'_aScrolllock', offset=1, segment=u'dseg', size=1))
        p.set_global('_asdanesarbmarvels_hack', op.var(elements=0, name=u'_aSdanesarbmarvels_hack', offset=1, segment=u'dseg', size=1))
        p.set_global('_asendemailto', op.var(elements=0, name=u'_aSendEmailTo', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetamplify', op.var(name=u'_aSetAmplify', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetfilter', op.var(name=u'_aSetFilter', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetfinetune', op.var(name=u'_aSetFinetune', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetlooppoint', op.var(name=u'_aSetLoopPoint', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetpanning', op.var(name=u'_aSetPanning', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetsampleofs', op.var(name=u'_aSetSampleOfs', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetspeed', op.var(name=u'_aSetSpeed', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetspeedbpm', op.var(name=u'_aSetSpeedBpm', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetstmspeed', op.var(name=u'_aSetStmSpeed', offset=1, segment=u'dseg', size=1))
        p.set_global('_ashell130295211', op.var(elements=0, name=u'_aShell130295211', offset=1, segment=u'dseg', size=1))
        p.set_global('_ashellingtooperating', op.var(elements=0, name=u'_aShellingToOperating', offset=1, segment=u'dseg', size=1))
        p.set_global('_asizevolmodec2t', op.var(name=u'_aSizeVolModeC2T', offset=1, segment=u'dseg', size=1))
        p.set_global('_asmprintf_tbl', op.var(name=u'_asmprintf_tbl', offset=1, segment=u'_text', size=2))
        p.set_global('_asomefunctionsof', op.var(elements=2, name=u'_aSomeFunctionsOf', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoundblaster', op.var(name=u'_aSoundBlaster', offset=1, segment=u'dseg', size=1))
        p.set_global('_asoundblaster16', op.var(name=u'_aSoundBlaster16', offset=1, segment=u'dseg', size=1))
        p.set_global('_asoundblaster1616', op.var(name=u'_aSoundBlaster1616', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoundblaster_0', op.var(name=u'_aSoundBlaster_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoundblasterpr', op.var(name=u'_aSoundBlasterPr', offset=1, segment=u'dseg', size=1))
        p.set_global('_asoundblasterpro', op.var(name=u'_aSoundBlasterPro', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoyouwantedsomehelp', op.var(elements=0, name=u'_aSoYouWantedSomeHelp', offset=1, segment=u'dseg', size=1))
        p.set_global('_aspeed', op.var(elements=0, name=u'_aSpeed', offset=1, segment=u'dseg', size=1))
        p.set_global('_astereoon1', op.var(name=u'_aStereoOn1', offset=1, segment=u'dseg', size=1))
        p.set_global('_astereoon1_0', op.var(name=u'_aStereoOn1_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_asubscribeinertialis', op.var(elements=0, name=u'_aSubscribeInertiaLis', offset=1, segment=u'dseg', size=1))
        p.set_global('_asubscribeinertiatal', op.var(name=u'_aSubscribeInertiaTal', offset=1, segment=u'dseg', size=1))
        p.set_global('_atab', op.var(elements=0, name=u'_aTab', offset=1, segment=u'dseg', size=1))
        p.set_global('_atab_0', op.var(elements=0, name=u'_aTab_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_atdz', op.var(elements=0, name=u'_aTdz', offset=1, segment=u'seg003', size=1))
        p.set_global('_athe', op.var(elements=0, name=u'_aThe', offset=1, segment=u'dseg', size=1))
        p.set_global('_athishelpscreenbutig', op.var(elements=0, name=u'_aThisHelpScreenButIG', offset=1, segment=u'dseg', size=1))
        p.set_global('_athisprogramrequ', op.var(elements=3, name=u'_aThisProgramRequ', offset=1, segment=u'seg003', size=1))
        p.set_global('_atoconnecttobinaryin', op.var(elements=0, name=u'_aToConnectToBinaryIn', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoconnecttodiscussi', op.var(elements=0, name=u'_aToConnectToDiscussi', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoggle24bitint', op.var(name=u'_aToggle24bitInt', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoggle24bitinterpol', op.var(elements=0, name=u'_aToggle24bitInterpol', offset=1, segment=u'dseg', size=1))
        p.set_global('_atogglepalntsc', op.var(name=u'_aTogglePalNtsc', offset=1, segment=u'dseg', size=1))
        p.set_global('_atogglequickreadingo', op.var(elements=0, name=u'_aToggleQuickreadingO', offset=1, segment=u'dseg', size=1))
        p.set_global('_atomovethehighlighte', op.var(elements=0, name=u'_aToMoveTheHighlighte', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoneportamento', op.var(name=u'_aTonePortamento', offset=1, segment=u'dseg', size=1))
        p.set_global('_atop_title', op.var(name=u'_atop_title', offset=1, segment=u'dseg', size=2))
        p.set_global('_atoplaythemoduleorse', op.var(elements=0, name=u'_aToPlayTheModuleOrSe', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoreturnto', op.var(elements=0, name=u'_aToReturnTo', offset=1, segment=u'dseg', size=1))
        p.set_global('_atosubscribetooneorb', op.var(elements=0, name=u'_aToSubscribeToOneOrB', offset=1, segment=u'dseg', size=1))
        p.set_global('_atrackposition', op.var(elements=0, name=u'_aTrackPosition', offset=1, segment=u'dseg', size=1))
        p.set_global('_atremolo', op.var(name=u'_aTremolo', offset=1, segment=u'dseg', size=1))
        p.set_global('_atremolocontrol', op.var(name=u'_aTremoloControl', offset=1, segment=u'dseg', size=1))
        p.set_global('_atremor', op.var(name=u'_aTremor', offset=1, segment=u'dseg', size=1))
        p.set_global('_atriller', op.var(name=u'_aTriller', offset=1, segment=u'dseg', size=1))
        p.set_global('_atype', op.var(elements=0, name=u'_aType', offset=1, segment=u'dseg', size=1))
        p.set_global('_aunused256', op.var(elements=0, name=u'_aUnused256', offset=1, segment=u'dseg', size=1))
        p.set_global('_ause', op.var(elements=0, name=u'_aUse', offset=1, segment=u'dseg', size=1))
        p.set_global('_avibrato', op.var(name=u'_aVibrato', offset=1, segment=u'dseg', size=1))
        p.set_global('_avibratocontrol', op.var(name=u'_aVibratoControl', offset=1, segment=u'dseg', size=1))
        p.set_global('_avibrvolslide', op.var(name=u'_aVibrVolslide', offset=1, segment=u'dseg', size=1))
        p.set_global('_aviewsamplenamestwic', op.var(elements=0, name=u'_aViewSampleNamesTwic', offset=1, segment=u'dseg', size=1))
        p.set_global('_avolumeamplify', op.var(elements=0, name=u'_aVolumeAmplify', offset=1, segment=u'dseg', size=1))
        p.set_global('_avolumechange', op.var(name=u'_aVolumeChange', offset=1, segment=u'dseg', size=1))
        p.set_global('_avolumesliding', op.var(name=u'_aVolumeSliding', offset=1, segment=u'dseg', size=1))
        p.set_global('_awhichiswrittenin', op.var(elements=0, name=u'_aWhichIsWrittenIn', offset=1, segment=u'dseg', size=1))
        p.set_global('_awindowssoundsy', op.var(name=u'_aWindowsSoundSy', offset=1, segment=u'dseg', size=1))
        p.set_global('_awindowssoundsyst', op.var(name=u'_aWindowsSoundSyst', offset=1, segment=u'seg003', size=1))
        p.set_global('_axpressf4formor', op.var(elements=0, name=u'_aXpressF4ForMor', offset=1, segment=u'dseg', size=1))
        p.set_global('_base_port2', op.var(name=u'_base_port2', offset=1, segment=u'seg003', size=2))
        p.set_global('_bit_mode', op.var(name=u'_bit_mode', offset=1, segment=u'seg003', size=1))
        p.set_global('_bottom_menu', op.var(name=u'_bottom_menu', offset=1, segment=u'dseg', size=2))
        p.set_global('_bss', op.var(name=u'_bss', offset=1, issegment=True, segment='', size=1))
        p.set_global('_buffer_1', op.var(elements=512, name=u'_buffer_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_1db6c', op.var(elements=128, name=u'_buffer_1DB6C', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_1dbec', op.var(name=u'_buffer_1DBEC', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_1dc6c', op.var(name=u'_buffer_1DC6C', offset=1, segment=u'dseg', size=4))
        p.set_global('_buffer_1seg', op.var(name=u'_buffer_1seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_buffer_2', op.var(elements=10240, name=u'_buffer_2', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_2seg', op.var(name=u'_buffer_2seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_byte_11c29', op.var(name=u'_byte_11C29', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_13c54', op.var(elements=14, name=u'_byte_13C54', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f70', op.var(name=u'_byte_14F70', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f71', op.var(name=u'_byte_14F71', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f72', op.var(name=u'_byte_14F72', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f73', op.var(name=u'_byte_14F73', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_158b4', op.var(name=u'_byte_158B4', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_158e3', op.var(name=u'_byte_158E3', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15912', op.var(name=u'_byte_15912', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15941', op.var(name=u'_byte_15941', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15970', op.var(name=u'_byte_15970', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1599f', op.var(name=u'_byte_1599F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_159ce', op.var(name=u'_byte_159CE', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_159fd', op.var(name=u'_byte_159FD', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15a2c', op.var(name=u'_byte_15A2C', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15a5b', op.var(name=u'_byte_15A5B', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15a8a', op.var(name=u'_byte_15A8A', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15ab9', op.var(name=u'_byte_15AB9', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15ae8', op.var(name=u'_byte_15AE8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15b17', op.var(name=u'_byte_15B17', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15b46', op.var(name=u'_byte_15B46', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15b81', op.var(name=u'_byte_15B81', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15bad', op.var(name=u'_byte_15BAD', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15bda', op.var(name=u'_byte_15BDA', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c07', op.var(name=u'_byte_15C07', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c34', op.var(name=u'_byte_15C34', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c61', op.var(name=u'_byte_15C61', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c8e', op.var(name=u'_byte_15C8E', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15cbb', op.var(name=u'_byte_15CBB', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15ce8', op.var(name=u'_byte_15CE8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d15', op.var(name=u'_byte_15D15', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d42', op.var(name=u'_byte_15D42', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d6f', op.var(name=u'_byte_15D6F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d9c', op.var(name=u'_byte_15D9C', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15dc9', op.var(name=u'_byte_15DC9', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15df6', op.var(name=u'_byte_15DF6', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15e23', op.var(name=u'_byte_15E23', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16379', op.var(name=u'_byte_16379', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_163a8', op.var(name=u'_byte_163A8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_163d7', op.var(name=u'_byte_163D7', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16406', op.var(name=u'_byte_16406', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16435', op.var(name=u'_byte_16435', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16493', op.var(name=u'_byte_16493', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_164c2', op.var(name=u'_byte_164C2', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_164f1', op.var(name=u'_byte_164F1', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16520', op.var(name=u'_byte_16520', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1654f', op.var(name=u'_byte_1654F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1657e', op.var(name=u'_byte_1657E', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_165dc', op.var(name=u'_byte_165DC', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1660b', op.var(name=u'_byte_1660B', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16646', op.var(name=u'_byte_16646', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16672', op.var(name=u'_byte_16672', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1669f', op.var(name=u'_byte_1669F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_166cc', op.var(name=u'_byte_166CC', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_166f9', op.var(name=u'_byte_166F9', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16726', op.var(name=u'_byte_16726', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16753', op.var(name=u'_byte_16753', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16780', op.var(name=u'_byte_16780', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_167ad', op.var(name=u'_byte_167AD', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_167da', op.var(name=u'_byte_167DA', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16807', op.var(name=u'_byte_16807', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16834', op.var(name=u'_byte_16834', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16861', op.var(name=u'_byte_16861', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1688e', op.var(name=u'_byte_1688E', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_168bb', op.var(name=u'_byte_168BB', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_168e8', op.var(name=u'_byte_168E8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1c1b8', op.var(name=u'_byte_1C1B8', offset=1, segment=u'seg001', size=1))
        p.set_global('_byte_1cceb', op.var(name=u'_byte_1CCEB', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1d616', op.var(name=u'_byte_1D616', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1d66b', op.var(name=u'_byte_1D66B', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dc0a', op.var(elements=98, name=u'_byte_1DC0A', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dc7c', op.var(elements=112, name=u'_byte_1DC7C', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dcf7', op.var(name=u'_byte_1DCF7', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dcf8', op.var(name=u'_byte_1DCF8', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dcfb', op.var(name=u'_byte_1DCFB', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dd3f', op.var(elements=69, name=u'_byte_1DD3F', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de70', op.var(name=u'_byte_1DE70', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de71', op.var(name=u'_byte_1DE71', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de72', op.var(name=u'_byte_1DE72', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de73', op.var(name=u'_byte_1DE73', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de74', op.var(name=u'_byte_1DE74', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de75', op.var(name=u'_byte_1DE75', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de76', op.var(name=u'_byte_1DE76', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de78', op.var(name=u'_byte_1DE78', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de79', op.var(name=u'_byte_1DE79', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7a', op.var(name=u'_byte_1DE7A', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7b', op.var(name=u'_byte_1DE7B', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7c', op.var(name=u'_byte_1DE7C', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7d', op.var(name=u'_byte_1DE7D', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7e', op.var(name=u'_byte_1DE7E', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7f', op.var(name=u'_byte_1DE7F', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de81', op.var(name=u'_byte_1DE81', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de82', op.var(name=u'_byte_1DE82', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de83', op.var(name=u'_byte_1DE83', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de84', op.var(name=u'_byte_1DE84', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de85', op.var(name=u'_byte_1DE85', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de86', op.var(name=u'_byte_1DE86', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de90', op.var(name=u'_byte_1DE90', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1e0e0', op.var(elements=1979, name=u'_byte_1E0E0', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1e89b', op.var(elements=7748, name=u'_byte_1E89B', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_22ee4', op.var(elements=4096, name=u'_byte_22EE4', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_23ee5', op.var(elements=99, name=u'_byte_23EE5', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_23f48', op.var(elements=300, name=u'_byte_23F48', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_24075', op.var(elements=99, name=u'_byte_24075', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_240d8', op.var(elements=300, name=u'_byte_240D8', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_24204', op.var(elements=512, name=u'_byte_24204', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_24616', op.var(name=u'_byte_24616', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24617', op.var(name=u'_byte_24617', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24618', op.var(name=u'_byte_24618', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24619', op.var(name=u'_byte_24619', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461a', op.var(name=u'_byte_2461A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461b', op.var(name=u'_byte_2461B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461c', op.var(name=u'_byte_2461C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461d', op.var(name=u'_byte_2461D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461e', op.var(name=u'_byte_2461E', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461f', op.var(name=u'_byte_2461F', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24620', op.var(name=u'_byte_24620', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24621', op.var(name=u'_byte_24621', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24625', op.var(name=u'_byte_24625', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24628', op.var(name=u'_byte_24628', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24629', op.var(name=u'_byte_24629', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2462b', op.var(name=u'_byte_2462B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2462d', op.var(name=u'_byte_2462D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2463b', op.var(name=u'_byte_2463B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24645', op.var(name=u'_byte_24645', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2464a', op.var(name=u'_byte_2464A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2464b', op.var(name=u'_byte_2464B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24650', op.var(name=u'_byte_24650', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24651', op.var(name=u'_byte_24651', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24664', op.var(name=u'_byte_24664', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24665', op.var(name=u'_byte_24665', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24666', op.var(name=u'_byte_24666', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24667', op.var(name=u'_byte_24667', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24668', op.var(name=u'_byte_24668', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24669', op.var(name=u'_byte_24669', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466a', op.var(name=u'_byte_2466A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466b', op.var(name=u'_byte_2466B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466c', op.var(name=u'_byte_2466C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466d', op.var(name=u'_byte_2466D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466e', op.var(name=u'_byte_2466E', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24671', op.var(name=u'_byte_24671', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24673', op.var(name=u'_byte_24673', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24674', op.var(name=u'_byte_24674', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24675', op.var(name=u'_byte_24675', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24676', op.var(name=u'_byte_24676', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24677', op.var(name=u'_byte_24677', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24678', op.var(name=u'_byte_24678', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24679', op.var(name=u'_byte_24679', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467a', op.var(name=u'_byte_2467A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467b', op.var(name=u'_byte_2467B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467c', op.var(name=u'_byte_2467C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467d', op.var(name=u'_byte_2467D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467e', op.var(name=u'_byte_2467E', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24682', op.var(name=u'_byte_24682', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24683', op.var(name=u'_byte_24683', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2469b', op.var(name=u'_byte_2469B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2469c', op.var(name=u'_byte_2469C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246a5', op.var(name=u'_byte_246A5', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246a8', op.var(name=u'_byte_246A8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246d8', op.var(name=u'_byte_246D8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246d9', op.var(name=u'_byte_246D9', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246dc', op.var(name=u'_byte_246DC', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257da', op.var(name=u'_byte_257DA', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257db', op.var(name=u'_byte_257DB', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257dc', op.var(name=u'_byte_257DC', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257f2', op.var(name=u'_byte_257F2', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257f3', op.var(name=u'_byte_257F3', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2588b', op.var(name=u'_byte_2588B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2588c', op.var(name=u'_byte_2588C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2588d', op.var(name=u'_byte_2588D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_27fe8', op.var(elements=255, name=u'_byte_27FE8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_280e7', op.var(name=u'_byte_280E7', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_280e8', op.var(elements=256, name=u'_byte_280E8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_281e8', op.var(elements=256, name=u'_byte_281E8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_282e8', op.var(elements=32, name=u'_byte_282E8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30522', op.var(name=u'_byte_30522', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30523', op.var(name=u'_byte_30523', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30526', op.var(name=u'_byte_30526', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30529', op.var(name=u'_byte_30529', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30537', op.var(name=u'_byte_30537', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30539', op.var(name=u'_byte_30539', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3053a', op.var(name=u'_byte_3053A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3053b', op.var(name=u'_byte_3053B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30548', op.var(name=u'_byte_30548', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3054b', op.var(name=u'_byte_3054B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3054c', op.var(name=u'_byte_3054C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30550', op.var(name=u'_byte_30550', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30576', op.var(name=u'_byte_30576', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30577', op.var(name=u'_byte_30577', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30579', op.var(elements=33, name=u'_byte_30579', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3059a', op.var(elements=95, name=u'_byte_3059A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_305f9', op.var(elements=64, name=u'_byte_305F9', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30639', op.var(name=u'_byte_30639', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3063a', op.var(name=u'_byte_3063A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30641', op.var(elements=40, name=u'_byte_30641', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30669', op.var(name=u'_byte_30669', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3066a', op.var(name=u'_byte_3066A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3066b', op.var(elements=14, name=u'_byte_3066B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30679', op.var(elements=101, name=u'_byte_30679', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_306de', op.var(elements=480, name=u'_byte_306DE', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_308be', op.var(elements=74, name=u'_byte_308BE', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30908', op.var(elements=56, name=u'_byte_30908', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30940', op.var(name=u'_byte_30940', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30943', op.var(name=u'_byte_30943', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3150a', op.var(name=u'_byte_3150A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3150c', op.var(elements=2044, name=u'_byte_3150C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_31d08', op.var(elements=6144, name=u'_byte_31D08', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_33508', op.var(elements=4104, name=u'_byte_33508', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_34510', op.var(elements=4096, name=u'_byte_34510', offset=1, segment=u'seg004', size=1))
        p.set_global('_cfg_buffer', op.var(name=u'_cfg_buffer', offset=1, segment=u'dseg', size=1))
        p.set_global('_channels_25908', op.var(elements=2560, name=u'_channels_25908', offset=1, segment=u'seg003', size=1))
        p.set_global('_chrin', op.var(name=u'_chrin', offset=1, segment=u'seg003', size=4))
        p.set_global('_config_word', op.var(name=u'_config_word', offset=1, segment=u'seg003', size=2))
        p.set_global('_configword', op.var(name=u'_configword', offset=1, segment=u'dseg', size=2))
        p.set_global('_covox_txt', op.var(name=u'_covox_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_critsectpoint_off', op.var(name=u'_critsectpoint_off', offset=1, segment=u'dseg', size=2))
        p.set_global('_critsectpoint_seg', op.var(name=u'_critsectpoint_seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_current_patterns', op.var(name=u'_current_patterns', offset=1, segment=u'dseg', size=2))
        p.set_global('_dma_buf_pointer', op.var(name=u'_dma_buf_pointer', offset=1, segment=u'seg003', size=4))
        p.set_global('_dma_channel', op.var(name=u'_dma_channel', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_channel2', op.var(name=u'_dma_channel2', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_channel_0', op.var(name=u'_dma_channel_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_channel_1', op.var(name=u'_dma_channel_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_dma_chn_mask', op.var(name=u'_dma_chn_mask', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_mode', op.var(name=u'_dma_mode', offset=1, segment=u'seg003', size=1))
        p.set_global('_dword_1dcec', op.var(name=u'_dword_1DCEC', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_1de2c', op.var(name=u'_dword_1DE2C', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_1de88', op.var(name=u'_dword_1DE88', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244c8', op.var(name=u'_dword_244C8', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244d4', op.var(name=u'_dword_244D4', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244e4', op.var(name=u'_dword_244E4', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244e8', op.var(name=u'_dword_244E8', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244ec', op.var(name=u'_dword_244EC', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244f0', op.var(name=u'_dword_244F0', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244f4', op.var(name=u'_dword_244F4', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244f8', op.var(name=u'_dword_244F8', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244fc', op.var(name=u'_dword_244FC', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_24500', op.var(name=u'_dword_24500', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_24504', op.var(name=u'_dword_24504', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_24508', op.var(name=u'_dword_24508', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_245bc', op.var(name=u'_dword_245BC', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_245c0', op.var(name=u'_dword_245C0', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_245c4', op.var(name=u'_dword_245C4', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_2463c', op.var(name=u'_dword_2463C', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_24640', op.var(name=u'_dword_24640', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_24684', op.var(name=u'_dword_24684', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_24694', op.var(name=u'_dword_24694', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_257a0', op.var(name=u'_dword_257A0', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_25886', op.var(name=u'_dword_25886', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_25892', op.var(name=u'_dword_25892', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_25896', op.var(name=u'_dword_25896', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_27bc8', op.var(name=u'_dword_27BC8', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_27bcc', op.var(name=u'_dword_27BCC', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_30518', op.var(name=u'_dword_30518', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_3055a', op.var(name=u'_dword_3055A', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_30566', op.var(name=u'_dword_30566', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_3063d', op.var(name=u'_dword_3063D', offset=1, segment=u'seg003', size=4))
        p.set_global('_effoff_18f60', op.var(name=u'_effoff_18F60', offset=1, segment=u'_text', size=2))
        p.set_global('_effoff_18fa2', op.var(name=u'_effoff_18FA2', offset=1, segment=u'_text', size=2))
        p.set_global('_effoff_18fe4', op.var(name=u'_effoff_18FE4', offset=1, segment=u'_text', size=2))
        p.set_global('_effoff_19026', op.var(name=u'_effoff_19026', offset=1, segment=u'_text', size=2))
        p.set_global('_eh_frame', op.var(name=u'_eh_frame', offset=1, issegment=True, segment='', size=1))
        p.set_global('_emodulenotfound', op.var(elements=3, name=u'_eModuleNotFound', offset=1, segment=u'seg003', size=1))
        p.set_global('_ems_enabled', op.var(name=u'_ems_enabled', offset=1, segment=u'seg003', size=1))
        p.set_global('_ems_handle', op.var(name=u'_ems_handle', offset=1, segment=u'seg003', size=2))
        p.set_global('_ems_log_pagenum', op.var(name=u'_ems_log_pagenum', offset=1, segment=u'seg003', size=2))
        p.set_global('_ems_pageframe', op.var(name=u'_ems_pageframe', offset=1, segment=u'seg003', size=2))
        p.set_global('_esseg_atstart', op.var(name=u'_esseg_atstart', offset=1, segment=u'dseg', size=2))
        p.set_global('_f1_help_text', op.var(name=u'_f1_help_text', offset=1, segment=u'dseg', size=2))
        p.set_global('_fhandle_1de68', op.var(name=u'_fhandle_1DE68', offset=1, segment=u'dseg', size=2))
        p.set_global('_fhandle_module', op.var(name=u'_fhandle_module', offset=1, segment=u'seg003', size=2))
        p.set_global('_flag_playsetttings', op.var(name=u'_flag_playsetttings', offset=1, segment=u'seg003', size=1))
        p.set_global('_flg_play_settings', op.var(name=u'_flg_play_settings', offset=1, segment=u'dseg', size=1))
        p.set_global('_fmode', op.var(name=u'_fmode', offset=1, segment=u'_bss', size=4))
        p.set_global('_frameborder', op.var(name=u'_frameborder', offset=1, segment=u'dseg', size=1))
        p.set_global('_freq1', op.var(name=u'_freq1', offset=1, segment=u'seg003', size=2))
        p.set_global('_freq2', op.var(name=u'_freq2', offset=1, segment=u'seg003', size=2))
        p.set_global('_freq_1dcf6', op.var(name=u'_freq_1DCF6', offset=1, segment=u'dseg', size=1))
        p.set_global('_freq_245de', op.var(name=u'_freq_245DE', offset=1, segment=u'seg003', size=2))
        p.set_global('_freq_246d7', op.var(name=u'_freq_246D7', offset=1, segment=u'seg003', size=1))
        p.set_global('_gravis_port', op.var(name=u'_gravis_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_gravis_txt', op.var(name=u'_gravis_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_hopeyoulike', op.var(name=u'_hopeyoulike', offset=1, segment=u'dseg', size=2))
        p.set_global('_int1avect', op.var(name=u'_int1Avect', offset=1, segment=u'seg001', size=4))
        p.set_global('_int8addr', op.var(name=u'_int8addr', offset=1, segment=u'_text', size=4))
        p.set_global('_interrupt_mask', op.var(name=u'_interrupt_mask', offset=1, segment=u'seg003', size=2))
        p.set_global('_intvectoffset', op.var(name=u'_intvectoffset', offset=1, segment=u'seg003', size=2))
        p.set_global('_irq_number', op.var(name=u'_irq_number', offset=1, segment=u'seg003', size=1))
        p.set_global('_irq_number2', op.var(name=u'_irq_number2', offset=1, segment=u'seg003', size=1))
        p.set_global('_irq_number_0', op.var(name=u'_irq_number_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_irq_number_1', op.var(name=u'_irq_number_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_is_stereo', op.var(name=u'_is_stereo', offset=1, segment=u'seg003', size=1))
        p.set_global('_key_code', op.var(name=u'_key_code', offset=1, segment=u'seg001', size=2))
        p.set_global('_keyb_switches', op.var(name=u'_keyb_switches', offset=1, segment=u'seg001', size=2))
        p.set_global('_memflg_2469a', op.var(name=u'_memflg_2469A', offset=1, segment=u'seg003', size=1))
        p.set_global('_messagepointer', op.var(name=u'_messagepointer', offset=1, segment=u'dseg', size=4))
        p.set_global('_midi_txt', op.var(name=u'_midi_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_mod_channels_number', op.var(name=u'_mod_channels_number', offset=1, segment=u'seg003', size=2))
        p.set_global('_module_type_text', op.var(name=u'_module_type_text', offset=1, segment=u'seg003', size=4))
        p.set_global('_module_type_txt', op.var(elements=0, name=u'_module_type_txt', offset=1, segment=u'dseg', size=1))
        p.set_global('_moduleflag_246d0', op.var(name=u'_moduleflag_246D0', offset=1, segment=u'seg003', size=2))
        p.set_global('_mouse_exist_flag', op.var(name=u'_mouse_exist_flag', offset=1, segment=u'dseg', size=1))
        p.set_global('_mouse_visible', op.var(elements=10, name=u'_mouse_visible', offset=1, segment=u'dseg', size=1))
        p.set_global('_mousecolumn', op.var(name=u'_mousecolumn', offset=1, segment=u'dseg', size=2))
        p.set_global('_mouserow', op.var(name=u'_mouserow', offset=1, segment=u'dseg', size=2))
        p.set_global('_msg', op.var(elements=2, name=u'_msg', offset=1, segment=u'_data', size=1))
        #p.set_global('_msg', op.var(name=u'_msg', offset=1, segment=u'dseg', size=1))
        p.set_global('_multip_244cc', op.var(name=u'_multip_244CC', offset=1, segment=u'dseg', size=4))
        p.set_global('_multip_244d0', op.var(name=u'_multip_244D0', offset=1, segment=u'dseg', size=4))
        p.set_global('_my_in', op.var(name=u'_my_in', offset=1, segment=u'seg003', size=1))
        p.set_global('_my_seg_index', op.var(name=u'_my_seg_index', offset=1, segment=u'seg003', size=2))
        p.set_global('_my_size', op.var(name=u'_my_size', offset=1, segment=u'seg003', size=2))
        p.set_global('_myendl', op.var(elements=2, name=u'_myendl', offset=1, segment=u'dseg', size=1))
        p.set_global('_myin', op.var(name=u'_myin', offset=1, segment=u'seg003', size=4))
        p.set_global('_myin_0', op.var(name=u'_myin_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_myout', op.var(elements=6336, name=u'_myout', offset=1, segment=u'seg003', size=1))
        p.set_global('_myseg_24698', op.var(name=u'_myseg_24698', offset=1, segment=u'seg003', size=2))
        p.set_global('_myseg_size', op.var(elements=256, name=u'_myseg_size', offset=1, segment=u'seg003', size=2))
        p.set_global('_mystr', op.var(elements=66, name=u'_mystr', offset=1, segment=u'dseg', size=1))
        p.set_global('_notes', op.var(elements=0, name=u'_notes', offset=1, segment=u'dseg', size=1))
        p.set_global('_offs_draw', op.var(name=u'_offs_draw', offset=1, segment=u'dseg', size=2))
        p.set_global('_offs_draw2', op.var(name=u'_offs_draw2', offset=1, segment=u'dseg', size=2))
        p.set_global('_offs_interpol', op.var(name=u'_offs_interpol', offset=1, segment=u'_text', size=2))
        p.set_global('_offs_interpol2', op.var(name=u'_offs_interpol2', offset=1, segment=u'_text', size=2))
        p.set_global('_offs_noninterp', op.var(name=u'_offs_noninterp', offset=1, segment=u'_text', size=2))
        p.set_global('_offs_noninterp2', op.var(name=u'_offs_noninterp2', offset=1, segment=u'_text', size=2))
        p.set_global('_oint24_1c1ac', op.var(name=u'_oint24_1C1AC', offset=1, segment=u'seg001', size=4))
        p.set_global('_oint2f_1c1b4', op.var(name=u'_oint2f_1C1B4', offset=1, segment=u'seg001', size=4))
        p.set_global('_oint8off_1de14', op.var(name=u'_oint8off_1DE14', offset=1, segment=u'dseg', size=2))
        p.set_global('_oint8seg_1de16', op.var(name=u'_oint8seg_1DE16', offset=1, segment=u'dseg', size=2))
        p.set_global('_oint9_1c1a4', op.var(name=u'_oint9_1C1A4', offset=1, segment=u'seg001', size=4))
        p.set_global('_old_intprocoffset', op.var(name=u'_old_intprocoffset', offset=1, segment=u'seg003', size=2))
        p.set_global('_old_intprocseg', op.var(name=u'_old_intprocseg', offset=1, segment=u'seg003', size=2))
        p.set_global('_outp_freq', op.var(name=u'_outp_freq', offset=1, segment=u'dseg', size=2))
        p.set_global('_palette_24404', op.var(name=u'_palette_24404', offset=1, segment=u'dseg', size=1))
        p.set_global('_pc_timer_tbl', op.var(elements=13, name=u'_pc_timer_tbl', offset=1, segment=u'_text', size=1))
        p.set_global('_pcspeaker_txt', op.var(name=u'_pcspeaker_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_play_state', op.var(name=u'_play_state', offset=1, segment=u'seg003', size=1))
        p.set_global('_pointer_245b4', op.var(name=u'_pointer_245B4', offset=1, segment=u'seg003', size=4))
        p.set_global('_prev_scan_code', op.var(name=u'_prev_scan_code', offset=1, segment=u'seg001', size=1))
        p.set_global('_rdata', op.var(name=u'_rdata', offset=1, issegment=True, segment='', size=1))
        p.set_global('_s3mtable_108d6', op.var(elements=13, name=u'_s3mtable_108D6', offset=1, segment=u'_text', size=1))
        p.set_global('_s3mtable_108f0', op.var(elements=15, name=u'_s3mtable_108F0', offset=1, segment=u'_text', size=1))
        p.set_global('_samples_outoffs_24600', op.var(name=u'_samples_outoffs_24600', offset=1, segment=u'seg003', size=2))
        p.set_global('_savesp_245d0', op.var(name=u'_savesp_245D0', offset=1, segment=u'seg003', size=2))
        p.set_global('_sb16_txt', op.var(name=u'_sb16_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_sb_base_port', op.var(name=u'_sb_base_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_sb_int_counter', op.var(name=u'_sb_int_counter', offset=1, segment=u'seg003', size=1))
        p.set_global('_sb_irq_number', op.var(name=u'_sb_irq_number', offset=1, segment=u'seg003', size=1))
        p.set_global('_sb_timeconst', op.var(name=u'_sb_timeconst', offset=1, segment=u'seg003', size=1))
        p.set_global('_segfsbx_1de28', op.var(name=u'_segfsbx_1DE28', offset=1, segment=u'dseg', size=4))
        p.set_global('_segs_table', op.var(elements=256, name=u'_segs_table', offset=1, segment=u'seg003', size=2))
        p.set_global('_siplay_cfg', op.var(name=u'_sIplay_cfg', offset=1, segment=u'dseg', size=1))
        p.set_global('_slider', op.var(elements=0, name=u'_slider', offset=1, segment=u'dseg', size=1))
        p.set_global('_snd_base_port', op.var(name=u'_snd_base_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_snd_base_port_0', op.var(name=u'_snd_base_port_0', offset=1, segment=u'dseg', size=2))
        p.set_global('_snd_card_type', op.var(name=u'_snd_card_type', offset=1, segment=u'dseg', size=1))
        p.set_global('_snd_cards_offs', op.var(name=u'_snd_cards_offs', offset=1, segment=u'seg003', size=2))
        p.set_global('_snd_init', op.var(name=u'_snd_init', offset=1, segment=u'seg003', size=1))
        p.set_global('_snd_set_flag', op.var(name=u'_snd_set_flag', offset=1, segment=u'seg003', size=1))
        p.set_global('_sndcard_type', op.var(name=u'_sndcard_type', offset=1, segment=u'seg003', size=1))
        p.set_global('_sndflags_24622', op.var(name=u'_sndflags_24622', offset=1, segment=u'seg003', size=1))
        p.set_global('_sound_port', op.var(name=u'_sound_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_swapdata_off', op.var(name=u'_swapdata_off', offset=1, segment=u'dseg', size=2))
        p.set_global('_swapdata_seg', op.var(name=u'_swapdata_seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_table_13ec3', op.var(elements=16, name=u'_table_13EC3', offset=1, segment=u'_text', size=1))
        p.set_global('_table_14057', op.var(elements=13, name=u'_table_14057', offset=1, segment=u'_text', size=1))
        p.set_global('_table_246f6', op.var(elements=11, name=u'_table_246F6', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24716', op.var(elements=8, name=u'_table_24716', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24798', op.var(elements=8, name=u'_table_24798', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24818', op.var(elements=8, name=u'_table_24818', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24898', op.var(elements=16, name=u'_table_24898', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_25118', op.var(elements=24, name=u'_table_25118', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_251c0', op.var(elements=12, name=u'_table_251C0', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_251e0', op.var(elements=13, name=u'_table_251E0', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_25221', op.var(elements=14, name=u'_table_25221', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_25261', op.var(elements=14, name=u'_table_25261', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_sndcrdname', op.var(name=u'_table_sndcrdname', offset=1, segment=u'dseg', size=2))
        p.set_global('_tabledword_24526', op.var(elements=10, name=u'_tabledword_24526', offset=1, segment=u'dseg', size=4))
        p.set_global('_tabledword_24562', op.var(elements=9, name=u'_tabledword_24562', offset=1, segment=u'dseg', size=4))
        p.set_global('_test_adc', op.var(name=u'_test_adc', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_add', op.var(name=u'_test_add', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_and', op.var(name=u'_test_and', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_bt', op.var(name=u'_test_bt', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_btc', op.var(name=u'_test_btc', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_btr', op.var(name=u'_test_btr', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_bts', op.var(name=u'_test_bts', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_cmp', op.var(name=u'_test_cmp', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_dec', op.var(name=u'_test_dec', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_inc', op.var(name=u'_test_inc', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_neg', op.var(name=u'_test_neg', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_not', op.var(name=u'_test_not', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_or', op.var(name=u'_test_or', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_rcl', op.var(name=u'_test_rcl', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_rcr', op.var(name=u'_test_rcr', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_rol', op.var(name=u'_test_rol', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_ror', op.var(name=u'_test_ror', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_sar', op.var(name=u'_test_sar', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_sbb', op.var(name=u'_test_sbb', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shl', op.var(name=u'_test_shl', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shld', op.var(name=u'_test_shld', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shr', op.var(name=u'_test_shr', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shrd', op.var(name=u'_test_shrd', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_sub', op.var(name=u'_test_sub', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_xor', op.var(name=u'_test_xor', offset=1, segment=u'initcall', size=4))
        p.set_global('_text', op.var(name=u'_text', offset=1, issegment=True, segment='', size=1))
        p.set_global('_timer_word_14f6e', op.var(name=u'_timer_word_14F6E', offset=1, segment=u'_text', size=2))
        p.set_global('_vga_palette', op.var(elements=3, name=u'_vga_palette', offset=1, segment=u'dseg', size=1))
        p.set_global('_videomempointer', op.var(name=u'_videomempointer', offset=1, segment=u'dseg', size=4))
        p.set_global('_videopoint_shiftd', op.var(name=u'_videopoint_shiftd', offset=1, segment=u'dseg', size=4))
        p.set_global('_vlm_byte_table', op.var(elements=33280, name=u'_vlm_byte_table', offset=1, segment=u'seg003', size=1))
        p.set_global('_volume_1de34', op.var(name=u'_volume_1DE34', offset=1, segment=u'dseg', size=4))
        p.set_global('_volume_245fc', op.var(name=u'_volume_245FC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_14913', op.var(name=u'_word_14913', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14bbb', op.var(name=u'_word_14BBB', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14ceb', op.var(name=u'_word_14CEB', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14fc0', op.var(name=u'_word_14FC0', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14fc5', op.var(name=u'_word_14FC5', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14fc8', op.var(name=u'_word_14FC8', offset=1, segment=u'_text', size=2))
        p.set_global('_word_1504d', op.var(name=u'_word_1504D', offset=1, segment=u'_text', size=2))
        p.set_global('_word_15056', op.var(name=u'_word_15056', offset=1, segment=u'_text', size=2))
        p.set_global('_word_15126', op.var(name=u'_word_15126', offset=1, segment=u'_text', size=2))
        p.set_global('_word_1519b', op.var(name=u'_word_1519B', offset=1, segment=u'_text', size=2))
        p.set_global('_word_151a3', op.var(name=u'_word_151A3', offset=1, segment=u'_text', size=2))
        p.set_global('_word_1d26d', op.var(name=u'_word_1D26D', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1d3b0', op.var(name=u'_word_1D3B0', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1d614', op.var(name=u'_word_1D614', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1d669', op.var(name=u'_word_1D669', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de46', op.var(name=u'_word_1DE46', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de4a', op.var(name=u'_word_1DE4A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de4c', op.var(name=u'_word_1DE4C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de4e', op.var(name=u'_word_1DE4E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de50', op.var(name=u'_word_1DE50', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de52', op.var(name=u'_word_1DE52', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de54', op.var(name=u'_word_1DE54', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de56', op.var(name=u'_word_1DE56', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de58', op.var(name=u'_word_1DE58', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de5a', op.var(name=u'_word_1DE5A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de5c', op.var(name=u'_word_1DE5C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de5e', op.var(name=u'_word_1DE5E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de60', op.var(name=u'_word_1DE60', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de62', op.var(name=u'_word_1DE62', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de64', op.var(name=u'_word_1DE64', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de66', op.var(name=u'_word_1DE66', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de6a', op.var(name=u'_word_1DE6A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de6c', op.var(name=u'_word_1DE6C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de6e', op.var(name=u'_word_1DE6E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24445', op.var(name=u'_word_24445', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2450c', op.var(name=u'_word_2450C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2450e', op.var(name=u'_word_2450E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24514', op.var(name=u'_word_24514', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24516', op.var(name=u'_word_24516', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24518', op.var(name=u'_word_24518', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2451a', op.var(name=u'_word_2451A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2451c', op.var(name=u'_word_2451C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2451e', op.var(name=u'_word_2451E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24520', op.var(name=u'_word_24520', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24522', op.var(name=u'_word_24522', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24524', op.var(name=u'_word_24524', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_245d2', op.var(name=u'_word_245D2', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245d6', op.var(name=u'_word_245D6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245d8', op.var(name=u'_word_245D8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245da', op.var(name=u'_word_245DA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245dc', op.var(name=u'_word_245DC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245e4', op.var(name=u'_word_245E4', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245e8', op.var(name=u'_word_245E8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245ea', op.var(name=u'_word_245EA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245ec', op.var(name=u'_word_245EC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245ee', op.var(name=u'_word_245EE', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f0', op.var(name=u'_word_245F0', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f2', op.var(name=u'_word_245F2', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f6', op.var(name=u'_word_245F6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f8', op.var(name=u'_word_245F8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245fa', op.var(name=u'_word_245FA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24602', op.var(name=u'_word_24602', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2460c', op.var(name=u'_word_2460C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2460e', op.var(name=u'_word_2460E', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24610', op.var(name=u'_word_24610', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24614', op.var(name=u'_word_24614', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24630', op.var(name=u'_word_24630', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24632', op.var(name=u'_word_24632', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24634', op.var(name=u'_word_24634', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24636', op.var(name=u'_word_24636', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24646', op.var(name=u'_word_24646', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24654', op.var(name=u'_word_24654', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2465c', op.var(name=u'_word_2465C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24662', op.var(name=u'_word_24662', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2468c', op.var(name=u'_word_2468C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_246a6', op.var(name=u'_word_246A6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_246a9', op.var(name=u'_word_246A9', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_246de', op.var(elements=9, name=u'_word_246DE', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24998', op.var(elements=9, name=u'_word_24998', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257a4', op.var(name=u'_word_257A4', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257e6', op.var(name=u'_word_257E6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257e8', op.var(name=u'_word_257E8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257ea', op.var(name=u'_word_257EA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257ec', op.var(name=u'_word_257EC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257ee', op.var(name=u'_word_257EE', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257f0', op.var(name=u'_word_257F0', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2588e', op.var(name=u'_word_2588E', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30515', op.var(name=u'_word_30515', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30520', op.var(name=u'_word_30520', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30524', op.var(name=u'_word_30524', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_3052a', op.var(name=u'_word_3052A', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_3052c', op.var(name=u'_word_3052C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30532', op.var(name=u'_word_30532', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30552', op.var(name=u'_word_30552', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30554', op.var(name=u'_word_30554', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30556', op.var(name=u'_word_30556', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30562', op.var(name=u'_word_30562', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30564', op.var(name=u'_word_30564', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_3063b', op.var(name=u'_word_3063B', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_31508', op.var(name=u'_word_31508', offset=1, segment=u'seg003', size=2))
        p.set_global('_wss_freq_table', op.var(name=u'_wss_freq_table', offset=1, segment=u'_text', size=2))
        p.set_global('_wss_freq_table2', op.var(elements=12, name=u'_wss_freq_table2', offset=1, segment=u'_text', size=2))
        p.set_global('_x_storage', op.var(elements=17, name=u'_x_storage', offset=1, segment=u'dseg', size=2))
        p.set_global('a', op.var(elements=3, name=u'a', offset=1, segment=u'_data', size=1))
        p.set_global('a0x4000', op.var(name=u'a0x4000', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000eax', op.var(name=u'a0x4000Eax', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ebx', op.var(name=u'a0x4000Ebx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ebxedx', op.var(name=u'a0x4000EbxEdx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ecx', op.var(name=u'a0x4000Ecx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ecxecx2', op.var(name=u'a0x4000EcxEcx2', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000edi', op.var(name=u'a0x4000Edi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000edx', op.var(name=u'a0x4000Edx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000edxecx4', op.var(name=u'a0x4000EdxEcx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000esi', op.var(name=u'a0x4000Esi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000esiecx8', op.var(name=u'a0x4000EsiEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40eax', op.var(name=u'a0x40Eax', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40eax2', op.var(name=u'a0x40Eax2', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40eaxecx', op.var(name=u'a0x40EaxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ebx', op.var(name=u'a0x40Ebx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ebx4', op.var(name=u'a0x40Ebx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ecx', op.var(name=u'a0x40Ecx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ecx8', op.var(name=u'a0x40Ecx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40edi', op.var(name=u'a0x40Edi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40edx', op.var(name=u'a0x40Edx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40esi', op.var(name=u'a0x40Esi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10ecxecx2', op.var(name=u'a10EcxEcx2', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10edxecx4', op.var(name=u'a10EdxEcx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10esiecx8', op.var(name=u'a10EsiEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lx', op.var(elements=2, name=u'a10sA08lxB08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lxc', op.var(elements=2, name=u'a10sA08lxB08lxC', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lxr', op.var(elements=2, name=u'a10sA08lxB08lxR', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lxr_0', op.var(elements=2, name=u'a10sA08lxB08lxR_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lx', op.var(elements=2, name=u'a10sA08lxR08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lx0', op.var(elements=2, name=u'a10sA08lxR08lx0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lx_0', op.var(elements=2, name=u'a10sA08lxR08lx_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lxc', op.var(elements=2, name=u'a10sA08lxR08lxC', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lxl', op.var(elements=2, name=u'a10sA08lxR08lxL', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08xr08xcci', op.var(elements=2, name=u'a10sA08xR08xCci', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sah08lxal08l', op.var(elements=2, name=u'a10sAh08lxAl08l', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sd', op.var(elements=2, name=u'a10sD', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10seax08lxa08l', op.var(elements=2, name=u'a10sEax08lxA08l', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10secx08lxzfld', op.var(elements=2, name=u'a10sEcx08lxZfLd', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sesi08lxedi0', op.var(elements=2, name=u'a10sEsi08lxEdi0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sr08lx', op.var(elements=2, name=u'a10sR08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aa016llx', op.var(elements=2, name=u'aA016llx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaaa', op.var(name=u'aAaa', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaad', op.var(name=u'aAad', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaam', op.var(name=u'aAam', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaas', op.var(name=u'aAas', offset=1, segment=u'_rdata', size=1))
        p.set_global('aadcb', op.var(name=u'aAdcb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aadcl', op.var(name=u'aAdcl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aadcw', op.var(name=u'aAdcw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaddb', op.var(name=u'aAddb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaddl', op.var(name=u'aAddl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaddw', op.var(name=u'aAddw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbcd04x04x04x', op.var(elements=2, name=u'aAFBcd04x04x04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf', op.var(elements=2, name=u'aAFBFABF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf_0', op.var(elements=2, name=u'aAFBFABF_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf_1', op.var(elements=2, name=u'aAFBFABF_1', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf_2', op.var(elements=2, name=u'aAFBFABF_2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbff', op.var(elements=2, name=u'aAFBFF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbffmodabf', op.var(elements=2, name=u'aAFBFFmodABF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafcopysignabf', op.var(elements=2, name=u'aAFCopysignABF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafexpaf', op.var(elements=2, name=u'aAFExpAF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafsqrtaf', op.var(elements=2, name=u'aAFSqrtAF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aandb', op.var(name=u'aAndb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aandl', op.var(name=u'aAndl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aandw', op.var(name=u'aAndw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ab', op.var(name=u'aB', offset=1, segment=u'_rdata', size=1))
        p.set_global('abe', op.var(name=u'aBe', offset=1, segment=u'_rdata', size=1))
        p.set_global('absfl', op.var(name=u'aBsfl', offset=1, segment=u'_rdata', size=1))
        p.set_global('absfw', op.var(name=u'aBsfw', offset=1, segment=u'_rdata', size=1))
        p.set_global('absrl', op.var(name=u'aBsrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('absrw', op.var(name=u'aBsrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abswapl', op.var(name=u'aBswapl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtcl', op.var(name=u'aBtcl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtcw', op.var(name=u'aBtcw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtl', op.var(name=u'aBtl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtrl', op.var(name=u'aBtrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtrw', op.var(name=u'aBtrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtsl', op.var(name=u'aBtsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtsw', op.var(name=u'aBtsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtw', op.var(name=u'aBtw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acbw', op.var(name=u'aCbw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acdq', op.var(name=u'aCdq', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovael', op.var(name=u'aCmovael', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovaew', op.var(name=u'aCmovaew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmoval', op.var(name=u'aCmoval', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovaw', op.var(name=u'aCmovaw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbel', op.var(name=u'aCmovbel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbew', op.var(name=u'aCmovbew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbl', op.var(name=u'aCmovbl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbw', op.var(name=u'aCmovbw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovel', op.var(name=u'aCmovel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovew', op.var(name=u'aCmovew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgel', op.var(name=u'aCmovgel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgew', op.var(name=u'aCmovgew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgl', op.var(name=u'aCmovgl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgw', op.var(name=u'aCmovgw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovlel', op.var(name=u'aCmovlel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovlew', op.var(name=u'aCmovlew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovll', op.var(name=u'aCmovll', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovlw', op.var(name=u'aCmovlw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnel', op.var(name=u'aCmovnel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnew', op.var(name=u'aCmovnew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnol', op.var(name=u'aCmovnol', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnow', op.var(name=u'aCmovnow', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnpl', op.var(name=u'aCmovnpl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnpw', op.var(name=u'aCmovnpw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnsl', op.var(name=u'aCmovnsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnsw', op.var(name=u'aCmovnsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovol', op.var(name=u'aCmovol', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovow', op.var(name=u'aCmovow', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovpl', op.var(name=u'aCmovpl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovpw', op.var(name=u'aCmovpw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovsl', op.var(name=u'aCmovsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovsw', op.var(name=u'aCmovsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpb', op.var(name=u'aCmpb', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpl', op.var(name=u'aCmpl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpsb', op.var(name=u'aCmpsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpsl', op.var(name=u'aCmpsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpsw', op.var(name=u'aCmpsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpw', op.var(name=u'aCmpw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchg8beax08', op.var(elements=2, name=u'aCmpxchg8bEax08', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchgb', op.var(name=u'aCmpxchgb', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchgl', op.var(name=u'aCmpxchgl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchgw', op.var(name=u'aCmpxchgw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acwd', op.var(name=u'aCwd', offset=1, segment=u'_rdata', size=1))
        p.set_global('acwde', op.var(name=u'aCwde', offset=1, segment=u'_rdata', size=1))
        p.set_global('adaa', op.var(name=u'aDaa', offset=1, segment=u'_rdata', size=1))
        p.set_global('adas', op.var(name=u'aDas', offset=1, segment=u'_rdata', size=1))
        p.set_global('adecb', op.var(name=u'aDecb', offset=1, segment=u'_rdata', size=1))
        p.set_global('adecl', op.var(name=u'aDecl', offset=1, segment=u'_rdata', size=1))
        p.set_global('adecw', op.var(name=u'aDecw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aderegisterfram', op.var(name=u'aDeregisterFram', offset=1, segment=u'_rdata', size=1))
        p.set_global('adivb', op.var(name=u'aDivb', offset=1, segment=u'_rdata', size=1))
        p.set_global('adivl', op.var(name=u'aDivl', offset=1, segment=u'_rdata', size=1))
        p.set_global('adivw', op.var(name=u'aDivw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ae', op.var(name=u'aE', offset=1, segment=u'_rdata', size=1))
        p.set_global('aeax', op.var(name=u'aEax', offset=1, segment=u'_rdata', size=1))
        p.set_global('aeax2', op.var(name=u'aEax2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aeaxecx', op.var(name=u'aEaxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aebx', op.var(name=u'aEbx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aebx4', op.var(name=u'aEbx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('aebxedx', op.var(name=u'aEbxEdx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecx', op.var(name=u'aEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecx8', op.var(name=u'aEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecxecx', op.var(name=u'aEcxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecxecx2', op.var(name=u'aEcxEcx2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedi', op.var(name=u'aEdi', offset=1, segment=u'_rdata', size=1))
        p.set_global('aediecx', op.var(name=u'aEdiEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedx', op.var(name=u'aEdx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedxecx', op.var(name=u'aEdxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedxecx4', op.var(name=u'aEdxEcx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('aesi', op.var(name=u'aEsi', offset=1, segment=u'_rdata', size=1))
        p.set_global('aesiecx', op.var(name=u'aEsiEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aesiecx8', op.var(name=u'aEsiEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('afcmovseflags0x', op.var(elements=2, name=u'aFcmovSEflags0x', offset=1, segment=u'_rdata', size=1))
        p.set_global('afcomff04lx', op.var(elements=2, name=u'aFcomFF04lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('afcomiff04lx02l', op.var(elements=2, name=u'aFcomiFF04lx02l', offset=1, segment=u'_rdata', size=1))
        p.set_global('afld1f', op.var(elements=2, name=u'aFld1F', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldl2ef', op.var(elements=2, name=u'aFldl2eF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldl2tf', op.var(elements=2, name=u'aFldl2tF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldlg2f', op.var(elements=2, name=u'aFldlg2F', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldln2f', op.var(elements=2, name=u'aFldln2F', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldpif', op.var(elements=2, name=u'aFldpiF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldzf', op.var(elements=2, name=u'aFldzF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afloatff', op.var(elements=2, name=u'aFloatFF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afptag04x', op.var(elements=2, name=u'aFptag04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('afpuc04xfpus04x', op.var(elements=2, name=u'aFpuc04xFpus04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('afucomff04lx', op.var(elements=2, name=u'aFucomFF04lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('afucomiff04lx02', op.var(elements=2, name=u'aFucomiFF04lx02', offset=1, segment=u'_rdata', size=1))
        p.set_global('afxamf04lx', op.var(elements=2, name=u'aFxamF04lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170', op.var(name=u'aGccGnu64020170', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_0', op.var(name=u'aGccGnu64020170_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_1', op.var(name=u'aGccGnu64020170_1', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_2', op.var(name=u'aGccGnu64020170_2', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_3', op.var(name=u'aGccGnu64020170_3', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_4', op.var(name=u'aGccGnu64020170_4', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_5', op.var(name=u'aGccGnu64020170_5', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_6', op.var(name=u'aGccGnu64020170_6', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_7', op.var(name=u'aGccGnu64020170_7', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_8', op.var(name=u'aGccGnu64020170_8', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_9', op.var(name=u'aGccGnu64020170_9', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730', op.var(name=u'aGccGnu730', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730_0', op.var(name=u'aGccGnu730_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730_1', op.var(name=u'aGccGnu730_1', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730_2', op.var(name=u'aGccGnu730_2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aidivb', op.var(name=u'aIdivb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aidivl', op.var(name=u'aIdivl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aidivw', op.var(name=u'aIdivw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimulb', op.var(name=u'aImulb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimull', op.var(name=u'aImull', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimullim', op.var(name=u'aImullIm', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimulw', op.var(name=u'aImulw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimulwim', op.var(name=u'aImulwIm', offset=1, segment=u'_rdata', size=1))
        p.set_global('aincb', op.var(name=u'aIncb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aincl', op.var(name=u'aIncl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aincw', op.var(name=u'aIncw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aint64ta016llx', op.var(elements=2, name=u'aInt64TA016llx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aintad', op.var(elements=2, name=u'aIntAD', offset=1, segment=u'_rdata', size=1))
        p.set_global('aja', op.var(name=u'aJa', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajae', op.var(name=u'aJae', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajb', op.var(name=u'aJb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajbe', op.var(name=u'aJbe', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajcxz', op.var(name=u'aJcxz', offset=1, segment=u'_rdata', size=1))
        p.set_global('aje', op.var(name=u'aJe', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajecxz', op.var(name=u'aJecxz', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajg', op.var(name=u'aJg', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajge', op.var(name=u'aJge', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajl', op.var(name=u'aJl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajle', op.var(name=u'aJle', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajne', op.var(name=u'aJne', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajno', op.var(name=u'aJno', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajnp', op.var(name=u'aJnp', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajns', op.var(name=u'aJns', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajo', op.var(name=u'aJo', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajp', op.var(name=u'aJp', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajs', op.var(name=u'aJs', offset=1, segment=u'_rdata', size=1))
        p.set_global('ala016llx04x', op.var(elements=2, name=u'aLa016llx04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('aleas08lx', op.var(elements=2, name=u'aLeaS08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('alodsb', op.var(name=u'aLodsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('alodsl', op.var(name=u'aLodsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('alodsw', op.var(name=u'aLodsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('alongdoubleflf', op.var(elements=2, name=u'aLongDoubleFLf', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopl', op.var(name=u'aLoopl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopnzl', op.var(name=u'aLoopnzl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopnzw', op.var(name=u'aLoopnzw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopw', op.var(name=u'aLoopw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopzl', op.var(name=u'aLoopzl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopzw', op.var(name=u'aLoopzw', offset=1, segment=u'_rdata', size=1))
        p.set_global('amovsb', op.var(name=u'aMovsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('amovsl', op.var(name=u'aMovsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('amovsw', op.var(name=u'aMovsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('amulb', op.var(name=u'aMulb', offset=1, segment=u'_rdata', size=1))
        p.set_global('amull', op.var(name=u'aMull', offset=1, segment=u'_rdata', size=1))
        p.set_global('amulw', op.var(name=u'aMulw', offset=1, segment=u'_rdata', size=1))
        p.set_global('anb', op.var(name=u'aNb', offset=1, segment=u'_rdata', size=1))
        p.set_global('anbe', op.var(name=u'aNbe', offset=1, segment=u'_rdata', size=1))
        p.set_global('ane', op.var(name=u'aNe', offset=1, segment=u'_rdata', size=1))
        p.set_global('anegb', op.var(name=u'aNegb', offset=1, segment=u'_rdata', size=1))
        p.set_global('anegl', op.var(name=u'aNegl', offset=1, segment=u'_rdata', size=1))
        p.set_global('anegw', op.var(name=u'aNegw', offset=1, segment=u'_rdata', size=1))
        p.set_global('anotb', op.var(name=u'aNotb', offset=1, segment=u'_rdata', size=1))
        p.set_global('anotl', op.var(name=u'aNotl', offset=1, segment=u'_rdata', size=1))
        p.set_global('anotw', op.var(name=u'aNotw', offset=1, segment=u'_rdata', size=1))
        p.set_global('anu', op.var(name=u'aNu', offset=1, segment=u'_rdata', size=1))
        p.set_global('aorb', op.var(name=u'aOrb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aorl', op.var(name=u'aOrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aorw', op.var(name=u'aOrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('apopcnta08lxr08', op.var(elements=2, name=u'aPopcntA08lxR08', offset=1, segment=u'_rdata', size=1))
        p.set_global('apoplesp08lx', op.var(elements=2, name=u'aPoplEsp08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('apopwesp08lx', op.var(elements=2, name=u'aPopwEsp08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('arclb', op.var(name=u'aRclb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcll', op.var(name=u'aRcll', offset=1, segment=u'_rdata', size=1))
        p.set_global('arclw', op.var(name=u'aRclw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcrb', op.var(name=u'aRcrb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcrl', op.var(name=u'aRcrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcrw', op.var(name=u'aRcrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('areplodsb', op.var(name=u'aRepLodsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('areplodsl', op.var(name=u'aRepLodsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('areplodsw', op.var(name=u'aRepLodsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepmovsb', op.var(name=u'aRepMovsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepmovsl', op.var(name=u'aRepMovsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepmovsw', op.var(name=u'aRepMovsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzcmpsb', op.var(name=u'aRepnzCmpsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzcmpsl', op.var(name=u'aRepnzCmpsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzcmpsw', op.var(name=u'aRepnzCmpsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzscasb', op.var(name=u'aRepnzScasb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzscasl', op.var(name=u'aRepnzScasl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzscasw', op.var(name=u'aRepnzScasw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepstosb', op.var(name=u'aRepStosb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepstosl', op.var(name=u'aRepStosl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepstosw', op.var(name=u'aRepStosw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzcmpsb', op.var(name=u'aRepzCmpsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzcmpsl', op.var(name=u'aRepzCmpsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzcmpsw', op.var(name=u'aRepzCmpsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzscasb', op.var(name=u'aRepzScasb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzscasl', op.var(name=u'aRepzScasl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzscasw', op.var(name=u'aRepzScasw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aresdf', op.var(elements=2, name=u'aResDF', offset=1, segment=u'_rdata', size=1))
        p.set_global('arintaf', op.var(elements=2, name=u'aRintAF', offset=1, segment=u'_rdata', size=1))
        p.set_global('arolb', op.var(name=u'aRolb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aroll', op.var(name=u'aRoll', offset=1, segment=u'_rdata', size=1))
        p.set_global('arolw', op.var(name=u'aRolw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arorb', op.var(name=u'aRorb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arorl', op.var(name=u'aRorl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arorw', op.var(name=u'aRorw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asarb', op.var(name=u'aSarb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asarl', op.var(name=u'aSarl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asarw', op.var(name=u'aSarw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asbbb', op.var(name=u'aSbbb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asbbl', op.var(name=u'aSbbl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asbbw', op.var(name=u'aSbbw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asc_1058c', op.var(elements=5, name=u'asc_1058C', offset=1, segment=u'_text', size=1))
        p.set_global('asc_182c3', op.var(elements=16, name=u'asc_182C3', offset=1, segment=u'_text', size=1))
        p.set_global('asc_182d3', op.var(elements=8, name=u'asc_182D3', offset=1, segment=u'_text', size=1))
        p.set_global('asc_1cc2d', op.var(elements=0, name=u'asc_1CC2D', offset=1, segment=u'dseg', size=1))
        p.set_global('asc_1d6e0', op.var(name=u'asc_1D6E0', offset=1, segment=u'dseg', size=1))
        p.set_global('asc_1da00', op.var(name=u'asc_1DA00', offset=1, segment=u'dseg', size=1))
        p.set_global('asc_246b0', op.var(elements=0, name=u'asc_246B0', offset=1, segment=u'seg003', size=1))
        p.set_global('asc_25856', op.var(elements=3, name=u'asc_25856', offset=1, segment=u'seg003', size=1))
        p.set_global('ascasb', op.var(name=u'aScasb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ascasl', op.var(name=u'aScasl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ascasw', op.var(name=u'aScasw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ascii', op.var(elements=2, name=u'ASCII', offset=1, segment=u'_data', size=1))
        p.set_global('aseta', op.var(name=u'aSeta', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetae', op.var(name=u'aSetae', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetb', op.var(name=u'aSetb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetbe', op.var(name=u'aSetbe', offset=1, segment=u'_rdata', size=1))
        p.set_global('asete', op.var(name=u'aSete', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetg', op.var(name=u'aSetg', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetge', op.var(name=u'aSetge', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetl', op.var(name=u'aSetl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetle', op.var(name=u'aSetle', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetne', op.var(name=u'aSetne', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetno', op.var(name=u'aSetno', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetnp', op.var(name=u'aSetnp', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetns', op.var(name=u'aSetns', offset=1, segment=u'_rdata', size=1))
        p.set_global('aseto', op.var(name=u'aSeto', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetp', op.var(name=u'aSetp', offset=1, segment=u'_rdata', size=1))
        p.set_global('asets', op.var(name=u'aSets', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashlb', op.var(name=u'aShlb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashldl', op.var(name=u'aShldl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashldw', op.var(name=u'aShldw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashll', op.var(name=u'aShll', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashlw', op.var(name=u'aShlw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashortad', op.var(elements=2, name=u'aShortAD', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrb', op.var(name=u'aShrb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrdl', op.var(name=u'aShrdl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrdw', op.var(name=u'aShrdw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrl', op.var(name=u'aShrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrw', op.var(name=u'aShrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('astosb', op.var(name=u'aStosb', offset=1, segment=u'_rdata', size=1))
        p.set_global('astosl', op.var(name=u'aStosl', offset=1, segment=u'_rdata', size=1))
        p.set_global('astosw', op.var(name=u'aStosw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asubb', op.var(name=u'aSubb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asubl', op.var(name=u'aSubl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asubw', op.var(name=u'aSubw', offset=1, segment=u'_rdata', size=1))
        p.set_global('au', op.var(name=u'aU', offset=1, segment=u'_rdata', size=1))
        p.set_global('audio_len', op.var(name=u'audio_len', offset=1, segment=u'_text', size=2))
        p.set_global('axaddb', op.var(name=u'aXaddb', offset=1, segment=u'_rdata', size=1))
        p.set_global('axaddl', op.var(name=u'aXaddl', offset=1, segment=u'_rdata', size=1))
        p.set_global('axaddlsameres08', op.var(elements=2, name=u'aXaddlSameRes08', offset=1, segment=u'_rdata', size=1))
        p.set_global('axaddw', op.var(name=u'aXaddw', offset=1, segment=u'_rdata', size=1))
        p.set_global('axchgb', op.var(name=u'aXchgb', offset=1, segment=u'_rdata', size=1))
        p.set_global('axchgl', op.var(name=u'aXchgl', offset=1, segment=u'_rdata', size=1))
        p.set_global('axchgw', op.var(name=u'aXchgw', offset=1, segment=u'_rdata', size=1))
        p.set_global('axlateax08lx', op.var(elements=2, name=u'aXlatEax08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('axorb', op.var(name=u'aXorb', offset=1, segment=u'_rdata', size=1))
        p.set_global('axorl', op.var(name=u'aXorl', offset=1, segment=u'_rdata', size=1))
        p.set_global('axorw', op.var(name=u'aXorw', offset=1, segment=u'_rdata', size=1))
        p.set_global('b', op.var(name=u'b', offset=1, segment=u'_data', size=1))
        p.set_global('beginningdata', op.var(name=u'beginningdata', offset=1, segment=u'_data', size=1))
        p.set_global('buffer', op.var(elements=64000, name=u'buffer', offset=1, segment=u'_data', size=1))
        p.set_global('byte_41411f', op.var(name=u'byte_41411F', offset=1, segment=u'_bss', size=1))
        p.set_global('c', op.var(name=u'c', offset=1, segment=u'_data', size=1))
        p.set_global('d', op.var(name=u'd', offset=1, segment=u'_data', size=1))
        p.set_global('dbl_410d28', op.var(name=u'dbl_410D28', offset=1, segment=u'_rdata', size=8))
        p.set_global('dbl_410d40', op.var(name=u'dbl_410D40', offset=1, segment=u'_rdata', size=8))
        p.set_global('dll_index', op.var(name=u'dll_index', offset=1, segment=u'_bss', size=4))
        p.set_global('doublequote', op.var(elements=0, name=u'doublequote', offset=1, segment=u'_data', size=1))
        p.set_global('dseg', op.var(name=u'dseg', offset=1, issegment=True, segment='', size=1))
        p.set_global('dword_40d5d0', op.var(elements=3, name=u'dword_40D5D0', offset=1, segment=u'_text', size=4))
        p.set_global('dword_40d5dc', op.var(elements=9, name=u'dword_40D5DC', offset=1, segment=u'_text', size=4))
        p.set_global('dword_40e000', op.var(name=u'dword_40E000', offset=1, segment=u'_data', size=4))
        p.set_global('e', op.var(name=u'e', offset=1, segment=u'_data', size=1))
        p.set_global('enddata', op.var(name=u'enddata', offset=1, segment=u'_data', size=1))
        p.set_global('enter_stack', op.var(elements=4096, name=u'enter_stack', offset=1, segment=u'_bss', size=4))
        p.set_global('environ', op.var(name=u'environ', offset=1, segment=u'_bss', size=4))
        p.set_global('f', op.var(name=u'f', offset=1, segment=u'_data', size=1))
        p.set_global('filename', op.var(name=u'fileName', offset=1, segment=u'_data', size=1))
        p.set_global('flt_410d24', op.var(name=u'flt_410D24', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d30', op.var(name=u'flt_410D30', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d34', op.var(name=u'flt_410D34', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d38', op.var(name=u'flt_410D38', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d3c', op.var(name=u'flt_410D3C', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d48', op.var(name=u'flt_410D48', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d4c', op.var(name=u'flt_410D4C', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d50', op.var(name=u'flt_410D50', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d54', op.var(name=u'flt_410D54', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d58', op.var(name=u'flt_410D58', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d5c', op.var(name=u'flt_410D5C', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d60', op.var(name=u'flt_410D60', offset=1, segment=u'_rdata', size=4))
        p.set_global('g', op.var(name=u'g', offset=1, segment=u'_data', size=4))
        p.set_global('h', op.var(name=u'h', offset=1, segment=u'_data', size=1))
        p.set_global('h2', op.var(name=u'h2', offset=1, segment=u'_data', size=1))
        p.set_global('hlibmodule', op.var(name=u'hLibModule', offset=1, segment=u'_bss', size=4))
        p.set_global('initcall', op.var(name=u'initcall', offset=1, issegment=True, segment='', size=1))
        p.set_global('libfilename', op.var(name=u'LibFileName', offset=1, segment=u'_rdata', size=1))
        p.set_global('load_handle', op.var(name=u'load_handle', offset=1, segment=u'_data', size=4))
        p.set_global('off_18e00', op.var(name=u'off_18E00', offset=1, segment=u'_text', size=2))
        p.set_global('off_18e60', op.var(name=u'off_18E60', offset=1, segment=u'_text', size=2))
        p.set_global('off_18e80', op.var(name=u'off_18E80', offset=1, segment=u'_text', size=2))
        p.set_global('off_18ea0', op.var(name=u'off_18EA0', offset=1, segment=u'_text', size=2))
        p.set_global('off_18ec0', op.var(name=u'off_18EC0', offset=1, segment=u'_text', size=2))
        p.set_global('off_18ee0', op.var(name=u'off_18EE0', offset=1, segment=u'_text', size=2))
        p.set_global('off_18f00', op.var(name=u'off_18F00', offset=1, segment=u'_text', size=2))
        p.set_global('off_18f20', op.var(name=u'off_18F20', offset=1, segment=u'_text', size=2))
        p.set_global('off_18f40', op.var(name=u'off_18F40', offset=1, segment=u'_text', size=2))
        p.set_global('off_1ca8e', op.var(name=u'off_1CA8E', offset=1, segment=u'dseg', size=2))
        p.set_global('off_1de3c', op.var(name=u'off_1DE3C', offset=1, segment=u'dseg', size=2))
        p.set_global('off_1de42', op.var(name=u'off_1DE42', offset=1, segment=u'dseg', size=2))
        p.set_global('off_245c8', op.var(name=u'off_245C8', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245ca', op.var(name=u'off_245CA', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245cc', op.var(name=u'off_245CC', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245ce', op.var(name=u'off_245CE', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245e0', op.var(name=u'off_245E0', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245e2', op.var(name=u'off_245E2', offset=1, segment=u'seg003', size=2))
        p.set_global('off_2462e', op.var(name=u'off_2462E', offset=1, segment=u'seg003', size=2))
        p.set_global('off_24656', op.var(name=u'off_24656', offset=1, segment=u'seg003', size=2))
        p.set_global('off_25326', op.var(name=u'off_25326', offset=1, segment=u'seg003', size=2))
        p.set_global('pal_jeu', op.var(elements=16, name=u'pal_jeu', offset=1, segment=u'_data', size=1))
        p.set_global('pas_de_mem', op.var(elements=2, name=u'pas_de_mem', offset=1, segment=u'_data', size=1))
        p.set_global('pbs1', op.var(elements=2, name=u'pbs1', offset=1, segment=u'_data', size=1))
        p.set_global('pbs2', op.var(elements=2, name=u'pbs2', offset=1, segment=u'_data', size=1))
        p.set_global('procname', op.var(name=u'ProcName', offset=1, segment=u'_rdata', size=1))
        p.set_global('seg001', op.var(name=u'seg001', offset=1, issegment=True, segment='', size=1))
        p.set_global('seg003', op.var(name=u'seg003', offset=1, issegment=True, segment='', size=1))
        p.set_global('seg004', op.var(name=u'seg004', offset=1, issegment=True, segment='', size=1))
        p.set_global('stackseg', op.var(name=u'stackseg', offset=1, issegment=True, segment='', size=1))
        p.set_global('storedhandle', op.var(name=u'storedHandle', offset=1, segment=u'_bss', size=4))
        p.set_global('storedptr', op.var(name=u'storedPtr', offset=1, segment=u'_bss', size=4))
        p.set_global('storedreason', op.var(name=u'storedReason', offset=1, segment=u'_bss', size=4))
        p.set_global('str1', op.var(elements=0, name=u'str1', offset=1, segment=u'_data', size=1))
        p.set_global('str2', op.var(elements=0, name=u'str2', offset=1, segment=u'_data', size=1))
        p.set_global('str3', op.var(elements=0, name=u'str3', offset=1, segment=u'_data', size=1))
        p.set_global('str_buffer', op.var(elements=4096, name=u'str_buffer', offset=1, segment=u'_bss', size=1))
        p.set_global('table', op.var(name=u'table', offset=1, segment=u'_text', size=2))
        p.set_global('testoverlap', op.var(elements=14, name=u'testOVerlap', offset=1, segment=u'_data', size=1))
        p.set_global('unk_16464', op.var(name=u'unk_16464', offset=1, segment=u'_text', size=1))
        p.set_global('unk_165ad', op.var(name=u'unk_165AD', offset=1, segment=u'_text', size=1))
        p.set_global('unk_1d516', op.var(name=u'unk_1D516', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1d6c3', op.var(name=u'unk_1D6C3', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1dc01', op.var(name=u'unk_1DC01', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1dc70', op.var(name=u'unk_1DC70', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1dc7b', op.var(name=u'unk_1DC7B', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_23ee4', op.var(name=u'unk_23EE4', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_24074', op.var(name=u'unk_24074', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_24453', op.var(name=u'unk_24453', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_24456', op.var(name=u'unk_24456', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_244c4', op.var(name=u'unk_244C4', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_257d9', op.var(name=u'unk_257D9', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_258a6', op.var(name=u'unk_258A6', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_30528', op.var(name=u'unk_30528', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_3054a', op.var(name=u'unk_3054A', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_30941', op.var(name=u'unk_30941', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_40e004', op.var(name=u'unk_40E004', offset=1, segment=u'_data', size=1))
        p.set_global('unk_40e008', op.var(name=u'unk_40E008', offset=1, segment=u'_data', size=1))
        p.set_global('unk_40e060', op.var(name=u'unk_40E060', offset=1, segment=u'_data', size=1))
        p.set_global('unk_40f064', op.var(name=u'unk_40F064', offset=1, segment=u'initcall', size=1))
        p.set_global('unk_410ff4', op.var(name=u'unk_410FF4', offset=1, segment=u'_rdata', size=1))
        p.set_global('unk_412038', op.var(name=u'unk_412038', offset=1, segment=u'_eh_frame', size=1))
        p.set_global('unk_414000', op.var(name=u'unk_414000', offset=1, segment=u'_bss', size=1))
        p.set_global('unk_419120', op.var(name=u'unk_419120', offset=1, segment=u'_bss', size=1))
        p.set_global('var', op.var(elements=4, name=u'var', offset=1, segment=u'_data', size=1))
        p.set_global('var0', op.var(elements=10, name=u'var0', offset=1, segment=u'_data', size=1))
        p.set_global('var2', op.var(elements=3, name=u'var2', offset=1, segment=u'_data', size=2))
        p.set_global('var3', op.var(elements=4, name=u'var3', offset=1, segment=u'_data', size=1))
        p.set_global('var4', op.var(elements=100, name=u'var4', offset=1, segment=u'_data', size=1))
        p.set_global('var5', op.var(elements=0, name=u'var5', offset=1, segment=u'_data', size=1))
        p.set_global('var6', op.var(elements=4, name=u'var6', offset=1, segment=u'_data', size=4))
        p.action_label(far=False, name='@@saaccvaaaax', isproc=False)
        p.action_label(far=False, name='@VBL1', isproc=False)
        p.action_label(far=False, name='@VBL12', isproc=False)
        p.action_label(far=False, name='@VBL2', isproc=False)
        p.action_label(far=False, name='@VBL22', isproc=False)
        p.action_label(far=False, name='@df@@@@', isproc=False)
        p.action_label(far=False, name='@df@@@@1', isproc=False)
        p.action_label(far=False, name='@df@@@@2', isproc=False)
        p.action_label(far=False, name='@df@@@@3', isproc=False)
        p.action_label(far=False, name='@df@@@@4', isproc=False)
        p.action_label(far=False, name='@df@@@@5', isproc=False)
        p.action_label(far=False, name='@df@@@@6', isproc=False)
        p.action_label(far=False, name='@df@@@@7', isproc=False)
        p.action_label(far=False, name='@df@@@@8', isproc=False)
        p.action_label(far=False, name='@df@@@@9', isproc=False)
        p.action_label(far=False, name='OK', isproc=False)
        p.action_label(far=False, name='P1', isproc=False)
        p.action_label(far=False, name='P2', isproc=False)
        p.action_label(far=False, name='__669_module', isproc=False)
        p.action_label(far=False, name='_adlib_timer_int', isproc=False)
        p.action_label(far=False, name='_f6_draw', isproc=False)
        p.action_label(far=False, name='_l_1A044', isproc=False)
        p.action_label(far=False, name='_l_1_end', isproc=False)
        p.action_label(far=False, name='_l_alt', isproc=False)
        p.action_label(far=False, name='_l_altup', isproc=False)
        p.action_label(far=False, name='_l_ctrl', isproc=False)
        p.action_label(far=False, name='_l_down', isproc=False)
        p.action_label(far=False, name='_l_enter', isproc=False)
        p.action_label(far=False, name='_l_esc', isproc=False)
        p.action_label(far=False, name='_l_escaped_scancode', isproc=False)
        p.action_label(far=False, name='_l_f1', isproc=False)
        p.action_label(far=False, name='_l_f10', isproc=False)
        p.action_label(far=False, name='_l_f11', isproc=False)
        p.action_label(far=False, name='_l_f12', isproc=False)
        p.action_label(far=False, name='_l_f2', isproc=False)
        p.action_label(far=False, name='_l_f3', isproc=False)
        p.action_label(far=False, name='_l_f4', isproc=False)
        p.action_label(far=False, name='_l_f5', isproc=False)
        p.action_label(far=False, name='_l_f6', isproc=False)
        p.action_label(far=False, name='_l_f8', isproc=False)
        p.action_label(far=False, name='_l_f9', isproc=False)
        p.action_label(far=False, name='_l_l', isproc=False)
        p.action_label(far=False, name='_l_lbracket', isproc=False)
        p.action_label(far=False, name='_l_lctrlup', isproc=False)
        p.action_label(far=False, name='_l_left', isproc=False)
        p.action_label(far=False, name='_l_lshift', isproc=False)
        p.action_label(far=False, name='_l_lshiftup', isproc=False)
        p.action_label(far=False, name='_l_m', isproc=False)
        p.action_label(far=False, name='_l_minus', isproc=False)
        p.action_label(far=False, name='_l_numlock', isproc=False)
        p.action_label(far=False, name='_l_plus', isproc=False)
        p.action_label(far=False, name='_l_r', isproc=False)
        p.action_label(far=False, name='_l_rbracket', isproc=False)
        p.action_label(far=False, name='_l_right', isproc=False)
        p.action_label(far=False, name='_l_rshift', isproc=False)
        p.action_label(far=False, name='_l_rshiftup', isproc=False)
        p.action_label(far=False, name='_l_s', isproc=False)
        p.action_label(far=False, name='_l_scrollock', isproc=False)
        p.action_label(far=False, name='_l_tab', isproc=False)
        p.action_label(far=False, name='_l_up', isproc=False)
        p.action_label(far=False, name='_lc_16bit', isproc=False)
        p.action_label(far=False, name='_lc_disable_interpol', isproc=False)
        p.action_label(far=False, name='_lc_inerpol_disabld', isproc=False)
        p.action_label(far=False, name='_lc_next_meter', isproc=False)
        p.action_label(far=False, name='_lc_next_x8', isproc=False)
        p.action_label(far=False, name='_lc_nextvideobit', isproc=False)
        p.action_label(far=False, name='_lc_perfrm_interpol', isproc=False)
        p.action_label(far=False, name='_lc_perfrm_interpol2', isproc=False)
        p.action_label(far=False, name='_lfreaderr', isproc=False)
        p.action_label(far=False, name='_lyesitsme', isproc=False)
        p.action_label(far=False, name='_midi_init', isproc=False)
        p.action_label(far=False, name='_mod_cd81_module', isproc=False)
        p.action_label(far=False, name='_mod_ch_module', isproc=False)
        p.action_label(far=False, name='_mod_chn_module', isproc=False)
        p.action_label(far=False, name='_mod_flt8_module', isproc=False)
        p.action_label(far=False, name='_mod_mk_module', isproc=False)
        p.action_label(far=False, name='_mod_tdz_module', isproc=False)
        p.action_label(far=False, name='_my_i16toa10', isproc=False)
        p.action_label(far=False, name='_my_i32toa10', isproc=False)
        p.action_label(far=False, name='_my_i32toa10_', isproc=False)
        p.action_label(far=False, name='_my_i32toa10_1', isproc=False)
        p.action_label(far=False, name='_mysprintf_0_nop', isproc=False)
        p.action_label(far=False, name='_mysprintf_10_u8tox', isproc=False)
        p.action_label(far=False, name='_mysprintf_11_u16tox', isproc=False)
        p.action_label(far=False, name='_mysprintf_12_u32tox', isproc=False)
        p.action_label(far=False, name='_mysprintf_1_offstr', isproc=False)
        p.action_label(far=False, name='_mysprintf_2_off8str', isproc=False)
        p.action_label(far=False, name='_mysprintf_3_off16str', isproc=False)
        p.action_label(far=False, name='_mysprintf_4_u8toa', isproc=False)
        p.action_label(far=False, name='_mysprintf_5_u16toa', isproc=False)
        p.action_label(far=False, name='_mysprintf_6_u32toa', isproc=False)
        p.action_label(far=False, name='_mysprintf_7_i8toa', isproc=False)
        p.action_label(far=False, name='_mysprintf_8_i16toa', isproc=False)
        p.action_label(far=False, name='_mysprintf_9_i32toa', isproc=False)
        p.action_label(far=False, name='_n1_movepos', isproc=False)
        p.action_label(far=False, name='_n2_setcolor', isproc=False)
        p.action_label(far=False, name='_pcspeaker_interrupt', isproc=False)
        p.action_label(far=False, name='_recolortxtx', isproc=False)
        p.action_label(far=False, name='_sb_callback', isproc=False)
        p.action_label(far=False, name='_sbpro_set', isproc=False)
        p.action_label(far=False, name='_settimer', isproc=False)
        p.action_label(far=False, name='_start', isproc=False)
        p.action_label(far=False, name='_stm_module', isproc=False)
        p.action_label(far=False, name='_volume_endstr', isproc=False)
        p.action_label(far=False, name='_volume_higher', isproc=False)
        p.action_label(far=False, name='_volume_medium', isproc=False)
        p.action_label(far=False, name='_wss_int', isproc=False)
        p.action_label(far=False, name='dffd', isproc=False)
        p.action_label(far=False, name='exitLabel', isproc=False)
        p.action_label(far=False, name='failure', isproc=False)
        p.action_label(far=False, name='finTest', isproc=False)
        p.action_label(far=False, name='good', isproc=False)
        p.action_label(far=False, name='loc_10006', isproc=False)
        p.action_label(far=False, name='loc_1001F', isproc=False)
        p.action_label(far=False, name='loc_10028', isproc=False)
        p.action_label(far=False, name='loc_1002D', isproc=False)
        p.action_label(far=False, name='loc_10033', isproc=False)
        p.action_label(far=False, name='loc_1003D', isproc=False)
        p.action_label(far=False, name='loc_10040', isproc=False)
        p.action_label(far=False, name='loc_10045', isproc=False)
        p.action_label(far=False, name='loc_10049', isproc=False)
        p.action_label(far=False, name='loc_10052', isproc=False)
        p.action_label(far=False, name='loc_10064', isproc=False)
        p.action_label(far=False, name='loc_1006B', isproc=False)
        p.action_label(far=False, name='loc_1007B', isproc=False)
        p.action_label(far=False, name='loc_10080', isproc=False)
        p.action_label(far=False, name='loc_1008A', isproc=False)
        p.action_label(far=False, name='loc_10092', isproc=False)
        p.action_label(far=False, name='loc_10099', isproc=False)
        p.action_label(far=False, name='loc_10118', isproc=False)
        p.action_label(far=False, name='loc_10137', isproc=False)
        p.action_label(far=False, name='loc_10152', isproc=False)
        p.action_label(far=False, name='loc_101A6', isproc=False)
        p.action_label(far=False, name='loc_101B7', isproc=False)
        p.action_label(far=False, name='loc_101F4', isproc=False)
        p.action_label(far=False, name='loc_10213', isproc=False)
        p.action_label(far=False, name='loc_10230', isproc=False)
        p.action_label(far=False, name='loc_10254', isproc=False)
        p.action_label(far=False, name='loc_102C1', isproc=False)
        p.action_label(far=False, name='loc_102DC', isproc=False)
        p.action_label(far=False, name='loc_102DF', isproc=False)
        p.action_label(far=False, name='loc_102FE', isproc=False)
        p.action_label(far=False, name='loc_10307', isproc=False)
        p.action_label(far=False, name='loc_10315', isproc=False)
        p.action_label(far=False, name='loc_10345', isproc=False)
        p.action_label(far=False, name='loc_1035C', isproc=False)
        p.action_label(far=False, name='loc_10365', isproc=False)
        p.action_label(far=False, name='loc_1036C', isproc=False)
        p.action_label(far=False, name='loc_10399', isproc=False)
        p.action_label(far=False, name='loc_103A8', isproc=False)
        p.action_label(far=False, name='loc_103B9', isproc=False)
        p.action_label(far=False, name='loc_103FF', isproc=False)
        p.action_label(far=False, name='loc_10445', isproc=False)
        p.action_label(far=False, name='loc_1044D', isproc=False)
        p.action_label(far=False, name='loc_10467', isproc=False)
        p.action_label(far=False, name='loc_10487', isproc=False)
        p.action_label(far=False, name='loc_104B6', isproc=False)
        p.action_label(far=False, name='loc_104C7', isproc=False)
        p.action_label(far=False, name='loc_104E6', isproc=False)
        p.action_label(far=False, name='loc_104F2', isproc=False)
        p.action_label(far=False, name='loc_104F9', isproc=False)
        p.action_label(far=False, name='loc_1050C', isproc=False)
        p.action_label(far=False, name='loc_10513', isproc=False)
        p.action_label(far=False, name='loc_1052E', isproc=False)
        p.action_label(far=False, name='loc_10544', isproc=False)
        p.action_label(far=False, name='loc_10565', isproc=False)
        p.action_label(far=False, name='loc_105C7', isproc=False)
        p.action_label(far=False, name='loc_105FF', isproc=False)
        p.action_label(far=False, name='loc_10618', isproc=False)
        p.action_label(far=False, name='loc_1061E', isproc=False)
        p.action_label(far=False, name='loc_10628', isproc=False)
        p.action_label(far=False, name='loc_1063D', isproc=False)
        p.action_label(far=False, name='loc_10640', isproc=False)
        p.action_label(far=False, name='loc_10652', isproc=False)
        p.action_label(far=False, name='loc_1065F', isproc=False)
        p.action_label(far=False, name='loc_10672', isproc=False)
        p.action_label(far=False, name='loc_10680', isproc=False)
        p.action_label(far=False, name='loc_106A3', isproc=False)
        p.action_label(far=False, name='loc_106D8', isproc=False)
        p.action_label(far=False, name='loc_106F8', isproc=False)
        p.action_label(far=False, name='loc_10704', isproc=False)
        p.action_label(far=False, name='loc_1070D', isproc=False)
        p.action_label(far=False, name='loc_10720', isproc=False)
        p.action_label(far=False, name='loc_1074F', isproc=False)
        p.action_label(far=False, name='loc_10778', isproc=False)
        p.action_label(far=False, name='loc_1078F', isproc=False)
        p.action_label(far=False, name='loc_1079A', isproc=False)
        p.action_label(far=False, name='loc_107AC', isproc=False)
        p.action_label(far=False, name='loc_107B4', isproc=False)
        p.action_label(far=False, name='loc_107D2', isproc=False)
        p.action_label(far=False, name='loc_107E0', isproc=False)
        p.action_label(far=False, name='loc_10809', isproc=False)
        p.action_label(far=False, name='loc_10811', isproc=False)
        p.action_label(far=False, name='loc_10826', isproc=False)
        p.action_label(far=False, name='loc_1082D', isproc=False)
        p.action_label(far=False, name='loc_1083E', isproc=False)
        p.action_label(far=False, name='loc_10880', isproc=False)
        p.action_label(far=False, name='loc_10885', isproc=False)
        p.action_label(far=False, name='loc_10887', isproc=False)
        p.action_label(far=False, name='loc_1088D', isproc=False)
        p.action_label(far=False, name='loc_1088F', isproc=False)
        p.action_label(far=False, name='loc_1089C', isproc=False)
        p.action_label(far=False, name='loc_108A6', isproc=False)
        p.action_label(far=False, name='loc_108B1', isproc=False)
        p.action_label(far=False, name='loc_108C9', isproc=False)
        p.action_label(far=False, name='loc_10914', isproc=False)
        p.action_label(far=False, name='loc_1095C', isproc=False)
        p.action_label(far=False, name='loc_1096F', isproc=False)
        p.action_label(far=False, name='loc_10993', isproc=False)
        p.action_label(far=False, name='loc_109BD', isproc=False)
        p.action_label(far=False, name='loc_10A0F', isproc=False)
        p.action_label(far=False, name='loc_10A20', isproc=False)
        p.action_label(far=False, name='loc_10A2D', isproc=False)
        p.action_label(far=False, name='loc_10A40', isproc=False)
        p.action_label(far=False, name='loc_10A47', isproc=False)
        p.action_label(far=False, name='loc_10A75', isproc=False)
        p.action_label(far=False, name='loc_10A83', isproc=False)
        p.action_label(far=False, name='loc_10AAA', isproc=False)
        p.action_label(far=False, name='loc_10AAC', isproc=False)
        p.action_label(far=False, name='loc_10B0F', isproc=False)
        p.action_label(far=False, name='loc_10B25', isproc=False)
        p.action_label(far=False, name='loc_10B5A', isproc=False)
        p.action_label(far=False, name='loc_10B66', isproc=False)
        p.action_label(far=False, name='loc_10BB5', isproc=False)
        p.action_label(far=False, name='loc_10BC6', isproc=False)
        p.action_label(far=False, name='loc_10C12', isproc=False)
        p.action_label(far=False, name='loc_10C15', isproc=False)
        p.action_label(far=False, name='loc_10C20', isproc=False)
        p.action_label(far=False, name='loc_10C36', isproc=False)
        p.action_label(far=False, name='loc_10C3F', isproc=False)
        p.action_label(far=False, name='loc_10C5A', isproc=False)
        p.action_label(far=False, name='loc_10C73', isproc=False)
        p.action_label(far=False, name='loc_10C89', isproc=False)
        p.action_label(far=False, name='loc_10C91', isproc=False)
        p.action_label(far=False, name='loc_10C92', isproc=False)
        p.action_label(far=False, name='loc_10CAA', isproc=False)
        p.action_label(far=False, name='loc_10D8C', isproc=False)
        p.action_label(far=False, name='loc_10DC7', isproc=False)
        p.action_label(far=False, name='loc_10DF0', isproc=False)
        p.action_label(far=False, name='loc_10E15', isproc=False)
        p.action_label(far=False, name='loc_10E19', isproc=False)
        p.action_label(far=False, name='loc_10E4C', isproc=False)
        p.action_label(far=False, name='loc_10E68', isproc=False)
        p.action_label(far=False, name='loc_10E72', isproc=False)
        p.action_label(far=False, name='loc_10E8C', isproc=False)
        p.action_label(far=False, name='loc_10E92', isproc=False)
        p.action_label(far=False, name='loc_10EB6', isproc=False)
        p.action_label(far=False, name='loc_10EBD', isproc=False)
        p.action_label(far=False, name='loc_10ECE', isproc=False)
        p.action_label(far=False, name='loc_10EDD', isproc=False)
        p.action_label(far=False, name='loc_10EDF', isproc=False)
        p.action_label(far=False, name='loc_10EEC', isproc=False)
        p.action_label(far=False, name='loc_10EF4', isproc=False)
        p.action_label(far=False, name='loc_10F11', isproc=False)
        p.action_label(far=False, name='loc_10F6A', isproc=False)
        p.action_label(far=False, name='loc_10F80', isproc=False)
        p.action_label(far=False, name='loc_10FB0', isproc=False)
        p.action_label(far=False, name='loc_10FCF', isproc=False)
        p.action_label(far=False, name='loc_10FD7', isproc=False)
        p.action_label(far=False, name='loc_10FEF', isproc=False)
        p.action_label(far=False, name='loc_10FFE', isproc=False)
        p.action_label(far=False, name='loc_1100F', isproc=False)
        p.action_label(far=False, name='loc_1102D', isproc=False)
        p.action_label(far=False, name='loc_11037', isproc=False)
        p.action_label(far=False, name='loc_11051', isproc=False)
        p.action_label(far=False, name='loc_11058', isproc=False)
        p.action_label(far=False, name='loc_11082', isproc=False)
        p.action_label(far=False, name='loc_11094', isproc=False)
        p.action_label(far=False, name='loc_110B8', isproc=False)
        p.action_label(far=False, name='loc_110CB', isproc=False)
        p.action_label(far=False, name='loc_110CF', isproc=False)
        p.action_label(far=False, name='loc_110D9', isproc=False)
        p.action_label(far=False, name='loc_110E4', isproc=False)
        p.action_label(far=False, name='loc_110E6', isproc=False)
        p.action_label(far=False, name='loc_110EB', isproc=False)
        p.action_label(far=False, name='loc_110EF', isproc=False)
        p.action_label(far=False, name='loc_110F3', isproc=False)
        p.action_label(far=False, name='loc_110FA', isproc=False)
        p.action_label(far=False, name='loc_110FC', isproc=False)
        p.action_label(far=False, name='loc_110FF', isproc=False)
        p.action_label(far=False, name='loc_11120', isproc=False)
        p.action_label(far=False, name='loc_1113A', isproc=False)
        p.action_label(far=False, name='loc_11149', isproc=False)
        p.action_label(far=False, name='loc_11150', isproc=False)
        p.action_label(far=False, name='loc_11152', isproc=False)
        p.action_label(far=False, name='loc_11181', isproc=False)
        p.action_label(far=False, name='loc_1118D', isproc=False)
        p.action_label(far=False, name='loc_111AD', isproc=False)
        p.action_label(far=False, name='loc_111B3', isproc=False)
        p.action_label(far=False, name='loc_111C6', isproc=False)
        p.action_label(far=False, name='loc_111DB', isproc=False)
        p.action_label(far=False, name='loc_111E8', isproc=False)
        p.action_label(far=False, name='loc_11204', isproc=False)
        p.action_label(far=False, name='loc_11217', isproc=False)
        p.action_label(far=False, name='loc_11256', isproc=False)
        p.action_label(far=False, name='loc_11265', isproc=False)
        p.action_label(far=False, name='loc_1126F', isproc=False)
        p.action_label(far=False, name='loc_112B4', isproc=False)
        p.action_label(far=False, name='loc_112C4', isproc=False)
        p.action_label(far=False, name='loc_112F1', isproc=False)
        p.action_label(far=False, name='loc_11316', isproc=False)
        p.action_label(far=False, name='loc_1131A', isproc=False)
        p.action_label(far=False, name='loc_1132D', isproc=False)
        p.action_label(far=False, name='loc_11348', isproc=False)
        p.action_label(far=False, name='loc_11359', isproc=False)
        p.action_label(far=False, name='loc_11365', isproc=False)
        p.action_label(far=False, name='loc_11382', isproc=False)
        p.action_label(far=False, name='loc_1138E', isproc=False)
        p.action_label(far=False, name='loc_113C6', isproc=False)
        p.action_label(far=False, name='loc_113E2', isproc=False)
        p.action_label(far=False, name='loc_113F8', isproc=False)
        p.action_label(far=False, name='loc_113FF', isproc=False)
        p.action_label(far=False, name='loc_11417', isproc=False)
        p.action_label(far=False, name='loc_11420', isproc=False)
        p.action_label(far=False, name='loc_11438', isproc=False)
        p.action_label(far=False, name='loc_11443', isproc=False)
        p.action_label(far=False, name='loc_1145A', isproc=False)
        p.action_label(far=False, name='loc_11494', isproc=False)
        p.action_label(far=False, name='loc_1149C', isproc=False)
        p.action_label(far=False, name='loc_114C0', isproc=False)
        p.action_label(far=False, name='loc_114DF', isproc=False)
        p.action_label(far=False, name='loc_11520', isproc=False)
        p.action_label(far=False, name='loc_11523', isproc=False)
        p.action_label(far=False, name='loc_1152A', isproc=False)
        p.action_label(far=False, name='loc_11531', isproc=False)
        p.action_label(far=False, name='loc_11539', isproc=False)
        p.action_label(far=False, name='loc_1154B', isproc=False)
        p.action_label(far=False, name='loc_11585', isproc=False)
        p.action_label(far=False, name='loc_1191C', isproc=False)
        p.action_label(far=False, name='loc_11967', isproc=False)
        p.action_label(far=False, name='loc_11991', isproc=False)
        p.action_label(far=False, name='loc_11999', isproc=False)
        p.action_label(far=False, name='loc_119AF', isproc=False)
        p.action_label(far=False, name='loc_119B2', isproc=False)
        p.action_label(far=False, name='loc_11A39', isproc=False)
        p.action_label(far=False, name='loc_11A81', isproc=False)
        p.action_label(far=False, name='loc_11A96', isproc=False)
        p.action_label(far=False, name='loc_11AAA', isproc=False)
        p.action_label(far=False, name='loc_11AC0', isproc=False)
        p.action_label(far=False, name='loc_11AF3', isproc=False)
        p.action_label(far=False, name='loc_11B09', isproc=False)
        p.action_label(far=False, name='loc_11B20', isproc=False)
        p.action_label(far=False, name='loc_11B28', isproc=False)
        p.action_label(far=False, name='loc_11B3D', isproc=False)
        p.action_label(far=False, name='loc_11B41', isproc=False)
        p.action_label(far=False, name='loc_11BB2', isproc=False)
        p.action_label(far=False, name='loc_11BBB', isproc=False)
        p.action_label(far=False, name='loc_11BBE', isproc=False)
        p.action_label(far=False, name='loc_11BC6', isproc=False)
        p.action_label(far=False, name='loc_11BCE', isproc=False)
        p.action_label(far=False, name='loc_11BD1', isproc=False)
        p.action_label(far=False, name='loc_11BE5', isproc=False)
        p.action_label(far=False, name='loc_11BEE', isproc=False)
        p.action_label(far=False, name='loc_11BF9', isproc=False)
        p.action_label(far=False, name='loc_11C04', isproc=False)
        p.action_label(far=False, name='loc_11C08', isproc=False)
        p.action_label(far=False, name='loc_11C14', isproc=False)
        p.action_label(far=False, name='loc_11C33', isproc=False)
        p.action_label(far=False, name='loc_11C40', isproc=False)
        p.action_label(far=False, name='loc_11CB8', isproc=False)
        p.action_label(far=False, name='loc_11D2D', isproc=False)
        p.action_label(far=False, name='loc_11E00', isproc=False)
        p.action_label(far=False, name='loc_11E51', isproc=False)
        p.action_label(far=False, name='loc_11E79', isproc=False)
        p.action_label(far=False, name='loc_11E9E', isproc=False)
        p.action_label(far=False, name='loc_11EB3', isproc=False)
        p.action_label(far=False, name='loc_11EB6', isproc=False)
        p.action_label(far=False, name='loc_11ED8', isproc=False)
        p.action_label(far=False, name='loc_11EED', isproc=False)
        p.action_label(far=False, name='loc_11EF0', isproc=False)
        p.action_label(far=False, name='loc_11F3C', isproc=False)
        p.action_label(far=False, name='loc_11F70', isproc=False)
        p.action_label(far=False, name='loc_11FA9', isproc=False)
        p.action_label(far=False, name='loc_11FCB', isproc=False)
        p.action_label(far=False, name='loc_11FD2', isproc=False)
        p.action_label(far=False, name='loc_11FD4', isproc=False)
        p.action_label(far=False, name='loc_11FD6', isproc=False)
        p.action_label(far=False, name='loc_11FF7', isproc=False)
        p.action_label(far=False, name='loc_12027', isproc=False)
        p.action_label(far=False, name='loc_12056', isproc=False)
        p.action_label(far=False, name='loc_12066', isproc=False)
        p.action_label(far=False, name='loc_1206B', isproc=False)
        p.action_label(far=False, name='loc_12071', isproc=False)
        p.action_label(far=False, name='loc_12075', isproc=False)
        p.action_label(far=False, name='loc_120AA', isproc=False)
        p.action_label(far=False, name='loc_120C4', isproc=False)
        p.action_label(far=False, name='loc_120E7', isproc=False)
        p.action_label(far=False, name='loc_120FD', isproc=False)
        p.action_label(far=False, name='loc_12106', isproc=False)
        p.action_label(far=False, name='loc_12117', isproc=False)
        p.action_label(far=False, name='loc_12123', isproc=False)
        p.action_label(far=False, name='loc_1212B', isproc=False)
        p.action_label(far=False, name='loc_1213C', isproc=False)
        p.action_label(far=False, name='loc_1219E', isproc=False)
        p.action_label(far=False, name='loc_121B9', isproc=False)
        p.action_label(far=False, name='loc_121CD', isproc=False)
        p.action_label(far=False, name='loc_121EE', isproc=False)
        p.action_label(far=False, name='loc_12215', isproc=False)
        p.action_label(far=False, name='loc_12216', isproc=False)
        p.action_label(far=False, name='loc_12228', isproc=False)
        p.action_label(far=False, name='loc_12239', isproc=False)
        p.action_label(far=False, name='loc_1224F', isproc=False)
        p.action_label(far=False, name='loc_12262', isproc=False)
        p.action_label(far=False, name='loc_12271', isproc=False)
        p.action_label(far=False, name='loc_122AE', isproc=False)
        p.action_label(far=False, name='loc_122B8', isproc=False)
        p.action_label(far=False, name='loc_122DA', isproc=False)
        p.action_label(far=False, name='loc_122DC', isproc=False)
        p.action_label(far=False, name='loc_122E3', isproc=False)
        p.action_label(far=False, name='loc_1234E', isproc=False)
        p.action_label(far=False, name='loc_1236C', isproc=False)
        p.action_label(far=False, name='loc_12386', isproc=False)
        p.action_label(far=False, name='loc_123B0', isproc=False)
        p.action_label(far=False, name='loc_123EE', isproc=False)
        p.action_label(far=False, name='loc_1242D', isproc=False)
        p.action_label(far=False, name='loc_12466', isproc=False)
        p.action_label(far=False, name='loc_1248B', isproc=False)
        p.action_label(far=False, name='loc_12493', isproc=False)
        p.action_label(far=False, name='loc_12497', isproc=False)
        p.action_label(far=False, name='loc_12508', isproc=False)
        p.action_label(far=False, name='loc_12529', isproc=False)
        p.action_label(far=False, name='loc_1253B', isproc=False)
        p.action_label(far=False, name='loc_12568', isproc=False)
        p.action_label(far=False, name='loc_125A1', isproc=False)
        p.action_label(far=False, name='loc_125F6', isproc=False)
        p.action_label(far=False, name='loc_12612', isproc=False)
        p.action_label(far=False, name='loc_12636', isproc=False)
        p.action_label(far=False, name='loc_1263D', isproc=False)
        p.action_label(far=False, name='loc_12644', isproc=False)
        p.action_label(far=False, name='loc_12655', isproc=False)
        p.action_label(far=False, name='loc_1265B', isproc=False)
        p.action_label(far=False, name='loc_126F0', isproc=False)
        p.action_label(far=False, name='loc_12702', isproc=False)
        p.action_label(far=False, name='loc_12721', isproc=False)
        p.action_label(far=False, name='loc_1272D', isproc=False)
        p.action_label(far=False, name='loc_1275F', isproc=False)
        p.action_label(far=False, name='loc_1276C', isproc=False)
        p.action_label(far=False, name='loc_12780', isproc=False)
        p.action_label(far=False, name='loc_1278F', isproc=False)
        p.action_label(far=False, name='loc_127BD', isproc=False)
        p.action_label(far=False, name='loc_127CE', isproc=False)
        p.action_label(far=False, name='loc_127FC', isproc=False)
        p.action_label(far=False, name='loc_1280D', isproc=False)
        p.action_label(far=False, name='loc_12870', isproc=False)
        p.action_label(far=False, name='loc_12898', isproc=False)
        p.action_label(far=False, name='loc_128BB', isproc=False)
        p.action_label(far=False, name='loc_128DD', isproc=False)
        p.action_label(far=False, name='loc_12913', isproc=False)
        p.action_label(far=False, name='loc_1291A', isproc=False)
        p.action_label(far=False, name='loc_1291E', isproc=False)
        p.action_label(far=False, name='loc_12921', isproc=False)
        p.action_label(far=False, name='loc_12A73', isproc=False)
        p.action_label(far=False, name='loc_12A98', isproc=False)
        p.action_label(far=False, name='loc_12AA9', isproc=False)
        p.action_label(far=False, name='loc_12ACB', isproc=False)
        p.action_label(far=False, name='loc_12ACE', isproc=False)
        p.action_label(far=False, name='loc_12AFB', isproc=False)
        p.action_label(far=False, name='loc_12B16', isproc=False)
        p.action_label(far=False, name='loc_12B42', isproc=False)
        p.action_label(far=False, name='loc_12B5A', isproc=False)
        p.action_label(far=False, name='loc_12B5F', isproc=False)
        p.action_label(far=False, name='loc_12B62', isproc=False)
        p.action_label(far=False, name='loc_12B71', isproc=False)
        p.action_label(far=False, name='loc_12B75', isproc=False)
        p.action_label(far=False, name='loc_12B92', isproc=False)
        p.action_label(far=False, name='loc_12B98', isproc=False)
        p.action_label(far=False, name='loc_12BA6', isproc=False)
        p.action_label(far=False, name='loc_12BB3', isproc=False)
        p.action_label(far=False, name='loc_12BC0', isproc=False)
        p.action_label(far=False, name='loc_12BCB', isproc=False)
        p.action_label(far=False, name='loc_12BEF', isproc=False)
        p.action_label(far=False, name='loc_12C3C', isproc=False)
        p.action_label(far=False, name='loc_12C75', isproc=False)
        p.action_label(far=False, name='loc_12C86', isproc=False)
        p.action_label(far=False, name='loc_12C8F', isproc=False)
        p.action_label(far=False, name='loc_12CA7', isproc=False)
        p.action_label(far=False, name='loc_12CFF', isproc=False)
        p.action_label(far=False, name='loc_12D2E', isproc=False)
        p.action_label(far=False, name='loc_12D30', isproc=False)
        p.action_label(far=False, name='loc_12D41', isproc=False)
        p.action_label(far=False, name='loc_12D4E', isproc=False)
        p.action_label(far=False, name='loc_12E55', isproc=False)
        p.action_label(far=False, name='loc_12E6B', isproc=False)
        p.action_label(far=False, name='loc_12E74', isproc=False)
        p.action_label(far=False, name='loc_12E7D', isproc=False)
        p.action_label(far=False, name='loc_12E9F', isproc=False)
        p.action_label(far=False, name='loc_12EAE', isproc=False)
        p.action_label(far=False, name='loc_12EB2', isproc=False)
        p.action_label(far=False, name='loc_12F78', isproc=False)
        p.action_label(far=False, name='loc_1301E', isproc=False)
        p.action_label(far=False, name='loc_1302C', isproc=False)
        p.action_label(far=False, name='loc_13038', isproc=False)
        p.action_label(far=False, name='loc_1305A', isproc=False)
        p.action_label(far=False, name='loc_1306D', isproc=False)
        p.action_label(far=False, name='loc_13080', isproc=False)
        p.action_label(far=False, name='loc_13091', isproc=False)
        p.action_label(far=False, name='loc_130A2', isproc=False)
        p.action_label(far=False, name='loc_130AE', isproc=False)
        p.action_label(far=False, name='loc_130BC', isproc=False)
        p.action_label(far=False, name='loc_130F6', isproc=False)
        p.action_label(far=False, name='loc_1310D', isproc=False)
        p.action_label(far=False, name='loc_13120', isproc=False)
        p.action_label(far=False, name='loc_13127', isproc=False)
        p.action_label(far=False, name='loc_13131', isproc=False)
        p.action_label(far=False, name='loc_13148', isproc=False)
        p.action_label(far=False, name='loc_1315A', isproc=False)
        p.action_label(far=False, name='loc_13162', isproc=False)
        p.action_label(far=False, name='loc_1316B', isproc=False)
        p.action_label(far=False, name='loc_13171', isproc=False)
        p.action_label(far=False, name='loc_131B3', isproc=False)
        p.action_label(far=False, name='loc_131D0', isproc=False)
        p.action_label(far=False, name='loc_13202', isproc=False)
        p.action_label(far=False, name='loc_13471', isproc=False)
        p.action_label(far=False, name='loc_13499', isproc=False)
        p.action_label(far=False, name='loc_135D3', isproc=False)
        p.action_label(far=False, name='loc_135E0', isproc=False)
        p.action_label(far=False, name='loc_135F2', isproc=False)
        p.action_label(far=False, name='loc_135FD', isproc=False)
        p.action_label(far=False, name='loc_13608', isproc=False)
        p.action_label(far=False, name='loc_1361C', isproc=False)
        p.action_label(far=False, name='loc_13646', isproc=False)
        p.action_label(far=False, name='loc_13661', isproc=False)
        p.action_label(far=False, name='loc_13677', isproc=False)
        p.action_label(far=False, name='loc_136CB', isproc=False)
        p.action_label(far=False, name='loc_13705', isproc=False)
        p.action_label(far=False, name='loc_13718', isproc=False)
        p.action_label(far=False, name='loc_13742', isproc=False)
        p.action_label(far=False, name='loc_13791', isproc=False)
        p.action_label(far=False, name='loc_1379F', isproc=False)
        p.action_label(far=False, name='loc_137A9', isproc=False)
        p.action_label(far=False, name='loc_137BE', isproc=False)
        p.action_label(far=False, name='loc_137CE', isproc=False)
        p.action_label(far=False, name='loc_137F0', isproc=False)
        p.action_label(far=False, name='loc_13848', isproc=False)
        p.action_label(far=False, name='loc_13863', isproc=False)
        p.action_label(far=False, name='loc_1386C', isproc=False)
        p.action_label(far=False, name='loc_1388B', isproc=False)
        p.action_label(far=False, name='loc_13897', isproc=False)
        p.action_label(far=False, name='loc_138A9', isproc=False)
        p.action_label(far=False, name='loc_138B3', isproc=False)
        p.action_label(far=False, name='loc_138B7', isproc=False)
        p.action_label(far=False, name='loc_138BD', isproc=False)
        p.action_label(far=False, name='loc_138C7', isproc=False)
        p.action_label(far=False, name='loc_138DE', isproc=False)
        p.action_label(far=False, name='loc_138F6', isproc=False)
        p.action_label(far=False, name='loc_138FC', isproc=False)
        p.action_label(far=False, name='loc_1390B', isproc=False)
        p.action_label(far=False, name='loc_13917', isproc=False)
        p.action_label(far=False, name='loc_1391F', isproc=False)
        p.action_label(far=False, name='loc_13929', isproc=False)
        p.action_label(far=False, name='loc_13931', isproc=False)
        p.action_label(far=False, name='loc_13943', isproc=False)
        p.action_label(far=False, name='loc_1394D', isproc=False)
        p.action_label(far=False, name='loc_13950', isproc=False)
        p.action_label(far=False, name='loc_1396D', isproc=False)
        p.action_label(far=False, name='loc_1397B', isproc=False)
        p.action_label(far=False, name='loc_13981', isproc=False)
        p.action_label(far=False, name='loc_1399D', isproc=False)
        p.action_label(far=False, name='loc_139CB', isproc=False)
        p.action_label(far=False, name='loc_139D5', isproc=False)
        p.action_label(far=False, name='loc_139D8', isproc=False)
        p.action_label(far=False, name='loc_139F8', isproc=False)
        p.action_label(far=False, name='loc_13A06', isproc=False)
        p.action_label(far=False, name='loc_13A0C', isproc=False)
        p.action_label(far=False, name='loc_13A30', isproc=False)
        p.action_label(far=False, name='loc_13A36', isproc=False)
        p.action_label(far=False, name='loc_13A5B', isproc=False)
        p.action_label(far=False, name='loc_13A60', isproc=False)
        p.action_label(far=False, name='loc_13A65', isproc=False)
        p.action_label(far=False, name='loc_13A9B', isproc=False)
        p.action_label(far=False, name='loc_13AAE', isproc=False)
        p.action_label(far=False, name='loc_13AC6', isproc=False)
        p.action_label(far=False, name='loc_13ACE', isproc=False)
        p.action_label(far=False, name='loc_13ADE', isproc=False)
        p.action_label(far=False, name='loc_13AE0', isproc=False)
        p.action_label(far=False, name='loc_13AE8', isproc=False)
        p.action_label(far=False, name='loc_13AEF', isproc=False)
        p.action_label(far=False, name='loc_13AF2', isproc=False)
        p.action_label(far=False, name='loc_13AFF', isproc=False)
        p.action_label(far=False, name='loc_13B29', isproc=False)
        p.action_label(far=False, name='loc_13B34', isproc=False)
        p.action_label(far=False, name='loc_13B3E', isproc=False)
        p.action_label(far=False, name='loc_13B48', isproc=False)
        p.action_label(far=False, name='loc_13B50', isproc=False)
        p.action_label(far=False, name='loc_13B5B', isproc=False)
        p.action_label(far=False, name='loc_13B66', isproc=False)
        p.action_label(far=False, name='loc_13B72', isproc=False)
        p.action_label(far=False, name='loc_13B81', isproc=False)
        p.action_label(far=False, name='loc_13BBB', isproc=False)
        p.action_label(far=False, name='loc_13BE7', isproc=False)
        p.action_label(far=False, name='loc_13BF1', isproc=False)
        p.action_label(far=False, name='loc_13C1A', isproc=False)
        p.action_label(far=False, name='loc_13C2D', isproc=False)
        p.action_label(far=False, name='loc_13C47', isproc=False)
        p.action_label(far=False, name='loc_13C77', isproc=False)
        p.action_label(far=False, name='loc_13CAE', isproc=False)
        p.action_label(far=False, name='loc_13D36', isproc=False)
        p.action_label(far=False, name='loc_13D4B', isproc=False)
        p.action_label(far=False, name='loc_13D8D', isproc=False)
        p.action_label(far=False, name='loc_13D9A', isproc=False)
        p.action_label(far=False, name='loc_13DF9', isproc=False)
        p.action_label(far=False, name='loc_13E03', isproc=False)
        p.action_label(far=False, name='loc_13E18', isproc=False)
        p.action_label(far=False, name='loc_13E2A', isproc=False)
        p.action_label(far=False, name='loc_13E39', isproc=False)
        p.action_label(far=False, name='loc_13E5E', isproc=False)
        p.action_label(far=False, name='loc_13E6F', isproc=False)
        p.action_label(far=False, name='loc_13ED3', isproc=False)
        p.action_label(far=False, name='loc_13EE8', isproc=False)
        p.action_label(far=False, name='loc_13F0C', isproc=False)
        p.action_label(far=False, name='loc_13F34', isproc=False)
        p.action_label(far=False, name='loc_13F42', isproc=False)
        p.action_label(far=False, name='loc_13F6D', isproc=False)
        p.action_label(far=False, name='loc_13F7C', isproc=False)
        p.action_label(far=False, name='loc_13F81', isproc=False)
        p.action_label(far=False, name='loc_13F8F', isproc=False)
        p.action_label(far=False, name='loc_13F96', isproc=False)
        p.action_label(far=False, name='loc_13FAB', isproc=False)
        p.action_label(far=False, name='loc_13FB4', isproc=False)
        p.action_label(far=False, name='loc_13FB7', isproc=False)
        p.action_label(far=False, name='loc_13FCE', isproc=False)
        p.action_label(far=False, name='loc_14000', isproc=False)
        p.action_label(far=False, name='loc_1401A', isproc=False)
        p.action_label(far=False, name='loc_1403D', isproc=False)
        p.action_label(far=False, name='loc_14077', isproc=False)
        p.action_label(far=False, name='loc_14080', isproc=False)
        p.action_label(far=False, name='loc_14090', isproc=False)
        p.action_label(far=False, name='loc_140A2', isproc=False)
        p.action_label(far=False, name='loc_140B3', isproc=False)
        p.action_label(far=False, name='loc_140D8', isproc=False)
        p.action_label(far=False, name='loc_140E6', isproc=False)
        p.action_label(far=False, name='loc_140F7', isproc=False)
        p.action_label(far=False, name='loc_140FE', isproc=False)
        p.action_label(far=False, name='loc_14111', isproc=False)
        p.action_label(far=False, name='loc_14131', isproc=False)
        p.action_label(far=False, name='loc_1413E', isproc=False)
        p.action_label(far=False, name='loc_14142', isproc=False)
        p.action_label(far=False, name='loc_14153', isproc=False)
        p.action_label(far=False, name='loc_14184', isproc=False)
        p.action_label(far=False, name='loc_1419E', isproc=False)
        p.action_label(far=False, name='loc_141A2', isproc=False)
        p.action_label(far=False, name='loc_141BA', isproc=False)
        p.action_label(far=False, name='loc_141DA', isproc=False)
        p.action_label(far=False, name='loc_1420D', isproc=False)
        p.action_label(far=False, name='loc_14332', isproc=False)
        p.action_label(far=False, name='loc_14AB3', isproc=False)
        p.action_label(far=False, name='loc_14ABB', isproc=False)
        p.action_label(far=False, name='loc_14AE7', isproc=False)
        p.action_label(far=False, name='loc_14AF5', isproc=False)
        p.action_label(far=False, name='loc_14AFD', isproc=False)
        p.action_label(far=False, name='loc_14B36', isproc=False)
        p.action_label(far=False, name='loc_14B3E', isproc=False)
        p.action_label(far=False, name='loc_14B47', isproc=False)
        p.action_label(far=False, name='loc_14B50', isproc=False)
        p.action_label(far=False, name='loc_14B6A', isproc=False)
        p.action_label(far=False, name='loc_14B76', isproc=False)
        p.action_label(far=False, name='loc_14B77', isproc=False)
        p.action_label(far=False, name='loc_14B87', isproc=False)
        p.action_label(far=False, name='loc_14BA0', isproc=False)
        p.action_label(far=False, name='loc_14BD8', isproc=False)
        p.action_label(far=False, name='loc_14BE8', isproc=False)
        p.action_label(far=False, name='loc_14BE9', isproc=False)
        p.action_label(far=False, name='loc_14BFD', isproc=False)
        p.action_label(far=False, name='loc_14C89', isproc=False)
        p.action_label(far=False, name='loc_14C99', isproc=False)
        p.action_label(far=False, name='loc_14CA1', isproc=False)
        p.action_label(far=False, name='loc_14CAA', isproc=False)
        p.action_label(far=False, name='loc_14CB2', isproc=False)
        p.action_label(far=False, name='loc_14CBF', isproc=False)
        p.action_label(far=False, name='loc_14CC7', isproc=False)
        p.action_label(far=False, name='loc_14CE8', isproc=False)
        p.action_label(far=False, name='loc_14E10', isproc=False)
        p.action_label(far=False, name='loc_14E29', isproc=False)
        p.action_label(far=False, name='loc_14E4D', isproc=False)
        p.action_label(far=False, name='loc_14E66', isproc=False)
        p.action_label(far=False, name='loc_14E6E', isproc=False)
        p.action_label(far=False, name='loc_14E79', isproc=False)
        p.action_label(far=False, name='loc_14E8C', isproc=False)
        p.action_label(far=False, name='loc_14EA1', isproc=False)
        p.action_label(far=False, name='loc_14ECC', isproc=False)
        p.action_label(far=False, name='loc_14F3C', isproc=False)
        p.action_label(far=False, name='loc_14F50', isproc=False)
        p.action_label(far=False, name='loc_14F95', isproc=False)
        p.action_label(far=False, name='loc_14FE3', isproc=False)
        p.action_label(far=False, name='loc_1501D', isproc=False)
        p.action_label(far=False, name='loc_15047', isproc=False)
        p.action_label(far=False, name='loc_1507E', isproc=False)
        p.action_label(far=False, name='loc_150E8', isproc=False)
        p.action_label(far=False, name='loc_15120', isproc=False)
        p.action_label(far=False, name='loc_1513C', isproc=False)
        p.action_label(far=False, name='loc_1514E', isproc=False)
        p.action_label(far=False, name='loc_151C9', isproc=False)
        p.action_label(far=False, name='loc_15302', isproc=False)
        p.action_label(far=False, name='loc_15325', isproc=False)
        p.action_label(far=False, name='loc_15380', isproc=False)
        p.action_label(far=False, name='loc_1538F', isproc=False)
        p.action_label(far=False, name='loc_1539A', isproc=False)
        p.action_label(far=False, name='loc_153D8', isproc=False)
        p.action_label(far=False, name='loc_153F8', isproc=False)
        p.action_label(far=False, name='loc_15401', isproc=False)
        p.action_label(far=False, name='loc_15406', isproc=False)
        p.action_label(far=False, name='loc_1540E', isproc=False)
        p.action_label(far=False, name='loc_15421', isproc=False)
        p.action_label(far=False, name='loc_15428', isproc=False)
        p.action_label(far=False, name='loc_15434', isproc=False)
        p.action_label(far=False, name='loc_15439', isproc=False)
        p.action_label(far=False, name='loc_15447', isproc=False)
        p.action_label(far=False, name='loc_1546F', isproc=False)
        p.action_label(far=False, name='loc_1548D', isproc=False)
        p.action_label(far=False, name='loc_154B5', isproc=False)
        p.action_label(far=False, name='loc_15525', isproc=False)
        p.action_label(far=False, name='loc_155A8', isproc=False)
        p.action_label(far=False, name='loc_155B8', isproc=False)
        p.action_label(far=False, name='loc_155C8', isproc=False)
        p.action_label(far=False, name='loc_155D8', isproc=False)
        p.action_label(far=False, name='loc_155E8', isproc=False)
        p.action_label(far=False, name='loc_155F8', isproc=False)
        p.action_label(far=False, name='loc_15608', isproc=False)
        p.action_label(far=False, name='loc_15618', isproc=False)
        p.action_label(far=False, name='loc_15621', isproc=False)
        p.action_label(far=False, name='loc_15628', isproc=False)
        p.action_label(far=False, name='loc_15638', isproc=False)
        p.action_label(far=False, name='loc_15648', isproc=False)
        p.action_label(far=False, name='loc_15658', isproc=False)
        p.action_label(far=False, name='loc_15668', isproc=False)
        p.action_label(far=False, name='loc_15678', isproc=False)
        p.action_label(far=False, name='loc_15688', isproc=False)
        p.action_label(far=False, name='loc_15698', isproc=False)
        p.action_label(far=False, name='loc_156A1', isproc=False)
        p.action_label(far=False, name='loc_1578C', isproc=False)
        p.action_label(far=False, name='loc_157BD', isproc=False)
        p.action_label(far=False, name='loc_157D3', isproc=False)
        p.action_label(far=False, name='loc_157DD', isproc=False)
        p.action_label(far=False, name='loc_157E5', isproc=False)
        p.action_label(far=False, name='loc_15877', isproc=False)
        p.action_label(far=False, name='loc_15891', isproc=False)
        p.action_label(far=False, name='loc_158C0', isproc=False)
        p.action_label(far=False, name='loc_158EF', isproc=False)
        p.action_label(far=False, name='loc_1591E', isproc=False)
        p.action_label(far=False, name='loc_1594D', isproc=False)
        p.action_label(far=False, name='loc_1597C', isproc=False)
        p.action_label(far=False, name='loc_159AB', isproc=False)
        p.action_label(far=False, name='loc_159DA', isproc=False)
        p.action_label(far=False, name='loc_15A09', isproc=False)
        p.action_label(far=False, name='loc_15A38', isproc=False)
        p.action_label(far=False, name='loc_15A67', isproc=False)
        p.action_label(far=False, name='loc_15A96', isproc=False)
        p.action_label(far=False, name='loc_15AC5', isproc=False)
        p.action_label(far=False, name='loc_15AF4', isproc=False)
        p.action_label(far=False, name='loc_15B23', isproc=False)
        p.action_label(far=False, name='loc_15B52', isproc=False)
        p.action_label(far=False, name='loc_15B5B', isproc=False)
        p.action_label(far=False, name='loc_15E3D', isproc=False)
        p.action_label(far=False, name='loc_15E48', isproc=False)
        p.action_label(far=False, name='loc_15E5B', isproc=False)
        p.action_label(far=False, name='loc_15E6E', isproc=False)
        p.action_label(far=False, name='loc_15E81', isproc=False)
        p.action_label(far=False, name='loc_15E94', isproc=False)
        p.action_label(far=False, name='loc_15EA7', isproc=False)
        p.action_label(far=False, name='loc_15EBA', isproc=False)
        p.action_label(far=False, name='loc_15ECD', isproc=False)
        p.action_label(far=False, name='loc_15EE0', isproc=False)
        p.action_label(far=False, name='loc_15EF3', isproc=False)
        p.action_label(far=False, name='loc_15F06', isproc=False)
        p.action_label(far=False, name='loc_15F19', isproc=False)
        p.action_label(far=False, name='loc_15F2C', isproc=False)
        p.action_label(far=False, name='loc_15F3F', isproc=False)
        p.action_label(far=False, name='loc_15F52', isproc=False)
        p.action_label(far=False, name='loc_15F65', isproc=False)
        p.action_label(far=False, name='loc_15F78', isproc=False)
        p.action_label(far=False, name='loc_15F81', isproc=False)
        p.action_label(far=False, name='loc_160D0', isproc=False)
        p.action_label(far=False, name='loc_160E0', isproc=False)
        p.action_label(far=False, name='loc_160F0', isproc=False)
        p.action_label(far=False, name='loc_16100', isproc=False)
        p.action_label(far=False, name='loc_16110', isproc=False)
        p.action_label(far=False, name='loc_16120', isproc=False)
        p.action_label(far=False, name='loc_16130', isproc=False)
        p.action_label(far=False, name='loc_16140', isproc=False)
        p.action_label(far=False, name='loc_16150', isproc=False)
        p.action_label(far=False, name='loc_16160', isproc=False)
        p.action_label(far=False, name='loc_16165', isproc=False)
        p.action_label(far=False, name='loc_16170', isproc=False)
        p.action_label(far=False, name='loc_16180', isproc=False)
        p.action_label(far=False, name='loc_16190', isproc=False)
        p.action_label(far=False, name='loc_161A0', isproc=False)
        p.action_label(far=False, name='loc_161B0', isproc=False)
        p.action_label(far=False, name='loc_161C0', isproc=False)
        p.action_label(far=False, name='loc_161C9', isproc=False)
        p.action_label(far=False, name='loc_1633C', isproc=False)
        p.action_label(far=False, name='loc_16356', isproc=False)
        p.action_label(far=False, name='loc_16369', isproc=False)
        p.action_label(far=False, name='loc_16385', isproc=False)
        p.action_label(far=False, name='loc_163B4', isproc=False)
        p.action_label(far=False, name='loc_163E3', isproc=False)
        p.action_label(far=False, name='loc_16412', isproc=False)
        p.action_label(far=False, name='loc_16441', isproc=False)
        p.action_label(far=False, name='loc_1646D', isproc=False)
        p.action_label(far=False, name='loc_16470', isproc=False)
        p.action_label(far=False, name='loc_1649F', isproc=False)
        p.action_label(far=False, name='loc_164CE', isproc=False)
        p.action_label(far=False, name='loc_164FD', isproc=False)
        p.action_label(far=False, name='loc_1652C', isproc=False)
        p.action_label(far=False, name='loc_1655B', isproc=False)
        p.action_label(far=False, name='loc_16568', isproc=False)
        p.action_label(far=False, name='loc_1658A', isproc=False)
        p.action_label(far=False, name='loc_165B9', isproc=False)
        p.action_label(far=False, name='loc_165E8', isproc=False)
        p.action_label(far=False, name='loc_16617', isproc=False)
        p.action_label(far=False, name='loc_16620', isproc=False)
        p.action_label(far=False, name='loc_16689', isproc=False)
        p.action_label(far=False, name='loc_1676A', isproc=False)
        p.action_label(far=False, name='loc_16900', isproc=False)
        p.action_label(far=False, name='loc_1690B', isproc=False)
        p.action_label(far=False, name='loc_16929', isproc=False)
        p.action_label(far=False, name='loc_16942', isproc=False)
        p.action_label(far=False, name='loc_16959', isproc=False)
        p.action_label(far=False, name='loc_16963', isproc=False)
        p.action_label(far=False, name='loc_1696C', isproc=False)
        p.action_label(far=False, name='loc_1697F', isproc=False)
        p.action_label(far=False, name='loc_16992', isproc=False)
        p.action_label(far=False, name='loc_169A5', isproc=False)
        p.action_label(far=False, name='loc_169B8', isproc=False)
        p.action_label(far=False, name='loc_169CB', isproc=False)
        p.action_label(far=False, name='loc_169DE', isproc=False)
        p.action_label(far=False, name='loc_169F1', isproc=False)
        p.action_label(far=False, name='loc_16A04', isproc=False)
        p.action_label(far=False, name='loc_16A17', isproc=False)
        p.action_label(far=False, name='loc_16A2A', isproc=False)
        p.action_label(far=False, name='loc_16A3D', isproc=False)
        p.action_label(far=False, name='loc_16A50', isproc=False)
        p.action_label(far=False, name='loc_16A63', isproc=False)
        p.action_label(far=False, name='loc_16A76', isproc=False)
        p.action_label(far=False, name='loc_16A89', isproc=False)
        p.action_label(far=False, name='loc_16A92', isproc=False)
        p.action_label(far=False, name='loc_16BB0', isproc=False)
        p.action_label(far=False, name='loc_16BC6', isproc=False)
        p.action_label(far=False, name='loc_16BCC', isproc=False)
        p.action_label(far=False, name='loc_16BD2', isproc=False)
        p.action_label(far=False, name='loc_16BD8', isproc=False)
        p.action_label(far=False, name='loc_16BDE', isproc=False)
        p.action_label(far=False, name='loc_16BE4', isproc=False)
        p.action_label(far=False, name='loc_16BEA', isproc=False)
        p.action_label(far=False, name='loc_16BF0', isproc=False)
        p.action_label(far=False, name='loc_16BF6', isproc=False)
        p.action_label(far=False, name='loc_16BFC', isproc=False)
        p.action_label(far=False, name='loc_16C02', isproc=False)
        p.action_label(far=False, name='loc_16C08', isproc=False)
        p.action_label(far=False, name='loc_16C0E', isproc=False)
        p.action_label(far=False, name='loc_16C14', isproc=False)
        p.action_label(far=False, name='loc_16C1A', isproc=False)
        p.action_label(far=False, name='loc_16C20', isproc=False)
        p.action_label(far=False, name='loc_16C22', isproc=False)
        p.action_label(far=False, name='loc_16C66', isproc=False)
        p.action_label(far=False, name='loc_16C88', isproc=False)
        p.action_label(far=False, name='loc_16C9D', isproc=False)
        p.action_label(far=False, name='loc_16CB9', isproc=False)
        p.action_label(far=False, name='loc_16CBC', isproc=False)
        p.action_label(far=False, name='loc_16CBE', isproc=False)
        p.action_label(far=False, name='loc_16CEB', isproc=False)
        p.action_label(far=False, name='loc_16CEE', isproc=False)
        p.action_label(far=False, name='loc_16D0B', isproc=False)
        p.action_label(far=False, name='loc_16D16', isproc=False)
        p.action_label(far=False, name='loc_16D21', isproc=False)
        p.action_label(far=False, name='loc_16D2C', isproc=False)
        p.action_label(far=False, name='loc_16D37', isproc=False)
        p.action_label(far=False, name='loc_16D42', isproc=False)
        p.action_label(far=False, name='loc_16D4D', isproc=False)
        p.action_label(far=False, name='loc_16D58', isproc=False)
        p.action_label(far=False, name='loc_16D5F', isproc=False)
        p.action_label(far=False, name='loc_16D63', isproc=False)
        p.action_label(far=False, name='loc_16D6E', isproc=False)
        p.action_label(far=False, name='loc_16D79', isproc=False)
        p.action_label(far=False, name='loc_16D84', isproc=False)
        p.action_label(far=False, name='loc_16D8F', isproc=False)
        p.action_label(far=False, name='loc_16D9A', isproc=False)
        p.action_label(far=False, name='loc_16DA5', isproc=False)
        p.action_label(far=False, name='loc_16DB0', isproc=False)
        p.action_label(far=False, name='loc_16DBB', isproc=False)
        p.action_label(far=False, name='loc_16E24', isproc=False)
        p.action_label(far=False, name='loc_16E3F', isproc=False)
        p.action_label(far=False, name='loc_16E56', isproc=False)
        p.action_label(far=False, name='loc_16E5D', isproc=False)
        p.action_label(far=False, name='loc_16E74', isproc=False)
        p.action_label(far=False, name='loc_16E7B', isproc=False)
        p.action_label(far=False, name='loc_16E92', isproc=False)
        p.action_label(far=False, name='loc_16E99', isproc=False)
        p.action_label(far=False, name='loc_16EB0', isproc=False)
        p.action_label(far=False, name='loc_16EB7', isproc=False)
        p.action_label(far=False, name='loc_16ECE', isproc=False)
        p.action_label(far=False, name='loc_16ED5', isproc=False)
        p.action_label(far=False, name='loc_16EEC', isproc=False)
        p.action_label(far=False, name='loc_16EF3', isproc=False)
        p.action_label(far=False, name='loc_16F0A', isproc=False)
        p.action_label(far=False, name='loc_16F11', isproc=False)
        p.action_label(far=False, name='loc_16F1D', isproc=False)
        p.action_label(far=False, name='loc_16F28', isproc=False)
        p.action_label(far=False, name='loc_16F2F', isproc=False)
        p.action_label(far=False, name='loc_16F46', isproc=False)
        p.action_label(far=False, name='loc_16F4D', isproc=False)
        p.action_label(far=False, name='loc_16F64', isproc=False)
        p.action_label(far=False, name='loc_16F6B', isproc=False)
        p.action_label(far=False, name='loc_16F82', isproc=False)
        p.action_label(far=False, name='loc_16F89', isproc=False)
        p.action_label(far=False, name='loc_16FA0', isproc=False)
        p.action_label(far=False, name='loc_16FA7', isproc=False)
        p.action_label(far=False, name='loc_16FBE', isproc=False)
        p.action_label(far=False, name='loc_16FC5', isproc=False)
        p.action_label(far=False, name='loc_16FDC', isproc=False)
        p.action_label(far=False, name='loc_16FE3', isproc=False)
        p.action_label(far=False, name='loc_16FFA', isproc=False)
        p.action_label(far=False, name='loc_17001', isproc=False)
        p.action_label(far=False, name='loc_17008', isproc=False)
        p.action_label(far=False, name='loc_1701C', isproc=False)
        p.action_label(far=False, name='loc_17037', isproc=False)
        p.action_label(far=False, name='loc_17053', isproc=False)
        p.action_label(far=False, name='loc_1706F', isproc=False)
        p.action_label(far=False, name='loc_1708B', isproc=False)
        p.action_label(far=False, name='loc_170A7', isproc=False)
        p.action_label(far=False, name='loc_170C3', isproc=False)
        p.action_label(far=False, name='loc_170DF', isproc=False)
        p.action_label(far=False, name='loc_170FB', isproc=False)
        p.action_label(far=False, name='loc_17117', isproc=False)
        p.action_label(far=False, name='loc_17133', isproc=False)
        p.action_label(far=False, name='loc_1714F', isproc=False)
        p.action_label(far=False, name='loc_1716B', isproc=False)
        p.action_label(far=False, name='loc_17187', isproc=False)
        p.action_label(far=False, name='loc_171A3', isproc=False)
        p.action_label(far=False, name='loc_171BF', isproc=False)
        p.action_label(far=False, name='loc_171D3', isproc=False)
        p.action_label(far=False, name='loc_171DA', isproc=False)
        p.action_label(far=False, name='loc_171F8', isproc=False)
        p.action_label(far=False, name='loc_17202', isproc=False)
        p.action_label(far=False, name='loc_17212', isproc=False)
        p.action_label(far=False, name='loc_1721A', isproc=False)
        p.action_label(far=False, name='loc_17254', isproc=False)
        p.action_label(far=False, name='loc_17257', isproc=False)
        p.action_label(far=False, name='loc_1727F', isproc=False)
        p.action_label(far=False, name='loc_1728F', isproc=False)
        p.action_label(far=False, name='loc_1729F', isproc=False)
        p.action_label(far=False, name='loc_172AF', isproc=False)
        p.action_label(far=False, name='loc_172BF', isproc=False)
        p.action_label(far=False, name='loc_172CF', isproc=False)
        p.action_label(far=False, name='loc_172DF', isproc=False)
        p.action_label(far=False, name='loc_172EF', isproc=False)
        p.action_label(far=False, name='loc_172FF', isproc=False)
        p.action_label(far=False, name='loc_1730F', isproc=False)
        p.action_label(far=False, name='loc_1731F', isproc=False)
        p.action_label(far=False, name='loc_1732F', isproc=False)
        p.action_label(far=False, name='loc_1733F', isproc=False)
        p.action_label(far=False, name='loc_1734F', isproc=False)
        p.action_label(far=False, name='loc_1735F', isproc=False)
        p.action_label(far=False, name='loc_1736F', isproc=False)
        p.action_label(far=False, name='loc_17376', isproc=False)
        p.action_label(far=False, name='loc_17441', isproc=False)
        p.action_label(far=False, name='loc_1745C', isproc=False)
        p.action_label(far=False, name='loc_17473', isproc=False)
        p.action_label(far=False, name='loc_1747A', isproc=False)
        p.action_label(far=False, name='loc_17491', isproc=False)
        p.action_label(far=False, name='loc_17498', isproc=False)
        p.action_label(far=False, name='loc_174AF', isproc=False)
        p.action_label(far=False, name='loc_174B6', isproc=False)
        p.action_label(far=False, name='loc_174CD', isproc=False)
        p.action_label(far=False, name='loc_174D4', isproc=False)
        p.action_label(far=False, name='loc_174EB', isproc=False)
        p.action_label(far=False, name='loc_174F2', isproc=False)
        p.action_label(far=False, name='loc_17509', isproc=False)
        p.action_label(far=False, name='loc_17510', isproc=False)
        p.action_label(far=False, name='loc_17527', isproc=False)
        p.action_label(far=False, name='loc_1752E', isproc=False)
        p.action_label(far=False, name='loc_17545', isproc=False)
        p.action_label(far=False, name='loc_1754C', isproc=False)
        p.action_label(far=False, name='loc_1754F', isproc=False)
        p.action_label(far=False, name='loc_17563', isproc=False)
        p.action_label(far=False, name='loc_1756A', isproc=False)
        p.action_label(far=False, name='loc_17581', isproc=False)
        p.action_label(far=False, name='loc_17588', isproc=False)
        p.action_label(far=False, name='loc_1759F', isproc=False)
        p.action_label(far=False, name='loc_175A6', isproc=False)
        p.action_label(far=False, name='loc_175BD', isproc=False)
        p.action_label(far=False, name='loc_175C4', isproc=False)
        p.action_label(far=False, name='loc_175DB', isproc=False)
        p.action_label(far=False, name='loc_175E2', isproc=False)
        p.action_label(far=False, name='loc_175F9', isproc=False)
        p.action_label(far=False, name='loc_17600', isproc=False)
        p.action_label(far=False, name='loc_17617', isproc=False)
        p.action_label(far=False, name='loc_1761E', isproc=False)
        p.action_label(far=False, name='loc_17625', isproc=False)
        p.action_label(far=False, name='loc_17639', isproc=False)
        p.action_label(far=False, name='loc_17654', isproc=False)
        p.action_label(far=False, name='loc_17670', isproc=False)
        p.action_label(far=False, name='loc_1768C', isproc=False)
        p.action_label(far=False, name='loc_176A8', isproc=False)
        p.action_label(far=False, name='loc_176C4', isproc=False)
        p.action_label(far=False, name='loc_176E0', isproc=False)
        p.action_label(far=False, name='loc_176FC', isproc=False)
        p.action_label(far=False, name='loc_17718', isproc=False)
        p.action_label(far=False, name='loc_17734', isproc=False)
        p.action_label(far=False, name='loc_17750', isproc=False)
        p.action_label(far=False, name='loc_1776C', isproc=False)
        p.action_label(far=False, name='loc_17788', isproc=False)
        p.action_label(far=False, name='loc_177A4', isproc=False)
        p.action_label(far=False, name='loc_177C0', isproc=False)
        p.action_label(far=False, name='loc_177DC', isproc=False)
        p.action_label(far=False, name='loc_17819', isproc=False)
        p.action_label(far=False, name='loc_1781C', isproc=False)
        p.action_label(far=False, name='loc_17839', isproc=False)
        p.action_label(far=False, name='loc_1784C', isproc=False)
        p.action_label(far=False, name='loc_1785F', isproc=False)
        p.action_label(far=False, name='loc_17872', isproc=False)
        p.action_label(far=False, name='loc_17885', isproc=False)
        p.action_label(far=False, name='loc_17898', isproc=False)
        p.action_label(far=False, name='loc_178AB', isproc=False)
        p.action_label(far=False, name='loc_178BE', isproc=False)
        p.action_label(far=False, name='loc_178D1', isproc=False)
        p.action_label(far=False, name='loc_178E4', isproc=False)
        p.action_label(far=False, name='loc_178F7', isproc=False)
        p.action_label(far=False, name='loc_1790A', isproc=False)
        p.action_label(far=False, name='loc_1791D', isproc=False)
        p.action_label(far=False, name='loc_17930', isproc=False)
        p.action_label(far=False, name='loc_17943', isproc=False)
        p.action_label(far=False, name='loc_17956', isproc=False)
        p.action_label(far=False, name='loc_1795D', isproc=False)
        p.action_label(far=False, name='loc_17A58', isproc=False)
        p.action_label(far=False, name='loc_17A72', isproc=False)
        p.action_label(far=False, name='loc_17A89', isproc=False)
        p.action_label(far=False, name='loc_17A8F', isproc=False)
        p.action_label(far=False, name='loc_17AA6', isproc=False)
        p.action_label(far=False, name='loc_17AAC', isproc=False)
        p.action_label(far=False, name='loc_17AC3', isproc=False)
        p.action_label(far=False, name='loc_17AC9', isproc=False)
        p.action_label(far=False, name='loc_17AE0', isproc=False)
        p.action_label(far=False, name='loc_17AE6', isproc=False)
        p.action_label(far=False, name='loc_17AFD', isproc=False)
        p.action_label(far=False, name='loc_17B03', isproc=False)
        p.action_label(far=False, name='loc_17B1A', isproc=False)
        p.action_label(far=False, name='loc_17B20', isproc=False)
        p.action_label(far=False, name='loc_17B37', isproc=False)
        p.action_label(far=False, name='loc_17B3D', isproc=False)
        p.action_label(far=False, name='loc_17B54', isproc=False)
        p.action_label(far=False, name='loc_17B5A', isproc=False)
        p.action_label(far=False, name='loc_17B71', isproc=False)
        p.action_label(far=False, name='loc_17B77', isproc=False)
        p.action_label(far=False, name='loc_17B8E', isproc=False)
        p.action_label(far=False, name='loc_17B94', isproc=False)
        p.action_label(far=False, name='loc_17BAB', isproc=False)
        p.action_label(far=False, name='loc_17BB1', isproc=False)
        p.action_label(far=False, name='loc_17BC8', isproc=False)
        p.action_label(far=False, name='loc_17BCE', isproc=False)
        p.action_label(far=False, name='loc_17BE5', isproc=False)
        p.action_label(far=False, name='loc_17BEB', isproc=False)
        p.action_label(far=False, name='loc_17C02', isproc=False)
        p.action_label(far=False, name='loc_17C08', isproc=False)
        p.action_label(far=False, name='loc_17C1F', isproc=False)
        p.action_label(far=False, name='loc_17C25', isproc=False)
        p.action_label(far=False, name='loc_17C2C', isproc=False)
        p.action_label(far=False, name='loc_17C40', isproc=False)
        p.action_label(far=False, name='loc_17C58', isproc=False)
        p.action_label(far=False, name='loc_17C71', isproc=False)
        p.action_label(far=False, name='loc_17C8A', isproc=False)
        p.action_label(far=False, name='loc_17CA3', isproc=False)
        p.action_label(far=False, name='loc_17CBC', isproc=False)
        p.action_label(far=False, name='loc_17CD5', isproc=False)
        p.action_label(far=False, name='loc_17CEE', isproc=False)
        p.action_label(far=False, name='loc_17D07', isproc=False)
        p.action_label(far=False, name='loc_17D20', isproc=False)
        p.action_label(far=False, name='loc_17D39', isproc=False)
        p.action_label(far=False, name='loc_17D52', isproc=False)
        p.action_label(far=False, name='loc_17D6B', isproc=False)
        p.action_label(far=False, name='loc_17D84', isproc=False)
        p.action_label(far=False, name='loc_17D9D', isproc=False)
        p.action_label(far=False, name='loc_17DB6', isproc=False)
        p.action_label(far=False, name='loc_18077', isproc=False)
        p.action_label(far=False, name='loc_182F7', isproc=False)
        p.action_label(far=False, name='loc_18338', isproc=False)
        p.action_label(far=False, name='loc_18360', isproc=False)
        p.action_label(far=False, name='loc_1838B', isproc=False)
        p.action_label(far=False, name='loc_183DE', isproc=False)
        p.action_label(far=False, name='loc_1842D', isproc=False)
        p.action_label(far=False, name='loc_184C3', isproc=False)
        p.action_label(far=False, name='loc_184DC', isproc=False)
        p.action_label(far=False, name='loc_18501', isproc=False)
        p.action_label(far=False, name='loc_18591', isproc=False)
        p.action_label(far=False, name='loc_185B5', isproc=False)
        p.action_label(far=False, name='loc_185B8', isproc=False)
        p.action_label(far=False, name='loc_185CD', isproc=False)
        p.action_label(far=False, name='loc_18616', isproc=False)
        p.action_label(far=False, name='loc_1861F', isproc=False)
        p.action_label(far=False, name='loc_18628', isproc=False)
        p.action_label(far=False, name='loc_18631', isproc=False)
        p.action_label(far=False, name='loc_1864D', isproc=False)
        p.action_label(far=False, name='loc_18656', isproc=False)
        p.action_label(far=False, name='loc_1865F', isproc=False)
        p.action_label(far=False, name='loc_18689', isproc=False)
        p.action_label(far=False, name='loc_18692', isproc=False)
        p.action_label(far=False, name='loc_1869B', isproc=False)
        p.action_label(far=False, name='loc_186A4', isproc=False)
        p.action_label(far=False, name='loc_186C2', isproc=False)
        p.action_label(far=False, name='loc_186CD', isproc=False)
        p.action_label(far=False, name='loc_186D8', isproc=False)
        p.action_label(far=False, name='loc_186EF', isproc=False)
        p.action_label(far=False, name='loc_18761', isproc=False)
        p.action_label(far=False, name='loc_187A6', isproc=False)
        p.action_label(far=False, name='loc_187EB', isproc=False)
        p.action_label(far=False, name='loc_18830', isproc=False)
        p.action_label(far=False, name='loc_18878', isproc=False)
        p.action_label(far=False, name='loc_188C2', isproc=False)
        p.action_label(far=False, name='loc_1890C', isproc=False)
        p.action_label(far=False, name='loc_18961', isproc=False)
        p.action_label(far=False, name='loc_189DB', isproc=False)
        p.action_label(far=False, name='loc_18A0A', isproc=False)
        p.action_label(far=False, name='loc_18A22', isproc=False)
        p.action_label(far=False, name='loc_18A3B', isproc=False)
        p.action_label(far=False, name='loc_18A5C', isproc=False)
        p.action_label(far=False, name='loc_18AD9', isproc=False)
        p.action_label(far=False, name='loc_18AFF', isproc=False)
        p.action_label(far=False, name='loc_18B70', isproc=False)
        p.action_label(far=False, name='loc_18B7C', isproc=False)
        p.action_label(far=False, name='loc_18B8E', isproc=False)
        p.action_label(far=False, name='loc_18B9C', isproc=False)
        p.action_label(far=False, name='loc_18BB1', isproc=False)
        p.action_label(far=False, name='loc_18BBE', isproc=False)
        p.action_label(far=False, name='loc_18C3D', isproc=False)
        p.action_label(far=False, name='loc_18C75', isproc=False)
        p.action_label(far=False, name='loc_18C9F', isproc=False)
        p.action_label(far=False, name='loc_18CA2', isproc=False)
        p.action_label(far=False, name='loc_18CD3', isproc=False)
        p.action_label(far=False, name='loc_18D93', isproc=False)
        p.action_label(far=False, name='loc_18DA1', isproc=False)
        p.action_label(far=False, name='loc_18DA6', isproc=False)
        p.action_label(far=False, name='loc_18DB0', isproc=False)
        p.action_label(far=False, name='loc_18DB8', isproc=False)
        p.action_label(far=False, name='loc_19050', isproc=False)
        p.action_label(far=False, name='loc_19053', isproc=False)
        p.action_label(far=False, name='loc_19057', isproc=False)
        p.action_label(far=False, name='loc_1906E', isproc=False)
        p.action_label(far=False, name='loc_1907C', isproc=False)
        p.action_label(far=False, name='loc_19084', isproc=False)
        p.action_label(far=False, name='loc_19086', isproc=False)
        p.action_label(far=False, name='loc_1908D', isproc=False)
        p.action_label(far=False, name='loc_19090', isproc=False)
        p.action_label(far=False, name='loc_19095', isproc=False)
        p.action_label(far=False, name='loc_190A2', isproc=False)
        p.action_label(far=False, name='loc_190B1', isproc=False)
        p.action_label(far=False, name='loc_190BC', isproc=False)
        p.action_label(far=False, name='loc_190CE', isproc=False)
        p.action_label(far=False, name='loc_190D3', isproc=False)
        p.action_label(far=False, name='loc_190E2', isproc=False)
        p.action_label(far=False, name='loc_190F7', isproc=False)
        p.action_label(far=False, name='loc_19103', isproc=False)
        p.action_label(far=False, name='loc_19114', isproc=False)
        p.action_label(far=False, name='loc_19125', isproc=False)
        p.action_label(far=False, name='loc_19131', isproc=False)
        p.action_label(far=False, name='loc_1913D', isproc=False)
        p.action_label(far=False, name='loc_19149', isproc=False)
        p.action_label(far=False, name='loc_19155', isproc=False)
        p.action_label(far=False, name='loc_19161', isproc=False)
        p.action_label(far=False, name='loc_1917D', isproc=False)
        p.action_label(far=False, name='loc_191A2', isproc=False)
        p.action_label(far=False, name='loc_191A5', isproc=False)
        p.action_label(far=False, name='loc_191DB', isproc=False)
        p.action_label(far=False, name='loc_191EA', isproc=False)
        p.action_label(far=False, name='loc_19212', isproc=False)
        p.action_label(far=False, name='loc_19242', isproc=False)
        p.action_label(far=False, name='loc_19250', isproc=False)
        p.action_label(far=False, name='loc_19256', isproc=False)
        p.action_label(far=False, name='loc_192B9', isproc=False)
        p.action_label(far=False, name='loc_192C3', isproc=False)
        p.action_label(far=False, name='loc_192CA', isproc=False)
        p.action_label(far=False, name='loc_192E0', isproc=False)
        p.action_label(far=False, name='loc_192F7', isproc=False)
        p.action_label(far=False, name='loc_192FF', isproc=False)
        p.action_label(far=False, name='loc_19395', isproc=False)
        p.action_label(far=False, name='loc_193AE', isproc=False)
        p.action_label(far=False, name='loc_193BC', isproc=False)
        p.action_label(far=False, name='loc_193C7', isproc=False)
        p.action_label(far=False, name='loc_193FC', isproc=False)
        p.action_label(far=False, name='loc_193FF', isproc=False)
        p.action_label(far=False, name='loc_19439', isproc=False)
        p.action_label(far=False, name='loc_19445', isproc=False)
        p.action_label(far=False, name='loc_19464', isproc=False)
        p.action_label(far=False, name='loc_1949E', isproc=False)
        p.action_label(far=False, name='loc_194B9', isproc=False)
        p.action_label(far=False, name='loc_194CE', isproc=False)
        p.action_label(far=False, name='loc_194DA', isproc=False)
        p.action_label(far=False, name='loc_194E3', isproc=False)
        p.action_label(far=False, name='loc_194EB', isproc=False)
        p.action_label(far=False, name='loc_19506', isproc=False)
        p.action_label(far=False, name='loc_1953C', isproc=False)
        p.action_label(far=False, name='loc_1955D', isproc=False)
        p.action_label(far=False, name='loc_1957F', isproc=False)
        p.action_label(far=False, name='loc_19595', isproc=False)
        p.action_label(far=False, name='loc_195A7', isproc=False)
        p.action_label(far=False, name='loc_195BE', isproc=False)
        p.action_label(far=False, name='loc_195DE', isproc=False)
        p.action_label(far=False, name='loc_195EA', isproc=False)
        p.action_label(far=False, name='loc_19610', isproc=False)
        p.action_label(far=False, name='loc_19648', isproc=False)
        p.action_label(far=False, name='loc_1964E', isproc=False)
        p.action_label(far=False, name='loc_19657', isproc=False)
        p.action_label(far=False, name='loc_19698', isproc=False)
        p.action_label(far=False, name='loc_196B0', isproc=False)
        p.action_label(far=False, name='loc_196D0', isproc=False)
        p.action_label(far=False, name='loc_196F1', isproc=False)
        p.action_label(far=False, name='loc_19744', isproc=False)
        p.action_label(far=False, name='loc_19762', isproc=False)
        p.action_label(far=False, name='loc_19788', isproc=False)
        p.action_label(far=False, name='loc_197BF', isproc=False)
        p.action_label(far=False, name='loc_197D6', isproc=False)
        p.action_label(far=False, name='loc_197E7', isproc=False)
        p.action_label(far=False, name='loc_19827', isproc=False)
        p.action_label(far=False, name='loc_19848', isproc=False)
        p.action_label(far=False, name='loc_1987C', isproc=False)
        p.action_label(far=False, name='loc_19880', isproc=False)
        p.action_label(far=False, name='loc_198D5', isproc=False)
        p.action_label(far=False, name='loc_198E7', isproc=False)
        p.action_label(far=False, name='loc_198FD', isproc=False)
        p.action_label(far=False, name='loc_19903', isproc=False)
        p.action_label(far=False, name='loc_19914', isproc=False)
        p.action_label(far=False, name='loc_19925', isproc=False)
        p.action_label(far=False, name='loc_1992A', isproc=False)
        p.action_label(far=False, name='loc_1993D', isproc=False)
        p.action_label(far=False, name='loc_19950', isproc=False)
        p.action_label(far=False, name='loc_19958', isproc=False)
        p.action_label(far=False, name='loc_199CF', isproc=False)
        p.action_label(far=False, name='loc_199D4', isproc=False)
        p.action_label(far=False, name='loc_199E7', isproc=False)
        p.action_label(far=False, name='loc_19A04', isproc=False)
        p.action_label(far=False, name='loc_19A17', isproc=False)
        p.action_label(far=False, name='loc_19A25', isproc=False)
        p.action_label(far=False, name='loc_19A34', isproc=False)
        p.action_label(far=False, name='loc_19A46', isproc=False)
        p.action_label(far=False, name='loc_19A6E', isproc=False)
        p.action_label(far=False, name='loc_19AC3', isproc=False)
        p.action_label(far=False, name='loc_19B1D', isproc=False)
        p.action_label(far=False, name='loc_19B24', isproc=False)
        p.action_label(far=False, name='loc_19B3C', isproc=False)
        p.action_label(far=False, name='loc_19B6A', isproc=False)
        p.action_label(far=False, name='loc_19B7D', isproc=False)
        p.action_label(far=False, name='loc_19B83', isproc=False)
        p.action_label(far=False, name='loc_19BB4', isproc=False)
        p.action_label(far=False, name='loc_19BDD', isproc=False)
        p.action_label(far=False, name='loc_19C71', isproc=False)
        p.action_label(far=False, name='loc_19C77', isproc=False)
        p.action_label(far=False, name='loc_19C80', isproc=False)
        p.action_label(far=False, name='loc_19C86', isproc=False)
        p.action_label(far=False, name='loc_19C99', isproc=False)
        p.action_label(far=False, name='loc_19CA2', isproc=False)
        p.action_label(far=False, name='loc_19CA9', isproc=False)
        p.action_label(far=False, name='loc_19CDF', isproc=False)
        p.action_label(far=False, name='loc_19CE1', isproc=False)
        p.action_label(far=False, name='loc_19D19', isproc=False)
        p.action_label(far=False, name='loc_19D2C', isproc=False)
        p.action_label(far=False, name='loc_19D47', isproc=False)
        p.action_label(far=False, name='loc_19D4E', isproc=False)
        p.action_label(far=False, name='loc_19D63', isproc=False)
        p.action_label(far=False, name='loc_19D64', isproc=False)
        p.action_label(far=False, name='loc_19D75', isproc=False)
        p.action_label(far=False, name='loc_19D81', isproc=False)
        p.action_label(far=False, name='loc_19D83', isproc=False)
        p.action_label(far=False, name='loc_19D94', isproc=False)
        p.action_label(far=False, name='loc_19DB8', isproc=False)
        p.action_label(far=False, name='loc_19DBB', isproc=False)
        p.action_label(far=False, name='loc_19DF9', isproc=False)
        p.action_label(far=False, name='loc_19E03', isproc=False)
        p.action_label(far=False, name='loc_19E09', isproc=False)
        p.action_label(far=False, name='loc_19E22', isproc=False)
        p.action_label(far=False, name='loc_19E2C', isproc=False)
        p.action_label(far=False, name='loc_19E41', isproc=False)
        p.action_label(far=False, name='loc_19E47', isproc=False)
        p.action_label(far=False, name='loc_19E58', isproc=False)
        p.action_label(far=False, name='loc_19E5E', isproc=False)
        p.action_label(far=False, name='loc_19EBA', isproc=False)
        p.action_label(far=False, name='loc_19EC7', isproc=False)
        p.action_label(far=False, name='loc_19ECC', isproc=False)
        p.action_label(far=False, name='loc_19F6C', isproc=False)
        p.action_label(far=False, name='loc_1A042', isproc=False)
        p.action_label(far=False, name='loc_1A070', isproc=False)
        p.action_label(far=False, name='loc_1A0A0', isproc=False)
        p.action_label(far=False, name='loc_1A0E6', isproc=False)
        p.action_label(far=False, name='loc_1A0F2', isproc=False)
        p.action_label(far=False, name='loc_1A118', isproc=False)
        p.action_label(far=False, name='loc_1A14B', isproc=False)
        p.action_label(far=False, name='loc_1A155', isproc=False)
        p.action_label(far=False, name='loc_1A174', isproc=False)
        p.action_label(far=False, name='loc_1A17A', isproc=False)
        p.action_label(far=False, name='loc_1A199', isproc=False)
        p.action_label(far=False, name='loc_1A1A3', isproc=False)
        p.action_label(far=False, name='loc_1A1C2', isproc=False)
        p.action_label(far=False, name='loc_1A1C9', isproc=False)
        p.action_label(far=False, name='loc_1A1D1', isproc=False)
        p.action_label(far=False, name='loc_1A219', isproc=False)
        p.action_label(far=False, name='loc_1A21F', isproc=False)
        p.action_label(far=False, name='loc_1A288', isproc=False)
        p.action_label(far=False, name='loc_1A28F', isproc=False)
        p.action_label(far=False, name='loc_1A2A0', isproc=False)
        p.action_label(far=False, name='loc_1A2BE', isproc=False)
        p.action_label(far=False, name='loc_1A2C1', isproc=False)
        p.action_label(far=False, name='loc_1A2D1', isproc=False)
        p.action_label(far=False, name='loc_1A2E1', isproc=False)
        p.action_label(far=False, name='loc_1A30D', isproc=False)
        p.action_label(far=False, name='loc_1A326', isproc=False)
        p.action_label(far=False, name='loc_1A33E', isproc=False)
        p.action_label(far=False, name='loc_1A34B', isproc=False)
        p.action_label(far=False, name='loc_1A356', isproc=False)
        p.action_label(far=False, name='loc_1A393', isproc=False)
        p.action_label(far=False, name='loc_1A3A7', isproc=False)
        p.action_label(far=False, name='loc_1A3C5', isproc=False)
        p.action_label(far=False, name='loc_1A3F6', isproc=False)
        p.action_label(far=False, name='loc_1A4A6', isproc=False)
        p.action_label(far=False, name='loc_1A4D5', isproc=False)
        p.action_label(far=False, name='loc_1A4E8', isproc=False)
        p.action_label(far=False, name='loc_1A4F2', isproc=False)
        p.action_label(far=False, name='loc_1A529', isproc=False)
        p.action_label(far=False, name='loc_1A545', isproc=False)
        p.action_label(far=False, name='loc_1A55B', isproc=False)
        p.action_label(far=False, name='loc_1A5AB', isproc=False)
        p.action_label(far=False, name='loc_1A5C3', isproc=False)
        p.action_label(far=False, name='loc_1A5C5', isproc=False)
        p.action_label(far=False, name='loc_1A61A', isproc=False)
        p.action_label(far=False, name='loc_1A628', isproc=False)
        p.action_label(far=False, name='loc_1A645', isproc=False)
        p.action_label(far=False, name='loc_1A687', isproc=False)
        p.action_label(far=False, name='loc_1A691', isproc=False)
        p.action_label(far=False, name='loc_1A699', isproc=False)
        p.action_label(far=False, name='loc_1A6A1', isproc=False)
        p.action_label(far=False, name='loc_1A6B7', isproc=False)
        p.action_label(far=False, name='loc_1A6C2', isproc=False)
        p.action_label(far=False, name='loc_1A74D', isproc=False)
        p.action_label(far=False, name='loc_1A7CC', isproc=False)
        p.action_label(far=False, name='loc_1A83E', isproc=False)
        p.action_label(far=False, name='loc_1A856', isproc=False)
        p.action_label(far=False, name='loc_1A86E', isproc=False)
        p.action_label(far=False, name='loc_1A886', isproc=False)
        p.action_label(far=False, name='loc_1A8EB', isproc=False)
        p.action_label(far=False, name='loc_1A913', isproc=False)
        p.action_label(far=False, name='loc_1A934', isproc=False)
        p.action_label(far=False, name='loc_1A93A', isproc=False)
        p.action_label(far=False, name='loc_1A947', isproc=False)
        p.action_label(far=False, name='loc_1A951', isproc=False)
        p.action_label(far=False, name='loc_1A975', isproc=False)
        p.action_label(far=False, name='loc_1A9A5', isproc=False)
        p.action_label(far=False, name='loc_1A9A8', isproc=False)
        p.action_label(far=False, name='loc_1A9AD', isproc=False)
        p.action_label(far=False, name='loc_1A9C2', isproc=False)
        p.action_label(far=False, name='loc_1AA17', isproc=False)
        p.action_label(far=False, name='loc_1AA1A', isproc=False)
        p.action_label(far=False, name='loc_1AA2E', isproc=False)
        p.action_label(far=False, name='loc_1AA36', isproc=False)
        p.action_label(far=False, name='loc_1AA4F', isproc=False)
        p.action_label(far=False, name='loc_1AA5C', isproc=False)
        p.action_label(far=False, name='loc_1AA62', isproc=False)
        p.action_label(far=False, name='loc_1AA73', isproc=False)
        p.action_label(far=False, name='loc_1AA88', isproc=False)
        p.action_label(far=False, name='loc_1AACB', isproc=False)
        p.action_label(far=False, name='loc_1AAF0', isproc=False)
        p.action_label(far=False, name='loc_1AAF7', isproc=False)
        p.action_label(far=False, name='loc_1AB44', isproc=False)
        p.action_label(far=False, name='loc_1AB53', isproc=False)
        p.action_label(far=False, name='loc_1AB5D', isproc=False)
        p.action_label(far=False, name='loc_1AB67', isproc=False)
        p.action_label(far=False, name='loc_1AB6F', isproc=False)
        p.action_label(far=False, name='loc_1AB9B', isproc=False)
        p.action_label(far=False, name='loc_1ABAB', isproc=False)
        p.action_label(far=False, name='loc_1ABB3', isproc=False)
        p.action_label(far=False, name='loc_1ABF0', isproc=False)
        p.action_label(far=False, name='loc_1AC35', isproc=False)
        p.action_label(far=False, name='loc_1AC5F', isproc=False)
        p.action_label(far=False, name='loc_1AC6D', isproc=False)
        p.action_label(far=False, name='loc_1ACAC', isproc=False)
        p.action_label(far=False, name='loc_1ACD2', isproc=False)
        p.action_label(far=False, name='loc_1AD0F', isproc=False)
        p.action_label(far=False, name='loc_1ADE0', isproc=False)
        p.action_label(far=False, name='loc_1ADE2', isproc=False)
        p.action_label(far=False, name='loc_1ADE7', isproc=False)
        p.action_label(far=False, name='loc_1ADF0', isproc=False)
        p.action_label(far=False, name='loc_1ADF6', isproc=False)
        p.action_label(far=False, name='loc_1AE05', isproc=False)
        p.action_label(far=False, name='loc_1AE0C', isproc=False)
        p.action_label(far=False, name='loc_1AE11', isproc=False)
        p.action_label(far=False, name='loc_1AE16', isproc=False)
        p.action_label(far=False, name='loc_1AE2D', isproc=False)
        p.action_label(far=False, name='loc_1AE3A', isproc=False)
        p.action_label(far=False, name='loc_1AE46', isproc=False)
        p.action_label(far=False, name='loc_1AE5E', isproc=False)
        p.action_label(far=False, name='loc_1AE66', isproc=False)
        p.action_label(far=False, name='loc_1AE7E', isproc=False)
        p.action_label(far=False, name='loc_1AEB2', isproc=False)
        p.action_label(far=False, name='loc_1AF1E', isproc=False)
        p.action_label(far=False, name='loc_1AF3A', isproc=False)
        p.action_label(far=False, name='loc_1AF79', isproc=False)
        p.action_label(far=False, name='loc_1AF86', isproc=False)
        p.action_label(far=False, name='loc_1AF8E', isproc=False)
        p.action_label(far=False, name='loc_1AFAE', isproc=False)
        p.action_label(far=False, name='loc_1AFFE', isproc=False)
        p.action_label(far=False, name='loc_1B014', isproc=False)
        p.action_label(far=False, name='loc_1B080', isproc=False)
        p.action_label(far=False, name='loc_1B098', isproc=False)
        p.action_label(far=False, name='loc_1B0CF', isproc=False)
        p.action_label(far=False, name='loc_1B0FB', isproc=False)
        p.action_label(far=False, name='loc_1B134', isproc=False)
        p.action_label(far=False, name='loc_1B240', isproc=False)
        p.action_label(far=False, name='loc_1B245', isproc=False)
        p.action_label(far=False, name='loc_1B282', isproc=False)
        p.action_label(far=False, name='loc_1B426', isproc=False)
        p.action_label(far=False, name='loc_1B440', isproc=False)
        p.action_label(far=False, name='loc_1B44A', isproc=False)
        p.action_label(far=False, name='loc_1B459', isproc=False)
        p.action_label(far=False, name='loc_1B46D', isproc=False)
        p.action_label(far=False, name='loc_1B4B3', isproc=False)
        p.action_label(far=False, name='loc_1B4CD', isproc=False)
        p.action_label(far=False, name='loc_1B5EC', isproc=False)
        p.action_label(far=False, name='loc_1B5FC', isproc=False)
        p.action_label(far=False, name='loc_1B610', isproc=False)
        p.action_label(far=False, name='loc_1B624', isproc=False)
        p.action_label(far=False, name='loc_1B638', isproc=False)
        p.action_label(far=False, name='loc_1B64C', isproc=False)
        p.action_label(far=False, name='loc_1B660', isproc=False)
        p.action_label(far=False, name='loc_1B674', isproc=False)
        p.action_label(far=False, name='loc_1B688', isproc=False)
        p.action_label(far=False, name='loc_1B69C', isproc=False)
        p.action_label(far=False, name='loc_1B6B0', isproc=False)
        p.action_label(far=False, name='loc_1B6C4', isproc=False)
        p.action_label(far=False, name='loc_1B6D8', isproc=False)
        p.action_label(far=False, name='loc_1B6EC', isproc=False)
        p.action_label(far=False, name='loc_1B700', isproc=False)
        p.action_label(far=False, name='loc_1B714', isproc=False)
        p.action_label(far=False, name='loc_1B728', isproc=False)
        p.action_label(far=False, name='loc_1B73C', isproc=False)
        p.action_label(far=False, name='loc_1B750', isproc=False)
        p.action_label(far=False, name='loc_1B764', isproc=False)
        p.action_label(far=False, name='loc_1B778', isproc=False)
        p.action_label(far=False, name='loc_1B78C', isproc=False)
        p.action_label(far=False, name='loc_1B7A0', isproc=False)
        p.action_label(far=False, name='loc_1B7B4', isproc=False)
        p.action_label(far=False, name='loc_1B7C8', isproc=False)
        p.action_label(far=False, name='loc_1B7DC', isproc=False)
        p.action_label(far=False, name='loc_1B7F0', isproc=False)
        p.action_label(far=False, name='loc_1B802', isproc=False)
        p.action_label(far=False, name='loc_1B814', isproc=False)
        p.action_label(far=False, name='loc_1B826', isproc=False)
        p.action_label(far=False, name='loc_1B838', isproc=False)
        p.action_label(far=False, name='loc_1B84A', isproc=False)
        p.action_label(far=False, name='loc_1B85C', isproc=False)
        p.action_label(far=False, name='loc_1B85F', isproc=False)
        p.action_label(far=False, name='loc_1B876', isproc=False)
        p.action_label(far=False, name='loc_1B8BC', isproc=False)
        p.action_label(far=False, name='loc_1B8CC', isproc=False)
        p.action_label(far=False, name='loc_1B8E0', isproc=False)
        p.action_label(far=False, name='loc_1B8F4', isproc=False)
        p.action_label(far=False, name='loc_1B908', isproc=False)
        p.action_label(far=False, name='loc_1B91C', isproc=False)
        p.action_label(far=False, name='loc_1B930', isproc=False)
        p.action_label(far=False, name='loc_1B944', isproc=False)
        p.action_label(far=False, name='loc_1B958', isproc=False)
        p.action_label(far=False, name='loc_1B96C', isproc=False)
        p.action_label(far=False, name='loc_1B980', isproc=False)
        p.action_label(far=False, name='loc_1B994', isproc=False)
        p.action_label(far=False, name='loc_1B9A8', isproc=False)
        p.action_label(far=False, name='loc_1B9BC', isproc=False)
        p.action_label(far=False, name='loc_1B9D0', isproc=False)
        p.action_label(far=False, name='loc_1B9E4', isproc=False)
        p.action_label(far=False, name='loc_1B9F8', isproc=False)
        p.action_label(far=False, name='loc_1BA0C', isproc=False)
        p.action_label(far=False, name='loc_1BA20', isproc=False)
        p.action_label(far=False, name='loc_1BA34', isproc=False)
        p.action_label(far=False, name='loc_1BA48', isproc=False)
        p.action_label(far=False, name='loc_1BA5C', isproc=False)
        p.action_label(far=False, name='loc_1BA70', isproc=False)
        p.action_label(far=False, name='loc_1BA84', isproc=False)
        p.action_label(far=False, name='loc_1BA98', isproc=False)
        p.action_label(far=False, name='loc_1BAAC', isproc=False)
        p.action_label(far=False, name='loc_1BAC0', isproc=False)
        p.action_label(far=False, name='loc_1BAD2', isproc=False)
        p.action_label(far=False, name='loc_1BAE4', isproc=False)
        p.action_label(far=False, name='loc_1BAF6', isproc=False)
        p.action_label(far=False, name='loc_1BB08', isproc=False)
        p.action_label(far=False, name='loc_1BB1A', isproc=False)
        p.action_label(far=False, name='loc_1BB2C', isproc=False)
        p.action_label(far=False, name='loc_1BB2F', isproc=False)
        p.action_label(far=False, name='loc_1BB46', isproc=False)
        p.action_label(far=False, name='loc_1BBF4', isproc=False)
        p.action_label(far=False, name='loc_1BC06', isproc=False)
        p.action_label(far=False, name='loc_1BC0C', isproc=False)
        p.action_label(far=False, name='loc_1BC1B', isproc=False)
        p.action_label(far=False, name='loc_1BC24', isproc=False)
        p.action_label(far=False, name='loc_1BC30', isproc=False)
        p.action_label(far=False, name='loc_1BC38', isproc=False)
        p.action_label(far=False, name='loc_1BC42', isproc=False)
        p.action_label(far=False, name='loc_1BC5F', isproc=False)
        p.action_label(far=False, name='loc_1BC70', isproc=False)
        p.action_label(far=False, name='loc_1BC87', isproc=False)
        p.action_label(far=False, name='loc_1BC92', isproc=False)
        p.action_label(far=False, name='loc_1BCAB', isproc=False)
        p.action_label(far=False, name='loc_1BCB7', isproc=False)
        p.action_label(far=False, name='loc_1BCC0', isproc=False)
        p.action_label(far=False, name='loc_1BCCC', isproc=False)
        p.action_label(far=False, name='loc_1BCDF', isproc=False)
        p.action_label(far=False, name='loc_1BCF1', isproc=False)
        p.action_label(far=False, name='loc_1BCFB', isproc=False)
        p.action_label(far=False, name='loc_1BD26', isproc=False)
        p.action_label(far=False, name='loc_1BD3E', isproc=False)
        p.action_label(far=False, name='loc_1BD56', isproc=False)
        p.action_label(far=False, name='loc_1BD80', isproc=False)
        p.action_label(far=False, name='loc_1BD86', isproc=False)
        p.action_label(far=False, name='loc_1BD88', isproc=False)
        p.action_label(far=False, name='loc_1BD95', isproc=False)
        p.action_label(far=False, name='loc_1BD9F', isproc=False)
        p.action_label(far=False, name='loc_1BDF2', isproc=False)
        p.action_label(far=False, name='loc_1BE07', isproc=False)
        p.action_label(far=False, name='loc_1BE10', isproc=False)
        p.action_label(far=False, name='loc_1BE43', isproc=False)
        p.action_label(far=False, name='loc_1BE85', isproc=False)
        p.action_label(far=False, name='loc_1BF11', isproc=False)
        p.action_label(far=False, name='loc_1BF1B', isproc=False)
        p.action_label(far=False, name='loc_1BF31', isproc=False)
        p.action_label(far=False, name='loc_1BF3A', isproc=False)
        p.action_label(far=False, name='loc_1BF53', isproc=False)
        p.action_label(far=False, name='loc_1BF57', isproc=False)
        p.action_label(far=False, name='loc_1BF86', isproc=False)
        p.action_label(far=False, name='loc_1BFC9', isproc=False)
        p.action_label(far=False, name='loc_1BFD9', isproc=False)
        p.action_label(far=False, name='loc_1BFE3', isproc=False)
        p.action_label(far=False, name='loc_1C031', isproc=False)
        p.action_label(far=False, name='loc_1C043', isproc=False)
        p.action_label(far=False, name='loc_1C050', isproc=False)
        p.action_label(far=False, name='loc_1C0A5', isproc=False)
        p.action_label(far=False, name='loc_1C0C9', isproc=False)
        p.action_label(far=False, name='loc_1C11F', isproc=False)
        p.action_label(far=False, name='loc_1C160', isproc=False)
        p.action_label(far=False, name='loc_1C17C', isproc=False)
        p.action_label(far=False, name='loc_1C19C', isproc=False)
        p.action_label(far=False, name='loc_1C209', isproc=False)
        p.action_label(far=False, name='loc_1C23E', isproc=False)
        p.action_label(far=False, name='loc_1C25C', isproc=False)
        p.action_label(far=False, name='loc_1C273', isproc=False)
        p.action_label(far=False, name='loc_1C28F', isproc=False)
        p.action_label(far=False, name='loc_1C299', isproc=False)
        p.action_label(far=False, name='loc_1C2B6', isproc=False)
        p.action_label(far=False, name='loc_1C2CA', isproc=False)
        p.action_label(far=False, name='loc_1C2E7', isproc=False)
        p.action_label(far=False, name='loc_1C309', isproc=False)
        p.action_label(far=False, name='loc_1C321', isproc=False)
        p.action_label(far=False, name='loc_1C355', isproc=False)
        p.action_label(far=False, name='loc_1C365', isproc=False)
        p.action_label(far=False, name='loc_1C369', isproc=False)
        p.action_label(far=False, name='loc_1C37F', isproc=False)
        p.action_label(far=False, name='loc_1C396', isproc=False)
        p.action_label(far=False, name='loc_1C3A9', isproc=False)
        p.action_label(far=False, name='loc_1C3C1', isproc=False)
        p.action_label(far=False, name='loc_1C3DC', isproc=False)
        p.action_label(far=False, name='loc_1C3EC', isproc=False)
        p.action_label(far=False, name='loc_1C3EE', isproc=False)
        p.action_label(far=False, name='loc_1C40B', isproc=False)
        p.action_label(far=False, name='loc_1C424', isproc=False)
        p.action_label(far=False, name='loc_1C4A6', isproc=False)
        p.action_label(far=False, name='loc_1C501', isproc=False)
        p.action_label(far=False, name='loc_1C515', isproc=False)
        p.action_label(far=False, name='loc_1C556', isproc=False)
        p.action_label(far=False, name='loc_1C58E', isproc=False)
        p.action_label(far=False, name='loc_1C6AB', isproc=False)
        p.action_label(far=False, name='loc_1C6B9', isproc=False)
        p.action_label(far=False, name='loc_1C6BE', isproc=False)
        p.action_label(far=False, name='loc_1C6EF', isproc=False)
        p.action_label(far=False, name='loc_1C708', isproc=False)
        p.action_label(far=False, name='loc_1C72C', isproc=False)
        p.action_label(far=False, name='loc_1C783', isproc=False)
        p.action_label(far=False, name='loc_1C7A7', isproc=False)
        p.action_label(far=False, name='loc_1C7AF', isproc=False)
        p.action_label(far=False, name='loc_1C7B5', isproc=False)
        p.action_label(far=False, name='loc_1C7CA', isproc=False)
        p.action_label(far=False, name='loc_1C7CC', isproc=False)
        p.action_label(far=False, name='loc_1C7E9', isproc=False)
        p.action_label(far=False, name='loc_40458F', isproc=False)
        p.action_label(far=False, name='loc_4045E7', isproc=False)
        p.action_label(far=False, name='loc_40463E', isproc=False)
        p.action_label(far=False, name='loc_4046D6', isproc=False)
        p.action_label(far=False, name='loc_4046F6', isproc=False)
        p.action_label(far=False, name='loc_404716', isproc=False)
        p.action_label(far=False, name='loc_404736', isproc=False)
        p.action_label(far=False, name='loc_404756', isproc=False)
        p.action_label(far=False, name='loc_404776', isproc=False)
        p.action_label(far=False, name='loc_404796', isproc=False)
        p.action_label(far=False, name='loc_4047DD', isproc=False)
        p.action_label(far=False, name='loc_404835', isproc=False)
        p.action_label(far=False, name='loc_40488C', isproc=False)
        p.action_label(far=False, name='loc_404924', isproc=False)
        p.action_label(far=False, name='loc_404944', isproc=False)
        p.action_label(far=False, name='loc_404964', isproc=False)
        p.action_label(far=False, name='loc_404984', isproc=False)
        p.action_label(far=False, name='loc_4049A4', isproc=False)
        p.action_label(far=False, name='loc_4049C4', isproc=False)
        p.action_label(far=False, name='loc_4049E4', isproc=False)
        p.action_label(far=False, name='loc_404A2B', isproc=False)
        p.action_label(far=False, name='loc_404A83', isproc=False)
        p.action_label(far=False, name='loc_404ADA', isproc=False)
        p.action_label(far=False, name='loc_404B72', isproc=False)
        p.action_label(far=False, name='loc_404B92', isproc=False)
        p.action_label(far=False, name='loc_404BB2', isproc=False)
        p.action_label(far=False, name='loc_404BD2', isproc=False)
        p.action_label(far=False, name='loc_404BF2', isproc=False)
        p.action_label(far=False, name='loc_404C12', isproc=False)
        p.action_label(far=False, name='loc_404C32', isproc=False)
        p.action_label(far=False, name='loc_404C79', isproc=False)
        p.action_label(far=False, name='loc_404CD1', isproc=False)
        p.action_label(far=False, name='loc_404D28', isproc=False)
        p.action_label(far=False, name='loc_404DC0', isproc=False)
        p.action_label(far=False, name='loc_404DE0', isproc=False)
        p.action_label(far=False, name='loc_404E00', isproc=False)
        p.action_label(far=False, name='loc_404E20', isproc=False)
        p.action_label(far=False, name='loc_404E40', isproc=False)
        p.action_label(far=False, name='loc_404E60', isproc=False)
        p.action_label(far=False, name='loc_404E80', isproc=False)
        p.action_label(far=False, name='loc_404EC7', isproc=False)
        p.action_label(far=False, name='loc_404F1F', isproc=False)
        p.action_label(far=False, name='loc_404F76', isproc=False)
        p.action_label(far=False, name='loc_40500E', isproc=False)
        p.action_label(far=False, name='loc_40502E', isproc=False)
        p.action_label(far=False, name='loc_40504E', isproc=False)
        p.action_label(far=False, name='loc_40506E', isproc=False)
        p.action_label(far=False, name='loc_40508E', isproc=False)
        p.action_label(far=False, name='loc_4050AE', isproc=False)
        p.action_label(far=False, name='loc_4050CE', isproc=False)
        p.action_label(far=False, name='loc_405115', isproc=False)
        p.action_label(far=False, name='loc_40516D', isproc=False)
        p.action_label(far=False, name='loc_4051C4', isproc=False)
        p.action_label(far=False, name='loc_4052A0', isproc=False)
        p.action_label(far=False, name='loc_4052C0', isproc=False)
        p.action_label(far=False, name='loc_4052E0', isproc=False)
        p.action_label(far=False, name='loc_405300', isproc=False)
        p.action_label(far=False, name='loc_405320', isproc=False)
        p.action_label(far=False, name='loc_405340', isproc=False)
        p.action_label(far=False, name='loc_405360', isproc=False)
        p.action_label(far=False, name='loc_4053A7', isproc=False)
        p.action_label(far=False, name='loc_4053FF', isproc=False)
        p.action_label(far=False, name='loc_405456', isproc=False)
        p.action_label(far=False, name='loc_405532', isproc=False)
        p.action_label(far=False, name='loc_405552', isproc=False)
        p.action_label(far=False, name='loc_405572', isproc=False)
        p.action_label(far=False, name='loc_405592', isproc=False)
        p.action_label(far=False, name='loc_4055B2', isproc=False)
        p.action_label(far=False, name='loc_4055D2', isproc=False)
        p.action_label(far=False, name='loc_4055F2', isproc=False)
        p.action_label(far=False, name='loc_40563E', isproc=False)
        p.action_label(far=False, name='loc_4056A0', isproc=False)
        p.action_label(far=False, name='loc_40572C', isproc=False)
        p.action_label(far=False, name='loc_40574C', isproc=False)
        p.action_label(far=False, name='loc_40576C', isproc=False)
        p.action_label(far=False, name='loc_40578C', isproc=False)
        p.action_label(far=False, name='loc_4057AC', isproc=False)
        p.action_label(far=False, name='loc_4057CC', isproc=False)
        p.action_label(far=False, name='loc_4057EC', isproc=False)
        p.action_label(far=False, name='loc_405838', isproc=False)
        p.action_label(far=False, name='loc_40589A', isproc=False)
        p.action_label(far=False, name='loc_405926', isproc=False)
        p.action_label(far=False, name='loc_405946', isproc=False)
        p.action_label(far=False, name='loc_405966', isproc=False)
        p.action_label(far=False, name='loc_405986', isproc=False)
        p.action_label(far=False, name='loc_4059A6', isproc=False)
        p.action_label(far=False, name='loc_4059C6', isproc=False)
        p.action_label(far=False, name='loc_4059E6', isproc=False)
        p.action_label(far=False, name='loc_405A2E', isproc=False)
        p.action_label(far=False, name='loc_405A85', isproc=False)
        p.action_label(far=False, name='loc_405B0A', isproc=False)
        p.action_label(far=False, name='loc_405B2A', isproc=False)
        p.action_label(far=False, name='loc_405B4A', isproc=False)
        p.action_label(far=False, name='loc_405B6A', isproc=False)
        p.action_label(far=False, name='loc_405B8A', isproc=False)
        p.action_label(far=False, name='loc_405BAA', isproc=False)
        p.action_label(far=False, name='loc_405BCA', isproc=False)
        p.action_label(far=False, name='loc_405C12', isproc=False)
        p.action_label(far=False, name='loc_405C69', isproc=False)
        p.action_label(far=False, name='loc_405CEE', isproc=False)
        p.action_label(far=False, name='loc_405D0E', isproc=False)
        p.action_label(far=False, name='loc_405D2E', isproc=False)
        p.action_label(far=False, name='loc_405D4E', isproc=False)
        p.action_label(far=False, name='loc_405D6E', isproc=False)
        p.action_label(far=False, name='loc_405D8E', isproc=False)
        p.action_label(far=False, name='loc_405DAE', isproc=False)
        p.action_label(far=False, name='loc_405DF6', isproc=False)
        p.action_label(far=False, name='loc_405E4D', isproc=False)
        p.action_label(far=False, name='loc_405ED2', isproc=False)
        p.action_label(far=False, name='loc_405EF2', isproc=False)
        p.action_label(far=False, name='loc_405F12', isproc=False)
        p.action_label(far=False, name='loc_405F32', isproc=False)
        p.action_label(far=False, name='loc_405F52', isproc=False)
        p.action_label(far=False, name='loc_405F72', isproc=False)
        p.action_label(far=False, name='loc_405F92', isproc=False)
        p.action_label(far=False, name='loc_405FDA', isproc=False)
        p.action_label(far=False, name='loc_406031', isproc=False)
        p.action_label(far=False, name='loc_4060B6', isproc=False)
        p.action_label(far=False, name='loc_4060D6', isproc=False)
        p.action_label(far=False, name='loc_4060F6', isproc=False)
        p.action_label(far=False, name='loc_406116', isproc=False)
        p.action_label(far=False, name='loc_406136', isproc=False)
        p.action_label(far=False, name='loc_406156', isproc=False)
        p.action_label(far=False, name='loc_406176', isproc=False)
        p.action_label(far=False, name='loc_4068F5', isproc=False)
        p.action_label(far=False, name='loc_40698C', isproc=False)
        p.action_label(far=False, name='loc_406A1F', isproc=False)
        p.action_label(far=False, name='loc_406AAF', isproc=False)
        p.action_label(far=False, name='loc_406B3F', isproc=False)
        p.action_label(far=False, name='loc_406BCF', isproc=False)
        p.action_label(far=False, name='loc_406C5A', isproc=False)
        p.action_label(far=False, name='loc_406CF8', isproc=False)
        p.action_label(far=False, name='loc_406D8E', isproc=False)
        p.action_label(far=False, name='loc_406E24', isproc=False)
        p.action_label(far=False, name='loc_406EBA', isproc=False)
        p.action_label(far=False, name='loc_406F50', isproc=False)
        p.action_label(far=False, name='loc_406FE6', isproc=False)
        p.action_label(far=False, name='loc_40707C', isproc=False)
        p.action_label(far=False, name='loc_407112', isproc=False)
        p.action_label(far=False, name='loc_4071A8', isproc=False)
        p.action_label(far=False, name='loc_40723E', isproc=False)
        p.action_label(far=False, name='loc_4072D4', isproc=False)
        p.action_label(far=False, name='loc_40736A', isproc=False)
        p.action_label(far=False, name='loc_407400', isproc=False)
        p.action_label(far=False, name='loc_407496', isproc=False)
        p.action_label(far=False, name='loc_40752C', isproc=False)
        p.action_label(far=False, name='loc_4075C2', isproc=False)
        p.action_label(far=False, name='loc_407658', isproc=False)
        p.action_label(far=False, name='loc_4076EE', isproc=False)
        p.action_label(far=False, name='loc_407784', isproc=False)
        p.action_label(far=False, name='loc_40781A', isproc=False)
        p.action_label(far=False, name='loc_4078B0', isproc=False)
        p.action_label(far=False, name='loc_407E46', isproc=False)
        p.action_label(far=False, name='loc_407F72', isproc=False)
        p.action_label(far=False, name='loc_408008', isproc=False)
        p.action_label(far=False, name='loc_40809E', isproc=False)
        p.action_label(far=False, name='loc_408139', isproc=False)
        p.action_label(far=False, name='loc_4081D5', isproc=False)
        p.action_label(far=False, name='loc_4081F6', isproc=False)
        p.action_label(far=False, name='loc_408229', isproc=False)
        p.action_label(far=False, name='loc_408252', isproc=False)
        p.action_label(far=False, name='loc_4082CF', isproc=False)
        p.action_label(far=False, name='loc_40834C', isproc=False)
        p.action_label(far=False, name='loc_4083C9', isproc=False)
        p.action_label(far=False, name='loc_4083E9', isproc=False)
        p.action_label(far=False, name='loc_40841B', isproc=False)
        p.action_label(far=False, name='loc_408444', isproc=False)
        p.action_label(far=False, name='loc_408464', isproc=False)
        p.action_label(far=False, name='loc_408496', isproc=False)
        p.action_label(far=False, name='loc_4084BF', isproc=False)
        p.action_label(far=False, name='loc_4084DF', isproc=False)
        p.action_label(far=False, name='loc_408511', isproc=False)
        p.action_label(far=False, name='loc_40853A', isproc=False)
        p.action_label(far=False, name='loc_40855A', isproc=False)
        p.action_label(far=False, name='loc_40858C', isproc=False)
        p.action_label(far=False, name='loc_409652', isproc=False)
        p.action_label(far=False, name='loc_40B72A', isproc=False)
        p.action_label(far=False, name='loc_40B7AD', isproc=False)
        p.action_label(far=False, name='loc_40D571', isproc=False)
        p.action_label(far=False, name='loc_40D581', isproc=False)
        p.action_label(far=False, name='locret_10154', isproc=False)
        p.action_label(far=False, name='locret_11584', isproc=False)
        p.action_label(far=False, name='locret_11C03', isproc=False)
        p.action_label(far=False, name='locret_11C28', isproc=False)
        p.action_label(far=False, name='locret_11E1D', isproc=False)
        p.action_label(far=False, name='locret_11E36', isproc=False)
        p.action_label(far=False, name='locret_11E46', isproc=False)
        p.action_label(far=False, name='locret_11E67', isproc=False)
        p.action_label(far=False, name='locret_11E8A', isproc=False)
        p.action_label(far=False, name='locret_11EC4', isproc=False)
        p.action_label(far=False, name='locret_11EFE', isproc=False)
        p.action_label(far=False, name='locret_11FD3', isproc=False)
        p.action_label(far=False, name='locret_1221F', isproc=False)
        p.action_label(far=False, name='locret_122E7', isproc=False)
        p.action_label(far=False, name='locret_12A55', isproc=False)
        p.action_label(far=False, name='locret_12FB3', isproc=False)
        p.action_label(far=False, name='locret_131B2', isproc=False)
        p.action_label(far=False, name='locret_131EE', isproc=False)
        p.action_label(far=False, name='locret_13498', isproc=False)
        p.action_label(far=False, name='locret_13812', isproc=False)
        p.action_label(far=False, name='locret_1387D', isproc=False)
        p.action_label(far=False, name='locret_13A5A', isproc=False)
        p.action_label(far=False, name='locret_13CF4', isproc=False)
        p.action_label(far=False, name='locret_13CF5', isproc=False)
        p.action_label(far=False, name='locret_140B2', isproc=False)
        p.action_label(far=False, name='locret_140E5', isproc=False)
        p.action_label(far=False, name='locret_15441', isproc=False)
        p.action_label(far=False, name='locret_154D9', isproc=False)
        p.action_label(far=False, name='locret_157BC', isproc=False)
        p.action_label(far=False, name='locret_16C68', isproc=False)
        p.action_label(far=False, name='locret_16E23', isproc=False)
        p.action_label(far=False, name='locret_171D2', isproc=False)
        p.action_label(far=False, name='locret_17440', isproc=False)
        p.action_label(far=False, name='locret_177EE', isproc=False)
        p.action_label(far=False, name='locret_17A57', isproc=False)
        p.action_label(far=False, name='locret_19A3E', isproc=False)
        p.action_label(far=False, name='locret_19A52', isproc=False)
        p.action_label(far=False, name='locret_1A4F1', isproc=False)
        p.action_label(far=False, name='locret_1ACF5', isproc=False)
        p.action_label(far=False, name='locret_1B083', isproc=False)
        p.action_label(far=False, name='locret_1B5C7', isproc=False)
        p.action_label(far=False, name='locret_1BD67', isproc=False)
        p.action_label(far=False, name='locret_1BF85', isproc=False)
        p.action_label(far=False, name='locret_1C159', isproc=False)
        p.action_label(far=False, name='locret_1C29D', isproc=False)
        p.action_label(far=False, name='locret_1C4A7', isproc=False)
        p.action_label(far=False, name='locret_1C521', isproc=False)
        p.action_label(far=False, name='locret_1C72B', isproc=False)
        p.action_label(far=False, name='locret_1C755', isproc=False)
        p.action_label(far=False, name='locret_1C76C', isproc=False)
        p.action_label(far=False, name='next', isproc=False)
        p.action_label(far=False, name='nn', isproc=False)
        p.action_label(far=False, name='noerror', isproc=False)
        #p.add_label(far=False,name='ok',isproc=False)
        p.action_label(far=False, name='start', isproc=False)
        p.action_label(far=False, name='toto', isproc=False)
        p.action_label(far=False, name='toto1', isproc=False)
        p.action_label(far=False, name='toto2', isproc=False)
        p.action_label(far=True, name=u'_change_volume', isproc=True)
        p.action_label(far=True, name=u'_clean_11c43', isproc=True)
        p.action_label(far=True, name=u'_covox_timer_int', isproc=True)
        p.action_label(far=True, name=u'_deinit_125b9', isproc=True)
        p.action_label(far=True, name=u'_get_12f7c', isproc=True)
        p.action_label(far=True, name=u'_get_playsettings', isproc=True)
        p.action_label(far=True, name=u'_getset_amplif', isproc=True)
        p.action_label(far=True, name=u'_getset_playstate', isproc=True)
        p.action_label(far=True, name=u'_int24', isproc=True)
        p.action_label(far=True, name=u'_int2f_checkmyself', isproc=True)
        p.action_label(far=True, name=u'_int9_keyb', isproc=True)
        p.action_label(far=True, name=u'_memfree_125da', isproc=True)
        p.action_label(far=True, name=u'_midi_int8p', isproc=True)
        p.action_label(far=True, name=u'_mod_readfile_11f4e', isproc=True)
        p.action_label(far=True, name=u'_moduleread', isproc=True)
        p.action_label(far=True, name=u'_read_sndsettings', isproc=True)
        p.action_label(far=True, name=u'_sb16_handler_int', isproc=True)
        p.action_label(far=True, name=u'_set_playsettings', isproc=True)
        p.action_label(far=True, name=u'_snd_offx', isproc=True)
        p.action_label(far=True, name=u'_stereo_timer_int', isproc=True)
        p.action_label(far=True, name=u'_timer_int_end', isproc=True)
        p.action_label(far=True, name=u'_volume_12a66', isproc=True)
        p.action_label(far=True, name=u'_volume_prep', isproc=True)
        p.action_label(far=True, name=u'sub_1265d', isproc=True)
        p.action_label(far=True, name=u'sub_126a9', isproc=True)
        p.action_label(far=True, name=u'sub_12afd', isproc=True)
        p.action_label(far=True, name=u'sub_12b18', isproc=True)
        p.action_label(far=True, name=u'sub_12b83', isproc=True)
        p.action_label(far=True, name=u'sub_12cad', isproc=True)
        p.action_label(far=True, name=u'sub_12d05', isproc=True)
        p.action_label(far=True, name=u'sub_12d35', isproc=True)
        p.action_label(far=True, name=u'sub_12da8', isproc=True)
        p.action_label(far=True, name=u'sub_12eba', isproc=True)
        p.action_label(far=True, name=u'sub_12f56', isproc=True)
        p.action_label(far='near', name=u'__2stm_module', isproc=True)
        p.action_label(far='near', name=u'_adlib_18389', isproc=True)
        p.action_label(far='near', name=u'_adlib_18395', isproc=True)
        p.action_label(far='near', name=u'_adlib_clean', isproc=True)
        p.action_label(far='near', name=u'_adlib_init', isproc=True)
        p.action_label(far='near', name=u'_adlib_set', isproc=True)
        p.action_label(far='near', name=u'_adlib_sndoff', isproc=True)
        p.action_label(far='near', name=u'_alloc_dma_buf', isproc=True)
        p.action_label(far='near', name=u'_calc_14043', isproc=True)
        p.action_label(far='near', name=u'_callsubx', isproc=True)
        p.action_label(far='near', name=u'_checksb', isproc=True)
        p.action_label(far='near', name=u'_clean_int8_mem_timr', isproc=True)
        p.action_label(far='near', name=u'_clean_timer', isproc=True)
        p.action_label(far='near', name=u'_configure_timer', isproc=True)
        p.action_label(far='near', name=u'_copy_printable', isproc=True)
        p.action_label(far='near', name=u'_covox_deinit', isproc=True)
        p.action_label(far='near', name=u'_covox_init', isproc=True)
        p.action_label(far='near', name=u'_covox_off', isproc=True)
        p.action_label(far='near', name=u'_covox_on', isproc=True)
        p.action_label(far='near', name=u'_cpy_printable', isproc=True)
        p.action_label(far='near', name=u'_dma_186e3', isproc=True)
        p.action_label(far='near', name=u'_doschdir', isproc=True)
        p.action_label(far='near', name=u'_dosexec', isproc=True)
        p.action_label(far='near', name=u'_dosfindnext', isproc=True)
        p.action_label(far='near', name=u'_dosfread', isproc=True)
        p.action_label(far='near', name=u'_dosgetcurdir', isproc=True)
        p.action_label(far='near', name=u'_dosseek', isproc=True)
        p.action_label(far='near', name=u'_draw_frame', isproc=True)
        p.action_label(far='near', name=u'_e669_module', isproc=True)
        p.action_label(far='near', name=u'_eff_1387f', isproc=True)
        p.action_label(far='near', name=u'_eff_13886', isproc=True)
        p.action_label(far='near', name=u'_eff_1389d', isproc=True)
        p.action_label(far='near', name=u'_eff_138a4', isproc=True)
        p.action_label(far='near', name=u'_eff_138d2', isproc=True)
        p.action_label(far='near', name=u'_eff_1392f', isproc=True)
        p.action_label(far='near', name=u'_eff_139ac', isproc=True)
        p.action_label(far='near', name=u'_eff_139b2', isproc=True)
        p.action_label(far='near', name=u'_eff_139b9', isproc=True)
        p.action_label(far='near', name=u'_eff_13a43', isproc=True)
        p.action_label(far='near', name=u'_eff_13a94', isproc=True)
        p.action_label(far='near', name=u'_eff_13ad7', isproc=True)
        p.action_label(far='near', name=u'_eff_13b06', isproc=True)
        p.action_label(far='near', name=u'_eff_13b78', isproc=True)
        p.action_label(far='near', name=u'_eff_13b88', isproc=True)
        p.action_label(far='near', name=u'_eff_13ba3', isproc=True)
        p.action_label(far='near', name=u'_eff_13bb2', isproc=True)
        p.action_label(far='near', name=u'_eff_13bc0', isproc=True)
        p.action_label(far='near', name=u'_eff_13bc8', isproc=True)
        p.action_label(far='near', name=u'_eff_13c02', isproc=True)
        p.action_label(far='near', name=u'_eff_13c34', isproc=True)
        p.action_label(far='near', name=u'_eff_13c3f', isproc=True)
        p.action_label(far='near', name=u'_eff_13c64', isproc=True)
        p.action_label(far='near', name=u'_eff_13c88', isproc=True)
        p.action_label(far='near', name=u'_eff_13c95', isproc=True)
        p.action_label(far='near', name=u'_eff_13ca2', isproc=True)
        p.action_label(far='near', name=u'_eff_13cb3', isproc=True)
        p.action_label(far='near', name=u'_eff_13cc9', isproc=True)
        p.action_label(far='near', name=u'_eff_13cdd', isproc=True)
        p.action_label(far='near', name=u'_eff_13ce8', isproc=True)
        p.action_label(far='near', name=u'_eff_13de5', isproc=True)
        p.action_label(far='near', name=u'_eff_13def', isproc=True)
        p.action_label(far='near', name=u'_eff_13e1e', isproc=True)
        p.action_label(far='near', name=u'_eff_13e2d', isproc=True)
        p.action_label(far='near', name=u'_eff_13e32', isproc=True)
        p.action_label(far='near', name=u'_eff_13e7f', isproc=True)
        p.action_label(far='near', name=u'_eff_13e84', isproc=True)
        p.action_label(far='near', name=u'_eff_13e8c', isproc=True)
        p.action_label(far='near', name=u'_eff_13f05', isproc=True)
        p.action_label(far='near', name=u'_eff_13f3b', isproc=True)
        p.action_label(far='near', name=u'_eff_13fbe', isproc=True)
        p.action_label(far='near', name=u'_eff_14020', isproc=True)
        p.action_label(far='near', name=u'_eff_14030', isproc=True)
        p.action_label(far='near', name=u'_eff_14067', isproc=True)
        p.action_label(far='near', name=u'_eff_nullsub', isproc=True)
        p.action_label(far='near', name=u'_ems_deinit', isproc=True)
        p.action_label(far='near', name=u'_ems_init', isproc=True)
        p.action_label(far='near', name=u'_ems_mapmem', isproc=True)
        p.action_label(far='near', name=u'_ems_mapmem2', isproc=True)
        p.action_label(far='near', name=u'_ems_mapmemx', isproc=True)
        p.action_label(far='near', name=u'_ems_mapmemy', isproc=True)
        p.action_label(far='near', name=u'_ems_realloc', isproc=True)
        p.action_label(far='near', name=u'_ems_realloc2', isproc=True)
        p.action_label(far='near', name=u'_ems_release', isproc=True)
        p.action_label(far='near', name=u'_ems_restore_mapctx', isproc=True)
        p.action_label(far='near', name=u'_ems_save_mapctx', isproc=True)
        p.action_label(far='near', name=u'_f1_draw', isproc=True)
        p.action_label(far='near', name=u'_f1_help', isproc=True)
        p.action_label(far='near', name=u'_f2_draw_waves', isproc=True)
        p.action_label(far='near', name=u'_f2_draw_waves2', isproc=True)
        p.action_label(far='near', name=u'_f2_waves', isproc=True)
        p.action_label(far='near', name=u'_f3_draw', isproc=True)
        p.action_label(far='near', name=u'_f3_textmetter', isproc=True)
        p.action_label(far='near', name=u'_f4_draw', isproc=True)
        p.action_label(far='near', name=u'_f4_patternnae', isproc=True)
        p.action_label(far='near', name=u'_f5_draw_spectr', isproc=True)
        p.action_label(far='near', name=u'_f5_graphspectr', isproc=True)
        p.action_label(far='near', name=u'_f6_undoc', isproc=True)
        p.action_label(far='near', name=u'_far_module', isproc=True)
        p.action_label(far='near', name=u'_filelist_198b8', isproc=True)
        p.action_label(far='near', name=u'_find_mods', isproc=True)
        p.action_label(far='near', name=u'_get_comspec', isproc=True)
        p.action_label(far='near', name=u'_get_keybsw', isproc=True)
        p.action_label(far='near', name=u'_getexename', isproc=True)
        p.action_label(far='near', name=u'_getint_vect', isproc=True)
        p.action_label(far='near', name=u'_getmemallocstrat', isproc=True)
        p.action_label(far='near', name=u'_graph_1c070', isproc=True)
        p.action_label(far='near', name=u'_hex_1be39', isproc=True)
        p.action_label(far='near', name=u'_init_f5_spectr', isproc=True)
        p.action_label(far='near', name=u'_init_vga_waves', isproc=True)
        p.action_label(far='near', name=u'_init_vga_waves_chunk', isproc=True)
        p.action_label(far='near', name=u'_initclockfromrtc', isproc=True)
        p.action_label(far='near', name=u'_inr_module', isproc=True)
        p.action_label(far='near', name=u'_inr_read_118b0', isproc=True)
        p.action_label(far='near', name=u'_inr_read_119b7', isproc=True)
        p.action_label(far='near', name=u'_int1a_timer', isproc=True)
        p.action_label(far='near', name=u'_keyb_screen_loop', isproc=True)
        p.action_label(far='near', name=u'_loadcfg', isproc=True)
        p.action_label(far='near', name=u'_mem_reallocx', isproc=True)
        p.action_label(far='near', name=u'_memalloc', isproc=True)
        p.action_label(far='near', name=u'_memalloc12k', isproc=True)
        p.action_label(far='near', name=u'_memclean', isproc=True)
        p.action_label(far='near', name=u'_memfill8080', isproc=True)
        p.action_label(far='near', name=u'_memfree', isproc=True)
        p.action_label(far='near', name=u'_memfree_18a28', isproc=True)
        p.action_label(far='near', name=u'_memrealloc', isproc=True)
        p.action_label(far='near', name=u'_message_1be77', isproc=True)
        p.action_label(far='near', name=u'_midi_153c0', isproc=True)
        p.action_label(far='near', name=u'_midi_153d6', isproc=True)
        p.action_label(far='near', name=u'_midi_153f1', isproc=True)
        p.action_label(far='near', name=u'_midi_15413', isproc=True)
        p.action_label(far='near', name=u'_midi_15442', isproc=True)
        p.action_label(far='near', name=u'_midi_1544d', isproc=True)
        p.action_label(far='near', name=u'_midi_15466', isproc=True)
        p.action_label(far='near', name=u'_midi_154ac', isproc=True)
        p.action_label(far='near', name=u'_midi_154da', isproc=True)
        p.action_label(far='near', name=u'_midi_154de', isproc=True)
        p.action_label(far='near', name=u'_midi_clean', isproc=True)
        p.action_label(far='near', name=u'_midi_set', isproc=True)
        p.action_label(far='near', name=u'_midi_sndoff', isproc=True)
        p.action_label(far='near', name=u'_mod_1021e', isproc=True)
        p.action_label(far='near', name=u'_mod_1024a', isproc=True)
        p.action_label(far='near', name=u'_mod_102f5', isproc=True)
        p.action_label(far='near', name=u'_mod_n_t_module', isproc=True)
        p.action_label(far='near', name=u'_mod_read_10311', isproc=True)
        p.action_label(far='near', name=u'_mod_readfile_12247', isproc=True)
        p.action_label(far='near', name=u'_mod_sub_12220', isproc=True)
        p.action_label(far='near', name=u'_modules_search', isproc=True)
        p.action_label(far='near', name=u'_mouse_1c7a9', isproc=True)
        p.action_label(far='near', name=u'_mouse_1c7cf', isproc=True)
        p.action_label(far='near', name=u'_mouse_deinit', isproc=True)
        p.action_label(far='near', name=u'_mouse_getpos', isproc=True)
        p.action_label(far='near', name=u'_mouse_hide', isproc=True)
        p.action_label(far='near', name=u'_mouse_hide2', isproc=True)
        p.action_label(far='near', name=u'_mouse_init', isproc=True)
        p.action_label(far='near', name=u'_mouse_show', isproc=True)
        p.action_label(far='near', name=u'_mouse_showcur', isproc=True)
        p.action_label(far='near', name=u'_mtm_module', isproc=True)
        p.action_label(far='near', name=u'_my_i16toa10_0', isproc=True)
        p.action_label(far='near', name=u'_my_i32toa10_0', isproc=True)
        p.action_label(far='near', name=u'_my_i8toa10', isproc=True)
        p.action_label(far='near', name=u'_my_i8toa10_0', isproc=True)
        p.action_label(far='near', name=u'_my_pnt_u32toa_fill', isproc=True)
        p.action_label(far='near', name=u'_my_putdigit', isproc=True)
        p.action_label(far='near', name=u'_my_u16toa10', isproc=True)
        p.action_label(far='near', name=u'_my_u16toa_10', isproc=True)
        p.action_label(far='near', name=u'_my_u16tox', isproc=True)
        p.action_label(far='near', name=u'_my_u32toa', isproc=True)
        p.action_label(far='near', name=u'_my_u32toa10', isproc=True)
        p.action_label(far='near', name=u'_my_u32toa10_0', isproc=True)
        p.action_label(far='near', name=u'_my_u32toa_0', isproc=True)
        p.action_label(far='near', name=u'_my_u32toa_fill', isproc=True)
        p.action_label(far='near', name=u'_my_u32tox', isproc=True)
        p.action_label(far='near', name=u'_my_u4tox', isproc=True)
        p.action_label(far='near', name=u'_my_u8toa10', isproc=True)
        p.action_label(far='near', name=u'_my_u8toa_10', isproc=True)
        p.action_label(far='near', name=u'_my_u8tox', isproc=True)
        p.action_label(far='near', name=u'_myasmsprintf', isproc=True)
        p.action_label(far='near', name=u'_myputdigit', isproc=True)
        p.action_label(far='near', name=u'_mystrlen', isproc=True)
        p.action_label(far='near', name=u'_mystrlen_0', isproc=True)
        p.action_label(far='near', name=u'_nongravis_182e7', isproc=True)
        p.action_label(far='near', name=u'_nullsub_2', isproc=True)
        p.action_label(far='near', name=u'_nullsub_3', isproc=True)
        p.action_label(far='near', name=u'_nullsub_4', isproc=True)
        p.action_label(far='near', name=u'_nullsub_5', isproc=True)
        p.action_label(far='near', name=u'_parse_cmdline', isproc=True)
        p.action_label(far='near', name=u'_pcspeaker_deinit', isproc=True)
        p.action_label(far='near', name=u'_pcspeaker_init', isproc=True)
        p.action_label(far='near', name=u'_pcspeaker_off', isproc=True)
        p.action_label(far='near', name=u'_pcspeaker_on', isproc=True)
        p.action_label(far='near', name=u'_psm_module', isproc=True)
        p.action_label(far='near', name=u'_put_message', isproc=True)
        p.action_label(far='near', name=u'_put_message2', isproc=True)
        p.action_label(far='near', name=u'_read2buffer', isproc=True)
        p.action_label(far='near', name=u'_read_module', isproc=True)
        p.action_label(far='near', name=u'_readallmoules', isproc=True)
        p.action_label(far='near', name=u'_readmixersb', isproc=True)
        p.action_label(far='near', name=u'_readsb', isproc=True)
        p.action_label(far='near', name=u'_recolortxt', isproc=True)
        p.action_label(far='near', name=u'_rereadrtc_settmr', isproc=True)
        p.action_label(far='near', name=u'_restore_intvector', isproc=True)
        p.action_label(far='near', name=u'_s3m_module', isproc=True)
        p.action_label(far='near', name=u'_sb16_18540', isproc=True)
        p.action_label(far='near', name=u'_sb16_deinit', isproc=True)
        p.action_label(far='near', name=u'_sb16_detect_port', isproc=True)
        p.action_label(far='near', name=u'_sb16_init', isproc=True)
        p.action_label(far='near', name=u'_sb16_off', isproc=True)
        p.action_label(far='near', name=u'_sb16_on', isproc=True)
        p.action_label(far='near', name=u'_sb16_sound_off', isproc=True)
        p.action_label(far='near', name=u'_sb16_sound_on', isproc=True)
        p.action_label(far='near', name=u'_set_dmachn_mask', isproc=True)
        p.action_label(far='near', name=u'_set_egasequencer', isproc=True)
        p.action_label(far='near', name=u'_set_keybsw', isproc=True)
        p.action_label(far='near', name=u'_set_timer', isproc=True)
        p.action_label(far='near', name=u'_set_timer_int', isproc=True)
        p.action_label(far='near', name=u'_setint_vect', isproc=True)
        p.action_label(far='near', name=u'_setmemalloc1', isproc=True)
        p.action_label(far='near', name=u'_setmemalloc2', isproc=True)
        p.action_label(far='near', name=u'_setmemallocstrat', isproc=True)
        p.action_label(far='near', name=u'_setsnd_handler', isproc=True)
        p.action_label(far='near', name=u'_setvideomode', isproc=True)
        p.action_label(far='near', name=u'_snd_deinit', isproc=True)
        p.action_label(far='near', name=u'_snd_initialze', isproc=True)
        p.action_label(far='near', name=u'_snd_off', isproc=True)
        p.action_label(far='near', name=u'_snd_off_chunk', isproc=True)
        p.action_label(far='near', name=u'_snd_on', isproc=True)
        p.action_label(far='near', name=u'_someplaymode', isproc=True)
        p.action_label(far='near', name=u'_spectr_1b084', isproc=True)
        p.action_label(far='near', name=u'_spectr_1b406', isproc=True)
        p.action_label(far='near', name=u'_spectr_1bbc1', isproc=True)
        p.action_label(far='near', name=u'_spectr_1bc2d', isproc=True)
        p.action_label(far='near', name=u'_spectr_1bce9', isproc=True)
        p.action_label(far='near', name=u'_spectr_1c4f8', isproc=True)
        #p.add_label(far='near',name=u'_start',isproc=True)
        p.action_label(far='near', name=u'_stereo_clean', isproc=True)
        p.action_label(far='near', name=u'_stereo_init', isproc=True)
        p.action_label(far='near', name=u'_stereo_set', isproc=True)
        p.action_label(far='near', name=u'_stereo_sndoff', isproc=True)
        p.action_label(far='near', name=u'_strcpy_count', isproc=True)
        p.action_label(far='near', name=u'_strcpy_count_0', isproc=True)
        p.action_label(far='near', name=u'_text_1bf69', isproc=True)
        p.action_label(far='near', name=u'_text_init', isproc=True)
        p.action_label(far='near', name=u'_text_init2', isproc=True)
        p.action_label(far='near', name=u'_txt_1abae', isproc=True)
        p.action_label(far='near', name=u'_txt_blinkingoff', isproc=True)
        p.action_label(far='near', name=u'_txt_draw_bottom', isproc=True)
        p.action_label(far='near', name=u'_txt_draw_top_title', isproc=True)
        p.action_label(far='near', name=u'_txt_enableblink', isproc=True)
        p.action_label(far='near', name=u'_u16tox', isproc=True)
        p.action_label(far='near', name=u'_u32tox', isproc=True)
        p.action_label(far='near', name=u'_u4tox', isproc=True)
        p.action_label(far='near', name=u'_u8tox', isproc=True)
        p.action_label(far='near', name=u'_ult_1150b', isproc=True)
        p.action_label(far='near', name=u'_ult_module', isproc=True)
        p.action_label(far='near', name=u'_ult_read', isproc=True)
        p.action_label(far='near', name=u'_video_prp_mtr_positn', isproc=True)
        p.action_label(far='near', name=u'_vlm_141df', isproc=True)
        p.action_label(far='near', name=u'_volume_prepare_waves', isproc=True)
        p.action_label(far='near', name=u'_write_scr', isproc=True)
        p.action_label(far='near', name=u'_writemixersb', isproc=True)
        p.action_label(far='near', name=u'_writesb', isproc=True)
        p.action_label(far='near', name=u'affpal', isproc=True)
        p.action_label(far='near', name=u'aincecx', isproc=True)
        p.action_label(far='near', name=u'aincedx', isproc=True)
        p.action_label(far='near', name=u'chanl_2_eff_13813', isproc=True)
        p.action_label(far='near', name=u'exec_adc', isproc=True)
        p.action_label(far='near', name=u'exec_adcb', isproc=True)
        p.action_label(far='near', name=u'exec_adcl', isproc=True)
        p.action_label(far='near', name=u'exec_adcw', isproc=True)
        p.action_label(far='near', name=u'exec_add', isproc=True)
        p.action_label(far='near', name=u'exec_addb', isproc=True)
        p.action_label(far='near', name=u'exec_addl', isproc=True)
        p.action_label(far='near', name=u'exec_addw', isproc=True)
        p.action_label(far='near', name=u'exec_and', isproc=True)
        p.action_label(far='near', name=u'exec_andb', isproc=True)
        p.action_label(far='near', name=u'exec_andl', isproc=True)
        p.action_label(far='near', name=u'exec_andw', isproc=True)
        p.action_label(far='near', name=u'exec_bt', isproc=True)
        p.action_label(far='near', name=u'exec_btc', isproc=True)
        p.action_label(far='near', name=u'exec_btcl', isproc=True)
        p.action_label(far='near', name=u'exec_btcw', isproc=True)
        p.action_label(far='near', name=u'exec_btl', isproc=True)
        p.action_label(far='near', name=u'exec_btr', isproc=True)
        p.action_label(far='near', name=u'exec_btrl', isproc=True)
        p.action_label(far='near', name=u'exec_btrw', isproc=True)
        p.action_label(far='near', name=u'exec_bts', isproc=True)
        p.action_label(far='near', name=u'exec_btsl', isproc=True)
        p.action_label(far='near', name=u'exec_btsw', isproc=True)
        p.action_label(far='near', name=u'exec_btw', isproc=True)
        p.action_label(far='near', name=u'exec_cmp', isproc=True)
        p.action_label(far='near', name=u'exec_cmpb', isproc=True)
        p.action_label(far='near', name=u'exec_cmpl', isproc=True)
        p.action_label(far='near', name=u'exec_cmpw', isproc=True)
        p.action_label(far='near', name=u'exec_dec', isproc=True)
        p.action_label(far='near', name=u'exec_decb', isproc=True)
        p.action_label(far='near', name=u'exec_decl', isproc=True)
        p.action_label(far='near', name=u'exec_decw', isproc=True)
        p.action_label(far='near', name=u'exec_inc', isproc=True)
        p.action_label(far='near', name=u'exec_incb', isproc=True)
        p.action_label(far='near', name=u'exec_incl', isproc=True)
        p.action_label(far='near', name=u'exec_incw', isproc=True)
        p.action_label(far='near', name=u'exec_neg', isproc=True)
        p.action_label(far='near', name=u'exec_negb', isproc=True)
        p.action_label(far='near', name=u'exec_negl', isproc=True)
        p.action_label(far='near', name=u'exec_negw', isproc=True)
        p.action_label(far='near', name=u'exec_not', isproc=True)
        p.action_label(far='near', name=u'exec_notb', isproc=True)
        p.action_label(far='near', name=u'exec_notl', isproc=True)
        p.action_label(far='near', name=u'exec_notw', isproc=True)
        p.action_label(far='near', name=u'exec_or', isproc=True)
        p.action_label(far='near', name=u'exec_orb', isproc=True)
        p.action_label(far='near', name=u'exec_orl', isproc=True)
        p.action_label(far='near', name=u'exec_orw', isproc=True)
        p.action_label(far='near', name=u'exec_rcl', isproc=True)
        p.action_label(far='near', name=u'exec_rclb', isproc=True)
        p.action_label(far='near', name=u'exec_rcll', isproc=True)
        p.action_label(far='near', name=u'exec_rclw', isproc=True)
        p.action_label(far='near', name=u'exec_rcr', isproc=True)
        p.action_label(far='near', name=u'exec_rcrb', isproc=True)
        p.action_label(far='near', name=u'exec_rcrl', isproc=True)
        p.action_label(far='near', name=u'exec_rcrw', isproc=True)
        p.action_label(far='near', name=u'exec_rol', isproc=True)
        p.action_label(far='near', name=u'exec_rolb', isproc=True)
        p.action_label(far='near', name=u'exec_roll', isproc=True)
        p.action_label(far='near', name=u'exec_rolw', isproc=True)
        p.action_label(far='near', name=u'exec_ror', isproc=True)
        p.action_label(far='near', name=u'exec_rorb', isproc=True)
        p.action_label(far='near', name=u'exec_rorl', isproc=True)
        p.action_label(far='near', name=u'exec_rorw', isproc=True)
        p.action_label(far='near', name=u'exec_sar', isproc=True)
        p.action_label(far='near', name=u'exec_sarb', isproc=True)
        p.action_label(far='near', name=u'exec_sarl', isproc=True)
        p.action_label(far='near', name=u'exec_sarw', isproc=True)
        p.action_label(far='near', name=u'exec_sbb', isproc=True)
        p.action_label(far='near', name=u'exec_sbbb', isproc=True)
        p.action_label(far='near', name=u'exec_sbbl', isproc=True)
        p.action_label(far='near', name=u'exec_sbbw', isproc=True)
        p.action_label(far='near', name=u'exec_shl', isproc=True)
        p.action_label(far='near', name=u'exec_shlb', isproc=True)
        p.action_label(far='near', name=u'exec_shld', isproc=True)
        p.action_label(far='near', name=u'exec_shldl', isproc=True)
        p.action_label(far='near', name=u'exec_shldw', isproc=True)
        p.action_label(far='near', name=u'exec_shll', isproc=True)
        p.action_label(far='near', name=u'exec_shlw', isproc=True)
        p.action_label(far='near', name=u'exec_shr', isproc=True)
        p.action_label(far='near', name=u'exec_shrb', isproc=True)
        p.action_label(far='near', name=u'exec_shrd', isproc=True)
        p.action_label(far='near', name=u'exec_shrdl', isproc=True)
        p.action_label(far='near', name=u'exec_shrdw', isproc=True)
        p.action_label(far='near', name=u'exec_shrl', isproc=True)
        p.action_label(far='near', name=u'exec_shrw', isproc=True)
        p.action_label(far='near', name=u'exec_sub', isproc=True)
        p.action_label(far='near', name=u'exec_subb', isproc=True)
        p.action_label(far='near', name=u'exec_subl', isproc=True)
        p.action_label(far='near', name=u'exec_subw', isproc=True)
        p.action_label(far='near', name=u'exec_xor', isproc=True)
        p.action_label(far='near', name=u'exec_xorb', isproc=True)
        p.action_label(far='near', name=u'exec_xorl', isproc=True)
        p.action_label(far='near', name=u'exec_xorw', isproc=True)
        p.action_label(far='near', name=u'incebx', isproc=True)
        p.action_label(far='near', name=u'load_raw', isproc=True)
        p.action_label(far='near', name=u'loc_1ab0d', isproc=True)
        p.action_label(far='near', name=u'main', isproc=True)
        p.action_label(far='near', name=u'prepare_samples', isproc=True)
        p.action_label(far='near', name=u'printeax', isproc=True)
        #p.add_label(far='near',name=u'start',isproc=True)
        p.action_label(far='near', name=u'sub_11ba6', isproc=True)
        p.action_label(far='near', name=u'sub_11c0c', isproc=True)
        p.action_label(far='near', name=u'sub_1279a', isproc=True)
        p.action_label(far='near', name=u'sub_1281a', isproc=True)
        p.action_label(far='near', name=u'sub_13017', isproc=True)
        p.action_label(far='near', name=u'sub_13044', isproc=True)
        p.action_label(far='near', name=u'sub_13177', isproc=True)
        p.action_label(far='near', name=u'sub_131da', isproc=True)
        p.action_label(far='near', name=u'sub_131ef', isproc=True)
        p.action_label(far='near', name=u'sub_13429', isproc=True)
        p.action_label(far='near', name=u'sub_135ca', isproc=True)
        p.action_label(far='near', name=u'sub_13623', isproc=True)
        p.action_label(far='near', name=u'sub_137d5', isproc=True)
        p.action_label(far='near', name=u'sub_13826', isproc=True)
        p.action_label(far='near', name=u'sub_13cf6', isproc=True)
        p.action_label(far='near', name=u'sub_13d95', isproc=True)
        p.action_label(far='near', name=u'sub_13e9b', isproc=True)
        p.action_label(far='near', name=u'sub_14087', isproc=True)
        p.action_label(far='near', name=u'sub_140b6', isproc=True)
        p.action_label(far='near', name=u'sub_1415e', isproc=True)
        p.action_label(far='near', name=u'sub_154f4', isproc=True)
        p.action_label(far='near', name=u'sub_15577', isproc=True)
        p.action_label(far='near', name=u'sub_1609f', isproc=True)
        p.action_label(far='near', name=u'sub_16cf6', isproc=True)
        p.action_label(far='near', name=u'sub_1725f', isproc=True)
        p.action_label(far='near', name=u'sub_17824', isproc=True)
        p.action_label(far='near', name=u'sub_182db', isproc=True)
        p.action_label(far='near', name=u'sub_1ab8c', isproc=True)
        p.action_label(far='near', name=u'sub_40d5c0', isproc=True)
        p.action_label(far='near', name=u'test_adc', isproc=True)
        p.action_label(far='near', name=u'test_add', isproc=True)
        p.action_label(far='near', name=u'test_and', isproc=True)
        p.action_label(far='near', name=u'test_bcd', isproc=True)
        p.action_label(far='near', name=u'test_bsx', isproc=True)
        p.action_label(far='near', name=u'test_bt', isproc=True)
        p.action_label(far='near', name=u'test_btc', isproc=True)
        p.action_label(far='near', name=u'test_btr', isproc=True)
        p.action_label(far='near', name=u'test_bts', isproc=True)
        p.action_label(far='near', name=u'test_cmp', isproc=True)
        p.action_label(far='near', name=u'test_conv', isproc=True)
        p.action_label(far='near', name=u'test_dec', isproc=True)
        p.action_label(far='near', name=u'test_divb', isproc=True)
        p.action_label(far='near', name=u'test_divl', isproc=True)
        p.action_label(far='near', name=u'test_divw', isproc=True)
        p.action_label(far='near', name=u'test_idivb', isproc=True)
        p.action_label(far='near', name=u'test_idivl', isproc=True)
        p.action_label(far='near', name=u'test_idivw', isproc=True)
        p.action_label(far='near', name=u'test_imulb', isproc=True)
        p.action_label(far='near', name=u'test_imull', isproc=True)
        p.action_label(far='near', name=u'test_imull2', isproc=True)
        p.action_label(far='near', name=u'test_imulw', isproc=True)
        p.action_label(far='near', name=u'test_imulw2', isproc=True)
        p.action_label(far='near', name=u'test_inc', isproc=True)
        p.action_label(far='near', name=u'test_jcc', isproc=True)
        p.action_label(far='near', name=u'test_lea', isproc=True)
        p.action_label(far='near', name=u'test_loop', isproc=True)
        p.action_label(far='near', name=u'test_misc', isproc=True)
        p.action_label(far='near', name=u'test_mul', isproc=True)
        p.action_label(far='near', name=u'test_mulb', isproc=True)
        p.action_label(far='near', name=u'test_mull', isproc=True)
        p.action_label(far='near', name=u'test_mulw', isproc=True)
        p.action_label(far='near', name=u'test_neg', isproc=True)
        p.action_label(far='near', name=u'test_not', isproc=True)
        p.action_label(far='near', name=u'test_or', isproc=True)
        p.action_label(far='near', name=u'test_popcnt', isproc=True)
        p.action_label(far='near', name=u'test_rcl', isproc=True)
        p.action_label(far='near', name=u'test_rcr', isproc=True)
        p.action_label(far='near', name=u'test_rol', isproc=True)
        p.action_label(far='near', name=u'test_ror', isproc=True)
        p.action_label(far='near', name=u'test_sar', isproc=True)
        p.action_label(far='near', name=u'test_sbb', isproc=True)
        p.action_label(far='near', name=u'test_shl', isproc=True)
        p.action_label(far='near', name=u'test_shld', isproc=True)
        p.action_label(far='near', name=u'test_shr', isproc=True)
        p.action_label(far='near', name=u'test_shrd', isproc=True)
        p.action_label(far='near', name=u'test_string', isproc=True)
        p.action_label(far='near', name=u'test_sub', isproc=True)
        p.action_label(far='near', name=u'test_xchg', isproc=True)
        p.action_label(far='near', name=u'test_xor', isproc=True)

        #TODO
        #self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop ax bx')), u'\tR(POP(ax));\n\tR(POP(bx));\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP eax,1')), u'\tR(CMP(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code("cmp ebx,'dcba'")), u'\tR(CMP(ebx, 0x64636261));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code("sub dl,'a'")), u"\tR(SUB(dl, 'a'));\n")
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var1[bx],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+bx)), 2));\n')

        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code("cmp [doublequote+4],'d'")), u"\tR(CMP(*(raddr(ds,offset(_data,doublequote)+4)), 'd'));\n")
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code("cmp dword ptr buffer,'tseT'")), u'\tR(CMP(*(dd*)(raddr(ds,offset(_data,buffer))), 0x74736554));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            "mov ah,9            ; DS:DX->'$'-terminated string")), u'\tR(MOV(ah, 9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code("mov dl,'c'")), u"\tR(MOV(dl, 'c'));\n")
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code("mov ecx,'dcba'")), u'\tR(MOV(ecx, 0x64636261));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP [var1],111')), u'\tR(CMP(*(raddr(ds,offset(_data,var1))), 111));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP [var1],3')), u'\tR(CMP(*(raddr(ds,offset(_data,var1))), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP [var2],1')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2))), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP [var2],13')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2))), 13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP [var3],35')), u'\tR(CMP(*(raddr(ds,offset(_data,var3))), 35));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP eax,133')), u'\tR(CMP(eax, 133));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP eax,2')), u'\tR(CMP(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('CMP eax,3')), u'\tR(CMP(eax, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('INC [var1]')), u'\tR(INC(*(raddr(ds,offset(_data,var1)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('INC [var2]')), u'\tR(INC(*(dw*)(raddr(ds,offset(_data,var2)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('INC [var3]')), u'\tR(INC(*(raddr(ds,offset(_data,var3)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('INC eax')), u'\tR(INC(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('INC edx')), u'\tR(INC(edx));\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('JA failure')), u'\t\tR(JA(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('JAE failure')), u'\t\tR(JNC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('JB failure')), u'\t\tR(JC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'JE @VBL2    ;on attends la fin du retrace')), u'\t\tR(JZ(arbvbl2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'JE @VBL22    ;on attends la fin du retrace')), u'\t\tR(JZ(arbvbl22));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('JE failure')), u'\t\tR(JZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('JMP exitLabel')), u'\t\tR(JMP(exitlabel));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'JNE @VBL1    ;on attends le retrace')), u'\t\tR(JNZ(arbvbl1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'JNE @VBL12    ;on attends le retrace')), u'\t\tR(JNZ(arbvbl12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('JNE failure')), u'\t\tR(JNZ(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('JNZ  @@saaccvaaaax')), u'\t\tR(JNZ(arbarbsaaccvaaaax));\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('LODSB')), 'LODSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('MOV DX,3DAh')), u'\tR(MOV(dx, 0x3DA));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('MOV al,0')), u'\tR(MOV(al, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('MOV ds, _data')), u'\tR(MOV(ds, seg_offset(_data)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('SHL ch,2')), u'\tR(SHL(ch, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('SHR bl,1')), u'\tR(SHR(bl, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('SHR ch,1')), u'\tR(SHR(ch, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('SHR eax,1')), u'\tR(SHR(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('TEST AL,8')), u'\tR(TEST(al, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('XOR   al,al')), u'\tal = 0;AFFECT_ZF(0); AFFECT_SF(al,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('aaa')), '\tR(AAA);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('aad')), '\tR(AAD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('aam')), '\tR(AAM);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('aas')), '\tR(AAS);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('adc     dl, cl')), u'\tR(ADC(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('adc     dx, cx')), u'\tR(ADC(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('adc     edx, ecx')), u'\tR(ADC(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     dl, cl')), u'\tR(ADD(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     dx, cx')), u'\tR(ADD(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     ebx, 4')), u'\tR(ADD(ebx, 4));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     edx, ecx')), u'\tR(ADD(edx, ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     esp, 10h')), u'\tR(ADD(esp, 0x10));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     esp, 114h')), u'\tR(ADD(esp, 0x114));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     esp, 2')), u'\tR(ADD(esp, 2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     esp, 20h')), u'\tR(ADD(esp, 0x20));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('add     esp, 4Ch')), u'\tR(ADD(esp, 0x4C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'add bl,30h          ; convert to ASCII')), u'\tR(ADD(bl, 0x30));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'add bl,7            ; "A" to "F"')), u'\tR(ADD(bl, 7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('add edi,14*320')), u'\tR(ADD(edi, 14*320));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('add word ptr [var5+2],50')), u'\tR(ADD(*(dw*)(raddr(ds,offset(_data,var5)+2)), 50));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     ah, 0F7h')), u'\tR(AND(ah, 0x0F7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     dl, cl')), u'\tR(AND(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     dx, cx')), u'\tR(AND(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     ecx, 40h')), u'\tR(AND(ecx, 0x40));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     edx, ecx')), u'\tR(AND(edx, ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     eflags, 40h')), u'\tR(AND(eflags, 0x40));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     eflags, 8D5h')), u'\tR(AND(eflags, 0x8D5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     esp, 0FFFFFFF0h')), u'\tR(AND(esp, 0x0FFFFFFF0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     flags, 0D5h')), u'\tR(AND(flags, 0x0D5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     flags, 1')), u'\tR(AND(flags, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     flags, 11h')), u'\tR(AND(flags, 0x11));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     flags, 801h')), u'\tR(AND(flags, 0x801));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     flags, 8C5h')), u'\tR(AND(flags, 0x8C5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('and     flags, 8D5h')), u'\tR(AND(flags, 0x8D5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'and bl,0Fh          ; only low-Nibble')), u'\tR(AND(bl, 0x0F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsf     ax, bx')), u'\tR(BSF(ax, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsf     ax, di')), u'\tR(BSF(ax, di));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsf     ax, si')), u'\tR(BSF(ax, si));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsf     eax, ebx')), u'\tR(BSF(eax, ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsf     eax, edi')), u'\tR(BSF(eax, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsr     ax, bx')), u'\tR(BSR(ax, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsr     ax, di')), u'\tR(BSR(ax, di));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsr     eax, ebx')), u'\tR(BSR(eax, ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsr     eax, edx')), u'\tR(BSR(eax, edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsr     eax, esi')), u'\tR(BSR(eax, esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bsr     edx, eax')), u'\tR(BSR(edx, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bswap   eax')), u'\tR(BSWAP(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bt      cx, dx')), u'\tR(BT(cx, dx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bt      ecx, edx')), u'\tR(BT(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bt eax,0')), u'\tR(BT(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bt eax,2')), u'\tR(BT(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('btc     cx, dx')), u'\tR(BTC(cx, dx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('btc     ecx, edx')), u'\tR(BTC(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('btc eax,0')), u'\tR(BTC(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('btc eax,2')), u'\tR(BTC(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('btr     cx, dx')), u'\tR(BTR(cx, dx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('btr     ecx, edx')), u'\tR(BTR(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('btr eax,0')), u'\tR(BTR(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('btr eax,2')), u'\tR(BTR(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bts     cx, dx')), u'\tR(BTS(cx, dx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('bts     ecx, edx')), u'\tR(BTS(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bts eax,0')), u'\tR(BTS(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('bts eax,2')), u'\tR(BTS(eax, 2));\n')


        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cbw')), '\tR(CBW);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cdq')), '\tR(CDQ);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('clc')), '\tR(CLC);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cld')), '\tR(CLD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmc')), '\tR(CMC);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     dl, cl')), u'\tR(CMP(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     dx, cx')), u'\tR(CMP(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     ebx, ebx')), u'\tR(CMP(ebx, ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     ebx, edi')), u'\tR(CMP(ebx, edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     ebx, esi')), u'\tR(CMP(ebx, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'cmp     ebx, offset unk_40F064')), u'\tR(CMP(ebx, offset(initcall,unk_40f064)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     ecx, 1')), u'\tR(CMP(ecx, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     edi, ebx')), u'\tR(CMP(edi, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     edx, 1')), u'\tR(CMP(edx, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     edx, ecx')), u'\tR(CMP(edx, ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     esi, ebx')), u'\tR(CMP(esi, ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     esi, edi')), u'\tR(CMP(esi, edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     esi, esi')), u'\tR(CMP(esi, esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     i, 1000h')), u'\tR(CMP(i, 0x1000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     i, 100h')), u'\tR(CMP(i, 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     i, 10h')), u'\tR(CMP(i, 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     i, 20h')), u'\tR(CMP(i, 0x20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp     i, 4')), u'\tR(CMP(i, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [a],5')), u'\tR(CMP(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var+3],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var)+3)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var+4],0')), u'\tR(CMP(*(raddr(ds,offset(_data,var)+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var-1],0')), u'\tR(CMP(*(raddr(ds,offset(_data,var)-1)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var0+5],0')), u'\tR(CMP(*(raddr(ds,offset(_data,var0)+5)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var1+1],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+1)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var1],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1))), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var2+2],6')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2)+2)), 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var2-1],5')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2)-1)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var2],4')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2))), 4));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var3+3*4],4000000')), u'\tR(CMP(*(raddr(ds,offset(_data,var3)+3*4)), 4000000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var3+ebp],4000000')), u'\tR(CMP(*(raddr(ds,offset(_data,var3)+ebp)), 4000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var4+t],1')), u'\tR(CMP(*(raddr(ds,offset(_data,var4)+t)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var4],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var4))), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp [var],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var))), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ah,-1')), u'\tR(CMP(ah, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ah,0ffh')), u'\tR(CMP(ah, 0x0ff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp al,2')), u'\tR(CMP(al, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp al,ah')), u'\tR(CMP(al, ah));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ax,-5')), u'\tR(CMP(ax, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bh,0cch')), u'\tR(CMP(bh, 0x0cc));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bl,001111111B')), u'\tR(CMP(bl, 0x7f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bl,0ddh')), u'\tR(CMP(bl, 0x0dd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bl,192')), u'\tR(CMP(bl, 192));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bl,193')), u'\tR(CMP(bl, 193));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'cmp bl,39h          ; above 9?')), u'\tR(CMP(bl, 0x39));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bl,al')), u'\tR(CMP(bl, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bx,-1')), u'\tR(CMP(bx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bx,1')), u'\tR(CMP(bx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bx,4+5*256')), u'\tR(CMP(bx, 4+5*256));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp bx,6*256+5')), u'\tR(CMP(bx, 6*256+5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr [a],5')), u'\tR(CMP(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr [edi+1],6')), u'\tR(CMP(*(raddr(ds,edi+1)), 6));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr [edi+7],132')), u'\tR(CMP(*(raddr(ds,edi+7)), 132));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr [esi],1')), u'\tR(CMP(*(raddr(ds,esi)), 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr [esi],4')), u'\tR(CMP(*(raddr(ds,esi)), 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'cmp byte ptr [testOVerlap+1],1')), u'\tR(CMP(*(raddr(ds,offset(_data,testoverlap)+1)), 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr [var1+1],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+1)), 5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr [var1+2],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+2)), 5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr es:[0],55')), u'\tR(CMP(*(raddr(es,0)), 55));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr es:[0],56')), u'\tR(CMP(*(raddr(es,0)), 56));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp byte ptr es:[0],57')), u'\tR(CMP(*(raddr(es,0)), 57));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp c,256+3+65536')), u'\tR(CMP(m.c, 256+3+65536));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ch,001111111B')), u'\tR(CMP(ch, 0x7f));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ch,011111100B')), u'\tR(CMP(ch, 0xfc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dl,2')), u'\tR(CMP(dl, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dl,4')), u'\tR(CMP(dl, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dl,5')), u'\tR(CMP(dl, 5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dword ptr var4,11')), u'\tR(CMP(*(dd*)(raddr(ds,offset(_data,var4))), 11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dx,-1')), u'\tR(CMP(dx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dx,0')), u'\tR(CMP(dx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dx,11')), u'\tR(CMP(dx, 11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp dx,5')), u'\tR(CMP(dx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,-13')), u'\tR(CMP(eax, -13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,-2')), u'\tR(CMP(eax, -2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,-5')), u'\tR(CMP(eax, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,0')), u'\tR(CMP(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,000f3h')), u'\tR(CMP(eax, 0x000f3));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,0101010101010101b')), u'\tR(CMP(eax, 0x5555));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,0101b')), u'\tR(CMP(eax, 0x5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,077123456h')), u'\tR(CMP(eax, 0x077123456));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,0ffff0003h')), u'\tR(CMP(eax, 0x0ffff0003));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,0ffff00f3h')), u'\tR(CMP(eax, 0x0ffff00f3));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,0ffffff03h')), u'\tR(CMP(eax, 0x0ffffff03));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,0fffffff3h')), u'\tR(CMP(eax, 0x0fffffff3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,1')), u'\tR(CMP(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,2')), u'\tR(CMP(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,256')), u'\tR(CMP(eax, 256));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,3')), u'\tR(CMP(eax, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,4')), u'\tR(CMP(eax, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,5')), u'\tR(CMP(eax, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,6')), u'\tR(CMP(eax, 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp eax,ebx')), u'\tR(CMP(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebp,9')), u'\tR(CMP(ebp, 9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,0')), u'\tR(CMP(ebx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,010B')), u'\tR(CMP(ebx, 0x2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,0ffffff00h')), u'\tR(CMP(ebx, 0x0ffffff00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,1')), u'\tR(CMP(ebx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,100h')), u'\tR(CMP(ebx, 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,12345')), u'\tR(CMP(ebx, 12345));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,2')), u'\tR(CMP(ebx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,3')), u'\tR(CMP(ebx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ebx,TWO')), u'\tR(CMP(ebx, TWO));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ecx,-5')), u'\tR(CMP(ecx, -5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ecx,0af222h')), u'\tR(CMP(ecx, 0x0af222));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ecx,0dff1h')), u'\tR(CMP(ecx, 0x0dff1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ecx,0ffffh')), u'\tR(CMP(ecx, 0x0ffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ecx,3')), u'\tR(CMP(ecx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp ecx,5')), u'\tR(CMP(ecx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edi,0')), u'\tR(CMP(edi, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edi,esi')), u'\tR(CMP(edi, esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edi,offset var4+1')), u'\tR(CMP(edi, offset(_data,var4)+1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edi,offset var4+4')), u'\tR(CMP(edi, offset(_data,var4)+4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edx,-2')), u'\tR(CMP(edx, -2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edx,0')), u'\tR(CMP(edx, 0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edx,0abcdef77h')), u'\tR(CMP(edx, 0x0abcdef77));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edx,0ffffh')), u'\tR(CMP(edx, 0x0ffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edx,1')), u'\tR(CMP(edx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp edx,10')), u'\tR(CMP(edx, 10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp esi,0')), u'\tR(CMP(esi, 0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp esi,offset var1+1')), u'\tR(CMP(esi, offset(_data,var1)+1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp esi,offset var3+4')), u'\tR(CMP(esi, offset(_data,var3)+4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var1,1')), u'\tR(CMP(m.var1, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var1,al')), u'\tR(CMP(m.var1, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var1[1],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+1)), 2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var1[bx+si],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+bx+si)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var1[bx],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+bx)), 2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var3+3*4,4000000')), u'\tR(CMP(*(raddr(ds,offset(_data,var3)+3*4)), 4000000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var3+ebp,4000000')), u'\tR(CMP(*(raddr(ds,offset(_data,var3)+ebp)), 4000000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp word ptr [var5+2],25')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var5)+2)), 25));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp word ptr [var5+2],50')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var5)+2)), 50));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp word ptr var5,0')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var5))), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpsb')), 'CMPSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpsd')), '\tR(CMPSD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpsw')), '\tR(CMPSW);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpxchg al, dl')), u'\tR(CMPXCHG(al, dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpxchg ax, dx')), u'\tR(CMPXCHG(ax, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'cmpxchg byte ptr [ebp+var_20], bl')), u'\tR(CMPXCHG(*(raddr(ds,ebp+var_20)), bl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'cmpxchg byte ptr [ebp+var_20], dl')), u'\tR(CMPXCHG(*(raddr(ds,ebp+var_20)), dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpxchg cl, dl')), u'\tR(CMPXCHG(cl, dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpxchg cx, dx')), u'\tR(CMPXCHG(cx, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'cmpxchg dword ptr [ebp+var_20], edx')), u'\tR(CMPXCHG(*(dd*)(raddr(ds,ebp+var_20)), edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpxchg eax, edx')), u'\tR(CMPXCHG(eax, edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpxchg ecx, edx')), u'\tR(CMPXCHG(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'cmpxchg word ptr [ebp+var_20], dx')), u'\tR(CMPXCHG(*(dw*)(raddr(ds,ebp+var_20)), dx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmpxchg8b [ebp+var_20]')), u'\tR(CMPXCHG8B(*(dw*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cwd')), '\tR(CWD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cwde')), '\tR(CWDE);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('daa')), '\tR(DAA);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('das')), '\tR(DAS);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('dec     dl')), u'\tR(DEC(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('dec     dx')), u'\tR(DEC(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('dec     edx')), u'\tR(DEC(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'dec cl              ; decrease loop counter')), u'\tR(DEC(cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('dec cx')), u'\tR(DEC(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('dec eax')), u'\tR(DEC(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('div     cx')), u'\tR(DIV2(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('div     dl')), u'\tR(DIV1(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('div     s1_0')), u'\tR(DIV0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('idiv    cx')), u'\tR(IDIV2(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('idiv    dl')), u'\tR(IDIV1(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('idiv    s1_0')), u'\tR(IDIV0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    ax, cx')), u'\tR(IMUL2_2(ax,cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    ax, cx, 2Dh')), u'\tR(IMUL3_2(ax,cx,0x2D));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    ax, di, 8000h')), u'\tR(IMUL3_2(ax,di,0x8000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    ax, dx, -2Dh')), u'\tR(IMUL3_2(ax,dx,-0x2D));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    ax, si, 7FFFh')), u'\tR(IMUL3_2(ax,si,0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    cl')), u'\tR(IMUL1_1(cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    cx')), u'\tR(IMUL1_2(cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    eax, ecx, 2Dh')), u'\tR(IMUL3_4(eax,ecx,0x2D));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    eax, edi, 8000h')), u'\tR(IMUL3_4(eax,edi,0x8000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    eax, edx, -2Dh')), u'\tR(IMUL3_4(eax,edx,-0x2D));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    eax, s1_0')), u'\tR(IMUL2_4(eax,s1_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    ebx, esi, 7FFFh')), u'\tR(IMUL3_4(ebx,esi,0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('imul    s1_0')), u'\tR(IMUL1_0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc     dl')), u'\tR(INC(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc     dx')), u'\tR(INC(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc     edx')), u'\tR(INC(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc     i')), u'\tR(INC(i));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc byte ptr [edi+1]')), u'\tR(INC(*(raddr(ds,edi+1))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc byte ptr [edi+7]')), u'\tR(INC(*(raddr(ds,edi+7))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc byte ptr es:[0]')), u'\tR(INC(*(raddr(es,0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc eax')), u'\tR(INC(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc ebx')), u'\tR(INC(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc ecx')), u'\tR(INC(ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'inc edi              ; increase target address')), u'\tR(INC(edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc edi')), u'\tR(INC(edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc edx')), u'\tR(INC(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('int 10h')), u'\tR(_INT(0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'int 21h                         ; DOS INT 21h')), u'\tR(_INT(0x21));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('int 31h')), u'\tR(_INT(0x31));\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jC failure')), u'\t\tR(JC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jNC OK')), u'\t\tR(JNC(ok));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('ja      short loc_407784')), u'\t\tR(JA(loc_407784));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('ja failure')), u'\t\tR(JA(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnbe failure')), u'\t\tR(JA(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jb      short loc_40723E')), u'\t\tR(JC(loc_40723e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'jb failure  ; // because unsigned comparaison')), u'\t\tR(JC(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jbe     short loc_40752C')), u'\t\tR(JBE(loc_40752c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jc failure')), u'\t\tR(JC(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jcxz    loc_4081F6')), u'\t\tR(JCXZ(loc_4081f6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jcxz @df@@@@7')), u'\t\tR(JCXZ(arbdfarbarbarbarb7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jcxz failure')), u'\t\tR(JCXZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'je failure ; http://blog.rewolf.pl/blog/?p=177')), u'\t\tR(JZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('je failure')), u'\t\tR(JZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('je ok')), u'\t\tR(JZ(ok));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jecxz   short loc_4083E9')), u'\t\tR(JECXZ(loc_4083e9));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jg      short loc_40707C')), u'\t\tR(JG(loc_40707c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jg @df@@@@1')), u'\t\tR(JG(arbdfarbarbarbarb1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jg failure')), u'\t\tR(JG(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jge     short loc_406EBA')), u'\t\tR(JGE(loc_406eba));\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jge @df@@@@2')), u'\t\tR(JGE(arbdfarbarbarbarb2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jge failure')), u'\t\tR(JGE(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jl      short loc_406B3F')), u'\t\tR(JL(loc_406b3f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jl @df@@@@4')), u'\t\tR(JL(arbdfarbarbarbarb4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jl failure')), u'\t\tR(JL(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jle     short loc_406CF8')), u'\t\tR(JLE(loc_406cf8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jle @df@@@@5')), u'\t\tR(JLE(arbdfarbarbarbarb5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jle failure')), u'\t\tR(JLE(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp     exec_rclb')), u'\t\tR(JMP(exec_rclb));\n')

        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp     short loc_40D571')), u'\t\tR(JMP(loc_40d571));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp [cs:table+ax]')), '\t\tR(JMP(__dispatch_call));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp exitLabel')), u'\t\tR(JMP(exitlabel));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp failure')), u'\t\tR(JMP(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp finTest')), u'\t\tR(JMP(fintest));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp next')), u'\t\tR(JMP(next));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnC failure')), u'\t\tR(JNC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jna short P2')), u'\t\tR(JBE(p2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnb     short loc_4075C2')), u'\t\tR(JNC(loc_4075c2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnb     short loc_407658')), u'\t\tR(JNC(loc_407658));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnb     short loc_4076EE')), u'\t\tR(JNC(loc_4076ee));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnb failure')), u'\t\tR(JNC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnc failure')), u'\t\tR(JNC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnc noerror')), u'\t\tR(JNC(noerror));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jne exitLabel')), u'\t\tR(JNZ(exitlabel));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jne failure')), u'\t\tR(JNZ(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jns     short loc_408008')), u'\t\tR(JNS(loc_408008));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jns     short loc_40809E')), u'\t\tR(JNS(loc_40809e));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jns     short loc_408139')), u'\t\tR(JNS(loc_408139));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jns failure')), u'\t\tR(JNS(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnz     loc_409652')), u'\t\tR(JNZ(loc_409652));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnz     short loc_4046D6')), u'\t\tR(JNZ(loc_4046d6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'jnz P1              ; jump if cl is not equal 0 (zeroflag is not set)')), u'\t\tR(JNZ(p1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jnz failure')), u'\t\tR(JNZ(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('js      short loc_407E46')), u'\t\tR(JS(loc_407e46));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('js      short loc_407F72')), u'\t\tR(JS(loc_407f72));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('js @df@@@@')), u'\t\tR(JS(arbdfarbarbarbarb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('js failure')), u'\t\tR(JS(failure));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('jz      short loc_40458F')), u'\t\tR(JZ(loc_40458f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jz failure')), u'\t\tR(JZ(failure));\n')

        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [eax+4000h]')), u'\tR(eax = eax+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [eax+40h]')), u'\tR(eax = eax+0x40);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [eax+ecx+40h]')), u'\tR(eax = eax+ecx+0x40);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [eax+ecx]')), u'\tR(eax = eax+ecx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [eax]')), u'\tR(eax = eax);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ebx+4000h]')), u'\tR(eax = ebx+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ebx+40h]')), u'\tR(eax = ebx+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('lea     eax, [ebx+edx+4000h]')), u'\tR(eax = ebx+edx+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ebx+edx]')), u'\tR(eax = ebx+edx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ebx]')), u'\tR(eax = ebx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ecx+4000h]')), u'\tR(eax = ecx+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ecx+40h]')), u'\tR(eax = ecx+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'lea     eax, [ecx+ecx*2+4000h]')), u'\tR(eax = ecx+ecx*2+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('lea     eax, [ecx+ecx*2-0Ah]')), u'\tR(eax = ecx+ecx*2-0x0A);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ecx+ecx*2]')), u'\tR(eax = ecx+ecx*2);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ecx+ecx]')), u'\tR(eax = ecx+ecx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [ecx]')), u'\tR(eax = ecx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edi+4000h]')), u'\tR(eax = edi+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edi+40h]')), u'\tR(eax = edi+0x40);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edi+ecx]')), u'\tR(eax = edi+ecx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edi]')), u'\tR(eax = edi);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edx+4000h]')), u'\tR(eax = edx+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edx+40h]')), u'\tR(eax = edx+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'lea     eax, [edx+ecx*4+4000h]')), u'\tR(eax = edx+ecx*4+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('lea     eax, [edx+ecx*4-0Ah]')), u'\tR(eax = edx+ecx*4-0x0A);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edx+ecx*4]')), u'\tR(eax = edx+ecx*4);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edx+ecx]')), u'\tR(eax = edx+ecx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [edx]')), u'\tR(eax = edx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [esi+4000h]')), u'\tR(eax = esi+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [esi+40h]')), u'\tR(eax = esi+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('lea     eax, [esi+ecx*8-0Ah]')), u'\tR(eax = esi+ecx*8-0x0A);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [esi+ecx*8]')), u'\tR(eax = esi+ecx*8);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [esi+ecx]')), u'\tR(eax = esi+ecx);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, [esi]')), u'\tR(eax = esi);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, ds:0[eax*2]')), u'\tR(eax = 0+eax*2);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, ds:0[ebx*4]')), u'\tR(eax = 0+ebx*4);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, ds:0[ecx*8]')), u'\tR(eax = 0+ecx*8);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     ebx, [ebp+table]')), u'\tR(ebx = ebp+offset(_text,table));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'lea     ebx, [esi+ecx*8+4000h]')), u'\tR(ebx = esi+ecx*8+0x4000);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     edi, [ebp+ecx_vals]')), u'\tR(edi = ebp+ecx_vals);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     edi, [i+2]')), u'\tR(edi = i+2);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     edi, [i+3]')), u'\tR(edi = i+3);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     edi, [i+4]')), u'\tR(edi = i+4);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     edi, [i+5]')), u'\tR(edi = i+5);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     edi, [i-10h]')), u'\tR(edi = i-0x10);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     edx, [i+56h]')), u'\tR(edx = i+0x56);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     esi, [i+1]')), u'\tR(esi = i+1);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea eax,enddata')), u'\tR(eax = offset(_data,enddata));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea ebx,beginningdata')), u'\tR(ebx = offset(_data,beginningdata));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea edi,buffer')), u'\tR(edi = offset(_data,buffer));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea edi,f')), u'\tR(edi = offset(_data,f));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea edi,testOVerlap')), u'\tR(edi = offset(_data,testoverlap));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea edi,var1')), u'\tR(edi = offset(_data,var1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea edx,fileName')), u'\tR(edx = offset(_data,filename));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea esi,b')), u'\tR(esi = offset(_data,b));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea esi,f')), u'\tR(esi = offset(_data,f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea esi,var2')), u'\tR(esi = offset(_data,var2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea esi,var5')), u'\tR(esi = offset(_data,var5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('leave')), '\tR(MOV(esp, ebp));\nR(POP(ebp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lodsb')), 'LODSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lodsd')), 'LODSD;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('lodsw')), 'LODSW;\n')

        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('loop    loc_408464')), u'\t\tR(LOOP(loc_408464));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('loop dffd')), u'\t\tR(LOOP(dffd));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('loope   loc_4084DF')), u'\t\tR(LOOPE(loc_4084df));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('loope toto1')), u'\t\tR(LOOPE(toto1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('loopne  loc_40855A')), u'\t\tR(LOOPNE(loc_40855a));\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [ebp+ecx_0], ecx_0_0')), u'\tR(MOV(*(dw*)(raddr(ds,ebp+ecx_0)), ecx_0_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+edx_0], edx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+edx_0)), edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+i+table], dl')), u'\tR(MOV(*(raddr(ds,ebp+i+offset(_text,table))), dl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+s0], esi')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+s1], 0')), u'\tR(MOV(*(raddr(ds,ebp+s1)), 0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+s1], 1')), u'\tR(MOV(*(raddr(ds,ebp+s1)), 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+s2], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+var_1C], edx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_1C)), edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [ebp+var_20], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], edi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], edi_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), edi_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], edx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], op0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), op0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], op1')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), op1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], r')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), r));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], resz')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), resz));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+0Ch], s1_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), s1_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], eax_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), eax_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], op1')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), op1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], resz')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), resz));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], rh')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), rh));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+10h], s1_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), s1_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], ecx_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), ecx_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], edi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], edx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], esi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], flags')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), flags));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+14h], resh')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), resh));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+18h], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+18h], edi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x18)), edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+18h], edx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+18h], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x18)), res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+1Ch], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x1C)), eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+1Ch], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x1C)), ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+4], eax_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+4)), eax_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp+4], ebx    ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     [esp+4], edi    ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp+4], esi    ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp+4], esi    ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     [esp+4], i      ; op0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+4)), i));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+4], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+4)), res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     [esp+8], ebx    ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], ecx_0_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), ecx_0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     [esp+8], edi    ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp+8], edi    ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], edx_0_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), edx_0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     [esp+8], esi    ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp+8], esi    ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], esi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], esi_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), esi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp+8], i      ; s1')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), i));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], i')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), i));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], op0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), op0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], resh')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), resh));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], s0_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), s0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp], ebx      ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp], ebx      ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     [esp], edi      ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     dl, al')), u'\tR(MOV(dl, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [ebp+var_20+4], 0FBCA7h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20+4)), 0x0FBCA7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [ebp+var_20+4], 12345h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20+4)), 0x12345));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [ebp+var_20], 0FBCA7654h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [ebp+var_20], 65423456h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x65423456));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [ebp+var_20], 6789ABCDh')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x6789ABCD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+0Ch], 0 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+0Ch], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+0Ch], 1 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+0Ch], 1000h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+0Ch], 1234h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1234));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+0Ch], 17h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+0Ch], 80000000h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+10h], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+10h], 1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+10h], 10h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+10h], 11h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+14h], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+1Ch], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x1C)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 0 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 0 ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     dword ptr [esp+4], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 0FFFC70F9h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFC70F9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 0FFFFFFD3h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFD3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 0FFFFFFFFh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 1 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 1 ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 10000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 10000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 10000h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 100h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 100h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 10h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 1234001Dh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1234001D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 12341h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 12345678h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 12345678h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 12348000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12348000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 127Eh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x127E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 17h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 1FF7Fh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 1FF80h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 1FF81h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 1FFFFh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 2 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 2 ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 20000h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 2Dh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 3 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 3 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 4 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 7FFFFFFFh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 80000000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 80000000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 80000001h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000001));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 80008688h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 8000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 8000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 80h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 80h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 812FADAh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 81h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], 82345679h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+4], offset aXorw ; "xorw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,axorw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov     dword ptr [esp+8], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FBCA7654h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFFFFFFFh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 0Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 10000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 100h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 12340128h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340128));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 12Ch ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 1Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 2 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 2Dh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 2Dh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 303Bh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x303B));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 340128h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x340128));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 3Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFFFFFFh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFFh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 7Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 80000000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 8000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 8000h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 81234567h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x81234567));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 81238567h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x81238567));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp+8], 8234A6F8h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x8234A6F8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0 ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFE0080h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFE0080h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFECh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFECh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFFDh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFFFh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFFFh ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 0FFFFFFFFh ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 10000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 100h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 10h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 12340004h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12340004));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 12341h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12341));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 12343h ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12343));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1234561Dh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1234561D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 14h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 14h ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 17h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1FEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1FFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1FFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1FFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1FFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 1FFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 2 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 21AD3D34h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3FEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3FFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3FFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3FFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3FFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 3FFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 4 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 43210123h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x43210123));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 7Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 7FFFFFFFh ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 80000000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 80000000h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 80008481h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 8000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 80h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], 813F3421h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sa08lxb08lx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sah08lxal08l)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], offset a10sD ; "%-10s %d\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sd)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10seax08lxa08l)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, 0')), u'\tR(MOV(eax, 0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, 0FFFF7FFFh')), u'\tR(MOV(eax, 0x0FFFF7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, 1')), u'\tR(MOV(eax, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, 12340407h')), u'\tR(MOV(eax, 0x12340407));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, 7FFFFFFFh')), u'\tR(MOV(eax, 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     eax, dword ptr [ebp+var_20]')), u'\tR(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, ebx')), u'\tR(MOV(eax, ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, edi')), u'\tR(MOV(eax, edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, edx')), u'\tR(MOV(eax, edx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, esi')), u'\tR(MOV(eax, esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, flags')), u'\tR(MOV(eax, flags));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, res')), u'\tR(MOV(eax, res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     eax, s0_0')), u'\tR(MOV(eax, s0_0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebp, esp')), u'\tR(MOV(ebp, esp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     ebx, (offset str_buffer+800h)')), u'\tR(MOV(ebx, offset(_bss,str_buffer)+0x800));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, 1')), u'\tR(MOV(ebx, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, 1234040Ah')), u'\tR(MOV(ebx, 0x1234040A));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, 12340506h')), u'\tR(MOV(ebx, 0x12340506));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, 12345678h')), u'\tR(MOV(ebx, 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, 2')), u'\tR(MOV(ebx, 2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, 8234A6F8h')), u'\tR(MOV(ebx, 0x8234A6F8));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, [ebp+iflags]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, [ebp+op0h]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+op0h))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, [ebp+s0]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, [ebp+s2]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, [ebp+var_4]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+var_4))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     ebx, dword ptr [ebp+var_20+4]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+var_20+4))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, edi')), u'\tR(MOV(ebx, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ebx, i')), u'\tR(MOV(ebx, i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, 1')), u'\tR(MOV(ecx, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, 10h')), u'\tR(MOV(ecx, 0x10));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, 11h')), u'\tR(MOV(ecx, 0x11));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, 1234h')), u'\tR(MOV(ecx, 0x1234));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, 4')), u'\tR(MOV(ecx, 4));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, 65324h')), u'\tR(MOV(ecx, 0x65324));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, [ebp+ecx_0]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+ecx_0))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, [ebp+edx_0]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+edx_0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     ecx, [ebp+i*4+ecx_vals]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, [ebp+s0]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, [ebp+s1]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, [ebp+var_20]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     ecx, dword ptr [ebp+var_20+4]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20+4))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     ecx, dword ptr [ebp+var_20]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, edi')), u'\tR(MOV(ecx, edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     ecx, res')), u'\tR(MOV(ecx, res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     edi, (offset str_buffer+810h)')), u'\tR(MOV(edi, offset(_bss,str_buffer)+0x810));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 0FBCA7654h')), u'\tR(MOV(edi, 0x0FBCA7654));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 0FFFFFFF7h')), u'\tR(MOV(edi, 0x0FFFFFFF7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 1')), u'\tR(MOV(edi, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 12340128h')), u'\tR(MOV(edi, 0x12340128));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 12340205h')), u'\tR(MOV(edi, 0x12340205));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 123405A0h')), u'\tR(MOV(edi, 0x123405A0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 12345h')), u'\tR(MOV(edi, 0x12345));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 20h')), u'\tR(MOV(edi, 0x20));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, 80000000h')), u'\tR(MOV(edi, 0x80000000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, [ebp+iflags]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+iflags))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, [ebp+op0]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+op0))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, [ebp+s1]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edi, [ebp+s2]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     edi_0, (offset str_buffer+810h)')), u'\tR(MOV(edi_0, offset(_bss,str_buffer)+0x810));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 1')), u'\tR(MOV(edx, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 10h')), u'\tR(MOV(edx, 0x10));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 11h')), u'\tR(MOV(edx, 0x11));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 12340507h')), u'\tR(MOV(edx, 0x12340507));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 12345678h')), u'\tR(MOV(edx, 0x12345678));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 17h')), u'\tR(MOV(edx, 0x17));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 340128h')), u'\tR(MOV(edx, 0x340128));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, 8')), u'\tR(MOV(edx, 8));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, [ebp+s1]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, [ebp+var_1C]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+var_1C))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     edx, dword ptr [ebp+var_20]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, ebx')), u'\tR(MOV(edx, ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, edi')), u'\tR(MOV(edx, edi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, esi')), u'\tR(MOV(edx, esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, res')), u'\tR(MOV(edx, res));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     edx, resh')), u'\tR(MOV(edx, resh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     edx, dword ptr [ebp+var_20]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, 0FFFEFDFCh')), u'\tR(MOV(esi, 0x0FFFEFDFC));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, 1000h')), u'\tR(MOV(esi, 0x1000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, 10h')), u'\tR(MOV(esi, 0x10));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, 12340306h')), u'\tR(MOV(esi, 0x12340306));\n')

        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, [ebp+iflags]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, [ebp+op0]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+op0))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, [ebp+op0h]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+op0h))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, [ebp+s0]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, [ebp+s1]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi, esi_0')), u'\tR(MOV(esi, esi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     esi, offset unk_40E008')), u'\tR(MOV(esi, offset(_data,unk_40e008)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     esi_0, ebx')), u'\tR(MOV(esi_0, ebx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     i, 12345678h')), u'\tR(MOV(i, 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     i, esi')), u'\tR(MOV(i, esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     op0, 32432434h')), u'\tR(MOV(op0, 0x32432434));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov   al,0')), u'\tR(MOV(al, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov   dx,3c8h')), u'\tR(MOV(dx, 0x3c8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov   dx,3c9h')), u'\tR(MOV(dx, 0x3c9));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov   esi,offset pal_jeu')), u'\tR(MOV(esi, offset(_data,pal_jeu)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov  bx,ax')), u'\tR(MOV(bx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov  fs,ax')), u'\tR(MOV(fs, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov [a],5')), u'\tR(MOV(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov [load_handle],eax')), u'\tR(MOV(*(dd*)(raddr(ds,offset(_data,load_handle))), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ah,03dh')), u'\tR(MOV(ah, 0x03d));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ah,03eh')), u'\tR(MOV(ah, 0x03e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ah,03fh')), u'\tR(MOV(ah, 0x03f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ah,042h')), u'\tR(MOV(ah, 0x042));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ah,48h')), u'\tR(MOV(ah, 0x48));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ah,4Ah')), u'\tR(MOV(ah, 0x4A));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov ah,4ch                    ; AH=4Ch - Exit To DOS')), u'\tR(MOV(ah, 0x4c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ah,7')), u'\tR(MOV(ah, 7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov ah,9                        ; AH=09h - Print DOS Message')), u'\tR(MOV(ah, 9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov al,-5')), u'\tR(MOV(al, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov al,00h  ;ouverture du fichier pour lecture.')), u'\tR(MOV(al, 0x00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('mov al,00h ;debut du fichier')), u'\tR(MOV(al, 0x00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov al,1')), u'\tR(MOV(al, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov al,7')), u'\tR(MOV(al, 7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov al,[a]')), u'\tR(MOV(al, *(raddr(ds,offset(_data,a)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,-1')), u'\tR(MOV(ax, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,0002h')), u'\tR(MOV(ax, 0x0002));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,0007')), u'\tR(MOV(ax, 0007));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,01010101010101010b')), u'\tR(MOV(ax, 0xaaaa));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,01111111111111111b')), u'\tR(MOV(ax, 0xffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,08h')), u'\tR(MOV(ax, 0x08));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,13h')), u'\tR(MOV(ax, 0x13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,3h')), u'\tR(MOV(ax, 0x3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,4')), u'\tR(MOV(ax, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,501h')), u'\tR(MOV(ax, 0x501));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,6')), u'\tR(MOV(ax, 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ax,bp')), u'\tR(MOV(ax, bp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov b,ax')), u'\tR(MOV(m.b, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bl,-1')), u'\tR(MOV(bl, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bl,0')), u'\tR(MOV(bl, 0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bl,011111111B')), u'\tR(MOV(bl, 0xff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bl,1')), u'\tR(MOV(bl, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bl,192')), u'\tR(MOV(bl, 192));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bl,[a+1]')), u'\tR(MOV(bl, *(raddr(ds,offset(_data,a)+1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bl,al')), u'\tR(MOV(bl, al));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,(1024*10/16)+5')), u'\tR(MOV(bx, (1024*10/16)+5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,(1024*10/16)-1')), u'\tR(MOV(bx, (1024*10/16)-1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,10')), u'\tR(MOV(bx, 10));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,1024*10/16')), u'\tR(MOV(bx, 1024*10/16));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,5')), u'\tR(MOV(bx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,ax')), u'\tR(MOV(bx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,fs')), u'\tR(MOV(bx, fs));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,word ptr [d]')), u'\tR(MOV(bx, *(dw*)(raddr(ds,offset(_data,d)))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov bx,word ptr [e]')), u'\tR(MOV(bx, *(dw*)(raddr(ds,offset(_data,e)))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov byte ptr [a],5')), u'\tR(MOV(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov byte ptr [esi],-2')), u'\tR(MOV(*(raddr(ds,esi)), -2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov byte ptr [var1+1],5')), u'\tR(MOV(*(raddr(ds,offset(_data,var1)+1)), 5));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov byte ptr dl,[edi]')), u'\tR(MOV(dl, *(raddr(ds,edi))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov byte ptr ds:[0],55')), u'\tR(MOV(*(raddr(ds,0)), 55));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov byte ptr es:[0],55')), u'\tR(MOV(*(raddr(es,0)), 55));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov byte ptr es:[0],56')), u'\tR(MOV(*(raddr(es,0)), 56));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov c,eax')), u'\tR(MOV(m.c, eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ch,011111111B')), u'\tR(MOV(ch, 0xff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov cl,2')), u'\tR(MOV(cl, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov cl,8            ; number of ASCII')), u'\tR(MOV(cl, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov cx,-1')), u'\tR(MOV(cx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov cx,-5')), u'\tR(MOV(cx, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov cx,0')), u'\tR(MOV(cx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov cx,1')), u'\tR(MOV(cx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov cx,256*3')), u'\tR(MOV(cx, 256*3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov cx,ax')), u'\tR(MOV(cx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dl,[edi+1]')), u'\tR(MOV(dl, *(raddr(ds,edi+1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dl,[edi]')), u'\tR(MOV(dl, *(raddr(ds,edi))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dl,var1')), u'\tR(MOV(dl, m.var1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ds, _data')), u'\tR(MOV(ds, seg_offset(_data)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ds:[edi],cl')), u'\tR(MOV(*(raddr(ds,edi)), cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov dword ptr es:[0],077aaFF00h')), u'\tR(MOV(*(dd*)(raddr(es,0)), 0x077aaFF00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov dword ptr es:[20*320+160],077aaFF00h')), u'\tR(MOV(*(dd*)(raddr(es,20*320+160)), 0x077aaFF00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dx,-1')), u'\tR(MOV(dx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dx,0')), u'\tR(MOV(dx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dx,1')), u'\tR(MOV(dx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dx,5')), u'\tR(MOV(dx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dx,[edi+1]')), u'\tR(MOV(dx, *(dw*)(raddr(ds,edi+1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dx,ax')), u'\tR(MOV(dx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov dx,cx')), u'\tR(MOV(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax, 0ffffffffh')), u'\tR(MOV(eax, 0x0ffffffff));\n')
        #self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add('mov eax, B')), u'\tR(MOV(eax, B));\n')
        #self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add('mov eax, CC')), u'\tR(MOV(eax, CC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,-1')), u'\tR(MOV(eax, -1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,-1-(-2+3)')), u'\tR(MOV(eax, -1-(-2+3)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,-4')), u'\tR(MOV(eax, -4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,-5')), u'\tR(MOV(eax, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,-8')), u'\tR(MOV(eax, -8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,0')), u'\tR(MOV(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,0100b')), u'\tR(MOV(eax, 0x4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov eax,011111111111111111111111111111111b')), u'\tR(MOV(eax, 0xffffffff));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,012345678h')), u'\tR(MOV(eax, 0x012345678));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,077aaFF00h')), u'\tR(MOV(eax, 0x077aaFF00));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,0ffff00f3h')), u'\tR(MOV(eax, 0x0ffff00f3));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,0ffffff03h')), u'\tR(MOV(eax, 0x0ffffff03));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,1')), u'\tR(MOV(eax, 1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,1024*1024')), u'\tR(MOV(eax, 1024*1024));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,10B')), u'\tR(MOV(eax, 0x2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,2')), u'\tR(MOV(eax, 2));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,256+3+65536')), u'\tR(MOV(eax, 256+3+65536));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,3')), u'\tR(MOV(eax, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,4')), u'\tR(MOV(eax, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,5')), u'\tR(MOV(eax, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,511')), u'\tR(MOV(eax, 511));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov eax,taille_moire  ;::!300000h-1 ;182400h-1 ;1582080 ;0300000h-1 ;2mega 182400h-1')), u'\tR(MOV(eax, taille_moire));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov eax,teST2')), u'\tR(MOV(eax, teST2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebp,10')), u'\tR(MOV(ebp, 10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebp,2')), u'\tR(MOV(ebp, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebp,20')), u'\tR(MOV(ebp, 20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebp,3')), u'\tR(MOV(ebp, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebp,3*4')), u'\tR(MOV(ebp, 3*4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebp,30')), u'\tR(MOV(ebp, 30));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,-1')), u'\tR(MOV(ebx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,0')), u'\tR(MOV(ebx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,00fffh')), u'\tR(MOV(ebx, 0x00fff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,01B')), u'\tR(MOV(ebx, 0x1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,0FFFFFFFFh')), u'\tR(MOV(ebx, 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,0a000h')), u'\tR(MOV(ebx, 0x0a000));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,0aabbccddh')), u'\tR(MOV(ebx, 0x0aabbccdd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,0f222h')), u'\tR(MOV(ebx, 0x0f222));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,0ffff01ffh')), u'\tR(MOV(ebx, 0x0ffff01ff));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,0ffffffffh')), u'\tR(MOV(ebx, 0x0ffffffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,2')), u'\tR(MOV(ebx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,255')), u'\tR(MOV(ebx, 255));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,3')), u'\tR(MOV(ebx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,5')), u'\tR(MOV(ebx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,[g]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,offset(_data,g)))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,[load_handle]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,offset(_data,load_handle)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,eax')), u'\tR(MOV(ebx, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ebx,g')), u'\tR(MOV(ebx, m.g));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,-1')), u'\tR(MOV(ecx, -1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,000ff00ffh')), u'\tR(MOV(ecx, 0x000ff00ff));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,0a0000h')), u'\tR(MOV(ecx, 0x0a0000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,0df01h')), u'\tR(MOV(ecx, 0x0df01));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,0f0ffh')), u'\tR(MOV(ecx, 0x0f0ff));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,0ffffffffh')), u'\tR(MOV(ecx, 0x0ffffffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,10')), u'\tR(MOV(ecx, 10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,2')), u'\tR(MOV(ecx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,3')), u'\tR(MOV(ecx, 3));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,320*200/4')), u'\tR(MOV(ecx, 320*200/4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,5')), u'\tR(MOV(ecx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,60')), u'\tR(MOV(ecx, 60));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov ecx,t')), u'\tR(MOV(ecx, t));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,1')), u'\tR(MOV(edi, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,8')), u'\tR(MOV(edi, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov edi,OFFSET AsCii ; get the offset address')), u'\tR(MOV(edi, offset(_data,ascii)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,esi')), u'\tR(MOV(edi, esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,offset str2')), u'\tR(MOV(edi, offset(_data,str2)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,offset str3')), u'\tR(MOV(edi, offset(_data,str3)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,offset var1')), u'\tR(MOV(edi, offset(_data,var1)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,offset var2')), u'\tR(MOV(edi, offset(_data,var2)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edi,offset var4')), u'\tR(MOV(edi, offset(_data,var4)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edx,0')), u'\tR(MOV(edx, 0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edx,0abcdef77h')), u'\tR(MOV(edx, 0x0abcdef77));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edx,2')), u'\tR(MOV(edx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edx,4')), u'\tR(MOV(edx, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov edx,OFFSET ASCiI ; DOS 1+ WRITE STRING TO STANDARD OUTPUT')), u'\tR(MOV(edx, offset(_data,ascii)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov edx,edi')), u'\tR(MOV(edx, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov edx,offset _msg             ; DS:EDX -> $ Terminated String')), u'\tR(MOV(edx, offset(_data,_msg)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov es,ax')), u'\tR(MOV(es, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov esi,2')), u'\tR(MOV(esi, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov esi,6')), u'\tR(MOV(esi, 6));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov esi,offset str1')), u'\tR(MOV(esi, offset(_data,str1)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov esi,offset testOVerlap')), u'\tR(MOV(esi, offset(_data,testoverlap)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov esi,offset var1')), u'\tR(MOV(esi, offset(_data,var1)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov esi,offset var2')), u'\tR(MOV(esi, offset(_data,var2)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov esi,offset var3')), u'\tR(MOV(esi, offset(_data,var3)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsb')), 'MOVSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsd')), 'MOVSD;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsw')), 'MOVSW;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsx bx,[h2]')), u'\tR(MOVSX(bx, *(raddr(ds,offset(_data,h2)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsx bx,bl')), u'\tR(MOVSX(bx, bl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsx bx,byte ptr [h2]')), u'\tR(MOVSX(bx, *(raddr(ds,offset(_data,h2)))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsx bx,byte ptr [h]')), u'\tR(MOVSX(bx, *(raddr(ds,offset(_data,h)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movsx ecx,cx')), u'\tR(MOVSX(ecx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movzx eax, DDD')), u'\tR(MOVZX(eax, DDD));\n') # ERROR
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('movzx ecx,bx')), u'\tR(MOVZX(ecx, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mul     cl')), u'\tR(MUL1_1(cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mul     cx')), u'\tR(MUL1_2(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mul     s1_0')), u'\tR(MUL1_0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('neg     dl')), u'\tR(NEG(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('neg     dx')), u'\tR(NEG(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('neg     ebx')), u'\tR(NEG(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('neg     edx')), u'\tR(NEG(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('neg ebx')), u'\tR(NEG(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('neg edx')), u'\tR(NEG(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('not     dl')), u'\tR(NOT(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('not     dx')), u'\tR(NOT(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('not     edx')), u'\tR(NOT(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('not ax')), u'\tR(NOT(ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('not eax')), u'\tR(NOT(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('or      dl, cl')), u'\tR(OR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('or      dx, cx')), u'\tR(OR(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('or      ebx, 0FFFFFFFFh')), u'\tR(OR(ebx, 0x0FFFFFFFF));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('or      edx, ecx')), u'\tR(OR(edx, ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('or      res, 0FFFFFFFFh')), u'\tR(OR(res, 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('or cl,0f0h')), u'\tR(OR(cl, 0x0f0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('or cx,cx')), u'\tR(OR(cx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('or eax,eax')), u'\tR(OR(eax, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('out   dx,al')), u'\tR(OUT(dx, al));\n')


        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rcl     dl, cl')), u'\tR(RCL(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rcl     dx, cl')), u'\tR(RCL(dx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('rcl     edx, cl')), u'\tR(RCL(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rcr     dl, cl')), u'\tR(RCR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rcr     dx, cl')), u'\tR(RCR(dx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('rcr     edx, cl')), u'\tR(RCR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('ret')), '\tR(RETN);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('retn')), '\tR(RETN);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rol     dl, cl')), u'\tR(ROL(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rol     dx, cl')), u'\tR(ROL(dx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('rol     edx, cl')), u'\tR(ROL(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rol ebx,1')), u'\tR(ROL(ebx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('rol ebx,31')), u'\tR(ROL(ebx, 31));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('ror     dl, cl')), u'\tR(ROR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('ror     dx, cl')), u'\tR(ROR(dx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('ror     edx, cl')), u'\tR(ROR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sar     dl, cl')), u'\tR(SAR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sal     dl, cl')), u'\tR(SAL(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sar     dx, cl')), u'\tR(SAR(dx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('sar     edx, cl')), u'\tR(SAR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sar eax,1')), u'\tR(SAR(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sar eax,2')), u'\tR(SAR(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sbb     dl, cl')), u'\tR(SBB(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sbb     dx, cx')), u'\tR(SBB(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('sbb     edx, ecx')), u'\tR(SBB(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('scasb')), 'SCASB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('scasd')), 'SCASD;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('scasw')), 'SCASW;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('setb    al')), u'\tR(SETB(al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('setnz bh')), u'\tR(SETNZ(bh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('setz    cl')), u'\tR(SETZ(cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shl     dl, cl')), u'\tR(SHL(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shl     dx, cl')), u'\tR(SHL(dx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('shl     edx, cl')), u'\tR(SHL(edx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('shld    dx, bx, cl')), u'\tR(SHLD(dx, bx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('shld    edx, ebx, cl')), u'\tR(SHLD(edx, ebx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shr     dl, cl')), u'\tR(SHR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shr     dx, cl')), u'\tR(SHR(dx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('shr     edx, cl')), u'\tR(SHR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shr eax,16')), u'\tR(SHR(eax, 16));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shr ecx,16')), u'\tR(SHR(ecx, 16));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('shrd    dx, bx, cl')), u'\tR(SHRD(dx, bx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('shrd    edx, ebx, cl')), u'\tR(SHRD(edx, ebx, cl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('shrd eax, edx, 8')), u'\tR(SHRD(eax, edx, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('stc')), '\tR(STC);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('std')), '\tR(STD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'sti                             ; Set The Interrupt Flag')), '\tR(STI);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('stosb')), 'STOSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('stosd')), 'STOSD;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('stosw')), 'STOSW;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub     dl, cl')), u'\tR(SUB(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub     dx, cx')), u'\tR(SUB(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub     edx, ecx')), u'\tR(SUB(edx, ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub     esp, 10h')), u'\tR(SUB(esp, 0x10));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub     esp, 114h')), u'\tR(SUB(esp, 0x114));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub     esp, 14h')), u'\tR(SUB(esp, 0x14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub eax,eax')), u'\teax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub eax,ebx')), u'\tR(SUB(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub ebx,eax')), u'\tR(SUB(ebx, eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('sub word ptr [var5+2],25')), u'\tR(SUB(*(dw*)(raddr(ds,offset(_data,var5)+2)), 25));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('test    ebx, ebx')), u'\tR(TEST(ebx, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('test al,010B')), u'\tR(TEST(al, 0x2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('test al,0B')), u'\tR(TEST(al, 0x0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('test ax,ax')), u'\tR(TEST(ax, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('test bh,01h')), u'\tR(TEST(bh, 0x01));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('test bh,02h')), u'\tR(TEST(bh, 0x02));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('test eax,eax')), u'\tR(TEST(eax, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'xadd    byte ptr [ebp+var_20], al')), u'\tR(XADD(*(raddr(ds,ebp+var_20)), al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xadd    dl, al')), u'\tR(XADD(dl, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'xadd    dword ptr [ebp+var_20], eax')), u'\tR(XADD(*(dd*)(raddr(ds,ebp+var_20)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xadd    dx, ax')), u'\tR(XADD(dx, ax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xadd    eax, eax')), u'\tR(XADD(eax, eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xadd    edx, eax')), u'\tR(XADD(edx, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'xadd    word ptr [ebp+var_20], ax')), u'\tR(XADD(*(dw*)(raddr(ds,ebp+var_20)), ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'xchg    al, byte ptr [ebp+var_20]')), u'\tR(XCHG(al, *(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xchg    al, dl')), u'\tR(XCHG(al, dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xchg    ax, dx')), u'\tR(XCHG(ax, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'xchg    ax, word ptr [ebp+var_20]')), u'\tR(XCHG(ax, *(dw*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'xchg    eax, dword ptr [ebp+var_20]')), u'\tR(XCHG(eax, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xchg    eax, edx')), u'\tR(XCHG(eax, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xchg eax,ebx')), u'\tR(XCHG(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xlat')), '\tR(XLAT);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     dl, cl')), u'\tR(XOR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     dx, cx')), u'\tR(XOR(dx, cx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     eax, eax')), u'\teax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     ebx, ebx')), u'\tebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     ecx, ecx')), u'\tecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     edi, edi')), u'\tedi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     edx, ecx')), u'\tR(XOR(edx, ecx));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     edx, edx')), u'\tedx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     esi, esi')), u'\tesi = 0;AFFECT_ZF(0); AFFECT_SF(esi,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     i, i')), u'\ti = 0;AFFECT_ZF(0); AFFECT_SF(i,0);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor     res, res')), u'\tres = 0;AFFECT_ZF(0); AFFECT_SF(res,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor al,bl')), u'\tR(XOR(al, bl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor ax,ax')), u'\tax = 0;AFFECT_ZF(0); AFFECT_SF(ax,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor ax,bx')), u'\tR(XOR(ax, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor ch,bh')), u'\tR(XOR(ch, bh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor cx,cx')), u'\tcx = 0;AFFECT_ZF(0); AFFECT_SF(cx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor eax,eax')), u'\teax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor eax,ebx')), u'\tR(XOR(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor ebp,ebp')), u'\tebp = 0;AFFECT_ZF(0); AFFECT_SF(ebp,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor ebx,ebx')), u'\tebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor ecx,ecx')), u'\tecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor edi,edi')), u'\tedi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor edx,edx')), u'\tedx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('xor esi,esi')), u'\tesi = 0;AFFECT_ZF(0); AFFECT_SF(esi,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'iret')), '\tR(IRET);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'retf')), '\tR(RETF);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'lds     bx, offset unk_40F064')), u'\tR(LDS(bx, offset(initcall,unk_40f064)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'les     bx, offset unk_40F064')), u'\tR(LES(bx, offset(initcall,unk_40f064)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'lfs     bx, offset unk_40F064')), u'\tR(LFS(bx, offset(initcall,unk_40f064)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'lgs     bx, offset unk_40F064')), u'\tR(LGS(bx, offset(initcall,unk_40f064)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'pusha')), '\tR(PUSHA);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'popa')), '\tR(POPA);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'cli')), '\tR(CLI);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('in   dx,al')), u'\tR(IN(dx, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shrd ax, dx, 3')), u'\tR(SHRD(ax, dx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('shld ax, dx, 3')), u'\tR(SHLD(ax, dx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('enter 0,0')), u'\tR(ENTER(0, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('jmp $+2')), u'\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'nop')), None)

        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lods	[byte ptr fs:si]')), u'\tR(LODS(*(raddr(ds,fs:si)),1));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('scas	[word ptr fs:si]')), u'\tR(SCAS(*(dw*)(raddr(ds,fs:si)),2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'movs [dword ptr es:di], [dword ptr fs:si]')), u'MOVS(*(dd*)(raddr(ds,es:di)), *(dd*)(raddr(ds,fs:si)), 4);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code("mov al, 'Z' - 'A' +1")), u"\tR(MOV(al, 'Z' - 'A' +1));\n")
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'mov ax,  not 1')), '\tR(MOV(ax, ~ 1));\n')


        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov     [esp+8], eax')), '\tR(MOV(*(dd*)(raddr(ds,esp+8)), eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, ds:40h[eax*2]')), u'\tR(eax = 0x40+eax*2);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, ds:40h[ebx*4]')), u'\tR(eax = 0x40+ebx*4);\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, ds:40h[ecx*8]')), u'\tR(eax = 0x40+ecx*8);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     ds:byte_41411F[eax], dl')), u'\tR(MOV(*(raddr(ds,offset(_bss,byte_41411f)+eax)), dl));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('lea     eax, large ds:4000h')), u'\tR(eax = large ds:0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'mov     ebx, offset _test_btc')), u'\tR(MOV(ebx, offset(initcall,_test_btc)));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     dword ptr [esp]')), u'\tR(POP(dword));\n\tR(POP(ptr));\n\tR(POP(*(dw*)(raddr(ds,esp))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     eax')), u'\tR(POP(eax));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('pOp  ebx ebp    eax')), u'\tR(POP(ebx));\n\tR(POP(ebp));\n\tR(POP(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     ebp')), u'\tR(POP(ebp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     ebx')), u'\tR(POP(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     ecx')), u'\tR(POP(ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     edi')), u'\tR(POP(edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     edi_0')), u'\tR(POP(edi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     edx')), u'\tR(POP(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     esi')), u'\tR(POP(esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     esi_0')), u'\tR(POP(esi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     i')), u'\tR(POP(i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     res')), u'\tR(POP(res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop     s0_0')), u'\tR(POP(s0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,
                                                      p.action_code('pop     small word ptr [esp]')), u'\tR(POP(small));\n\tR(POP(word));\n\tR(POP(ptr));\n\tR(POP(*(dw*)(raddr(ds,esp))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'pop  dx cx ; linear address of allocated memory block')), u'\tR(POP(dx));\n\tR(POP(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop ds es')), u'\tR(POP(ds));\n\tR(POP(es));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop ds')), u'\tR(POP(ds));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop eax')), u'\tR(POP(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop es')), u'\tR(POP(es));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pop fs cx')), u'\tR(POP(fs));\n\tR(POP(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('popad')), '\tR(POPAD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('popf')), '\tR(POPF);\n')

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('push    0')), u'\tR(PUSH(0));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('push    0BC6058h')), u'\tR(PUSH(0x0BC6058));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('push    9ABCDEFh')), u'\tR(PUSH(0x9ABCDEF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('push    esi')), u'\tR(PUSH(esi));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('push  eax ebp  ebx')), u'\tR(PUSH(eax));\n\tR(PUSH(ebp));\n\tR(PUSH(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(
            'push bx cx ; linear address of allocated memory block')), u'\tR(PUSH(bx));\n\tR(PUSH(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('push bx fs')), u'\tR(PUSH(bx));\n\tR(PUSH(fs));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('push ds')), u'\tR(PUSH(ds));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('push ebx')), u'\tR(PUSH(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('push es ds')), u'\tR(PUSH(es));\n\tR(PUSH(ds));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('push es')), u'\tR(PUSH(es));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pushad')), '\tR(PUSHAD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('pushf')), '\tR(PUSHF);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'rep')), '\tREP\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'repe')), '\tREPE\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code(u'repne')), '\tREPNE\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('call    dword ptr [ebx-4]')), '\tR(CALL(__disp));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('call    exec_adc')), u'\tR(CALL(kexec_adc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('call    printf')), '\tR(CALL(__disp));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('call    test_bcd')), u'\tR(CALL(ktest_bcd));\n')
        self.assertEqual(
            proc_instance.generate_c_cmd(cpp_instance, p.action_code('call [cs:table+ax]')), '\tR(CALL(__disp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('call printeax')), u'\tR(CALL(kprinteax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp a,1')), u'\tR(CMP(*(db*)&m.a, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp b,256+3')), u'\tR(CMP(m.b, 256+3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var2,2')), u'\tR(CMP(*(dw*)&m.var2, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var2,bx')), u'\tR(CMP(*(dw*)&m.var2, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var3,-12')), u'\tR(CMP(*(db*)&m.var3, -12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var3,-13')), u'\tR(CMP(*(db*)&m.var3, -13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var3,3')), u'\tR(CMP(*(db*)&m.var3, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('cmp var3,ecx')), u'\tR(CMP(*(db*)&m.var3, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('inc var3')), u'\tR(INC(*(db*)&m.var3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov a,5')), u'\tR(MOV(*(db*)&m.a, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov a,ah')), u'\tR(MOV(*(db*)&m.a, ah));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance, p.action_code('mov a,al')), u'\tR(MOV(*(db*)&m.a, al));\n')

if __name__ == "__main__":
    unittest.main()

