from __future__ import absolute_import
from __future__ import print_function

from tasm import parser
from tasm import cpp
from tasm import op
from tasm import proc
from tasm import lex

from builtins import chr
from builtins import hex
from builtins import object
from builtins import range
from builtins import str
import future.types
from future.types import Integral
import future.types.newobject
from future.types.newobject import newobject
import future.types.newrange
from future.types.newrange import newrange
import future.types.newstr
from future.types.newstr import BaseNewStr
from future.types.newstr import newstr
import logging
from logging import BufferingFormatter
from mock import patch
import ntpath
import re
from re import Scanner
import re, string, os
import sys
import tasm.lex
import tasm.op
from tasm.op import _aad
from tasm.op import _adc
from tasm.op import _add
from tasm.op import _and
from tasm.op import _assignment
from tasm.op import _call
from tasm.op import _cld
from tasm.op import _cmp
from tasm.op import _cmpsb
from tasm.op import _dec
from tasm.op import _equ
from tasm.op import _inc
from tasm.op import _int
from tasm.op import _ja
from tasm.op import _jb
from tasm.op import _jbe
from tasm.op import _je
from tasm.op import _jmp
from tasm.op import _jna
from tasm.op import _jnc
from tasm.op import _jne
from tasm.op import _jnz
from tasm.op import _jz
from tasm.op import _lea
from tasm.op import _mov
from tasm.op import _movzx
from tasm.op import _pop
from tasm.op import _popad
from tasm.op import _push
from tasm.op import _pushad
from tasm.op import _repe
from tasm.op import _ret
from tasm.op import _retf
from tasm.op import _shr
from tasm.op import _stc
from tasm.op import _sti
from tasm.op import _sub
from tasm.op import _xor
from tasm.op import label
from tasm.op import var
import tasm.parser
from tasm.parser import Parser
import tasm.proc
from tasm.proc import Proc
import traceback
import unittest


class ProcTest(unittest.TestCase):

    @patch.object(_jbe, '__init__')
    @patch.object(_lea, '__init__')
    @patch.object(_pushad, '__init__')
    @patch.object(_cmp, '__init__')
    @patch.object(_jmp, '__init__')
    @patch.object(_xor, '__init__')
    @patch.object(_shr, '__init__')
    @patch.object(_pop, '__init__')
    @patch.object(_je, '__init__')
    @patch.object(_push, '__init__')
    @patch.object(_ret, '__init__')
    @patch.object(_jne, '__init__')
    @patch.object(_sti, '__init__')
    @patch.object(_int, '__init__')
    @patch.object(_mov, '__init__')
    @patch.object(_movzx, '__init__')
    @patch.object(_jnc, '__init__')
    @patch.object(_popad, '__init__')
    @patch.object(_stc, '__init__')
    @patch.object(_and, '__init__')
    @patch.object(_add, '__init__')
    @patch.object(_cld, '__init__')
    @patch.object(_sub, '__init__')
    @patch.object(_jna, '__init__')
    @patch.object(_cmpsb, '__init__')
    @patch.object(_ja, '__init__')
    @patch.object(_repe, '__init__')
    @patch.object(_jz, '__init__')
    @patch.object(_call, '__init__')
    @patch.object(_retf, '__init__')
    @patch.object(_dec, '__init__')
    @patch.object(_adc, '__init__')
    @patch.object(_jb, '__init__')
    @patch.object(_jnz, '__init__')
    @patch.object(_inc, '__init__')
    def test_add_(self, mock_jbe__init__,   mock_lea__init__,    mock_pushad__init__,    mock_cmp__init__,    mock_jmp__init__,    mock_xor__init__,    mock_shr__init__,    mock_pop__init__,    mock_je__init__,    mock_push__init__,    mock_ret__init__,    mock_jne__init__,    mock_sti__init__,    mock_int__init__,    mock_mov__init__,    mock_movzx__init__,    mock_jnc__init__,    mock_popad__init__,    mock_stc__init__,    mock_and__init__,    mock_add__init__,    mock_cld__init__,    mock_sub__init__,    mock_jna__init__,    mock_cmpsb__init__,    mock_ja__init__,    mock_repe__init__,    mock_jz__init__,    mock_call__init__,    mock_retf__init__,    mock_dec__init__,    mock_adc__init__,    mock_jb__init__,    mock_jnz__init__,    mock_inc__init__):
        mock_jbe__init__.return_value = None
        mock_lea__init__.return_value = None
        mock_pushad__init__.return_value = None
        mock_cmp__init__.return_value = None
        mock_jmp__init__.return_value = None
        mock_xor__init__.return_value = None
        mock_shr__init__.return_value = None
        mock_pop__init__.return_value = None
        mock_je__init__.return_value = None
        mock_push__init__.return_value = None
        mock_ret__init__.return_value = None
        mock_jne__init__.return_value = None
        mock_sti__init__.return_value = None
        mock_int__init__.return_value = None
        mock_mov__init__.return_value = None
        mock_movzx__init__.return_value = None
        mock_jnc__init__.return_value = None
        mock_popad__init__.return_value = None
        mock_stc__init__.return_value = None
        mock_and__init__.return_value = None
        mock_add__init__.return_value = None
        mock_cld__init__.return_value = None
        mock_sub__init__.return_value = None
        mock_jna__init__.return_value = None
        mock_cmpsb__init__.return_value = None
        mock_ja__init__.return_value = None
        mock_repe__init__.return_value = None
        mock_jz__init__.return_value = None
        mock_call__init__.return_value = None
        mock_retf__init__.return_value = None
        mock_dec__init__.return_value = None
        mock_adc__init__.return_value = None
        mock_jb__init__.return_value = None
        mock_jnz__init__.return_value = None
        mock_inc__init__.return_value = None

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=78,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=83,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=80,line='add\tdi, [bx+2]',stmt='add\tdi, [bx+2]'),tasm.op._add)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=113,line='mov\tax, _mod_channels_number',stmt='mov\tax, _mod_channels_number'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='mov ebx,5',stmt='mov ebx,5'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=19,line='int 21h                         ; DOS INT 21h',stmt='int 21h                         ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=72,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=40,line='CMP [var2],1',stmt='CMP [var2],1'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=21,line='cmp var1[bx+si],2',stmt='cmp var1[bx+si],2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=53,line='mov eax, B',stmt='mov eax, B'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=105,line='dec cl              ; decrease loop counter',stmt='dec cl              ; decrease loop counter'),tasm.op._dec)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=71,line='cmp dx,11',stmt='cmp dx,11'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=60,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=21,line='mov eax,1',stmt='mov eax,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=87,line='cld',stmt='cld'),tasm.op._cld)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='mov\t_savesp_245D0,\tsp',stmt='mov\t_savesp_245D0,\tsp'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=169,line='mov\tbx, _fhandle_module',stmt='mov\tbx, _fhandle_module'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=6,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=142,line='push\tcs',stmt='push\tcs'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=19,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=47,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='cmp [var3+3*4],4000000',stmt='cmp [var3+3*4],4000000'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=47,line='JA failure',stmt='JA failure'),tasm.op._ja)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=102,line='add bl,7            ; "A" to "F"',stmt='add bl,7            ; "A" to "F"'),tasm.op._add)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=32,line='inc byte ptr [edi+1]',stmt='inc byte ptr [edi+1]'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=66,line='cmp dl,2',stmt='cmp dl,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=125,line='retf',stmt='retf'),tasm.op._retf)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=25,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=45,line='JNE failure',stmt='JNE failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=53,line='mov ah,042h',stmt='mov ah,042h'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=94,line='mov edi,OFFSET AsCii ; get the offset address',stmt='mov edi,OFFSET AsCii ; get the offset address'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='mov dl,[edi]',stmt='mov dl,[edi]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=33,line='CMP [var1],111',stmt='CMP [var1],111'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=56,line='shr ecx,16',stmt='shr ecx,16'),tasm.op._shr)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=136,line='push\tdx',stmt='push\tdx'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=55,line='mov dx,cx',stmt='mov dx,cx'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=19,line='call load_raw',stmt='call load_raw'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='push\tdx',stmt='push\tdx'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=70,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=52,line='mov ebx,[load_handle]',stmt='mov ebx,[load_handle]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=16,line='cmp var1[bx],2',stmt='cmp var1[bx],2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=104,line='inc edi              ; increase target address',stmt='inc edi              ; increase target address'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=33,line='cmp var3,3',stmt='cmp var3,3'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=23,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=40,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=56,line='cmp var3,-12',stmt='cmp var3,-12'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=28,line='jmp exitLabel',stmt='jmp exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=138,line='mov\tah, 3Eh',stmt='mov\tah, 3Eh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=104,line='call\t_ems_restore_mapctx',stmt='call\t_ems_restore_mapctx'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=29,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=81,line='lea\tsi, [bx+5]',stmt='lea\tsi, [bx+5]'),tasm.op._lea)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=96,line='call\tax',stmt='call\tax'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=60,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=23,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=36,line='INC [var2]',stmt='INC [var2]'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=18,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=110,line='inc\tax',stmt='inc\tax'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=54,line='cmp eax,3',stmt='cmp eax,3'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=25,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=33,line='int 21h                       ; DOS INT 21h                     ; DOS INT 21h',stmt='int 21h                       ; DOS INT 21h                     ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=42,line='call printeax',stmt='call printeax'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=23,line='mov bl,0',stmt='mov bl,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=49,line='mov eax,-1-(-2+3)',stmt='mov eax,-1-(-2+3)'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=36,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=61,line='mov ebx,[load_handle]',stmt='mov ebx,[load_handle]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=44,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=23,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line='JNE failure',stmt='JNE failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=178,line='mov\t_module_type_text, 38544C46h ;\tFLT8',stmt='mov\t_module_type_text, 38544C46h ;\tFLT8'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=63,line='mov edi,offset var1',stmt='mov edi,offset var1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=27,line='mov edi,offset var1',stmt='mov edi,offset var1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=25,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=15,line='cmp var1[1],2',stmt='cmp var1[1],2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=130,line='mov\tdx, offset _aNotEnoughMemory ; "Not enough Memory available\\r\\n"',stmt='mov\tdx, offset _aNotEnoughMemory ; "Not enough Memory available\\r\\n"'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=48,line='mov eax,teST2',stmt='mov eax,teST2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=100,line='mov\tah, 3Eh',stmt='mov\tah, 3Eh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='CMP [var3],37',stmt='CMP [var3],37'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=20,line='cmp [var],5',stmt='cmp [var],5'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=123,line='xor\tax, ax',stmt='xor\tax, ax'),tasm.op._xor)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=39,line='JNE failure',stmt='JNE failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=23,line='cmp eax,2',stmt='cmp eax,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=29,line='push\tds',stmt='push\tds'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=40,line='lea edx,fileName',stmt='lea edx,fileName'),tasm.op._lea)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=76,line='movzx\tcx, byte ptr [bx+4]',stmt='movzx\tcx, byte ptr [bx+4]'),tasm.op._movzx)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=91,line='jnz\tshort loc_10045',stmt='jnz\tshort loc_10045'),tasm.op._jnz)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=174,line='jmp\tloc_101B7',stmt='jmp\tloc_101B7'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=33,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=53,line='call\t_ems_save_mapctx',stmt='call\t_ems_save_mapctx'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=31,line='CMP [var1],3',stmt='CMP [var1],3'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=39,line='cmp dl,4',stmt='cmp dl,4'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=90,line='dec\tdl',stmt='dec\tdl'),tasm.op._dec)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='CMP eax,1',stmt='CMP eax,1'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=79,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=14,line='mov edx,0',stmt='mov edx,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=92,line='mov\tax, offset _mod_n_t_module ; N.T.',stmt='mov\tax, offset _mod_n_t_module ; N.T.'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=180,line='mov\t_word_245D2, 1Fh',stmt='mov\t_word_245D2, 1Fh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='cmp var1[bx+si],2',stmt='cmp var1[bx+si],2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line='cmp var1,al',stmt='cmp var1,al'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=50,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=37,line='pop\tdx',stmt='pop\tdx'),tasm.op._pop)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=89,line='jz\tshort loc_10064',stmt='jz\tshort loc_10064'),tasm.op._jz)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=43,line='cmp [var3],11',stmt='cmp [var3],11'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=18,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=45,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=36,line="mov al, 'Z' - 'A' +1",stmt="mov al, 'Z' - 'A' +1"),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=49,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=21,line='xor eax,eax',stmt='xor eax,eax'),tasm.op._xor)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=75,line='cmp byte ptr [edi+7],132',stmt='cmp byte ptr [edi+7],132'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=43,line='cmp edi,esi',stmt='cmp edi,esi'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=2,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=40,line='cmp [var2+2],6',stmt='cmp [var2+2],6'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=101,line='int\t21h\t\t; DOS -\t2+ - CLOSE A FILE WITH HANDLE',stmt='int\t21h\t\t; DOS -\t2+ - CLOSE A FILE WITH HANDLE'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='cmp word ptr [var5+2],50',stmt='cmp word ptr [var5+2],50'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=55,line='jb failure',stmt='jb failure'),tasm.op._jb)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=31,line='sub ebx,eax',stmt='sub ebx,eax'),tasm.op._sub)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=54,line='cld',stmt='cld'),tasm.op._cld)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=51,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=57,line='mov\t_byte_2461B, 0',stmt='mov\t_byte_2461B, 0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=32,line='JA failure',stmt='JA failure'),tasm.op._ja)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='lea ebx,beginningdata',stmt='lea ebx,beginningdata'),tasm.op._lea)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=147,line='pop\tdx',stmt='pop\tdx'),tasm.op._pop)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='int 21h                       ; DOS INT 21h',stmt='int 21h                       ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='CMP [var2],13',stmt='CMP [var2],13'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=111,line="mov ah,9            ; DS:DX->'$'-terminated string",stmt="mov ah,9            ; DS:DX->'$'-terminated string"),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=118,line='mov\tsi, offset _dword_27BC8',stmt='mov\tsi, offset _dword_27BC8'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=34,line='movzx eax, DDD',stmt='movzx eax, DDD'),tasm.op._movzx)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=20,line='sub word ptr [var5+2],25',stmt='sub word ptr [var5+2],25'),tasm.op._sub)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=20,line='INC eax',stmt='INC eax'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line='mov ds:[edi],cl',stmt='mov ds:[edi],cl'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=77,line='mov ebx,[load_handle]',stmt='mov ebx,[load_handle]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=53,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=37,line='cmp [var2],4',stmt='cmp [var2],4'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=37,line='JB failure',stmt='JB failure'),tasm.op._jb)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=137,line='mov\tbx, _fhandle_module',stmt='mov\tbx, _fhandle_module'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=16,line='INC eax',stmt='INC eax'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=16,line='lea edi,buffer',stmt='lea edi,buffer'),tasm.op._lea)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=144,line='mov\tax, ds',stmt='mov\tax, ds'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='mov byte ptr dl,[edi]',stmt='mov byte ptr dl,[edi]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=60,line='mov\t_word_24662, 0',stmt='mov\t_word_24662, 0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='cmp ebx,0ffffff00h',stmt='cmp ebx,0ffffff00h'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=27,line='xor eax,eax',stmt='xor eax,eax'),tasm.op._xor)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=54,line='mov al,00h ;debut du fichier',stmt='mov al,00h ;debut du fichier'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='mov eax,1',stmt='mov eax,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=55,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=65,line='int 21h                       ; DOS INT 21h',stmt='int 21h                       ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=149,line='mov\tsp, _savesp_245D0',stmt='mov\tsp, _savesp_245D0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=28,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=21,line='mov cl,2',stmt='mov cl,2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=23,line='cmp var1,2',stmt='cmp var1,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=47,line='JE failure',stmt='JE failure'),tasm.op._je)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=59,line='ret',stmt='ret'),tasm.op._ret)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=165,line='call\t_mod_1021E',stmt='call\t_mod_1021E'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=183,line='call\t_mod_1021E',stmt='call\t_mod_1021E'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=43,line='mov ah,03dh',stmt='mov ah,03dh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=15,line='mov ecx,2',stmt='mov ecx,2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=61,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='push es ds',stmt='push es ds'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=57,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=35,line='cmp eax,6',stmt='cmp eax,6'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=37,line='cmp var3,ecx',stmt='cmp var3,ecx'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=64,line='mov esi,offset var2',stmt='mov esi,offset var2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=27,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=59,line='mov dl,var1',stmt='mov dl,var1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=52,line='mov ebp,3*4',stmt='mov ebp,3*4'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=18,line='cmp dl,2',stmt='cmp dl,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=14,line='MOV ds, _data',stmt='MOV ds, _data'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=23,line='mov byte ptr dl,[edi]',stmt='mov byte ptr dl,[edi]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=73,line='mov\tdl, 23',stmt='mov\tdl, 23'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=37,line='INC [var2]',stmt='INC [var2]'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='mov ebx,2',stmt='mov ebx,2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=100,line='cmp bl,39h          ; above 9?',stmt='cmp bl,39h          ; above 9?'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=112,line='jbe\tshort loc_1008A',stmt='jbe\tshort loc_1008A'),tasm.op._jbe)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='JE failure',stmt='JE failure'),tasm.op._je)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=50,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=35,line='push\tcs',stmt='push\tcs'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=70,line='mov dx,[edi+1]',stmt='mov dx,[edi+1]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=79,line='mov\tdi, offset _chrin',stmt='mov\tdi, offset _chrin'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=32,line='cmp [var1+1],5',stmt='cmp [var1+1],5'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=44,line='JB failure',stmt='JB failure'),tasm.op._jb)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=95,line='mov\t_byte_24665, 1',stmt='mov\t_byte_24665, 1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=151,line='stc',stmt='stc'),tasm.op._stc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=119,line='push\tcs',stmt='push\tcs'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=179,line='mov\t_moduleflag_246D0, 11b',stmt='mov\t_moduleflag_246D0, 11b'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=36,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=67,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=26,line='mov eax, CC',stmt='mov eax, CC'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='cmp [var+3],5',stmt='cmp [var+3],5'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=163,line='mov\t_mod_channels_number, 4',stmt='mov\t_mod_channels_number, 4'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=65,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=74,line='inc byte ptr [edi+7]',stmt='inc byte ptr [edi+7]'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=31,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=27,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=141,line='call\t_ems_restore_mapctx',stmt='call\t_ems_restore_mapctx'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=47,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=4,line='jmp failure',stmt='jmp failure'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=32,line='cmp [var-1],0',stmt='cmp [var-1],0'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=14,line='sti                             ; Set The Interrupt Flag',stmt='sti                             ; Set The Interrupt Flag'),tasm.op._sti)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=36,line='mov ecx,3',stmt='mov ecx,3'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=171,line='int\t21h\t\t; DOS -\t2+ - MOVE FILE READ/WRITE POINTER (LSEEK)',stmt='int\t21h\t\t; DOS -\t2+ - MOVE FILE READ/WRITE POINTER (LSEEK)'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=50,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=68,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=26,line='JNE failure',stmt='JNE failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=99,line='mov\tbx, _fhandle_module',stmt='mov\tbx, _fhandle_module'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=16,line='mov eax, B',stmt='mov eax, B'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=25,line='cmp var2,2',stmt='cmp var2,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=131,line='mov\tax, 0FFFEh',stmt='mov\tax, 0FFFEh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=135,line='push\tax',stmt='push\tax'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=75,line='pop ds',stmt='pop ds'),tasm.op._pop)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=0,line=u'repe',stmt=u'repe'),tasm.op._repe)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=29,line='cmp dl,5',stmt='cmp dl,5'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=59,line='mov ecx,10',stmt='mov ecx,10'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=40,line='sub eax,ebx',stmt='sub eax,ebx'),tasm.op._sub)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=167,line='mov\tdx, 258h',stmt='mov\tdx, 258h'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=34,line='MOV ds, _data',stmt='MOV ds, _data'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=21,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=34,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=31,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=145,line='mov\tfs, ax',stmt='mov\tfs, ax'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=164,line='mov\tsi, offset _byte_306DE',stmt='mov\tsi, offset _byte_306DE'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=43,line='cmp ebx,0',stmt='cmp ebx,0'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=32,line='call\tnear ptr _snd_offx',stmt='call\tnear ptr _snd_offx'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=27,line='cmp eax,4',stmt='cmp eax,4'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=62,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=86,line='add\tbx, cx',stmt='add\tbx, cx'),tasm.op._add)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=69,line='call\tnear ptr _clean_11C43',stmt='call\tnear ptr _clean_11C43'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=15,line='sti                             ; Set The Interrupt Flag',stmt='sti                             ; Set The Interrupt Flag'),tasm.op._sti)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=148,line='pop\tax',stmt='pop\tax'),tasm.op._pop)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=42,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=51,line='int 21h                       ; DOS INT 21h',stmt='int 21h                       ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=64,line='push ds',stmt='push ds'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='xor eax,eax',stmt='xor eax,eax'),tasm.op._xor)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line='mov eax, B',stmt='mov eax, B'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='MOV ds, _data',stmt='MOV ds, _data'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=181,line='mov\t_mod_channels_number, 8',stmt='mov\t_mod_channels_number, 8'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=1,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=53,line='int 21h                       ; DOS INT 21h',stmt='int 21h                       ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=161,line='mov\t_module_type_text, 2E542E4Eh',stmt='mov\t_module_type_text, 2E542E4Eh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=52,line='cmp var3,-13',stmt='cmp var3,-13'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=139,line='int\t21h\t\t; DOS -\t2+ - CLOSE A FILE WITH HANDLE',stmt='int\t21h\t\t; DOS -\t2+ - CLOSE A FILE WITH HANDLE'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=31,line='push\tcs',stmt='push\tcs'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='cmp word ptr var5,0',stmt='cmp word ptr var5,0'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=28,line='JE failure',stmt='JE failure'),tasm.op._je)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=18,line='JNE failure',stmt='JNE failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=44,line='CMP [var3],35',stmt='CMP [var3],35'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=44,line='mov\tds, bx',stmt='mov\tds, bx'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=81,line='pop ds es',stmt='pop ds es'),tasm.op._pop)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='cmp ebx,1',stmt='cmp ebx,1'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=15,line='cld                             ; Clear The Direction Flag',stmt='cld                             ; Clear The Direction Flag'),tasm.op._cld)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=27,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=48,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=170,line='mov\tax, 4200h',stmt='mov\tax, 4200h'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='cmp eax,1',stmt='cmp eax,1'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=124,line='pop\tds',stmt='pop\tds'),tasm.op._pop)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=56,line='cmp var3+ebp,4000000',stmt='cmp var3+ebp,4000000'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=82,line='popad',stmt='popad'),tasm.op._popad)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=26,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=50,line='cmp eax,-2',stmt='cmp eax,-2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=19,line='cmp var1[1],2',stmt='cmp var1[1],2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=110,line='mov edx,OFFSET ASCiI ; DOS 1+ WRITE STRING TO STANDARD OUTPUT',stmt='mov edx,OFFSET ASCiI ; DOS 1+ WRITE STRING TO STANDARD OUTPUT'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=51,line='mov\tax, 0FFFFh',stmt='mov\tax, 0FFFFh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=25,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=48,line='mov\tdx, offset _eModuleNotFound ; "Module not found\\r\\n"',stmt='mov\tdx, offset _eModuleNotFound ; "Module not found\\r\\n"'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=47,line='mov\t_fhandle_module, ax',stmt='mov\t_fhandle_module, ax'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=79,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line='mov ebx,-1',stmt='mov ebx,-1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=27,line='CMP eax,133',stmt='CMP eax,133'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=49,line='cmp eax,-13',stmt='cmp eax,-13'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=68,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=46,line='JB failure',stmt='JB failure'),tasm.op._jb)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=37,line='pushad',stmt='pushad'),tasm.op._pushad)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=72,line='mov\tbx, offset off_25326',stmt='mov\tbx, offset off_25326'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=34,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=52,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=54,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=116,line='push\tcs',stmt='push\tcs'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=81,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=173,line='adc\t_word_24662, 0',stmt='adc\t_word_24662, 0'),tasm.op._adc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=85,line='mov\tbx, si',stmt='mov\tbx, si'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=62,line='mov ah,03fh',stmt='mov ah,03fh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=28,line='mov dl,[edi+1]',stmt='mov dl,[edi+1]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=50,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=98,line='and bl,0Fh          ; only low-Nibble',stmt='and bl,0Fh          ; only low-Nibble'),tasm.op._and)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=71,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=9,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=0,line='cmpsb',stmt='cmpsb'),tasm.op._cmpsb)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=42,line='cmp al,ah',stmt='cmp al,ah'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=29,line='mov ebx,2',stmt='mov ebx,2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=53,line='cmp [var3+ebp],4000000',stmt='cmp [var3+ebp],4000000'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=16,line='cld                             ; Clear The Direction Flag',stmt='cld                             ; Clear The Direction Flag'),tasm.op._cld)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=54,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=58,line="sub dl,'a'",stmt="sub dl,'a'"),tasm.op._sub)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=16,line='mov edi,offset var1',stmt='mov edi,offset var1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=65,line='mov byte ptr dl,[edi]',stmt='mov byte ptr dl,[edi]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=33,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=18,line='cmp var1,1',stmt='cmp var1,1'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=45,line='jnc noerror',stmt='jnc noerror'),tasm.op._jnc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=36,line='call\tnear ptr _memfree_125DA',stmt='call\tnear ptr _memfree_125DA'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=45,line="cmp [doublequote+4],'d'",stmt="cmp [doublequote+4],'d'"),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=20,line='cmp var1[bx],2',stmt='cmp var1[bx],2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='cmp ebx,2',stmt='cmp ebx,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=45,line='cmp ebx,1',stmt='cmp ebx,1'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=39,line='int\t21h\t\t; DOS -\t2+ - OPEN DISK FILE WITH HANDLE',stmt='int\t21h\t\t; DOS -\t2+ - OPEN DISK FILE WITH HANDLE'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=42,line='JA failure',stmt='JA failure'),tasm.op._ja)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=37,line='mov edi,offset var2',stmt='mov edi,offset var2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=143,line='call\tnear ptr _memfree_125DA',stmt='call\tnear ptr _memfree_125DA'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=62,line='xor edi,edi',stmt='xor edi,edi'),tasm.op._xor)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=66,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=59,line='cmp dl,2',stmt='cmp dl,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=52,line='jb\tshort _lfreaderr',stmt='jb\tshort _lfreaderr'),tasm.op._jb)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=65,line='call\t_dosfread',stmt='call\t_dosfread'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=67,line='mov edx,edi',stmt='mov edx,edi'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=182,line='mov\tsi, offset _byte_308BE',stmt='mov\tsi, offset _byte_308BE'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=101,line='jna short P2',stmt='jna short P2'),tasm.op._jna)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=106,line='jnz P1              ; jump if cl is not equal 0 (zeroflag is not set)',stmt='jnz P1              ; jump if cl is not equal 0 (zeroflag is not set)'),tasm.op._jnz)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=52,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line="cmp dword ptr buffer,'tseT'",stmt="cmp dword ptr buffer,'tseT'"),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=29,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=34,line='JE failure',stmt='JE failure'),tasm.op._je)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=84,line='mov\tax, [bx]',stmt='mov\tax, [bx]'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=22,line='cmp [var2],0',stmt='cmp [var2],0'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=16,line='add word ptr [var5+2],50',stmt='add word ptr [var5+2],50'),tasm.op._add)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=162,line='mov\t_word_245D2, 0Fh',stmt='mov\t_word_245D2, 0Fh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=111,line='cmp\tax, _mod_channels_number',stmt='cmp\tax, _mod_channels_number'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=64,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=60,line='cmp dl,2',stmt='cmp dl,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=57,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=19,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=76,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=57,line="mov dl,'c'",stmt="mov dl,'c'"),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=21,line='CMP eax,2',stmt='CMP eax,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=53,line='mov ebx,2',stmt='mov ebx,2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=40,line='mov al,7',stmt='mov al,7'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=83,line='ret',stmt='ret'),tasm.op._ret)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=122,line='call\tnear ptr sub_12B18',stmt='call\tnear ptr sub_12B18'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=150,line='pop\tds',stmt='pop\tds'),tasm.op._pop)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='INC [var1]',stmt='INC [var1]'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=42,line='mov al,00h  ;ouverture du fichier pour lecture.',stmt='mov al,00h  ;ouverture du fichier pour lecture.'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=35,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=114,line='ret',stmt='ret'),tasm.op._ret)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=44,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=17,line='mov ah,9                        ; AH=09h - Print DOS Message',stmt='mov ah,9                        ; AH=09h - Print DOS Message'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=50,line='mov [load_handle],eax',stmt='mov [load_handle],eax'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=33,line='cmp byte ptr [edi+1],6',stmt='cmp byte ptr [edi+1],6'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=36,line='sub ebx,eax',stmt='sub ebx,eax'),tasm.op._sub)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=99,line='add bl,30h          ; convert to ASCII',stmt='add bl,30h          ; convert to ASCII'),tasm.op._add)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=152,line='retf',stmt='retf'),tasm.op._retf)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='inc eax',stmt='inc eax'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=26,line='cmp [var1],2',stmt='cmp [var1],2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=97,line='mov bl,al',stmt='mov bl,al'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=59,line='MOV al,0',stmt='MOV al,0'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=42,line='lea esi,var2',stmt='lea esi,var2'),tasm.op._lea)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=69,line='mov edi,offset var1',stmt='mov edi,offset var1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=63,line='add edi,14*320',stmt='add edi,14*320'),tasm.op._add)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=64,line='mov\tcx, 1084',stmt='mov\tcx, 1084'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=55,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=95,line='mov cl,8            ; number of ASCII',stmt='mov cl,8            ; number of ASCII'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='cmp dl,2',stmt='cmp dl,2'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=63,line='mov\tdx, offset _chrin',stmt='mov\tdx, offset _chrin'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=28,line='cmp [var2-1],5',stmt='cmp [var2-1],5'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=44,line='int 21h',stmt='int 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=43,line='INC [var3]',stmt='INC [var3]'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=112,line='int 21h             ; maybe redirected under DOS 2+ for output to file',stmt='int 21h             ; maybe redirected under DOS 2+ for output to file'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=8,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=34,line='mov eax,2',stmt='mov eax,2'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=15,line='cld                             ; Clear The Direction Flag',stmt='cld                             ; Clear The Direction Flag'),tasm.op._cld)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=43,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=35,line='mov ebx,3',stmt='mov ebx,3'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=11,line='mov eax,-1',stmt='mov eax,-1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=32,line='JNE failure',stmt='JNE failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=14,line='sti                             ; Set The Interrupt Flag',stmt='sti                             ; Set The Interrupt Flag'),tasm.op._sti)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=84,line='int 21h                       ; DOS INT 21h',stmt='int 21h                       ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        #self.assertEqual(proc_instance.add_(line_number=185,line="mov\tcx, 80h\t; '\x80'",stmt="mov\tcx, 80h\t; '\x80'"),tasm.op._mov)
        self.assertIsInstance(proc_instance.add_(line_number=185,line="mov\tcx, 80h\t; '\x80'",stmt="mov\tcx, 80h\t; '\x80'"),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=14,line='mov ds, _data',stmt='mov ds, _data'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=168,line='xor\tcx, cx',stmt='xor\tcx, cx'),tasm.op._xor)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=47,line='ret',stmt='ret'),tasm.op._ret)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=49,line='cmp var3+3*4,4000000',stmt='cmp var3+3*4,4000000'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=57,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=38,line='mov\tax, 3D00h',stmt='mov\tax, 3D00h'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=184,line='mov\tsi, offset _byte_27FE8',stmt='mov\tsi, offset _byte_27FE8'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=66,line='push\tcs',stmt='push\tcs'),tasm.op._push)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=32,line='mov ah,4ch                    ; AH=4Ch - Exit To DOS',stmt='mov ah,4ch                    ; AH=4Ch - Exit To DOS'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=55,line='inc var3',stmt='inc var3'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=117,line='call\tnear ptr sub_12B83',stmt='call\tnear ptr sub_12B83'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='cmp var2,bx',stmt='cmp var2,bx'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=78,line='mov ah,03eh',stmt='mov ah,03eh'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=24,line='INC eax',stmt='INC eax'),tasm.op._inc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=103,line='adc\t_word_24662, 0',stmt='adc\t_word_24662, 0'),tasm.op._adc)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=25,line='CMP eax,3',stmt='CMP eax,3'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=40,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=48,line='mov al,1',stmt='mov al,1'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=50,line='JMP exitLabel',stmt='JMP exitLabel'),tasm.op._jmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=18,line='mov edx,offset _msg             ; DS:EDX -> $ Terminated String',stmt='mov edx,offset _msg             ; DS:EDX -> $ Terminated String'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=43,line='mov\tbx, seg003',stmt='mov\tbx, seg003'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=39,line='lea eax,enddata',stmt='lea eax,enddata'),tasm.op._lea)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=15,line='xor eax,eax',stmt='xor eax,eax'),tasm.op._xor)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='cmp [var0+5],0',stmt='cmp [var0+5],0'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=107,line='movzx\tax, _byte_2461B',stmt='movzx\tax, _byte_2461B'),tasm.op._movzx)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=39,line='jne failure',stmt='jne failure'),tasm.op._jne)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=41,line='mov ah,7',stmt='mov ah,7'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=31,line='call incebx',stmt='call incebx'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=29,line='mov eax,3',stmt='mov eax,3'),tasm.op._mov)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=166,line='call\t_mod_102F5',stmt='call\t_mod_102F5'),tasm.op._call)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=26,line='cmp [var+4],0',stmt='cmp [var+4],0'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=30,line='int 21h                       ; DOS INT 21h',stmt='int 21h                       ; DOS INT 21h'),tasm.op._int)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=21,line='cmp word ptr [var5+2],25',stmt='cmp word ptr [var5+2],25'),tasm.op._cmp)

        proc_instance = Proc('mainproc', 0, False)
        self.assertIsInstance(proc_instance.add_(line_number=54,line='cmp eax,ebx',stmt='cmp eax,ebx'),tasm.op._cmp)


    def test_generate_c_cmd(self):
        p = Parser([])
        cpp_instance = cpp.Cpp(p)
        proc_instance = Proc('mainproc', 0, False)

        p.set_global("_data", op.var(1, 0, issegment=True))
        p.set_global("var1", op.var(size=1, offset=1, name="var1", segment="_data", elements=1))

        p.set_global('__dynamically_loaded', op.var(name=u'__dynamically_loaded', offset=1, segment=u'_bss', size=4))
        p.set_global('_a070295122642', op.var(name=u'_a070295122642', offset=1, segment=u'seg003', size=1))
        p.set_global('_a100assembler', op.var(elements=0, name=u'_a100Assembler', offset=1, segment=u'dseg', size=1))
        p.set_global('_a1024', op.var(name=u'_a1024', offset=1, segment=u'dseg', size=1))
        p.set_global('_a130295211558', op.var(name=u'_a130295211558', offset=1, segment=u'dseg', size=1))
        p.set_global('_a1thru0', op.var(elements=0, name=u'_a1Thru0', offset=1, segment=u'dseg', size=1))
        p.set_global('_a2284116_8', op.var(elements=0, name=u'_a2284116_8', offset=1, segment=u'dseg', size=1))
        p.set_global('_a24bitinterpolation', op.var(elements=0, name=u'_a24bitInterpolation', offset=1, segment=u'dseg', size=1))
        p.set_global('_a256', op.var(name=u'_a256', offset=1, segment=u'dseg', size=1))
        p.set_global('_a512', op.var(name=u'_a512', offset=1, segment=u'dseg', size=1))
        p.set_global('_a768', op.var(name=u'_a768', offset=1, segment=u'dseg', size=1))
        p.set_global('_a_ext', op.var(elements=0, name=u'_a_ext', offset=1, segment=u'dseg', size=1))
        p.set_global('_a_m_k', op.var(elements=0, name=u'_a_m_k', offset=1, segment=u'seg003', size=1))
        p.set_global('_a_mod_nst_669_s', op.var(elements=4, name=u'_a_mod_nst_669_s', offset=1, segment=u'dseg', size=1))
        p.set_global('_aadlibsoundcard', op.var(name=u'_aAdlibSoundcard', offset=1, segment=u'dseg', size=1))
        p.set_global('_aadlibsoundcard_0', op.var(name=u'_aAdlibSoundcard_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_aand', op.var(elements=0, name=u'_aAnd', offset=1, segment=u'dseg', size=1))
        p.set_global('_aandwritefollowingte', op.var(elements=0, name=u'_aAndWriteFollowingTe', offset=1, segment=u'dseg', size=1))
        p.set_global('_aarpeggio', op.var(name=u'_aArpeggio', offset=1, segment=u'dseg', size=1))
        p.set_global('_aat', op.var(name=u'_aAt', offset=1, segment=u'seg003', size=1))
        p.set_global('_aautotoneporta', op.var(name=u'_aAutoToneporta', offset=1, segment=u'dseg', size=1))
        p.set_global('_abackspace', op.var(elements=0, name=u'_aBackspace', offset=1, segment=u'dseg', size=1))
        p.set_global('_abaseport', op.var(name=u'_aBasePort', offset=1, segment=u'seg003', size=1))
        p.set_global('_abmod2stm', op.var(elements=0, name=u'_aBmod2stm', offset=1, segment=u'seg003', size=1))
        p.set_global('_acd81', op.var(elements=0, name=u'_aCd81', offset=1, segment=u'seg003', size=1))
        p.set_global('_ach', op.var(elements=0, name=u'_aCh', offset=1, segment=u'seg003', size=1))
        p.set_global('_achannels', op.var(elements=0, name=u'_aChannels', offset=1, segment=u'dseg', size=1))
        p.set_global('_achn', op.var(elements=0, name=u'_aChn', offset=1, segment=u'seg003', size=1))
        p.set_global('_aconfigfilenotf', op.var(elements=2, name=u'_aConfigFileNotF', offset=1, segment=u'seg001', size=1))
        p.set_global('_acopyrightc1994', op.var(name=u'_aCopyrightC1994', offset=1, segment=u'dseg', size=1))
        p.set_global('_acouldnotfindt_0', op.var(elements=0, name=u'_aCouldNotFindT_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_acouldnotfindthe', op.var(elements=3, name=u'_aCouldNotFindThe', offset=1, segment=u'seg003', size=1))
        p.set_global('_acovox', op.var(name=u'_aCovox', offset=1, segment=u'dseg', size=1))
        p.set_global('_acovox_0', op.var(name=u'_aCovox_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_acriticalerrort', op.var(elements=2, name=u'_aCriticalErrorT', offset=1, segment=u'dseg', size=1))
        p.set_global('_actrldel', op.var(elements=0, name=u'_aCtrlDel', offset=1, segment=u'dseg', size=1))
        p.set_global('_acurrentsoundcard', op.var(elements=3, name=u'_aCurrentSoundcard', offset=1, segment=u'dseg', size=1))
        p.set_global('_acurrenttrack', op.var(elements=0, name=u'_aCurrentTrack', offset=1, segment=u'dseg', size=1))
        p.set_global('_acursor', op.var(name=u'_aCursor', offset=1, segment=u'dseg', size=1))
        p.set_global('_acursor_0', op.var(name=u'_aCursor_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_acursor_1', op.var(elements=0, name=u'_aCursor_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincamplify', op.var(name=u'_aDecIncAmplify', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincamplify_0', op.var(elements=0, name=u'_aDecIncAmplify_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincvolume', op.var(name=u'_aDecIncVolume', offset=1, segment=u'dseg', size=1))
        p.set_global('_adecincvolume_0', op.var(elements=0, name=u'_aDecIncVolume_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_adel', op.var(elements=0, name=u'_aDel', offset=1, segment=u'dseg', size=1))
        p.set_global('_adeleteallfileswhich', op.var(elements=0, name=u'_aDeleteAllFilesWhich', offset=1, segment=u'dseg', size=1))
        p.set_global('_adeletemarkedfil', op.var(name=u'_aDeleteMarkedFil', offset=1, segment=u'dseg', size=1))
        p.set_global('_adeletingfile', op.var(elements=0, name=u'_aDeletingFile', offset=1, segment=u'dseg', size=1))
        p.set_global('_adevicenotiniti', op.var(name=u'_aDeviceNotIniti', offset=1, segment=u'seg003', size=1))
        p.set_global('_adisablebpmonof', op.var(name=u'_aDisableBpmOnOf', offset=1, segment=u'dseg', size=1))
        p.set_global('_adisablebpmonoff', op.var(elements=0, name=u'_aDisableBpmOnOff', offset=1, segment=u'dseg', size=1))
        p.set_global('_adma', op.var(elements=0, name=u'_aDma', offset=1, segment=u'seg003', size=1))
        p.set_global('_adosshelltypeex', op.var(name=u'_aDosShellTypeEx', offset=1, segment=u'dseg', size=1))
        p.set_global('_adosshelltypeexitt_0', op.var(elements=0, name=u'_aDosShellTypeExitT_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_adosshelltypeexittor', op.var(elements=0, name=u'_aDosShellTypeExitToR', offset=1, segment=u'dseg', size=1))
        p.set_global('_adramdma', op.var(elements=0, name=u'_aDramDma', offset=1, segment=u'seg003', size=1))
        p.set_global('_ae_command', op.var(name=u'_aE_command', offset=1, segment=u'dseg', size=1))
        p.set_global('_ae_g_', op.var(elements=0, name=u'_aE_g_', offset=1, segment=u'seg003', size=1))
        p.set_global('_aend', op.var(elements=0, name=u'_aEnd', offset=1, segment=u'dseg', size=1))
        p.set_global('_aend_0', op.var(elements=0, name=u'_aEnd_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_aendpattern', op.var(elements=0, name=u'_aEndPattern', offset=1, segment=u'dseg', size=1))
        p.set_global('_aenter', op.var(elements=0, name=u'_aEnter', offset=1, segment=u'dseg', size=1))
        p.set_global('_aerrorcouldnot_0', op.var(elements=3, name=u'_aErrorCouldNot_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_aerrorcouldnot_1', op.var(elements=3, name=u'_aErrorCouldNot_1', offset=1, segment=u'seg003', size=1))
        p.set_global('_aerrorcouldnotfi', op.var(elements=3, name=u'_aErrorCouldNotFi', offset=1, segment=u'seg003', size=1))
        p.set_global('_aerrorsoundcardn', op.var(elements=3, name=u'_aErrorSoundcardN', offset=1, segment=u'seg003', size=1))
        p.set_global('_aesc', op.var(elements=0, name=u'_aEsc', offset=1, segment=u'dseg', size=1))
        p.set_global('_aexit', op.var(elements=0, name=u'_aExit', offset=1, segment=u'dseg', size=1))
        p.set_global('_af1', op.var(elements=0, name=u'_aF1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af10', op.var(name=u'_aF10', offset=1, segment=u'dseg', size=1))
        p.set_global('_af10_0', op.var(elements=0, name=u'_aF10_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af10_1', op.var(elements=0, name=u'_aF10_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af11', op.var(name=u'_aF11', offset=1, segment=u'dseg', size=1))
        p.set_global('_af11_0', op.var(elements=0, name=u'_aF11_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af11_1', op.var(elements=0, name=u'_aF11_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af12', op.var(name=u'_aF12', offset=1, segment=u'dseg', size=1))
        p.set_global('_af12_0', op.var(elements=0, name=u'_aF12_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af12_1', op.var(elements=0, name=u'_aF12_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af2_0', op.var(elements=0, name=u'_aF2_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af3_0', op.var(elements=0, name=u'_aF3_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af4_0', op.var(elements=0, name=u'_aF4_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af5_0', op.var(elements=0, name=u'_aF5_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af8_0', op.var(elements=0, name=u'_aF8_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af8_1', op.var(elements=0, name=u'_aF8_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9', op.var(name=u'_aF9', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_0', op.var(name=u'_aF9_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_1', op.var(name=u'_aF9_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_2', op.var(elements=0, name=u'_aF9_2', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_3', op.var(elements=0, name=u'_aF9_3', offset=1, segment=u'dseg', size=1))
        p.set_global('_af9_4', op.var(elements=0, name=u'_aF9_4', offset=1, segment=u'dseg', size=1))
        p.set_global('_afar', op.var(elements=0, name=u'_aFar', offset=1, segment=u'seg003', size=1))
        p.set_global('_afarfinetempo', op.var(name=u'_aFarFineTempo', offset=1, segment=u'dseg', size=1))
        p.set_global('_afartempo', op.var(name=u'_aFarTempo', offset=1, segment=u'dseg', size=1))
        p.set_global('_afasterforward', op.var(elements=0, name=u'_aFastErForward', offset=1, segment=u'dseg', size=1))
        p.set_global('_afasterrewind', op.var(elements=0, name=u'_aFastErRewind', offset=1, segment=u'dseg', size=1))
        p.set_global('_afastfourierfrequenc', op.var(elements=0, name=u'_aFastfourierFrequenc', offset=1, segment=u'dseg', size=1))
        p.set_global('_afidonet', op.var(elements=0, name=u'_aFidonet', offset=1, segment=u'dseg', size=1))
        p.set_global('_afile', op.var(elements=0, name=u'_aFile', offset=1, segment=u'dseg', size=1))
        p.set_global('_afilename_0', op.var(elements=0, name=u'_aFilename_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_afilename_ext', op.var(elements=0, name=u'_aFilename_ext', offset=1, segment=u'dseg', size=1))
        p.set_global('_afileselectorhelp', op.var(elements=0, name=u'_aFileSelectorHelp', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinepanning', op.var(name=u'_aFinePanning', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineportadown', op.var(name=u'_aFinePortaDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineportaup', op.var(name=u'_aFinePortaUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineportvolsl', op.var(name=u'_aFinePortVolsl', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineslidedown', op.var(name=u'_aFineslideDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_afineslideup', op.var(name=u'_aFineslideUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinetoneporta', op.var(name=u'_aFineTonePorta', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevibrato', op.var(name=u'_aFineVibrato', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevibrvolsl', op.var(name=u'_aFineVibrVolsl', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevolslide', op.var(name=u'_aFineVolSlide', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevolumedown', op.var(name=u'_aFinevolumeDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_afinevolumeup', op.var(name=u'_aFinevolumeUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_aflt4', op.var(elements=0, name=u'_aFlt4', offset=1, segment=u'seg003', size=1))
        p.set_global('_aflt8', op.var(elements=0, name=u'_aFlt8', offset=1, segment=u'seg003', size=1))
        p.set_global('_ageneralmidi', op.var(name=u'_aGeneralMidi', offset=1, segment=u'dseg', size=1))
        p.set_global('_ageneralmidi_0', op.var(name=u'_aGeneralMidi_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_aglissandoctrl', op.var(name=u'_aGlissandoCtrl', offset=1, segment=u'dseg', size=1))
        p.set_global('_agraphicalscopesonef', op.var(elements=0, name=u'_aGraphicalScopesOneF', offset=1, segment=u'dseg', size=1))
        p.set_global('_agravismaxcodec', op.var(name=u'_aGravisMaxCodec', offset=1, segment=u'dseg', size=1))
        p.set_global('_agravisultrasou', op.var(name=u'_aGravisUltrasou', offset=1, segment=u'dseg', size=1))
        p.set_global('_agravisultrasoun', op.var(name=u'_aGravisUltrasoun', offset=1, segment=u'seg003', size=1))
        p.set_global('_agray', op.var(name=u'_aGray', offset=1, segment=u'dseg', size=1))
        p.set_global('_agray_0', op.var(elements=0, name=u'_aGray_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_agsft', op.var(elements=0, name=u'_aGsft', offset=1, segment=u'seg003', size=1))
        p.set_global('_aguess___', op.var(elements=0, name=u'_aGuess___', offset=1, segment=u'dseg', size=1))
        p.set_global('_ahgf1irq', op.var(elements=0, name=u'_aHGf1Irq', offset=1, segment=u'seg003', size=1))
        p.set_global('_ahirq', op.var(elements=0, name=u'_aHIrq', offset=1, segment=u'seg003', size=1))
        p.set_global('_ahitbackspacetore', op.var(elements=0, name=u'_aHitBackspaceToRe', offset=1, segment=u'dseg', size=1))
        p.set_global('_ahome', op.var(elements=0, name=u'_aHome', offset=1, segment=u'dseg', size=1))
        p.set_global('_ahopeyoulikedusingth', op.var(elements=0, name=u'_aHopeYouLikedUsingTh', offset=1, segment=u'dseg', size=1))
        p.set_global('_aif', op.var(elements=0, name=u'_aIf', offset=1, segment=u'seg003', size=1))
        p.set_global('_aifyouhavebugreports', op.var(elements=0, name=u'_aIfYouHaveBugReports', offset=1, segment=u'dseg', size=1))
        p.set_global('_aignorebpmchanges', op.var(elements=0, name=u'_aIgnoreBpmChanges', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiamailinglists', op.var(elements=0, name=u'_aInertiaMailinglists', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiamodule', op.var(name=u'_aInertiaModule', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainertiamodule_0', op.var(name=u'_aInertiaModule_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainertiamodule_1', op.var(elements=0, name=u'_aInertiaModule_1', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainertiaplayer', op.var(elements=0, name=u'_aInertiaPlayer', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiaplayer_0', op.var(name=u'_aInertiaPlayer_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiaplayerv1_', op.var(elements=0, name=u'_aInertiaPlayerV1_', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiaplayerv1_22a', op.var(name=u'_aInertiaPlayerV1_22A', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainertiasample', op.var(elements=0, name=u'_aInertiaSample', offset=1, segment=u'seg003', size=1))
        p.set_global('_ainternet', op.var(elements=0, name=u'_aInternet', offset=1, segment=u'dseg', size=1))
        p.set_global('_ainvertloop', op.var(name=u'_aInvertLoop', offset=1, segment=u'dseg', size=1))
        p.set_global('_ajanfebmaraprmayj', op.var(elements=0, name=u'_aJanfebmaraprmayj', offset=1, segment=u'dseg', size=1))
        p.set_global('_ajn', op.var(elements=0, name=u'_aJn', offset=1, segment=u'seg003', size=1))
        p.set_global('_ajumptoloop', op.var(name=u'_aJumpToLoop', offset=1, segment=u'dseg', size=1))
        p.set_global('_akb', op.var(name=u'_aKb', offset=1, segment=u'dseg', size=1))
        p.set_global('_akhz', op.var(name=u'_aKhz', offset=1, segment=u'seg003', size=1))
        p.set_global('_alistfilenotfou', op.var(elements=2, name=u'_aListFileNotFou', offset=1, segment=u'dseg', size=1))
        p.set_global('_alistserverarboliver_s', op.var(elements=0, name=u'_aListserverarboliver_s', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloadingmodule', op.var(name=u'_aLoadingModule', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloopmodule', op.var(name=u'_aLoopModule', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloopmodule_0', op.var(elements=0, name=u'_aLoopModule_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_aloopmodulewhendone', op.var(elements=0, name=u'_aLoopModuleWhenDone', offset=1, segment=u'dseg', size=1))
        p.set_global('_alooppattern', op.var(elements=0, name=u'_aLoopPattern', offset=1, segment=u'dseg', size=1))
        p.set_global('_am_k_', op.var(elements=0, name=u'_aM_k_', offset=1, segment=u'seg003', size=1))
        p.set_global('_amainvolume', op.var(elements=0, name=u'_aMainVolume', offset=1, segment=u'dseg', size=1))
        p.set_global('_amarkedtodelete', op.var(name=u'_aMarkedToDelete', offset=1, segment=u'dseg', size=1))
        p.set_global('_amarkfiletodelete', op.var(elements=0, name=u'_aMarkFileToDelete', offset=1, segment=u'dseg', size=1))
        p.set_global('_amas_utrack_v', op.var(elements=0, name=u'_aMas_utrack_v', offset=1, segment=u'seg003', size=1))
        p.set_global('_amixedat', op.var(name=u'_aMixedAt', offset=1, segment=u'seg003', size=1))
        p.set_global('_amk', op.var(elements=0, name=u'_aMK', offset=1, segment=u'seg003', size=1))
        p.set_global('_amk_0', op.var(elements=0, name=u'_aMK_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_amoduleiscorrupt', op.var(name=u'_aModuleIsCorrupt', offset=1, segment=u'dseg', size=1))
        p.set_global('_amoduleloaderro', op.var(elements=2, name=u'_aModuleLoadErro', offset=1, segment=u'dseg', size=1))
        p.set_global('_amodulenotfound', op.var(elements=2, name=u'_aModuleNotFound', offset=1, segment=u'dseg', size=1))
        p.set_global('_amoduletype_0', op.var(elements=0, name=u'_aModuleType_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_amount_of_x', op.var(name=u'_amount_of_x', offset=1, segment=u'dseg', size=2))
        p.set_global('_amplification', op.var(name=u'_amplification', offset=1, segment=u'seg003', size=2))
        p.set_global('_amtm', op.var(elements=0, name=u'_aMtm', offset=1, segment=u'seg003', size=1))
        p.set_global('_amute', op.var(name=u'_aMute', offset=1, segment=u'dseg', size=1))
        p.set_global('_amutechannel', op.var(elements=0, name=u'_aMuteChannel', offset=1, segment=u'dseg', size=1))
        p.set_global('_aname', op.var(elements=0, name=u'_aName', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotecut', op.var(name=u'_aNoteCut', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotedelay', op.var(name=u'_aNoteDelay', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughdram_0', op.var(name=u'_aNotEnoughDram_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughdramon', op.var(elements=3, name=u'_aNotEnoughDramOn', offset=1, segment=u'seg003', size=1))
        p.set_global('_anotenoughmemo_0', op.var(name=u'_aNotEnoughMemo_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughmemor', op.var(elements=2, name=u'_aNotEnoughMemor', offset=1, segment=u'dseg', size=1))
        p.set_global('_anotenoughmemory', op.var(elements=3, name=u'_aNotEnoughMemory', offset=1, segment=u'seg003', size=1))
        p.set_global('_antsc', op.var(name=u'_aNtsc', offset=1, segment=u'dseg', size=1))
        p.set_global('_aocta', op.var(elements=0, name=u'_aOcta', offset=1, segment=u'seg003', size=1))
        p.set_global('_apal', op.var(name=u'_aPal', offset=1, segment=u'dseg', size=1))
        p.set_global('_apatternbreak', op.var(name=u'_aPatternBreak', offset=1, segment=u'dseg', size=1))
        p.set_global('_apatterndelay', op.var(name=u'_aPatternDelay', offset=1, segment=u'dseg', size=1))
        p.set_global('_apause', op.var(elements=0, name=u'_aPause', offset=1, segment=u'dseg', size=1))
        p.set_global('_apchonker', op.var(name=u'_aPcHonker', offset=1, segment=u'dseg', size=1))
        p.set_global('_apchonker_0', op.var(name=u'_aPcHonker_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_apgdn', op.var(elements=0, name=u'_aPgdn', offset=1, segment=u'dseg', size=1))
        p.set_global('_apgup', op.var(elements=0, name=u'_aPgup', offset=1, segment=u'dseg', size=1))
        p.set_global('_aplayer13029521', op.var(elements=0, name=u'_aPlayer13029521', offset=1, segment=u'dseg', size=1))
        p.set_global('_aplayinginstereofree', op.var(elements=0, name=u'_aPlayingInStereoFree', offset=1, segment=u'dseg', size=1))
        p.set_global('_aplaypausloop', op.var(elements=0, name=u'_aPlaypausloop', offset=1, segment=u'dseg', size=1))
        p.set_global('_aportamentodown', op.var(name=u'_aPortamentoDown', offset=1, segment=u'dseg', size=1))
        p.set_global('_aportamentoup', op.var(name=u'_aPortamentoUp', offset=1, segment=u'dseg', size=1))
        p.set_global('_aportvolslide', op.var(name=u'_aPortVolslide', offset=1, segment=u'dseg', size=1))
        p.set_global('_apositionjump', op.var(name=u'_aPositionJump', offset=1, segment=u'dseg', size=1))
        p.set_global('_apress', op.var(elements=0, name=u'_aPress', offset=1, segment=u'dseg', size=1))
        p.set_global('_apressanykeytoreturn', op.var(name=u'_aPressAnyKeyToReturn', offset=1, segment=u'dseg', size=1))
        p.set_global('_apressf1forhelpqu', op.var(elements=0, name=u'_aPressF1ForHelpQu', offset=1, segment=u'dseg', size=1))
        p.set_global('_aproaudiospectr', op.var(name=u'_aProAudioSpectr', offset=1, segment=u'dseg', size=1))
        p.set_global('_aproaudiospectrum', op.var(name=u'_aProAudioSpectrum', offset=1, segment=u'seg003', size=1))
        p.set_global('_aprotracker1_0_0', op.var(elements=0, name=u'_aProtracker1_0_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_aprotracker1_0c', op.var(name=u'_aProtracker1_0C', offset=1, segment=u'dseg', size=1))
        p.set_global('_aprotracker1_0compat', op.var(elements=0, name=u'_aProtracker1_0Compat', offset=1, segment=u'dseg', size=1))
        p.set_global('_apsm', op.var(elements=0, name=u'_aPsm', offset=1, segment=u'seg003', size=1))
        p.set_global('_aquitiplay', op.var(elements=0, name=u'_aQuitIplay', offset=1, segment=u'dseg', size=1))
        p.set_global('_arealtimevumeters', op.var(elements=0, name=u'_aRealtimeVuMeters', offset=1, segment=u'dseg', size=1))
        p.set_global('_aretriggernote', op.var(name=u'_aRetriggerNote', offset=1, segment=u'dseg', size=1))
        p.set_global('_aretrigvolume', op.var(name=u'_aRetrigVolume', offset=1, segment=u'dseg', size=1))
        p.set_global('_areturntoplaymodeonl', op.var(elements=0, name=u'_aReturnToPlaymodeOnl', offset=1, segment=u'dseg', size=1))
        p.set_global('_asamplename', op.var(elements=0, name=u'_aSamplename', offset=1, segment=u'dseg', size=1))
        p.set_global('_asamplesused', op.var(elements=0, name=u'_aSamplesUsed', offset=1, segment=u'dseg', size=1))
        p.set_global('_ascream', op.var(elements=0, name=u'_aScream', offset=1, segment=u'seg003', size=1))
        p.set_global('_ascrm', op.var(elements=0, name=u'_aScrm', offset=1, segment=u'seg003', size=1))
        p.set_global('_ascrolllock', op.var(elements=0, name=u'_aScrolllock', offset=1, segment=u'dseg', size=1))
        p.set_global('_asdanesarbmarvels_hack', op.var(elements=0, name=u'_aSdanesarbmarvels_hack', offset=1, segment=u'dseg', size=1))
        p.set_global('_asendemailto', op.var(elements=0, name=u'_aSendEmailTo', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetamplify', op.var(name=u'_aSetAmplify', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetfilter', op.var(name=u'_aSetFilter', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetfinetune', op.var(name=u'_aSetFinetune', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetlooppoint', op.var(name=u'_aSetLoopPoint', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetpanning', op.var(name=u'_aSetPanning', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetsampleofs', op.var(name=u'_aSetSampleOfs', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetspeed', op.var(name=u'_aSetSpeed', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetspeedbpm', op.var(name=u'_aSetSpeedBpm', offset=1, segment=u'dseg', size=1))
        p.set_global('_asetstmspeed', op.var(name=u'_aSetStmSpeed', offset=1, segment=u'dseg', size=1))
        p.set_global('_ashell130295211', op.var(elements=0, name=u'_aShell130295211', offset=1, segment=u'dseg', size=1))
        p.set_global('_ashellingtooperating', op.var(elements=0, name=u'_aShellingToOperating', offset=1, segment=u'dseg', size=1))
        p.set_global('_asizevolmodec2t', op.var(name=u'_aSizeVolModeC2T', offset=1, segment=u'dseg', size=1))
        p.set_global('_asmprintf_tbl', op.var(name=u'_asmprintf_tbl', offset=1, segment=u'_text', size=2))
        p.set_global('_asomefunctionsof', op.var(elements=2, name=u'_aSomeFunctionsOf', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoundblaster', op.var(name=u'_aSoundBlaster', offset=1, segment=u'dseg', size=1))
        p.set_global('_asoundblaster16', op.var(name=u'_aSoundBlaster16', offset=1, segment=u'dseg', size=1))
        p.set_global('_asoundblaster1616', op.var(name=u'_aSoundBlaster1616', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoundblaster_0', op.var(name=u'_aSoundBlaster_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoundblasterpr', op.var(name=u'_aSoundBlasterPr', offset=1, segment=u'dseg', size=1))
        p.set_global('_asoundblasterpro', op.var(name=u'_aSoundBlasterPro', offset=1, segment=u'seg003', size=1))
        p.set_global('_asoyouwantedsomehelp', op.var(elements=0, name=u'_aSoYouWantedSomeHelp', offset=1, segment=u'dseg', size=1))
        p.set_global('_aspeed', op.var(elements=0, name=u'_aSpeed', offset=1, segment=u'dseg', size=1))
        p.set_global('_astereoon1', op.var(name=u'_aStereoOn1', offset=1, segment=u'dseg', size=1))
        p.set_global('_astereoon1_0', op.var(name=u'_aStereoOn1_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_asubscribeinertialis', op.var(elements=0, name=u'_aSubscribeInertiaLis', offset=1, segment=u'dseg', size=1))
        p.set_global('_asubscribeinertiatal', op.var(name=u'_aSubscribeInertiaTal', offset=1, segment=u'dseg', size=1))
        p.set_global('_atab', op.var(elements=0, name=u'_aTab', offset=1, segment=u'dseg', size=1))
        p.set_global('_atab_0', op.var(elements=0, name=u'_aTab_0', offset=1, segment=u'dseg', size=1))
        p.set_global('_atdz', op.var(elements=0, name=u'_aTdz', offset=1, segment=u'seg003', size=1))
        p.set_global('_athe', op.var(elements=0, name=u'_aThe', offset=1, segment=u'dseg', size=1))
        p.set_global('_athishelpscreenbutig', op.var(elements=0, name=u'_aThisHelpScreenButIG', offset=1, segment=u'dseg', size=1))
        p.set_global('_athisprogramrequ', op.var(elements=3, name=u'_aThisProgramRequ', offset=1, segment=u'seg003', size=1))
        p.set_global('_atoconnecttobinaryin', op.var(elements=0, name=u'_aToConnectToBinaryIn', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoconnecttodiscussi', op.var(elements=0, name=u'_aToConnectToDiscussi', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoggle24bitint', op.var(name=u'_aToggle24bitInt', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoggle24bitinterpol', op.var(elements=0, name=u'_aToggle24bitInterpol', offset=1, segment=u'dseg', size=1))
        p.set_global('_atogglepalntsc', op.var(name=u'_aTogglePalNtsc', offset=1, segment=u'dseg', size=1))
        p.set_global('_atogglequickreadingo', op.var(elements=0, name=u'_aToggleQuickreadingO', offset=1, segment=u'dseg', size=1))
        p.set_global('_atomovethehighlighte', op.var(elements=0, name=u'_aToMoveTheHighlighte', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoneportamento', op.var(name=u'_aTonePortamento', offset=1, segment=u'dseg', size=1))
        p.set_global('_atop_title', op.var(name=u'_atop_title', offset=1, segment=u'dseg', size=2))
        p.set_global('_atoplaythemoduleorse', op.var(elements=0, name=u'_aToPlayTheModuleOrSe', offset=1, segment=u'dseg', size=1))
        p.set_global('_atoreturnto', op.var(elements=0, name=u'_aToReturnTo', offset=1, segment=u'dseg', size=1))
        p.set_global('_atosubscribetooneorb', op.var(elements=0, name=u'_aToSubscribeToOneOrB', offset=1, segment=u'dseg', size=1))
        p.set_global('_atrackposition', op.var(elements=0, name=u'_aTrackPosition', offset=1, segment=u'dseg', size=1))
        p.set_global('_atremolo', op.var(name=u'_aTremolo', offset=1, segment=u'dseg', size=1))
        p.set_global('_atremolocontrol', op.var(name=u'_aTremoloControl', offset=1, segment=u'dseg', size=1))
        p.set_global('_atremor', op.var(name=u'_aTremor', offset=1, segment=u'dseg', size=1))
        p.set_global('_atriller', op.var(name=u'_aTriller', offset=1, segment=u'dseg', size=1))
        p.set_global('_atype', op.var(elements=0, name=u'_aType', offset=1, segment=u'dseg', size=1))
        p.set_global('_aunused256', op.var(elements=0, name=u'_aUnused256', offset=1, segment=u'dseg', size=1))
        p.set_global('_ause', op.var(elements=0, name=u'_aUse', offset=1, segment=u'dseg', size=1))
        p.set_global('_avibrato', op.var(name=u'_aVibrato', offset=1, segment=u'dseg', size=1))
        p.set_global('_avibratocontrol', op.var(name=u'_aVibratoControl', offset=1, segment=u'dseg', size=1))
        p.set_global('_avibrvolslide', op.var(name=u'_aVibrVolslide', offset=1, segment=u'dseg', size=1))
        p.set_global('_aviewsamplenamestwic', op.var(elements=0, name=u'_aViewSampleNamesTwic', offset=1, segment=u'dseg', size=1))
        p.set_global('_avolumeamplify', op.var(elements=0, name=u'_aVolumeAmplify', offset=1, segment=u'dseg', size=1))
        p.set_global('_avolumechange', op.var(name=u'_aVolumeChange', offset=1, segment=u'dseg', size=1))
        p.set_global('_avolumesliding', op.var(name=u'_aVolumeSliding', offset=1, segment=u'dseg', size=1))
        p.set_global('_awhichiswrittenin', op.var(elements=0, name=u'_aWhichIsWrittenIn', offset=1, segment=u'dseg', size=1))
        p.set_global('_awindowssoundsy', op.var(name=u'_aWindowsSoundSy', offset=1, segment=u'dseg', size=1))
        p.set_global('_awindowssoundsyst', op.var(name=u'_aWindowsSoundSyst', offset=1, segment=u'seg003', size=1))
        p.set_global('_axpressf4formor', op.var(elements=0, name=u'_aXpressF4ForMor', offset=1, segment=u'dseg', size=1))
        p.set_global('_base_port2', op.var(name=u'_base_port2', offset=1, segment=u'seg003', size=2))
        p.set_global('_bit_mode', op.var(name=u'_bit_mode', offset=1, segment=u'seg003', size=1))
        p.set_global('_bottom_menu', op.var(name=u'_bottom_menu', offset=1, segment=u'dseg', size=2))
        p.set_global('_bss', op.var(name=u'_bss', offset=1, issegment=True, segment='', size=1))
        p.set_global('_buffer_1', op.var(elements=512, name=u'_buffer_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_1db6c', op.var(elements=128, name=u'_buffer_1DB6C', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_1dbec', op.var(name=u'_buffer_1DBEC', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_1dc6c', op.var(name=u'_buffer_1DC6C', offset=1, segment=u'dseg', size=4))
        p.set_global('_buffer_1seg', op.var(name=u'_buffer_1seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_buffer_2', op.var(elements=10240, name=u'_buffer_2', offset=1, segment=u'dseg', size=1))
        p.set_global('_buffer_2seg', op.var(name=u'_buffer_2seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_byte_11c29', op.var(name=u'_byte_11C29', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_13c54', op.var(elements=14, name=u'_byte_13C54', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f70', op.var(name=u'_byte_14F70', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f71', op.var(name=u'_byte_14F71', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f72', op.var(name=u'_byte_14F72', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_14f73', op.var(name=u'_byte_14F73', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_158b4', op.var(name=u'_byte_158B4', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_158e3', op.var(name=u'_byte_158E3', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15912', op.var(name=u'_byte_15912', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15941', op.var(name=u'_byte_15941', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15970', op.var(name=u'_byte_15970', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1599f', op.var(name=u'_byte_1599F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_159ce', op.var(name=u'_byte_159CE', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_159fd', op.var(name=u'_byte_159FD', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15a2c', op.var(name=u'_byte_15A2C', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15a5b', op.var(name=u'_byte_15A5B', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15a8a', op.var(name=u'_byte_15A8A', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15ab9', op.var(name=u'_byte_15AB9', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15ae8', op.var(name=u'_byte_15AE8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15b17', op.var(name=u'_byte_15B17', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15b46', op.var(name=u'_byte_15B46', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15b81', op.var(name=u'_byte_15B81', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15bad', op.var(name=u'_byte_15BAD', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15bda', op.var(name=u'_byte_15BDA', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c07', op.var(name=u'_byte_15C07', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c34', op.var(name=u'_byte_15C34', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c61', op.var(name=u'_byte_15C61', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15c8e', op.var(name=u'_byte_15C8E', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15cbb', op.var(name=u'_byte_15CBB', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15ce8', op.var(name=u'_byte_15CE8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d15', op.var(name=u'_byte_15D15', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d42', op.var(name=u'_byte_15D42', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d6f', op.var(name=u'_byte_15D6F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15d9c', op.var(name=u'_byte_15D9C', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15dc9', op.var(name=u'_byte_15DC9', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15df6', op.var(name=u'_byte_15DF6', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_15e23', op.var(name=u'_byte_15E23', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16379', op.var(name=u'_byte_16379', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_163a8', op.var(name=u'_byte_163A8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_163d7', op.var(name=u'_byte_163D7', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16406', op.var(name=u'_byte_16406', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16435', op.var(name=u'_byte_16435', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16493', op.var(name=u'_byte_16493', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_164c2', op.var(name=u'_byte_164C2', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_164f1', op.var(name=u'_byte_164F1', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16520', op.var(name=u'_byte_16520', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1654f', op.var(name=u'_byte_1654F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1657e', op.var(name=u'_byte_1657E', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_165dc', op.var(name=u'_byte_165DC', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1660b', op.var(name=u'_byte_1660B', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16646', op.var(name=u'_byte_16646', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16672', op.var(name=u'_byte_16672', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1669f', op.var(name=u'_byte_1669F', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_166cc', op.var(name=u'_byte_166CC', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_166f9', op.var(name=u'_byte_166F9', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16726', op.var(name=u'_byte_16726', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16753', op.var(name=u'_byte_16753', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16780', op.var(name=u'_byte_16780', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_167ad', op.var(name=u'_byte_167AD', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_167da', op.var(name=u'_byte_167DA', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16807', op.var(name=u'_byte_16807', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16834', op.var(name=u'_byte_16834', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_16861', op.var(name=u'_byte_16861', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1688e', op.var(name=u'_byte_1688E', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_168bb', op.var(name=u'_byte_168BB', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_168e8', op.var(name=u'_byte_168E8', offset=1, segment=u'_text', size=1))
        p.set_global('_byte_1c1b8', op.var(name=u'_byte_1C1B8', offset=1, segment=u'seg001', size=1))
        p.set_global('_byte_1cceb', op.var(name=u'_byte_1CCEB', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1d616', op.var(name=u'_byte_1D616', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1d66b', op.var(name=u'_byte_1D66B', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dc0a', op.var(elements=98, name=u'_byte_1DC0A', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dc7c', op.var(elements=112, name=u'_byte_1DC7C', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dcf7', op.var(name=u'_byte_1DCF7', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dcf8', op.var(name=u'_byte_1DCF8', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dcfb', op.var(name=u'_byte_1DCFB', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1dd3f', op.var(elements=69, name=u'_byte_1DD3F', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de70', op.var(name=u'_byte_1DE70', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de71', op.var(name=u'_byte_1DE71', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de72', op.var(name=u'_byte_1DE72', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de73', op.var(name=u'_byte_1DE73', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de74', op.var(name=u'_byte_1DE74', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de75', op.var(name=u'_byte_1DE75', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de76', op.var(name=u'_byte_1DE76', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de78', op.var(name=u'_byte_1DE78', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de79', op.var(name=u'_byte_1DE79', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7a', op.var(name=u'_byte_1DE7A', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7b', op.var(name=u'_byte_1DE7B', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7c', op.var(name=u'_byte_1DE7C', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7d', op.var(name=u'_byte_1DE7D', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7e', op.var(name=u'_byte_1DE7E', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de7f', op.var(name=u'_byte_1DE7F', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de81', op.var(name=u'_byte_1DE81', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de82', op.var(name=u'_byte_1DE82', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de83', op.var(name=u'_byte_1DE83', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de84', op.var(name=u'_byte_1DE84', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de85', op.var(name=u'_byte_1DE85', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de86', op.var(name=u'_byte_1DE86', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1de90', op.var(name=u'_byte_1DE90', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1e0e0', op.var(elements=1979, name=u'_byte_1E0E0', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_1e89b', op.var(elements=7748, name=u'_byte_1E89B', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_22ee4', op.var(elements=4096, name=u'_byte_22EE4', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_23ee5', op.var(elements=99, name=u'_byte_23EE5', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_23f48', op.var(elements=300, name=u'_byte_23F48', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_24075', op.var(elements=99, name=u'_byte_24075', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_240d8', op.var(elements=300, name=u'_byte_240D8', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_24204', op.var(elements=512, name=u'_byte_24204', offset=1, segment=u'dseg', size=1))
        p.set_global('_byte_24616', op.var(name=u'_byte_24616', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24617', op.var(name=u'_byte_24617', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24618', op.var(name=u'_byte_24618', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24619', op.var(name=u'_byte_24619', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461a', op.var(name=u'_byte_2461A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461b', op.var(name=u'_byte_2461B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461c', op.var(name=u'_byte_2461C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461d', op.var(name=u'_byte_2461D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461e', op.var(name=u'_byte_2461E', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2461f', op.var(name=u'_byte_2461F', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24620', op.var(name=u'_byte_24620', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24621', op.var(name=u'_byte_24621', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24625', op.var(name=u'_byte_24625', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24628', op.var(name=u'_byte_24628', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24629', op.var(name=u'_byte_24629', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2462b', op.var(name=u'_byte_2462B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2462d', op.var(name=u'_byte_2462D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2463b', op.var(name=u'_byte_2463B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24645', op.var(name=u'_byte_24645', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2464a', op.var(name=u'_byte_2464A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2464b', op.var(name=u'_byte_2464B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24650', op.var(name=u'_byte_24650', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24651', op.var(name=u'_byte_24651', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24664', op.var(name=u'_byte_24664', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24665', op.var(name=u'_byte_24665', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24666', op.var(name=u'_byte_24666', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24667', op.var(name=u'_byte_24667', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24668', op.var(name=u'_byte_24668', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24669', op.var(name=u'_byte_24669', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466a', op.var(name=u'_byte_2466A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466b', op.var(name=u'_byte_2466B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466c', op.var(name=u'_byte_2466C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466d', op.var(name=u'_byte_2466D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2466e', op.var(name=u'_byte_2466E', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24671', op.var(name=u'_byte_24671', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24673', op.var(name=u'_byte_24673', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24674', op.var(name=u'_byte_24674', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24675', op.var(name=u'_byte_24675', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24676', op.var(name=u'_byte_24676', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24677', op.var(name=u'_byte_24677', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24678', op.var(name=u'_byte_24678', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24679', op.var(name=u'_byte_24679', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467a', op.var(name=u'_byte_2467A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467b', op.var(name=u'_byte_2467B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467c', op.var(name=u'_byte_2467C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467d', op.var(name=u'_byte_2467D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2467e', op.var(name=u'_byte_2467E', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24682', op.var(name=u'_byte_24682', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_24683', op.var(name=u'_byte_24683', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2469b', op.var(name=u'_byte_2469B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2469c', op.var(name=u'_byte_2469C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246a5', op.var(name=u'_byte_246A5', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246a8', op.var(name=u'_byte_246A8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246d8', op.var(name=u'_byte_246D8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246d9', op.var(name=u'_byte_246D9', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_246dc', op.var(name=u'_byte_246DC', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257da', op.var(name=u'_byte_257DA', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257db', op.var(name=u'_byte_257DB', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257dc', op.var(name=u'_byte_257DC', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257f2', op.var(name=u'_byte_257F2', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_257f3', op.var(name=u'_byte_257F3', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2588b', op.var(name=u'_byte_2588B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2588c', op.var(name=u'_byte_2588C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_2588d', op.var(name=u'_byte_2588D', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_27fe8', op.var(elements=255, name=u'_byte_27FE8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_280e7', op.var(name=u'_byte_280E7', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_280e8', op.var(elements=256, name=u'_byte_280E8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_281e8', op.var(elements=256, name=u'_byte_281E8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_282e8', op.var(elements=32, name=u'_byte_282E8', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30522', op.var(name=u'_byte_30522', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30523', op.var(name=u'_byte_30523', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30526', op.var(name=u'_byte_30526', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30529', op.var(name=u'_byte_30529', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30537', op.var(name=u'_byte_30537', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30539', op.var(name=u'_byte_30539', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3053a', op.var(name=u'_byte_3053A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3053b', op.var(name=u'_byte_3053B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30548', op.var(name=u'_byte_30548', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3054b', op.var(name=u'_byte_3054B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3054c', op.var(name=u'_byte_3054C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30550', op.var(name=u'_byte_30550', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30576', op.var(name=u'_byte_30576', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30577', op.var(name=u'_byte_30577', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30579', op.var(elements=33, name=u'_byte_30579', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3059a', op.var(elements=95, name=u'_byte_3059A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_305f9', op.var(elements=64, name=u'_byte_305F9', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30639', op.var(name=u'_byte_30639', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3063a', op.var(name=u'_byte_3063A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30641', op.var(elements=40, name=u'_byte_30641', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30669', op.var(name=u'_byte_30669', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3066a', op.var(name=u'_byte_3066A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3066b', op.var(elements=14, name=u'_byte_3066B', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30679', op.var(elements=101, name=u'_byte_30679', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_306de', op.var(elements=480, name=u'_byte_306DE', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_308be', op.var(elements=74, name=u'_byte_308BE', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30908', op.var(elements=56, name=u'_byte_30908', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30940', op.var(name=u'_byte_30940', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_30943', op.var(name=u'_byte_30943', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3150a', op.var(name=u'_byte_3150A', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_3150c', op.var(elements=2044, name=u'_byte_3150C', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_31d08', op.var(elements=6144, name=u'_byte_31D08', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_33508', op.var(elements=4104, name=u'_byte_33508', offset=1, segment=u'seg003', size=1))
        p.set_global('_byte_34510', op.var(elements=4096, name=u'_byte_34510', offset=1, segment=u'seg004', size=1))
        p.set_global('_cfg_buffer', op.var(name=u'_cfg_buffer', offset=1, segment=u'dseg', size=1))
        p.set_global('_channels_25908', op.var(elements=2560, name=u'_channels_25908', offset=1, segment=u'seg003', size=1))
        p.set_global('_chrin', op.var(name=u'_chrin', offset=1, segment=u'seg003', size=4))
        p.set_global('_config_word', op.var(name=u'_config_word', offset=1, segment=u'seg003', size=2))
        p.set_global('_configword', op.var(name=u'_configword', offset=1, segment=u'dseg', size=2))
        p.set_global('_covox_txt', op.var(name=u'_covox_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_critsectpoint_off', op.var(name=u'_critsectpoint_off', offset=1, segment=u'dseg', size=2))
        p.set_global('_critsectpoint_seg', op.var(name=u'_critsectpoint_seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_current_patterns', op.var(name=u'_current_patterns', offset=1, segment=u'dseg', size=2))
        #p.set_global('_data', op.var(name=u'_data', offset=1, issegment=True, segment='', size=1))
        p.set_global('_dma_buf_pointer', op.var(name=u'_dma_buf_pointer', offset=1, segment=u'seg003', size=4))
        p.set_global('_dma_channel', op.var(name=u'_dma_channel', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_channel2', op.var(name=u'_dma_channel2', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_channel_0', op.var(name=u'_dma_channel_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_channel_1', op.var(name=u'_dma_channel_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_dma_chn_mask', op.var(name=u'_dma_chn_mask', offset=1, segment=u'seg003', size=1))
        p.set_global('_dma_mode', op.var(name=u'_dma_mode', offset=1, segment=u'seg003', size=1))
        p.set_global('_dword_1dcec', op.var(name=u'_dword_1DCEC', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_1de2c', op.var(name=u'_dword_1DE2C', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_1de88', op.var(name=u'_dword_1DE88', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244c8', op.var(name=u'_dword_244C8', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244d4', op.var(name=u'_dword_244D4', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244e4', op.var(name=u'_dword_244E4', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244e8', op.var(name=u'_dword_244E8', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244ec', op.var(name=u'_dword_244EC', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244f0', op.var(name=u'_dword_244F0', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244f4', op.var(name=u'_dword_244F4', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244f8', op.var(name=u'_dword_244F8', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_244fc', op.var(name=u'_dword_244FC', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_24500', op.var(name=u'_dword_24500', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_24504', op.var(name=u'_dword_24504', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_24508', op.var(name=u'_dword_24508', offset=1, segment=u'dseg', size=4))
        p.set_global('_dword_245bc', op.var(name=u'_dword_245BC', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_245c0', op.var(name=u'_dword_245C0', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_245c4', op.var(name=u'_dword_245C4', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_2463c', op.var(name=u'_dword_2463C', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_24640', op.var(name=u'_dword_24640', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_24684', op.var(name=u'_dword_24684', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_24694', op.var(name=u'_dword_24694', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_257a0', op.var(name=u'_dword_257A0', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_25886', op.var(name=u'_dword_25886', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_25892', op.var(name=u'_dword_25892', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_25896', op.var(name=u'_dword_25896', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_27bc8', op.var(name=u'_dword_27BC8', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_27bcc', op.var(name=u'_dword_27BCC', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_30518', op.var(name=u'_dword_30518', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_3055a', op.var(name=u'_dword_3055A', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_30566', op.var(name=u'_dword_30566', offset=1, segment=u'seg003', size=4))
        p.set_global('_dword_3063d', op.var(name=u'_dword_3063D', offset=1, segment=u'seg003', size=4))
        p.set_global('_effoff_18f60', op.var(name=u'_effoff_18F60', offset=1, segment=u'_text', size=2))
        p.set_global('_effoff_18fa2', op.var(name=u'_effoff_18FA2', offset=1, segment=u'_text', size=2))
        p.set_global('_effoff_18fe4', op.var(name=u'_effoff_18FE4', offset=1, segment=u'_text', size=2))
        p.set_global('_effoff_19026', op.var(name=u'_effoff_19026', offset=1, segment=u'_text', size=2))
        p.set_global('_eh_frame', op.var(name=u'_eh_frame', offset=1, issegment=True, segment='', size=1))
        p.set_global('_emodulenotfound', op.var(elements=3, name=u'_eModuleNotFound', offset=1, segment=u'seg003', size=1))
        p.set_global('_ems_enabled', op.var(name=u'_ems_enabled', offset=1, segment=u'seg003', size=1))
        p.set_global('_ems_handle', op.var(name=u'_ems_handle', offset=1, segment=u'seg003', size=2))
        p.set_global('_ems_log_pagenum', op.var(name=u'_ems_log_pagenum', offset=1, segment=u'seg003', size=2))
        p.set_global('_ems_pageframe', op.var(name=u'_ems_pageframe', offset=1, segment=u'seg003', size=2))
        p.set_global('_esseg_atstart', op.var(name=u'_esseg_atstart', offset=1, segment=u'dseg', size=2))
        p.set_global('_f1_help_text', op.var(name=u'_f1_help_text', offset=1, segment=u'dseg', size=2))
        p.set_global('_fhandle_1de68', op.var(name=u'_fhandle_1DE68', offset=1, segment=u'dseg', size=2))
        p.set_global('_fhandle_module', op.var(name=u'_fhandle_module', offset=1, segment=u'seg003', size=2))
        p.set_global('_flag_playsetttings', op.var(name=u'_flag_playsetttings', offset=1, segment=u'seg003', size=1))
        p.set_global('_flg_play_settings', op.var(name=u'_flg_play_settings', offset=1, segment=u'dseg', size=1))
        p.set_global('_fmode', op.var(name=u'_fmode', offset=1, segment=u'_bss', size=4))
        p.set_global('_frameborder', op.var(name=u'_frameborder', offset=1, segment=u'dseg', size=1))
        p.set_global('_freq1', op.var(name=u'_freq1', offset=1, segment=u'seg003', size=2))
        p.set_global('_freq2', op.var(name=u'_freq2', offset=1, segment=u'seg003', size=2))
        p.set_global('_freq_1dcf6', op.var(name=u'_freq_1DCF6', offset=1, segment=u'dseg', size=1))
        p.set_global('_freq_245de', op.var(name=u'_freq_245DE', offset=1, segment=u'seg003', size=2))
        p.set_global('_freq_246d7', op.var(name=u'_freq_246D7', offset=1, segment=u'seg003', size=1))
        p.set_global('_gravis_port', op.var(name=u'_gravis_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_gravis_txt', op.var(name=u'_gravis_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_hopeyoulike', op.var(name=u'_hopeyoulike', offset=1, segment=u'dseg', size=2))
        p.set_global('_int1avect', op.var(name=u'_int1Avect', offset=1, segment=u'seg001', size=4))
        p.set_global('_int8addr', op.var(name=u'_int8addr', offset=1, segment=u'_text', size=4))
        p.set_global('_interrupt_mask', op.var(name=u'_interrupt_mask', offset=1, segment=u'seg003', size=2))
        p.set_global('_intvectoffset', op.var(name=u'_intvectoffset', offset=1, segment=u'seg003', size=2))
        p.set_global('_irq_number', op.var(name=u'_irq_number', offset=1, segment=u'seg003', size=1))
        p.set_global('_irq_number2', op.var(name=u'_irq_number2', offset=1, segment=u'seg003', size=1))
        p.set_global('_irq_number_0', op.var(name=u'_irq_number_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_irq_number_1', op.var(name=u'_irq_number_1', offset=1, segment=u'dseg', size=1))
        p.set_global('_is_stereo', op.var(name=u'_is_stereo', offset=1, segment=u'seg003', size=1))
        p.set_global('_key_code', op.var(name=u'_key_code', offset=1, segment=u'seg001', size=2))
        p.set_global('_keyb_switches', op.var(name=u'_keyb_switches', offset=1, segment=u'seg001', size=2))
        p.set_global('_memflg_2469a', op.var(name=u'_memflg_2469A', offset=1, segment=u'seg003', size=1))
        p.set_global('_messagepointer', op.var(name=u'_messagepointer', offset=1, segment=u'dseg', size=4))
        p.set_global('_midi_txt', op.var(name=u'_midi_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_mod_channels_number', op.var(name=u'_mod_channels_number', offset=1, segment=u'seg003', size=2))
        p.set_global('_module_type_text', op.var(name=u'_module_type_text', offset=1, segment=u'seg003', size=4))
        p.set_global('_module_type_txt', op.var(elements=0, name=u'_module_type_txt', offset=1, segment=u'dseg', size=1))
        p.set_global('_moduleflag_246d0', op.var(name=u'_moduleflag_246D0', offset=1, segment=u'seg003', size=2))
        p.set_global('_mouse_exist_flag', op.var(name=u'_mouse_exist_flag', offset=1, segment=u'dseg', size=1))
        p.set_global('_mouse_visible', op.var(elements=10, name=u'_mouse_visible', offset=1, segment=u'dseg', size=1))
        p.set_global('_mousecolumn', op.var(name=u'_mousecolumn', offset=1, segment=u'dseg', size=2))
        p.set_global('_mouserow', op.var(name=u'_mouserow', offset=1, segment=u'dseg', size=2))
        p.set_global('_msg', op.var(elements=2, name=u'_msg', offset=1, segment=u'_data', size=1))
        #p.set_global('_msg', op.var(name=u'_msg', offset=1, segment=u'dseg', size=1))
        p.set_global('_multip_244cc', op.var(name=u'_multip_244CC', offset=1, segment=u'dseg', size=4))
        p.set_global('_multip_244d0', op.var(name=u'_multip_244D0', offset=1, segment=u'dseg', size=4))
        p.set_global('_my_in', op.var(name=u'_my_in', offset=1, segment=u'seg003', size=1))
        p.set_global('_my_seg_index', op.var(name=u'_my_seg_index', offset=1, segment=u'seg003', size=2))
        p.set_global('_my_size', op.var(name=u'_my_size', offset=1, segment=u'seg003', size=2))
        p.set_global('_myendl', op.var(elements=2, name=u'_myendl', offset=1, segment=u'dseg', size=1))
        p.set_global('_myin', op.var(name=u'_myin', offset=1, segment=u'seg003', size=4))
        p.set_global('_myin_0', op.var(name=u'_myin_0', offset=1, segment=u'seg003', size=1))
        p.set_global('_myout', op.var(elements=6336, name=u'_myout', offset=1, segment=u'seg003', size=1))
        p.set_global('_myseg_24698', op.var(name=u'_myseg_24698', offset=1, segment=u'seg003', size=2))
        p.set_global('_myseg_size', op.var(elements=256, name=u'_myseg_size', offset=1, segment=u'seg003', size=2))
        p.set_global('_mystr', op.var(elements=66, name=u'_mystr', offset=1, segment=u'dseg', size=1))
        p.set_global('_notes', op.var(elements=0, name=u'_notes', offset=1, segment=u'dseg', size=1))
        p.set_global('_offs_draw', op.var(name=u'_offs_draw', offset=1, segment=u'dseg', size=2))
        p.set_global('_offs_draw2', op.var(name=u'_offs_draw2', offset=1, segment=u'dseg', size=2))
        p.set_global('_offs_interpol', op.var(name=u'_offs_interpol', offset=1, segment=u'_text', size=2))
        p.set_global('_offs_interpol2', op.var(name=u'_offs_interpol2', offset=1, segment=u'_text', size=2))
        p.set_global('_offs_noninterp', op.var(name=u'_offs_noninterp', offset=1, segment=u'_text', size=2))
        p.set_global('_offs_noninterp2', op.var(name=u'_offs_noninterp2', offset=1, segment=u'_text', size=2))
        p.set_global('_oint24_1c1ac', op.var(name=u'_oint24_1C1AC', offset=1, segment=u'seg001', size=4))
        p.set_global('_oint2f_1c1b4', op.var(name=u'_oint2f_1C1B4', offset=1, segment=u'seg001', size=4))
        p.set_global('_oint8off_1de14', op.var(name=u'_oint8off_1DE14', offset=1, segment=u'dseg', size=2))
        p.set_global('_oint8seg_1de16', op.var(name=u'_oint8seg_1DE16', offset=1, segment=u'dseg', size=2))
        p.set_global('_oint9_1c1a4', op.var(name=u'_oint9_1C1A4', offset=1, segment=u'seg001', size=4))
        p.set_global('_old_intprocoffset', op.var(name=u'_old_intprocoffset', offset=1, segment=u'seg003', size=2))
        p.set_global('_old_intprocseg', op.var(name=u'_old_intprocseg', offset=1, segment=u'seg003', size=2))
        p.set_global('_outp_freq', op.var(name=u'_outp_freq', offset=1, segment=u'dseg', size=2))
        p.set_global('_palette_24404', op.var(name=u'_palette_24404', offset=1, segment=u'dseg', size=1))
        p.set_global('_pc_timer_tbl', op.var(elements=13, name=u'_pc_timer_tbl', offset=1, segment=u'_text', size=1))
        p.set_global('_pcspeaker_txt', op.var(name=u'_pcspeaker_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_play_state', op.var(name=u'_play_state', offset=1, segment=u'seg003', size=1))
        p.set_global('_pointer_245b4', op.var(name=u'_pointer_245B4', offset=1, segment=u'seg003', size=4))
        p.set_global('_prev_scan_code', op.var(name=u'_prev_scan_code', offset=1, segment=u'seg001', size=1))
        p.set_global('_rdata', op.var(name=u'_rdata', offset=1, issegment=True, segment='', size=1))
        p.set_global('_s3mtable_108d6', op.var(elements=13, name=u'_s3mtable_108D6', offset=1, segment=u'_text', size=1))
        p.set_global('_s3mtable_108f0', op.var(elements=15, name=u'_s3mtable_108F0', offset=1, segment=u'_text', size=1))
        p.set_global('_samples_outoffs_24600', op.var(name=u'_samples_outoffs_24600', offset=1, segment=u'seg003', size=2))
        p.set_global('_savesp_245d0', op.var(name=u'_savesp_245D0', offset=1, segment=u'seg003', size=2))
        p.set_global('_sb16_txt', op.var(name=u'_sb16_txt', offset=1, segment=u'seg003', size=1))
        p.set_global('_sb_base_port', op.var(name=u'_sb_base_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_sb_int_counter', op.var(name=u'_sb_int_counter', offset=1, segment=u'seg003', size=1))
        p.set_global('_sb_irq_number', op.var(name=u'_sb_irq_number', offset=1, segment=u'seg003', size=1))
        p.set_global('_sb_timeconst', op.var(name=u'_sb_timeconst', offset=1, segment=u'seg003', size=1))
        p.set_global('_segfsbx_1de28', op.var(name=u'_segfsbx_1DE28', offset=1, segment=u'dseg', size=4))
        p.set_global('_segs_table', op.var(elements=256, name=u'_segs_table', offset=1, segment=u'seg003', size=2))
        p.set_global('_siplay_cfg', op.var(name=u'_sIplay_cfg', offset=1, segment=u'dseg', size=1))
        p.set_global('_slider', op.var(elements=0, name=u'_slider', offset=1, segment=u'dseg', size=1))
        p.set_global('_snd_base_port', op.var(name=u'_snd_base_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_snd_base_port_0', op.var(name=u'_snd_base_port_0', offset=1, segment=u'dseg', size=2))
        p.set_global('_snd_card_type', op.var(name=u'_snd_card_type', offset=1, segment=u'dseg', size=1))
        p.set_global('_snd_cards_offs', op.var(name=u'_snd_cards_offs', offset=1, segment=u'seg003', size=2))
        p.set_global('_snd_init', op.var(name=u'_snd_init', offset=1, segment=u'seg003', size=1))
        p.set_global('_snd_set_flag', op.var(name=u'_snd_set_flag', offset=1, segment=u'seg003', size=1))
        p.set_global('_sndcard_type', op.var(name=u'_sndcard_type', offset=1, segment=u'seg003', size=1))
        p.set_global('_sndflags_24622', op.var(name=u'_sndflags_24622', offset=1, segment=u'seg003', size=1))
        p.set_global('_sound_port', op.var(name=u'_sound_port', offset=1, segment=u'seg003', size=2))
        p.set_global('_swapdata_off', op.var(name=u'_swapdata_off', offset=1, segment=u'dseg', size=2))
        p.set_global('_swapdata_seg', op.var(name=u'_swapdata_seg', offset=1, segment=u'dseg', size=2))
        p.set_global('_table_13ec3', op.var(elements=16, name=u'_table_13EC3', offset=1, segment=u'_text', size=1))
        p.set_global('_table_14057', op.var(elements=13, name=u'_table_14057', offset=1, segment=u'_text', size=1))
        p.set_global('_table_246f6', op.var(elements=11, name=u'_table_246F6', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24716', op.var(elements=8, name=u'_table_24716', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24798', op.var(elements=8, name=u'_table_24798', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24818', op.var(elements=8, name=u'_table_24818', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_24898', op.var(elements=16, name=u'_table_24898', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_25118', op.var(elements=24, name=u'_table_25118', offset=1, segment=u'seg003', size=2))
        p.set_global('_table_251c0', op.var(elements=12, name=u'_table_251C0', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_251e0', op.var(elements=13, name=u'_table_251E0', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_25221', op.var(elements=14, name=u'_table_25221', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_25261', op.var(elements=14, name=u'_table_25261', offset=1, segment=u'seg003', size=1))
        p.set_global('_table_sndcrdname', op.var(name=u'_table_sndcrdname', offset=1, segment=u'dseg', size=2))
        p.set_global('_tabledword_24526', op.var(elements=10, name=u'_tabledword_24526', offset=1, segment=u'dseg', size=4))
        p.set_global('_tabledword_24562', op.var(elements=9, name=u'_tabledword_24562', offset=1, segment=u'dseg', size=4))
        p.set_global('_test_adc', op.var(name=u'_test_adc', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_add', op.var(name=u'_test_add', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_and', op.var(name=u'_test_and', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_bt', op.var(name=u'_test_bt', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_btc', op.var(name=u'_test_btc', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_btr', op.var(name=u'_test_btr', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_bts', op.var(name=u'_test_bts', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_cmp', op.var(name=u'_test_cmp', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_dec', op.var(name=u'_test_dec', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_inc', op.var(name=u'_test_inc', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_neg', op.var(name=u'_test_neg', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_not', op.var(name=u'_test_not', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_or', op.var(name=u'_test_or', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_rcl', op.var(name=u'_test_rcl', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_rcr', op.var(name=u'_test_rcr', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_rol', op.var(name=u'_test_rol', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_ror', op.var(name=u'_test_ror', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_sar', op.var(name=u'_test_sar', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_sbb', op.var(name=u'_test_sbb', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shl', op.var(name=u'_test_shl', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shld', op.var(name=u'_test_shld', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shr', op.var(name=u'_test_shr', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_shrd', op.var(name=u'_test_shrd', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_sub', op.var(name=u'_test_sub', offset=1, segment=u'initcall', size=4))
        p.set_global('_test_xor', op.var(name=u'_test_xor', offset=1, segment=u'initcall', size=4))
        p.set_global('_text', op.var(name=u'_text', offset=1, issegment=True, segment='', size=1))
        p.set_global('_timer_word_14f6e', op.var(name=u'_timer_word_14F6E', offset=1, segment=u'_text', size=2))
        p.set_global('_vga_palette', op.var(elements=3, name=u'_vga_palette', offset=1, segment=u'dseg', size=1))
        p.set_global('_videomempointer', op.var(name=u'_videomempointer', offset=1, segment=u'dseg', size=4))
        p.set_global('_videopoint_shiftd', op.var(name=u'_videopoint_shiftd', offset=1, segment=u'dseg', size=4))
        p.set_global('_vlm_byte_table', op.var(elements=33280, name=u'_vlm_byte_table', offset=1, segment=u'seg003', size=1))
        p.set_global('_volume_1de34', op.var(name=u'_volume_1DE34', offset=1, segment=u'dseg', size=4))
        p.set_global('_volume_245fc', op.var(name=u'_volume_245FC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_14913', op.var(name=u'_word_14913', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14bbb', op.var(name=u'_word_14BBB', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14ceb', op.var(name=u'_word_14CEB', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14fc0', op.var(name=u'_word_14FC0', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14fc5', op.var(name=u'_word_14FC5', offset=1, segment=u'_text', size=2))
        p.set_global('_word_14fc8', op.var(name=u'_word_14FC8', offset=1, segment=u'_text', size=2))
        p.set_global('_word_1504d', op.var(name=u'_word_1504D', offset=1, segment=u'_text', size=2))
        p.set_global('_word_15056', op.var(name=u'_word_15056', offset=1, segment=u'_text', size=2))
        p.set_global('_word_15126', op.var(name=u'_word_15126', offset=1, segment=u'_text', size=2))
        p.set_global('_word_1519b', op.var(name=u'_word_1519B', offset=1, segment=u'_text', size=2))
        p.set_global('_word_151a3', op.var(name=u'_word_151A3', offset=1, segment=u'_text', size=2))
        p.set_global('_word_1d26d', op.var(name=u'_word_1D26D', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1d3b0', op.var(name=u'_word_1D3B0', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1d614', op.var(name=u'_word_1D614', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1d669', op.var(name=u'_word_1D669', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de46', op.var(name=u'_word_1DE46', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de4a', op.var(name=u'_word_1DE4A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de4c', op.var(name=u'_word_1DE4C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de4e', op.var(name=u'_word_1DE4E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de50', op.var(name=u'_word_1DE50', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de52', op.var(name=u'_word_1DE52', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de54', op.var(name=u'_word_1DE54', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de56', op.var(name=u'_word_1DE56', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de58', op.var(name=u'_word_1DE58', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de5a', op.var(name=u'_word_1DE5A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de5c', op.var(name=u'_word_1DE5C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de5e', op.var(name=u'_word_1DE5E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de60', op.var(name=u'_word_1DE60', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de62', op.var(name=u'_word_1DE62', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de64', op.var(name=u'_word_1DE64', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de66', op.var(name=u'_word_1DE66', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de6a', op.var(name=u'_word_1DE6A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de6c', op.var(name=u'_word_1DE6C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_1de6e', op.var(name=u'_word_1DE6E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24445', op.var(name=u'_word_24445', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2450c', op.var(name=u'_word_2450C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2450e', op.var(name=u'_word_2450E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24514', op.var(name=u'_word_24514', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24516', op.var(name=u'_word_24516', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24518', op.var(name=u'_word_24518', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2451a', op.var(name=u'_word_2451A', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2451c', op.var(name=u'_word_2451C', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_2451e', op.var(name=u'_word_2451E', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24520', op.var(name=u'_word_24520', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24522', op.var(name=u'_word_24522', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_24524', op.var(name=u'_word_24524', offset=1, segment=u'dseg', size=2))
        p.set_global('_word_245d2', op.var(name=u'_word_245D2', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245d6', op.var(name=u'_word_245D6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245d8', op.var(name=u'_word_245D8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245da', op.var(name=u'_word_245DA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245dc', op.var(name=u'_word_245DC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245e4', op.var(name=u'_word_245E4', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245e8', op.var(name=u'_word_245E8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245ea', op.var(name=u'_word_245EA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245ec', op.var(name=u'_word_245EC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245ee', op.var(name=u'_word_245EE', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f0', op.var(name=u'_word_245F0', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f2', op.var(name=u'_word_245F2', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f6', op.var(name=u'_word_245F6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245f8', op.var(name=u'_word_245F8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_245fa', op.var(name=u'_word_245FA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24602', op.var(name=u'_word_24602', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2460c', op.var(name=u'_word_2460C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2460e', op.var(name=u'_word_2460E', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24610', op.var(name=u'_word_24610', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24614', op.var(name=u'_word_24614', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24630', op.var(name=u'_word_24630', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24632', op.var(name=u'_word_24632', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24634', op.var(name=u'_word_24634', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24636', op.var(name=u'_word_24636', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24646', op.var(name=u'_word_24646', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24654', op.var(name=u'_word_24654', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2465c', op.var(name=u'_word_2465C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24662', op.var(name=u'_word_24662', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2468c', op.var(name=u'_word_2468C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_246a6', op.var(name=u'_word_246A6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_246a9', op.var(name=u'_word_246A9', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_246de', op.var(elements=9, name=u'_word_246DE', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_24998', op.var(elements=9, name=u'_word_24998', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257a4', op.var(name=u'_word_257A4', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257e6', op.var(name=u'_word_257E6', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257e8', op.var(name=u'_word_257E8', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257ea', op.var(name=u'_word_257EA', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257ec', op.var(name=u'_word_257EC', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257ee', op.var(name=u'_word_257EE', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_257f0', op.var(name=u'_word_257F0', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_2588e', op.var(name=u'_word_2588E', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30515', op.var(name=u'_word_30515', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30520', op.var(name=u'_word_30520', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30524', op.var(name=u'_word_30524', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_3052a', op.var(name=u'_word_3052A', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_3052c', op.var(name=u'_word_3052C', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30532', op.var(name=u'_word_30532', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30552', op.var(name=u'_word_30552', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30554', op.var(name=u'_word_30554', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30556', op.var(name=u'_word_30556', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30562', op.var(name=u'_word_30562', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_30564', op.var(name=u'_word_30564', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_3063b', op.var(name=u'_word_3063B', offset=1, segment=u'seg003', size=2))
        p.set_global('_word_31508', op.var(name=u'_word_31508', offset=1, segment=u'seg003', size=2))
        p.set_global('_wss_freq_table', op.var(name=u'_wss_freq_table', offset=1, segment=u'_text', size=2))
        p.set_global('_wss_freq_table2', op.var(elements=12, name=u'_wss_freq_table2', offset=1, segment=u'_text', size=2))
        p.set_global('_x_storage', op.var(elements=17, name=u'_x_storage', offset=1, segment=u'dseg', size=2))
        p.set_global('a', op.var(elements=3, name=u'a', offset=1, segment=u'_data', size=1))
        #p.set_global('a', op.var(name=u'a', offset=1, segment=u'_data', size=1))
        p.set_global('a0x4000', op.var(name=u'a0x4000', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000eax', op.var(name=u'a0x4000Eax', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ebx', op.var(name=u'a0x4000Ebx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ebxedx', op.var(name=u'a0x4000EbxEdx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ecx', op.var(name=u'a0x4000Ecx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000ecxecx2', op.var(name=u'a0x4000EcxEcx2', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000edi', op.var(name=u'a0x4000Edi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000edx', op.var(name=u'a0x4000Edx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000edxecx4', op.var(name=u'a0x4000EdxEcx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000esi', op.var(name=u'a0x4000Esi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x4000esiecx8', op.var(name=u'a0x4000EsiEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40eax', op.var(name=u'a0x40Eax', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40eax2', op.var(name=u'a0x40Eax2', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40eaxecx', op.var(name=u'a0x40EaxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ebx', op.var(name=u'a0x40Ebx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ebx4', op.var(name=u'a0x40Ebx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ecx', op.var(name=u'a0x40Ecx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40ecx8', op.var(name=u'a0x40Ecx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40edi', op.var(name=u'a0x40Edi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40edx', op.var(name=u'a0x40Edx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a0x40esi', op.var(name=u'a0x40Esi', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10ecxecx2', op.var(name=u'a10EcxEcx2', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10edxecx4', op.var(name=u'a10EdxEcx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10esiecx8', op.var(name=u'a10EsiEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lx', op.var(elements=2, name=u'a10sA08lxB08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lxc', op.var(elements=2, name=u'a10sA08lxB08lxC', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lxr', op.var(elements=2, name=u'a10sA08lxB08lxR', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxb08lxr_0', op.var(elements=2, name=u'a10sA08lxB08lxR_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lx', op.var(elements=2, name=u'a10sA08lxR08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lx0', op.var(elements=2, name=u'a10sA08lxR08lx0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lx_0', op.var(elements=2, name=u'a10sA08lxR08lx_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lxc', op.var(elements=2, name=u'a10sA08lxR08lxC', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08lxr08lxl', op.var(elements=2, name=u'a10sA08lxR08lxL', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sa08xr08xcci', op.var(elements=2, name=u'a10sA08xR08xCci', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sah08lxal08l', op.var(elements=2, name=u'a10sAh08lxAl08l', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sd', op.var(elements=2, name=u'a10sD', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10seax08lxa08l', op.var(elements=2, name=u'a10sEax08lxA08l', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10secx08lxzfld', op.var(elements=2, name=u'a10sEcx08lxZfLd', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sesi08lxedi0', op.var(elements=2, name=u'a10sEsi08lxEdi0', offset=1, segment=u'_rdata', size=1))
        p.set_global('a10sr08lx', op.var(elements=2, name=u'a10sR08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aa016llx', op.var(elements=2, name=u'aA016llx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaaa', op.var(name=u'aAaa', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaad', op.var(name=u'aAad', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaam', op.var(name=u'aAam', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaas', op.var(name=u'aAas', offset=1, segment=u'_rdata', size=1))
        p.set_global('aadcb', op.var(name=u'aAdcb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aadcl', op.var(name=u'aAdcl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aadcw', op.var(name=u'aAdcw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaddb', op.var(name=u'aAddb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaddl', op.var(name=u'aAddl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aaddw', op.var(name=u'aAddw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbcd04x04x04x', op.var(elements=2, name=u'aAFBcd04x04x04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf', op.var(elements=2, name=u'aAFBFABF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf_0', op.var(elements=2, name=u'aAFBFABF_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf_1', op.var(elements=2, name=u'aAFBFABF_1', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbfabf_2', op.var(elements=2, name=u'aAFBFABF_2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbff', op.var(elements=2, name=u'aAFBFF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafbffmodabf', op.var(elements=2, name=u'aAFBFFmodABF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafcopysignabf', op.var(elements=2, name=u'aAFCopysignABF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafexpaf', op.var(elements=2, name=u'aAFExpAF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aafsqrtaf', op.var(elements=2, name=u'aAFSqrtAF', offset=1, segment=u'_rdata', size=1))
        p.set_global('aandb', op.var(name=u'aAndb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aandl', op.var(name=u'aAndl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aandw', op.var(name=u'aAndw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ab', op.var(name=u'aB', offset=1, segment=u'_rdata', size=1))
        p.set_global('abe', op.var(name=u'aBe', offset=1, segment=u'_rdata', size=1))
        p.set_global('absfl', op.var(name=u'aBsfl', offset=1, segment=u'_rdata', size=1))
        p.set_global('absfw', op.var(name=u'aBsfw', offset=1, segment=u'_rdata', size=1))
        p.set_global('absrl', op.var(name=u'aBsrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('absrw', op.var(name=u'aBsrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abswapl', op.var(name=u'aBswapl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtcl', op.var(name=u'aBtcl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtcw', op.var(name=u'aBtcw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtl', op.var(name=u'aBtl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtrl', op.var(name=u'aBtrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtrw', op.var(name=u'aBtrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtsl', op.var(name=u'aBtsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtsw', op.var(name=u'aBtsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('abtw', op.var(name=u'aBtw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acbw', op.var(name=u'aCbw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acdq', op.var(name=u'aCdq', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovael', op.var(name=u'aCmovael', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovaew', op.var(name=u'aCmovaew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmoval', op.var(name=u'aCmoval', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovaw', op.var(name=u'aCmovaw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbel', op.var(name=u'aCmovbel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbew', op.var(name=u'aCmovbew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbl', op.var(name=u'aCmovbl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovbw', op.var(name=u'aCmovbw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovel', op.var(name=u'aCmovel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovew', op.var(name=u'aCmovew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgel', op.var(name=u'aCmovgel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgew', op.var(name=u'aCmovgew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgl', op.var(name=u'aCmovgl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovgw', op.var(name=u'aCmovgw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovlel', op.var(name=u'aCmovlel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovlew', op.var(name=u'aCmovlew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovll', op.var(name=u'aCmovll', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovlw', op.var(name=u'aCmovlw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnel', op.var(name=u'aCmovnel', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnew', op.var(name=u'aCmovnew', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnol', op.var(name=u'aCmovnol', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnow', op.var(name=u'aCmovnow', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnpl', op.var(name=u'aCmovnpl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnpw', op.var(name=u'aCmovnpw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnsl', op.var(name=u'aCmovnsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovnsw', op.var(name=u'aCmovnsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovol', op.var(name=u'aCmovol', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovow', op.var(name=u'aCmovow', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovpl', op.var(name=u'aCmovpl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovpw', op.var(name=u'aCmovpw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovsl', op.var(name=u'aCmovsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmovsw', op.var(name=u'aCmovsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpb', op.var(name=u'aCmpb', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpl', op.var(name=u'aCmpl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpsb', op.var(name=u'aCmpsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpsl', op.var(name=u'aCmpsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpsw', op.var(name=u'aCmpsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpw', op.var(name=u'aCmpw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchg8beax08', op.var(elements=2, name=u'aCmpxchg8bEax08', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchgb', op.var(name=u'aCmpxchgb', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchgl', op.var(name=u'aCmpxchgl', offset=1, segment=u'_rdata', size=1))
        p.set_global('acmpxchgw', op.var(name=u'aCmpxchgw', offset=1, segment=u'_rdata', size=1))
        p.set_global('acwd', op.var(name=u'aCwd', offset=1, segment=u'_rdata', size=1))
        p.set_global('acwde', op.var(name=u'aCwde', offset=1, segment=u'_rdata', size=1))
        p.set_global('adaa', op.var(name=u'aDaa', offset=1, segment=u'_rdata', size=1))
        p.set_global('adas', op.var(name=u'aDas', offset=1, segment=u'_rdata', size=1))
        p.set_global('adecb', op.var(name=u'aDecb', offset=1, segment=u'_rdata', size=1))
        p.set_global('adecl', op.var(name=u'aDecl', offset=1, segment=u'_rdata', size=1))
        p.set_global('adecw', op.var(name=u'aDecw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aderegisterfram', op.var(name=u'aDeregisterFram', offset=1, segment=u'_rdata', size=1))
        p.set_global('adivb', op.var(name=u'aDivb', offset=1, segment=u'_rdata', size=1))
        p.set_global('adivl', op.var(name=u'aDivl', offset=1, segment=u'_rdata', size=1))
        p.set_global('adivw', op.var(name=u'aDivw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ae', op.var(name=u'aE', offset=1, segment=u'_rdata', size=1))
        p.set_global('aeax', op.var(name=u'aEax', offset=1, segment=u'_rdata', size=1))
        p.set_global('aeax2', op.var(name=u'aEax2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aeaxecx', op.var(name=u'aEaxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aebx', op.var(name=u'aEbx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aebx4', op.var(name=u'aEbx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('aebxedx', op.var(name=u'aEbxEdx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecx', op.var(name=u'aEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecx8', op.var(name=u'aEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecxecx', op.var(name=u'aEcxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aecxecx2', op.var(name=u'aEcxEcx2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedi', op.var(name=u'aEdi', offset=1, segment=u'_rdata', size=1))
        p.set_global('aediecx', op.var(name=u'aEdiEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedx', op.var(name=u'aEdx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedxecx', op.var(name=u'aEdxEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aedxecx4', op.var(name=u'aEdxEcx4', offset=1, segment=u'_rdata', size=1))
        p.set_global('aesi', op.var(name=u'aEsi', offset=1, segment=u'_rdata', size=1))
        p.set_global('aesiecx', op.var(name=u'aEsiEcx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aesiecx8', op.var(name=u'aEsiEcx8', offset=1, segment=u'_rdata', size=1))
        p.set_global('afcmovseflags0x', op.var(elements=2, name=u'aFcmovSEflags0x', offset=1, segment=u'_rdata', size=1))
        p.set_global('afcomff04lx', op.var(elements=2, name=u'aFcomFF04lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('afcomiff04lx02l', op.var(elements=2, name=u'aFcomiFF04lx02l', offset=1, segment=u'_rdata', size=1))
        p.set_global('afld1f', op.var(elements=2, name=u'aFld1F', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldl2ef', op.var(elements=2, name=u'aFldl2eF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldl2tf', op.var(elements=2, name=u'aFldl2tF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldlg2f', op.var(elements=2, name=u'aFldlg2F', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldln2f', op.var(elements=2, name=u'aFldln2F', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldpif', op.var(elements=2, name=u'aFldpiF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afldzf', op.var(elements=2, name=u'aFldzF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afloatff', op.var(elements=2, name=u'aFloatFF', offset=1, segment=u'_rdata', size=1))
        p.set_global('afptag04x', op.var(elements=2, name=u'aFptag04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('afpuc04xfpus04x', op.var(elements=2, name=u'aFpuc04xFpus04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('afucomff04lx', op.var(elements=2, name=u'aFucomFF04lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('afucomiff04lx02', op.var(elements=2, name=u'aFucomiFF04lx02', offset=1, segment=u'_rdata', size=1))
        p.set_global('afxamf04lx', op.var(elements=2, name=u'aFxamF04lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170', op.var(name=u'aGccGnu64020170', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_0', op.var(name=u'aGccGnu64020170_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_1', op.var(name=u'aGccGnu64020170_1', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_2', op.var(name=u'aGccGnu64020170_2', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_3', op.var(name=u'aGccGnu64020170_3', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_4', op.var(name=u'aGccGnu64020170_4', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_5', op.var(name=u'aGccGnu64020170_5', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_6', op.var(name=u'aGccGnu64020170_6', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_7', op.var(name=u'aGccGnu64020170_7', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_8', op.var(name=u'aGccGnu64020170_8', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu64020170_9', op.var(name=u'aGccGnu64020170_9', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730', op.var(name=u'aGccGnu730', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730_0', op.var(name=u'aGccGnu730_0', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730_1', op.var(name=u'aGccGnu730_1', offset=1, segment=u'_rdata', size=1))
        p.set_global('agccgnu730_2', op.var(name=u'aGccGnu730_2', offset=1, segment=u'_rdata', size=1))
        p.set_global('aidivb', op.var(name=u'aIdivb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aidivl', op.var(name=u'aIdivl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aidivw', op.var(name=u'aIdivw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimulb', op.var(name=u'aImulb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimull', op.var(name=u'aImull', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimullim', op.var(name=u'aImullIm', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimulw', op.var(name=u'aImulw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aimulwim', op.var(name=u'aImulwIm', offset=1, segment=u'_rdata', size=1))
        p.set_global('aincb', op.var(name=u'aIncb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aincl', op.var(name=u'aIncl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aincw', op.var(name=u'aIncw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aint64ta016llx', op.var(elements=2, name=u'aInt64TA016llx', offset=1, segment=u'_rdata', size=1))
        p.set_global('aintad', op.var(elements=2, name=u'aIntAD', offset=1, segment=u'_rdata', size=1))
        p.set_global('aja', op.var(name=u'aJa', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajae', op.var(name=u'aJae', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajb', op.var(name=u'aJb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajbe', op.var(name=u'aJbe', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajcxz', op.var(name=u'aJcxz', offset=1, segment=u'_rdata', size=1))
        p.set_global('aje', op.var(name=u'aJe', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajecxz', op.var(name=u'aJecxz', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajg', op.var(name=u'aJg', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajge', op.var(name=u'aJge', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajl', op.var(name=u'aJl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajle', op.var(name=u'aJle', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajne', op.var(name=u'aJne', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajno', op.var(name=u'aJno', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajnp', op.var(name=u'aJnp', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajns', op.var(name=u'aJns', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajo', op.var(name=u'aJo', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajp', op.var(name=u'aJp', offset=1, segment=u'_rdata', size=1))
        p.set_global('ajs', op.var(name=u'aJs', offset=1, segment=u'_rdata', size=1))
        p.set_global('ala016llx04x', op.var(elements=2, name=u'aLa016llx04x', offset=1, segment=u'_rdata', size=1))
        p.set_global('aleas08lx', op.var(elements=2, name=u'aLeaS08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('alodsb', op.var(name=u'aLodsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('alodsl', op.var(name=u'aLodsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('alodsw', op.var(name=u'aLodsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('alongdoubleflf', op.var(elements=2, name=u'aLongDoubleFLf', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopl', op.var(name=u'aLoopl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopnzl', op.var(name=u'aLoopnzl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopnzw', op.var(name=u'aLoopnzw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopw', op.var(name=u'aLoopw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopzl', op.var(name=u'aLoopzl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aloopzw', op.var(name=u'aLoopzw', offset=1, segment=u'_rdata', size=1))
        p.set_global('amovsb', op.var(name=u'aMovsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('amovsl', op.var(name=u'aMovsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('amovsw', op.var(name=u'aMovsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('amulb', op.var(name=u'aMulb', offset=1, segment=u'_rdata', size=1))
        p.set_global('amull', op.var(name=u'aMull', offset=1, segment=u'_rdata', size=1))
        p.set_global('amulw', op.var(name=u'aMulw', offset=1, segment=u'_rdata', size=1))
        p.set_global('anb', op.var(name=u'aNb', offset=1, segment=u'_rdata', size=1))
        p.set_global('anbe', op.var(name=u'aNbe', offset=1, segment=u'_rdata', size=1))
        p.set_global('ane', op.var(name=u'aNe', offset=1, segment=u'_rdata', size=1))
        p.set_global('anegb', op.var(name=u'aNegb', offset=1, segment=u'_rdata', size=1))
        p.set_global('anegl', op.var(name=u'aNegl', offset=1, segment=u'_rdata', size=1))
        p.set_global('anegw', op.var(name=u'aNegw', offset=1, segment=u'_rdata', size=1))
        p.set_global('anotb', op.var(name=u'aNotb', offset=1, segment=u'_rdata', size=1))
        p.set_global('anotl', op.var(name=u'aNotl', offset=1, segment=u'_rdata', size=1))
        p.set_global('anotw', op.var(name=u'aNotw', offset=1, segment=u'_rdata', size=1))
        p.set_global('anu', op.var(name=u'aNu', offset=1, segment=u'_rdata', size=1))
        p.set_global('aorb', op.var(name=u'aOrb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aorl', op.var(name=u'aOrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('aorw', op.var(name=u'aOrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('apopcnta08lxr08', op.var(elements=2, name=u'aPopcntA08lxR08', offset=1, segment=u'_rdata', size=1))
        p.set_global('apoplesp08lx', op.var(elements=2, name=u'aPoplEsp08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('apopwesp08lx', op.var(elements=2, name=u'aPopwEsp08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('arclb', op.var(name=u'aRclb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcll', op.var(name=u'aRcll', offset=1, segment=u'_rdata', size=1))
        p.set_global('arclw', op.var(name=u'aRclw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcrb', op.var(name=u'aRcrb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcrl', op.var(name=u'aRcrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arcrw', op.var(name=u'aRcrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('areplodsb', op.var(name=u'aRepLodsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('areplodsl', op.var(name=u'aRepLodsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('areplodsw', op.var(name=u'aRepLodsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepmovsb', op.var(name=u'aRepMovsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepmovsl', op.var(name=u'aRepMovsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepmovsw', op.var(name=u'aRepMovsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzcmpsb', op.var(name=u'aRepnzCmpsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzcmpsl', op.var(name=u'aRepnzCmpsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzcmpsw', op.var(name=u'aRepnzCmpsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzscasb', op.var(name=u'aRepnzScasb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzscasl', op.var(name=u'aRepnzScasl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepnzscasw', op.var(name=u'aRepnzScasw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepstosb', op.var(name=u'aRepStosb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepstosl', op.var(name=u'aRepStosl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepstosw', op.var(name=u'aRepStosw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzcmpsb', op.var(name=u'aRepzCmpsb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzcmpsl', op.var(name=u'aRepzCmpsl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzcmpsw', op.var(name=u'aRepzCmpsw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzscasb', op.var(name=u'aRepzScasb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzscasl', op.var(name=u'aRepzScasl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arepzscasw', op.var(name=u'aRepzScasw', offset=1, segment=u'_rdata', size=1))
        p.set_global('aresdf', op.var(elements=2, name=u'aResDF', offset=1, segment=u'_rdata', size=1))
        p.set_global('arintaf', op.var(elements=2, name=u'aRintAF', offset=1, segment=u'_rdata', size=1))
        p.set_global('arolb', op.var(name=u'aRolb', offset=1, segment=u'_rdata', size=1))
        p.set_global('aroll', op.var(name=u'aRoll', offset=1, segment=u'_rdata', size=1))
        p.set_global('arolw', op.var(name=u'aRolw', offset=1, segment=u'_rdata', size=1))
        p.set_global('arorb', op.var(name=u'aRorb', offset=1, segment=u'_rdata', size=1))
        p.set_global('arorl', op.var(name=u'aRorl', offset=1, segment=u'_rdata', size=1))
        p.set_global('arorw', op.var(name=u'aRorw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asarb', op.var(name=u'aSarb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asarl', op.var(name=u'aSarl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asarw', op.var(name=u'aSarw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asbbb', op.var(name=u'aSbbb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asbbl', op.var(name=u'aSbbl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asbbw', op.var(name=u'aSbbw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asc_1058c', op.var(elements=5, name=u'asc_1058C', offset=1, segment=u'_text', size=1))
        p.set_global('asc_182c3', op.var(elements=16, name=u'asc_182C3', offset=1, segment=u'_text', size=1))
        p.set_global('asc_182d3', op.var(elements=8, name=u'asc_182D3', offset=1, segment=u'_text', size=1))
        p.set_global('asc_1cc2d', op.var(elements=0, name=u'asc_1CC2D', offset=1, segment=u'dseg', size=1))
        p.set_global('asc_1d6e0', op.var(name=u'asc_1D6E0', offset=1, segment=u'dseg', size=1))
        p.set_global('asc_1da00', op.var(name=u'asc_1DA00', offset=1, segment=u'dseg', size=1))
        p.set_global('asc_246b0', op.var(elements=0, name=u'asc_246B0', offset=1, segment=u'seg003', size=1))
        p.set_global('asc_25856', op.var(elements=3, name=u'asc_25856', offset=1, segment=u'seg003', size=1))
        p.set_global('ascasb', op.var(name=u'aScasb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ascasl', op.var(name=u'aScasl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ascasw', op.var(name=u'aScasw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ascii', op.var(elements=2, name=u'ASCII', offset=1, segment=u'_data', size=1))
        p.set_global('aseta', op.var(name=u'aSeta', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetae', op.var(name=u'aSetae', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetb', op.var(name=u'aSetb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetbe', op.var(name=u'aSetbe', offset=1, segment=u'_rdata', size=1))
        p.set_global('asete', op.var(name=u'aSete', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetg', op.var(name=u'aSetg', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetge', op.var(name=u'aSetge', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetl', op.var(name=u'aSetl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetle', op.var(name=u'aSetle', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetne', op.var(name=u'aSetne', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetno', op.var(name=u'aSetno', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetnp', op.var(name=u'aSetnp', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetns', op.var(name=u'aSetns', offset=1, segment=u'_rdata', size=1))
        p.set_global('aseto', op.var(name=u'aSeto', offset=1, segment=u'_rdata', size=1))
        p.set_global('asetp', op.var(name=u'aSetp', offset=1, segment=u'_rdata', size=1))
        p.set_global('asets', op.var(name=u'aSets', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashlb', op.var(name=u'aShlb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashldl', op.var(name=u'aShldl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashldw', op.var(name=u'aShldw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashll', op.var(name=u'aShll', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashlw', op.var(name=u'aShlw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashortad', op.var(elements=2, name=u'aShortAD', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrb', op.var(name=u'aShrb', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrdl', op.var(name=u'aShrdl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrdw', op.var(name=u'aShrdw', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrl', op.var(name=u'aShrl', offset=1, segment=u'_rdata', size=1))
        p.set_global('ashrw', op.var(name=u'aShrw', offset=1, segment=u'_rdata', size=1))
        p.set_global('astosb', op.var(name=u'aStosb', offset=1, segment=u'_rdata', size=1))
        p.set_global('astosl', op.var(name=u'aStosl', offset=1, segment=u'_rdata', size=1))
        p.set_global('astosw', op.var(name=u'aStosw', offset=1, segment=u'_rdata', size=1))
        p.set_global('asubb', op.var(name=u'aSubb', offset=1, segment=u'_rdata', size=1))
        p.set_global('asubl', op.var(name=u'aSubl', offset=1, segment=u'_rdata', size=1))
        p.set_global('asubw', op.var(name=u'aSubw', offset=1, segment=u'_rdata', size=1))
        p.set_global('au', op.var(name=u'aU', offset=1, segment=u'_rdata', size=1))
        p.set_global('audio_len', op.var(name=u'audio_len', offset=1, segment=u'_text', size=2))
        p.set_global('axaddb', op.var(name=u'aXaddb', offset=1, segment=u'_rdata', size=1))
        p.set_global('axaddl', op.var(name=u'aXaddl', offset=1, segment=u'_rdata', size=1))
        p.set_global('axaddlsameres08', op.var(elements=2, name=u'aXaddlSameRes08', offset=1, segment=u'_rdata', size=1))
        p.set_global('axaddw', op.var(name=u'aXaddw', offset=1, segment=u'_rdata', size=1))
        p.set_global('axchgb', op.var(name=u'aXchgb', offset=1, segment=u'_rdata', size=1))
        p.set_global('axchgl', op.var(name=u'aXchgl', offset=1, segment=u'_rdata', size=1))
        p.set_global('axchgw', op.var(name=u'aXchgw', offset=1, segment=u'_rdata', size=1))
        p.set_global('axlateax08lx', op.var(elements=2, name=u'aXlatEax08lx', offset=1, segment=u'_rdata', size=1))
        p.set_global('axorb', op.var(name=u'aXorb', offset=1, segment=u'_rdata', size=1))
        p.set_global('axorl', op.var(name=u'aXorl', offset=1, segment=u'_rdata', size=1))
        p.set_global('axorw', op.var(name=u'aXorw', offset=1, segment=u'_rdata', size=1))
        p.set_global('b', op.var(name=u'b', offset=1, segment=u'_data', size=1))
        #p.set_global('b', op.var(name=u'b', offset=1, segment=u'_data', size=2))
        p.set_global('beginningdata', op.var(name=u'beginningdata', offset=1, segment=u'_data', size=1))
        p.set_global('buffer', op.var(elements=64000, name=u'buffer', offset=1, segment=u'_data', size=1))
        p.set_global('byte_41411f', op.var(name=u'byte_41411F', offset=1, segment=u'_bss', size=1))
        p.set_global('c', op.var(name=u'c', offset=1, segment=u'_data', size=1))
        #p.set_global('c', op.var(name=u'c', offset=1, segment=u'_data', size=4))
        p.set_global('d', op.var(name=u'd', offset=1, segment=u'_data', size=1))
        p.set_global('dbl_410d28', op.var(name=u'dbl_410D28', offset=1, segment=u'_rdata', size=8))
        p.set_global('dbl_410d40', op.var(name=u'dbl_410D40', offset=1, segment=u'_rdata', size=8))
        p.set_global('dll_index', op.var(name=u'dll_index', offset=1, segment=u'_bss', size=4))
        p.set_global('doublequote', op.var(elements=0, name=u'doublequote', offset=1, segment=u'_data', size=1))
        p.set_global('dseg', op.var(name=u'dseg', offset=1, issegment=True, segment='', size=1))
        p.set_global('dword_40d5d0', op.var(elements=3, name=u'dword_40D5D0', offset=1, segment=u'_text', size=4))
        p.set_global('dword_40d5dc', op.var(elements=9, name=u'dword_40D5DC', offset=1, segment=u'_text', size=4))
        p.set_global('dword_40e000', op.var(name=u'dword_40E000', offset=1, segment=u'_data', size=4))
        p.set_global('e', op.var(name=u'e', offset=1, segment=u'_data', size=1))
        p.set_global('enddata', op.var(name=u'enddata', offset=1, segment=u'_data', size=1))
        p.set_global('enter_stack', op.var(elements=4096, name=u'enter_stack', offset=1, segment=u'_bss', size=4))
        p.set_global('environ', op.var(name=u'environ', offset=1, segment=u'_bss', size=4))
        p.set_global('f', op.var(name=u'f', offset=1, segment=u'_data', size=1))
        p.set_global('filename', op.var(name=u'fileName', offset=1, segment=u'_data', size=1))
        p.set_global('flt_410d24', op.var(name=u'flt_410D24', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d30', op.var(name=u'flt_410D30', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d34', op.var(name=u'flt_410D34', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d38', op.var(name=u'flt_410D38', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d3c', op.var(name=u'flt_410D3C', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d48', op.var(name=u'flt_410D48', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d4c', op.var(name=u'flt_410D4C', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d50', op.var(name=u'flt_410D50', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d54', op.var(name=u'flt_410D54', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d58', op.var(name=u'flt_410D58', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d5c', op.var(name=u'flt_410D5C', offset=1, segment=u'_rdata', size=4))
        p.set_global('flt_410d60', op.var(name=u'flt_410D60', offset=1, segment=u'_rdata', size=4))
        p.set_global('g', op.var(name=u'g', offset=1, segment=u'_data', size=4))
        p.set_global('h', op.var(name=u'h', offset=1, segment=u'_data', size=1))
        p.set_global('h2', op.var(name=u'h2', offset=1, segment=u'_data', size=1))
        p.set_global('hlibmodule', op.var(name=u'hLibModule', offset=1, segment=u'_bss', size=4))
        p.set_global('initcall', op.var(name=u'initcall', offset=1, issegment=True, segment='', size=1))
        p.set_global('libfilename', op.var(name=u'LibFileName', offset=1, segment=u'_rdata', size=1))
        p.set_global('load_handle', op.var(name=u'load_handle', offset=1, segment=u'_data', size=4))
        p.set_global('off_18e00', op.var(name=u'off_18E00', offset=1, segment=u'_text', size=2))
        p.set_global('off_18e60', op.var(name=u'off_18E60', offset=1, segment=u'_text', size=2))
        p.set_global('off_18e80', op.var(name=u'off_18E80', offset=1, segment=u'_text', size=2))
        p.set_global('off_18ea0', op.var(name=u'off_18EA0', offset=1, segment=u'_text', size=2))
        p.set_global('off_18ec0', op.var(name=u'off_18EC0', offset=1, segment=u'_text', size=2))
        p.set_global('off_18ee0', op.var(name=u'off_18EE0', offset=1, segment=u'_text', size=2))
        p.set_global('off_18f00', op.var(name=u'off_18F00', offset=1, segment=u'_text', size=2))
        p.set_global('off_18f20', op.var(name=u'off_18F20', offset=1, segment=u'_text', size=2))
        p.set_global('off_18f40', op.var(name=u'off_18F40', offset=1, segment=u'_text', size=2))
        p.set_global('off_1ca8e', op.var(name=u'off_1CA8E', offset=1, segment=u'dseg', size=2))
        p.set_global('off_1de3c', op.var(name=u'off_1DE3C', offset=1, segment=u'dseg', size=2))
        p.set_global('off_1de42', op.var(name=u'off_1DE42', offset=1, segment=u'dseg', size=2))
        p.set_global('off_245c8', op.var(name=u'off_245C8', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245ca', op.var(name=u'off_245CA', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245cc', op.var(name=u'off_245CC', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245ce', op.var(name=u'off_245CE', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245e0', op.var(name=u'off_245E0', offset=1, segment=u'seg003', size=2))
        p.set_global('off_245e2', op.var(name=u'off_245E2', offset=1, segment=u'seg003', size=2))
        p.set_global('off_2462e', op.var(name=u'off_2462E', offset=1, segment=u'seg003', size=2))
        p.set_global('off_24656', op.var(name=u'off_24656', offset=1, segment=u'seg003', size=2))
        p.set_global('off_25326', op.var(name=u'off_25326', offset=1, segment=u'seg003', size=2))
        p.set_global('pal_jeu', op.var(elements=16, name=u'pal_jeu', offset=1, segment=u'_data', size=1))
        p.set_global('pas_de_mem', op.var(elements=2, name=u'pas_de_mem', offset=1, segment=u'_data', size=1))
        p.set_global('pbs1', op.var(elements=2, name=u'pbs1', offset=1, segment=u'_data', size=1))
        p.set_global('pbs2', op.var(elements=2, name=u'pbs2', offset=1, segment=u'_data', size=1))
        p.set_global('procname', op.var(name=u'ProcName', offset=1, segment=u'_rdata', size=1))
        p.set_global('seg001', op.var(name=u'seg001', offset=1, issegment=True, segment='', size=1))
        p.set_global('seg003', op.var(name=u'seg003', offset=1, issegment=True, segment='', size=1))
        p.set_global('seg004', op.var(name=u'seg004', offset=1, issegment=True, segment='', size=1))
        p.set_global('stackseg', op.var(name=u'stackseg', offset=1, issegment=True, segment='', size=1))
        p.set_global('storedhandle', op.var(name=u'storedHandle', offset=1, segment=u'_bss', size=4))
        p.set_global('storedptr', op.var(name=u'storedPtr', offset=1, segment=u'_bss', size=4))
        p.set_global('storedreason', op.var(name=u'storedReason', offset=1, segment=u'_bss', size=4))
        p.set_global('str1', op.var(elements=0, name=u'str1', offset=1, segment=u'_data', size=1))
        p.set_global('str2', op.var(elements=0, name=u'str2', offset=1, segment=u'_data', size=1))
        p.set_global('str3', op.var(elements=0, name=u'str3', offset=1, segment=u'_data', size=1))
        p.set_global('str_buffer', op.var(elements=4096, name=u'str_buffer', offset=1, segment=u'_bss', size=1))
        p.set_global('table', op.var(name=u'table', offset=1, segment=u'_text', size=2))
        p.set_global('testoverlap', op.var(elements=14, name=u'testOVerlap', offset=1, segment=u'_data', size=1))
        p.set_global('unk_16464', op.var(name=u'unk_16464', offset=1, segment=u'_text', size=1))
        p.set_global('unk_165ad', op.var(name=u'unk_165AD', offset=1, segment=u'_text', size=1))
        p.set_global('unk_1d516', op.var(name=u'unk_1D516', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1d6c3', op.var(name=u'unk_1D6C3', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1dc01', op.var(name=u'unk_1DC01', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1dc70', op.var(name=u'unk_1DC70', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_1dc7b', op.var(name=u'unk_1DC7B', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_23ee4', op.var(name=u'unk_23EE4', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_24074', op.var(name=u'unk_24074', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_24453', op.var(name=u'unk_24453', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_24456', op.var(name=u'unk_24456', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_244c4', op.var(name=u'unk_244C4', offset=1, segment=u'dseg', size=1))
        p.set_global('unk_257d9', op.var(name=u'unk_257D9', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_258a6', op.var(name=u'unk_258A6', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_30528', op.var(name=u'unk_30528', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_3054a', op.var(name=u'unk_3054A', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_30941', op.var(name=u'unk_30941', offset=1, segment=u'seg003', size=1))
        p.set_global('unk_40e004', op.var(name=u'unk_40E004', offset=1, segment=u'_data', size=1))
        p.set_global('unk_40e008', op.var(name=u'unk_40E008', offset=1, segment=u'_data', size=1))
        p.set_global('unk_40e060', op.var(name=u'unk_40E060', offset=1, segment=u'_data', size=1))
        p.set_global('unk_40f064', op.var(name=u'unk_40F064', offset=1, segment=u'initcall', size=1))
        p.set_global('unk_410ff4', op.var(name=u'unk_410FF4', offset=1, segment=u'_rdata', size=1))
        p.set_global('unk_412038', op.var(name=u'unk_412038', offset=1, segment=u'_eh_frame', size=1))
        p.set_global('unk_414000', op.var(name=u'unk_414000', offset=1, segment=u'_bss', size=1))
        p.set_global('unk_419120', op.var(name=u'unk_419120', offset=1, segment=u'_bss', size=1))
        p.set_global('var', op.var(elements=4, name=u'var', offset=1, segment=u'_data', size=1))
        p.set_global('var0', op.var(elements=10, name=u'var0', offset=1, segment=u'_data', size=1))
        #p.set_global('var1', op.var(elements=3, name=u'var1', offset=1, segment=u'_data', size=1))
        # p.set_global('var1', op.var(name=u'var1',  offset=1, segment=u'_data', size=1))
        p.set_global('var2', op.var(elements=3, name=u'var2', offset=1, segment=u'_data', size=2))
        # p.set_global('var2', op.var(elements=5, name=u'var2',  offset=1, segment=u'_data', size=1))
        # p.set_global('var2', op.var(name=u'var2',  offset=1, segment=u'_data', size=2))
        p.set_global('var3', op.var(elements=4, name=u'var3', offset=1, segment=u'_data', size=1))
        # p.set_global('var3', op.var(elements=4, name=u'var3',  offset=1, segment=u'_data', size=4))
        # p.set_global('var3', op.var(name=u'var3',  offset=1, segment=u'_data', size=4))
        p.set_global('var4', op.var(elements=100, name=u'var4', offset=1, segment=u'_data', size=1))
        # p.set_global('var4', op.var(name=u'var4',  offset=1, segment=u'_data', size=1))
        p.set_global('var5', op.var(elements=0, name=u'var5', offset=1, segment=u'_data', size=1))
        # p.set_global('var5', op.var(elements=10, name=u'var5',  offset=1, segment=u'_data', size=4))
        # p.set_global('var5', op.var(elements=3, name=u'var5',  offset=1, segment=u'_data', size=2))
        p.set_global('var6', op.var(elements=4, name=u'var6', offset=1, segment=u'_data', size=4))

        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var1[bx],2')),u'\tR(CMP(*(raddr(ds,offset(_data,var1)+bx)), 2));\n')
        #self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"mov al, 'Z' - 'A' +1")), u"\tR(MOV(al, 'Z' - 'A' +1));\n")
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'B = 1')), u'#undef B\n#define B 1\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CC equ 4')), u'#define CC 4\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'DDD = var1')), u'#undef DDD\n#define DDD m.var1\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'T equ 4')), u'#define T 4\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'TEST2 equ -13')), u'#define TEST2 -13\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'argc = 8')), u'#undef ARGC\n#define ARGC 8\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'argv = 0x0C')), u'#undef ARGV\n#define ARGV 0x0C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'dubsize equ 13')), u'#define DUBSIZE 13\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'eax_0 = eax')), u'#undef EAX_0\n#define EAX_0 eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ecx_0 = -0x2C')), u'#undef ECX_0\n#define ECX_0 -0x2C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ecx_0 = ecx')), u'#undef ECX_0\n#define ECX_0 ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ecx_0_0 = ecx')), u'#undef ECX_0_0\n#define ECX_0_0 ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ecx_vals = -0x28')), u'#undef ECX_VALS\n#define ECX_VALS -0x28\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'edi_0 = edi')), u'#undef EDI_0\n#define EDI_0 edi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'edx_0 = -0x2C')), u'#undef EDX_0\n#define EDX_0 -0x2C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'edx_0_0 = edx')), u'#undef EDX_0_0\n#define EDX_0_0 edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'eflags = eax')), u'#undef EFLAGS\n#define EFLAGS eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'eflags = ebx')), u'#undef EFLAGS\n#define EFLAGS ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'eflags = ecx')), u'#undef EFLAGS\n#define EFLAGS ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'eflags = edi')), u'#undef EFLAGS\n#define EFLAGS edi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'eflags = edx')), u'#undef EFLAGS\n#define EFLAGS edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'eflags = esi')), u'#undef EFLAGS\n#define EFLAGS esi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'esi_0 = ebx')), u'#undef ESI_0\n#define ESI_0 ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'esi_0 = esi')), u'#undef ESI_0\n#define ESI_0 esi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'flags = eax')), u'#undef FLAGS\n#define FLAGS eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'flags = ebx')), u'#undef FLAGS\n#define FLAGS ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'flags = ecx')), u'#undef FLAGS\n#define FLAGS ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'flags = edi')), u'#undef FLAGS\n#define FLAGS edi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'flags = edx')), u'#undef FLAGS\n#define FLAGS edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'flags = esi')), u'#undef FLAGS\n#define FLAGS esi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'i = eax')), u'#undef I\n#define I eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'i = ebx')), u'#undef I\n#define I ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'i = esi')), u'#undef I\n#define I esi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'iflags = 0x10')), u'#undef IFLAGS\n#define IFLAGS 0x10\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'iflags = 0x14')), u'#undef IFLAGS\n#define IFLAGS 0x14\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op0 = 0x0C')), u'#undef OP0\n#define OP0 0x0C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op0 = eax')), u'#undef OP0\n#define OP0 eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op0 = ebx')), u'#undef OP0\n#define OP0 ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op0 = edx')), u'#undef OP0\n#define OP0 edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op0h = 8')), u'#undef OP0H\n#define OP0H 8\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op1 = eax')), u'#undef OP1\n#define OP1 eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op1 = ecx')), u'#undef OP1\n#define OP1 ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'op1 = edx')), u'#undef OP1\n#define OP1 edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'r = eax')), u'#undef R\n#define R eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'res = eax')), u'#undef RES\n#define RES eax\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'res = ebx')), u'#undef RES\n#define RES ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'res = ecx')), u'#undef RES\n#define RES ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'res = edi')), u'#undef RES\n#define RES edi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'res = edx')), u'#undef RES\n#define RES edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'res = esi')), u'#undef RES\n#define RES esi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'resh = ebx')), u'#undef RESH\n#define RESH ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'resh = edx')), u'#undef RESH\n#define RESH edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'resh = esi')), u'#undef RESH\n#define RESH esi\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'resz = ecx')), u'#undef RESZ\n#define RESZ ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'resz = edx')), u'#undef RESZ\n#define RESZ edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rh = edx')), u'#undef RH\n#define RH edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s0 = 0x0C')), u'#undef S0\n#define S0 0x0C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s0 = 8')), u'#undef S0\n#define S0 8\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s0_0 = ebx')), u'#undef S0_0\n#define S0_0 ebx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s0_0 = ecx')), u'#undef S0_0\n#define S0_0 ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s1 = 0x0C')), u'#undef S1\n#define S1 0x0C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s1 = 0x10')), u'#undef S1\n#define S1 0x10\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s1_0 = ecx')), u'#undef S1_0\n#define S1_0 ecx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s1_0 = edx')), u'#undef S1_0\n#define S1_0 edx\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'s2 = 8')), u'#undef S2\n#define S2 8\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'tWO equ 2')), u'#define TWO 2\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'table = -0x108')), u'#undef TABLE\n#define TABLE -0x108\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'taille_moire equ ((((2030080+64000*26)/4096)+1)*4096)-1')), u'#define TAILLE_MOIRE ((((2030080+64000*26)/4096)+1)*4096)-1\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test1 equ (00+38*3)*320+1/2+33*(3-1)')), u'#define TEST1 (00+38*3)*320+1/2+33*(3-1)\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test3 equ 1500')), u'#define TEST3 1500\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'testEqu equ 1')), u'#define TESTEQU 1\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'val = -0x1C')), u'#undef VAL\n#define VAL -0x1C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'var_1C = -0x1C')), u'#undef VAR_1C\n#define VAR_1C -0x1C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'var_20 = -0x20')), u'#undef VAR_20\n#define VAR_20 -0x20\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'var_2C = -0x2C')), u'#undef VAR_2C\n#define VAR_2C -0x2C\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'var_4 = -4')), u'#undef VAR_4\n#define VAR_4 -4\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"cmp [doublequote+4],'d'")),u"\tR(CMP(*(raddr(ds,offset(_data,doublequote)+4)), 'd'));\n")
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"cmp dword ptr buffer,'tseT'")), u'\tR(CMP(*(dd*)(raddr(ds,offset(_data,buffer))), 0x74736554));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"cmp ebx,'dcba'")), u'\tR(CMP(ebx, 0x64636261));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"mov ah,9            ; DS:DX->'$'-terminated string")), u'\tR(MOV(ah, 9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"mov dl,'c'")), u"\tR(MOV(dl, 'c'));\n")
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"mov ecx,'dcba'")), u'\tR(MOV(ecx, 0x64636261));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,"sub dl,'a'")), u"\tR(SUB(dl, 'a'));\n")
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP [var1],111')), u'\tR(CMP(*(raddr(ds,offset(_data,var1))), 111));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP [var1],3')), u'\tR(CMP(*(raddr(ds,offset(_data,var1))), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP [var2],1')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2))), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP [var2],13')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2))), 13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP [var3],35')), u'\tR(CMP(*(raddr(ds,offset(_data,var3))), 35));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP eax,1')), u'\tR(CMP(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP eax,133')), u'\tR(CMP(eax, 133));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP eax,2')), u'\tR(CMP(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'CMP eax,3')), u'\tR(CMP(eax, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'INC [var1]')), u'\tR(INC(*(raddr(ds,offset(_data,var1)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'INC [var2]')), u'\tR(INC(*(dw*)(raddr(ds,offset(_data,var2)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'INC [var3]')), u'\tR(INC(*(raddr(ds,offset(_data,var3)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'INC eax')), u'\tR(INC(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'INC edx')), u'\tR(INC(edx));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JA failure')), u'\t\tR(JA(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JB failure')), u'\t\tR(JC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JE @VBL2    ;on attends la fin du retrace')), u'\t\tR(JZ(arbvbl2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JE @VBL22    ;on attends la fin du retrace')), u'\t\tR(JZ(arbvbl22));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JE failure')), u'\t\tR(JZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JMP exitLabel')), u'\t\tR(JMP(exitlabel));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JNE @VBL1    ;on attends le retrace')), u'\t\tR(JNZ(arbvbl1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JNE @VBL12    ;on attends le retrace')), u'\t\tR(JNZ(arbvbl12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JNE failure')), u'\t\tR(JNZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'JNZ  @@saaccvaaaax')), u'\t\tR(JNZ(arbarbsaaccvaaaax));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'LODSB')), 'LODSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'MOV DX,3DAh')), u'\tR(MOV(dx, 0x3DA));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'MOV al,0')), u'\tR(MOV(al, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'MOV ds, _data')), u'\tR(MOV(ds, seg_offset(_data)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'SHL ch,2')), u'\tR(SHL(ch, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'SHR bl,1')), u'\tR(SHR(bl, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'SHR ch,1')), u'\tR(SHR(ch, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'SHR eax,1')), u'\tR(SHR(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'TEST AL,8')), u'\tR(TEST(al, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'XOR   al,al')), u'\tal = 0;AFFECT_ZF(0); AFFECT_SF(al,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'aaa')),'\tR(AAA);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'aad')), '\tR(AAD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'aam')),'\tR(AAM);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'aas')),'\tR(AAS);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'adc     dl, cl')), u'\tR(ADC(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'adc     dx, cx')), u'\tR(ADC(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'adc     edx, ecx')), u'\tR(ADC(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     dl, cl')), u'\tR(ADD(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     dx, cx')), u'\tR(ADD(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     ebx, 4')), u'\tR(ADD(ebx, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     edx, ecx')), u'\tR(ADD(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 10h')), u'\tR(ADD(esp, 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 114h')), u'\tR(ADD(esp, 0x114));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 14h')), u'\tR(ADD(esp, 0x14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 1Ch')), u'\tR(ADD(esp, 0x1C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 2')), u'\tR(ADD(esp, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 20h')), u'\tR(ADD(esp, 0x20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 24h')), u'\tR(ADD(esp, 0x24));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 2Ch')), u'\tR(ADD(esp, 0x2C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 3Ch')), u'\tR(ADD(esp, 0x3C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add     esp, 4Ch')), u'\tR(ADD(esp, 0x4C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add bl,30h          ; convert to ASCII')), u'\tR(ADD(bl, 0x30));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add bl,7            ; "A" to "F"')), u'\tR(ADD(bl, 7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add edi,14*320')), u'\tR(ADD(edi, 14*320));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'add word ptr [var5+2],50')), u'\tR(ADD(*(dw*)(raddr(ds,offset(_data,var5)+2)), 50));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     ah, 0F7h')), u'\tR(AND(ah, 0x0F7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     dl, cl')), u'\tR(AND(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     dx, cx')), u'\tR(AND(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     ecx, 40h')), u'\tR(AND(ecx, 0x40));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     edx, ecx')), u'\tR(AND(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     eflags, 40h')), u'\tR(AND(eflags, 0x40));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     eflags, 8D5h')), u'\tR(AND(eflags, 0x8D5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     esp, 0FFFFFFF0h')), u'\tR(AND(esp, 0x0FFFFFFF0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     flags, 0D5h')), u'\tR(AND(flags, 0x0D5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     flags, 1')), u'\tR(AND(flags, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     flags, 11h')), u'\tR(AND(flags, 0x11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     flags, 801h')), u'\tR(AND(flags, 0x801));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     flags, 8C5h')), u'\tR(AND(flags, 0x8C5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and     flags, 8D5h')), u'\tR(AND(flags, 0x8D5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'and bl,0Fh          ; only low-Nibble')), u'\tR(AND(bl, 0x0F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsf     ax, bx')), u'\tR(BSR(ax, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsf     ax, di')), u'\tR(BSR(ax, di));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsf     ax, si')), u'\tR(BSR(ax, si));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsf     eax, ebx')), u'\tR(BSR(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsf     eax, edi')), u'\tR(BSR(eax, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsf     eax, edx')), u'\tR(BSR(eax, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsf     eax, esi')), u'\tR(BSR(eax, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     ax, bx')), u'\tR(BSR(ax, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     ax, di')), u'\tR(BSR(ax, di));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     ax, si')), u'\tR(BSR(ax, si));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     dx, ax')), u'\tR(BSR(dx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     eax, ebx')), u'\tR(BSR(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     eax, edx')), u'\tR(BSR(eax, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     eax, esi')), u'\tR(BSR(eax, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bsr     edx, eax')), u'\tR(BSR(edx, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bswap   eax')),u'\tR(BSWAP(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bt      cx, dx')), u'\tR(BT(cx, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bt      ecx, edx')), u'\tR(BT(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bt eax,0')), u'\tR(BT(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bt eax,2')), u'\tR(BT(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btc     cx, dx')), u'\tR(BTC(cx, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btc     ecx, edx')), u'\tR(BTC(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btc eax,0')), u'\tR(BTC(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btc eax,2')), u'\tR(BTC(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btr     cx, dx')), u'\tR(BTR(cx, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btr     ecx, edx')), u'\tR(BTR(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btr eax,0')), u'\tR(BTR(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'btr eax,2')), u'\tR(BTR(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bts     cx, dx')), u'\tR(BTS(cx, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bts     ecx, edx')), u'\tR(BTS(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bts eax,0')), u'\tR(BTS(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'bts eax,2')), u'\tR(BTS(eax, 2));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    dword ptr [ebx-4]')), '\tR(CALL(__disp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_adc')), u'\tR(CALL(kexec_adc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_adcb')), u'\tR(CALL(kexec_adcb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_adcl')), u'\tR(CALL(kexec_adcl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_adcw')), u'\tR(CALL(kexec_adcw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_add')), u'\tR(CALL(kexec_add));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_addb')), u'\tR(CALL(kexec_addb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_addl')), u'\tR(CALL(kexec_addl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_addw')), u'\tR(CALL(kexec_addw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_and')), u'\tR(CALL(kexec_and));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_andb')), u'\tR(CALL(kexec_andb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_andl')), u'\tR(CALL(kexec_andl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_andw')), u'\tR(CALL(kexec_andw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_bt')), u'\tR(CALL(kexec_bt));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btc')), u'\tR(CALL(kexec_btc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btcl')), u'\tR(CALL(kexec_btcl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btcw')), u'\tR(CALL(kexec_btcw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btl')), u'\tR(CALL(kexec_btl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btr')), u'\tR(CALL(kexec_btr));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btrl')), u'\tR(CALL(kexec_btrl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btrw')), u'\tR(CALL(kexec_btrw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_bts')), u'\tR(CALL(kexec_bts));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btsl')), u'\tR(CALL(kexec_btsl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btsw')), u'\tR(CALL(kexec_btsw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_btw')), u'\tR(CALL(kexec_btw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_cmp')), u'\tR(CALL(kexec_cmp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_cmpb')), u'\tR(CALL(kexec_cmpb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_cmpl')), u'\tR(CALL(kexec_cmpl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_cmpw')), u'\tR(CALL(kexec_cmpw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_dec')), u'\tR(CALL(kexec_dec));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_decb')), u'\tR(CALL(kexec_decb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_decl')), u'\tR(CALL(kexec_decl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_decw')), u'\tR(CALL(kexec_decw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_inc')), u'\tR(CALL(kexec_inc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_incb')), u'\tR(CALL(kexec_incb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_incl')), u'\tR(CALL(kexec_incl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_incw')), u'\tR(CALL(kexec_incw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_neg')), u'\tR(CALL(kexec_neg));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_negb')), u'\tR(CALL(kexec_negb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_negl')), u'\tR(CALL(kexec_negl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_negw')), u'\tR(CALL(kexec_negw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_not')), u'\tR(CALL(kexec_not));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_notb')), u'\tR(CALL(kexec_notb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_notl')), u'\tR(CALL(kexec_notl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_notw')), u'\tR(CALL(kexec_notw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_or')), u'\tR(CALL(kexec_or));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_orb')), u'\tR(CALL(kexec_orb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_orl')), u'\tR(CALL(kexec_orl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_orw')), u'\tR(CALL(kexec_orw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rcl')), u'\tR(CALL(kexec_rcl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rclb')), u'\tR(CALL(kexec_rclb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rcll')), u'\tR(CALL(kexec_rcll));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rclw')), u'\tR(CALL(kexec_rclw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rcr')), u'\tR(CALL(kexec_rcr));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rcrb')), u'\tR(CALL(kexec_rcrb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rcrl')), u'\tR(CALL(kexec_rcrl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rcrw')), u'\tR(CALL(kexec_rcrw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rol')), u'\tR(CALL(kexec_rol));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_roll')), u'\tR(CALL(kexec_roll));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rolw')), u'\tR(CALL(kexec_rolw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_ror')), u'\tR(CALL(kexec_ror));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rorl')), u'\tR(CALL(kexec_rorl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_rorw')), u'\tR(CALL(kexec_rorw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sar')), u'\tR(CALL(kexec_sar));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sarl')), u'\tR(CALL(kexec_sarl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sarw')), u'\tR(CALL(kexec_sarw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sbb')), u'\tR(CALL(kexec_sbb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sbbb')), u'\tR(CALL(kexec_sbbb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sbbl')), u'\tR(CALL(kexec_sbbl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sbbw')), u'\tR(CALL(kexec_sbbw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shl')), u'\tR(CALL(kexec_shl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shld')), u'\tR(CALL(kexec_shld));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shldl')), u'\tR(CALL(kexec_shldl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shldw')), u'\tR(CALL(kexec_shldw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shll')), u'\tR(CALL(kexec_shll));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shlw')), u'\tR(CALL(kexec_shlw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shr')), u'\tR(CALL(kexec_shr));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shrd')), u'\tR(CALL(kexec_shrd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shrdl')), u'\tR(CALL(kexec_shrdl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shrdw')), u'\tR(CALL(kexec_shrdw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shrl')), u'\tR(CALL(kexec_shrl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_shrw')), u'\tR(CALL(kexec_shrw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_sub')), u'\tR(CALL(kexec_sub));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_subb')), u'\tR(CALL(kexec_subb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_subl')), u'\tR(CALL(kexec_subl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_subw')), u'\tR(CALL(kexec_subw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_xor')), u'\tR(CALL(kexec_xor));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_xorb')), u'\tR(CALL(kexec_xorb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_xorl')), u'\tR(CALL(kexec_xorl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    exec_xorw')), u'\tR(CALL(kexec_xorw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    printf')), '\tR(CALL(__disp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_bcd')), u'\tR(CALL(ktest_bcd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_bsx')), u'\tR(CALL(ktest_bsx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_conv')), u'\tR(CALL(ktest_conv));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_divb')), u'\tR(CALL(ktest_divb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_divl')), u'\tR(CALL(ktest_divl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_divw')), u'\tR(CALL(ktest_divw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_idivb')), u'\tR(CALL(ktest_idivb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_idivl')), u'\tR(CALL(ktest_idivl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_idivw')), u'\tR(CALL(ktest_idivw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_imulb')), u'\tR(CALL(ktest_imulb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_imull')), u'\tR(CALL(ktest_imull));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_imull2')), u'\tR(CALL(ktest_imull2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_imulw')), u'\tR(CALL(ktest_imulw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_imulw2')), u'\tR(CALL(ktest_imulw2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_jcc')), u'\tR(CALL(ktest_jcc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_lea')), u'\tR(CALL(ktest_lea));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_loop')), u'\tR(CALL(ktest_loop));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_misc')), u'\tR(CALL(ktest_misc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_mul')), u'\tR(CALL(ktest_mul));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_mulb')), u'\tR(CALL(ktest_mulb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_mull')), u'\tR(CALL(ktest_mull));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_mulw')), u'\tR(CALL(ktest_mulw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_popcnt')), u'\tR(CALL(ktest_popcnt));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_string')), u'\tR(CALL(ktest_string));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call    test_xchg')), u'\tR(CALL(ktest_xchg));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call [cs:table+ax]')), '\tR(CALL(__disp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call affpal')), u'\tR(CALL(kaffpal));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call aincecx')), u'\tR(CALL(kaincecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call aincedx')), u'\tR(CALL(kaincedx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call incebx')), u'\tR(CALL(kincebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call load_raw')), u'\tR(CALL(kload_raw));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'call printeax')), u'\tR(CALL(kprinteax));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cbw')), '\tR(CBW);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cdq')),'\tR(CDQ);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'clc')), '\tR(CLC);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cld                             ; Clear The Direction Flag')), '\tR(CLD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cld')), '\tR(CLD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmc')), '\tR(CMC);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     dl, cl')), u'\tR(CMP(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     dx, cx')), u'\tR(CMP(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     ebx, ebx')), u'\tR(CMP(ebx, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     ebx, edi')), u'\tR(CMP(ebx, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     ebx, esi')), u'\tR(CMP(ebx, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     ebx, offset unk_40F064')), u'\tR(CMP(ebx, offset(initcall,unk_40F064)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     ecx, 1')), u'\tR(CMP(ecx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     edi, ebx')), u'\tR(CMP(edi, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     edx, 1')), u'\tR(CMP(edx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     edx, ecx')), u'\tR(CMP(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     esi, ebx')), u'\tR(CMP(esi, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     esi, edi')), u'\tR(CMP(esi, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     esi, esi')), u'\tR(CMP(esi, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     i, 1000h')), u'\tR(CMP(i, 0x1000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     i, 100h')), u'\tR(CMP(i, 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     i, 10h')), u'\tR(CMP(i, 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     i, 20h')), u'\tR(CMP(i, 0x20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp     i, 4')), u'\tR(CMP(i, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [a],5')), u'\tR(CMP(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var+3],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var)+3)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var+4],0')), u'\tR(CMP(*(raddr(ds,offset(_data,var)+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var-1],0')), u'\tR(CMP(*(raddr(ds,offset(_data,var)-1)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var0+5],0')), u'\tR(CMP(*(raddr(ds,offset(_data,var0)+5)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var1+1],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+1)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var1],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1))), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var2+2],6')), u'\tR(CMP(*(raddr(ds,offset(_data,var2)+2)), 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var2-1],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var2)-1)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var2],4')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var2))), 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var3+3*4],4000000')), u'\tR(CMP(*(dd*)(raddr(ds,offset(_data,var3)+3*4)), 4000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var3+ebp],4000000')), u'\tR(CMP(*(dd*)(raddr(ds,offset(_data,var3)+ebp)), 4000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var4+t],1')), u'\tR(CMP(*(raddr(ds,offset(_data,var4)+t)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var4],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var4))), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp [var],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var))), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp a,1')), u'\tR(CMP(*(db*)&m.a, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ah,-1')), u'\tR(CMP(ah, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ah,0ffh')), u'\tR(CMP(ah, 0x0ff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp al,2')), u'\tR(CMP(al, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp al,ah')), u'\tR(CMP(al, ah));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ax,-5')), u'\tR(CMP(ax, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp b,256+3')), u'\tR(CMP(m.b, 256+3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bh,0cch')), u'\tR(CMP(bh, 0x0cc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bl,001111111B')), u'\tR(CMP(bl, 0x7f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bl,0ddh')), u'\tR(CMP(bl, 0x0dd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bl,192')), u'\tR(CMP(bl, 192));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bl,193')), u'\tR(CMP(bl, 193));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bl,39h          ; above 9?')), u'\tR(CMP(bl, 0x39));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bl,al')), u'\tR(CMP(bl, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bx,-1')), u'\tR(CMP(bx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bx,1')), u'\tR(CMP(bx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bx,4+5*256')), u'\tR(CMP(bx, 4+5*256));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp bx,6*256+5')), u'\tR(CMP(bx, 6*256+5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [a],5')), u'\tR(CMP(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [edi+1],6')), u'\tR(CMP(*(raddr(ds,edi+1)), 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [edi+7],132')), u'\tR(CMP(*(raddr(ds,edi+7)), 132));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [esi],1')), u'\tR(CMP(*(raddr(ds,esi)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [esi],4')), u'\tR(CMP(*(raddr(ds,esi)), 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [testOVerlap+1],1')), u'\tR(CMP(*(raddr(ds,offset(_data,testOVerlap)+1)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [var1+1],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+1)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr [var1+2],5')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+2)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr es:[0],55')), u'\tR(CMP(*(raddr(es,0)), 55));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr es:[0],56')), u'\tR(CMP(*(raddr(es,0)), 56));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp byte ptr es:[0],57')), u'\tR(CMP(*(raddr(es,0)), 57));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp c,256+3+65536')), u'\tR(CMP(m.c, 256+3+65536));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ch,001111111B')), u'\tR(CMP(ch, 0x7f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ch,011111100B')), u'\tR(CMP(ch, 0xfc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dl,2')), u'\tR(CMP(dl, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dl,4')), u'\tR(CMP(dl, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dl,5')), u'\tR(CMP(dl, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dword ptr var4,11')), u'\tR(CMP(*(dd*)(raddr(ds,offset(_data,var4))), 11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dx,-1')), u'\tR(CMP(dx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dx,0')), u'\tR(CMP(dx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dx,11')), u'\tR(CMP(dx, 11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp dx,5')), u'\tR(CMP(dx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,-13')), u'\tR(CMP(eax, -13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,-2')), u'\tR(CMP(eax, -2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,-5')), u'\tR(CMP(eax, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,0')), u'\tR(CMP(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,000f3h')), u'\tR(CMP(eax, 0x000f3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,0101010101010101b')), u'\tR(CMP(eax, 0x5555));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,0101b')), u'\tR(CMP(eax, 0x5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,077123456h')), u'\tR(CMP(eax, 0x077123456));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,0ffff0003h')), u'\tR(CMP(eax, 0x0ffff0003));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,0ffff00f3h')), u'\tR(CMP(eax, 0x0ffff00f3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,0ffffff03h')), u'\tR(CMP(eax, 0x0ffffff03));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,0fffffff3h')), u'\tR(CMP(eax, 0x0fffffff3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,1')), u'\tR(CMP(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,2')), u'\tR(CMP(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,256')), u'\tR(CMP(eax, 256));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,3')), u'\tR(CMP(eax, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,4')), u'\tR(CMP(eax, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,5')), u'\tR(CMP(eax, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,6')), u'\tR(CMP(eax, 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp eax,ebx')), u'\tR(CMP(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebp,9')), u'\tR(CMP(ebp, 9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,0')), u'\tR(CMP(ebx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,010B')), u'\tR(CMP(ebx, 0x2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,0ffffff00h')), u'\tR(CMP(ebx, 0x0ffffff00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,1')), u'\tR(CMP(ebx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,100h')), u'\tR(CMP(ebx, 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,12345')), u'\tR(CMP(ebx, 12345));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,2')), u'\tR(CMP(ebx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,3')), u'\tR(CMP(ebx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ebx,TWO')), u'\tR(CMP(ebx, TWO));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ecx,-5')), u'\tR(CMP(ecx, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ecx,0af222h')), u'\tR(CMP(ecx, 0x0af222));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ecx,0dff1h')), u'\tR(CMP(ecx, 0x0dff1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ecx,0ffffh')), u'\tR(CMP(ecx, 0x0ffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ecx,3')), u'\tR(CMP(ecx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp ecx,5')), u'\tR(CMP(ecx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edi,0')), u'\tR(CMP(edi, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edi,esi')), u'\tR(CMP(edi, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edi,offset var4+1')), u'\tR(CMP(edi, offset(_data,var4)+1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edi,offset var4+4')), u'\tR(CMP(edi, offset(_data,var4)+4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edx,-2')), u'\tR(CMP(edx, -2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edx,0')), u'\tR(CMP(edx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edx,0abcdef77h')), u'\tR(CMP(edx, 0x0abcdef77));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edx,0ffffh')), u'\tR(CMP(edx, 0x0ffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edx,1')), u'\tR(CMP(edx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp edx,10')), u'\tR(CMP(edx, 10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp esi,0')), u'\tR(CMP(esi, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp esi,offset var1+1')), u'\tR(CMP(esi, offset(_data,var1)+1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp esi,offset var3+4')), u'\tR(CMP(esi, offset(_data,var3)+4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var1,1')), u'\tR(CMP(m.var1, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var1,al')), u'\tR(CMP(m.var1, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var1[1],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+1)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var1[bx+si],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+bx+si)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var1[bx],2')), u'\tR(CMP(*(raddr(ds,offset(_data,var1)+bx)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var2,2')), u'\tR(CMP(*(dw*)&m.var2, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var2,bx')), u'\tR(CMP(*(dw*)&m.var2, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var3+3*4,4000000')), u'\tR(CMP(*(raddr(ds,offset(_data,var3)+3*4)), 4000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var3+ebp,4000000')), u'\tR(CMP(*(raddr(ds,offset(_data,var3)+ebp)), 4000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var3,-12')), u'\tR(CMP(*(db*)&m.var3, -12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var3,-13')), u'\tR(CMP(*(db*)&m.var3, -13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var3,3')), u'\tR(CMP(*(db*)&m.var3, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp var3,ecx')), u'\tR(CMP(*(db*)&m.var3, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp word ptr [var5+2],25')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var5)+2)), 25));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp word ptr [var5+2],50')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var5)+2)), 50));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmp word ptr var5,0')), u'\tR(CMP(*(dw*)(raddr(ds,offset(_data,var5))), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpsb')), 'CMPSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpsd')),'\tR(CMPSD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpsw')),'\tR(CMPSW);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg al, dl')),u'\tR(CMPXCHG(al, dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg ax, dx')),u'\tR(CMPXCHG(ax, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg byte ptr [ebp+var_20], bl')),u'\tR(CMPXCHG(*(raddr(ds,ebp+var_20)), bl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg byte ptr [ebp+var_20], dl')),u'\tR(CMPXCHG(*(raddr(ds,ebp+var_20)), dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg cl, dl')),u'\tR(CMPXCHG(cl, dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg cx, dx')),u'\tR(CMPXCHG(cx, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg dword ptr [ebp+var_20], edx')),u'\tR(CMPXCHG(*(dd*)(raddr(ds,ebp+var_20)), edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg eax, edx')),u'\tR(CMPXCHG(eax, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg ecx, edx')),u'\tR(CMPXCHG(ecx, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg word ptr [ebp+var_20], dx')),u'\tR(CMPXCHG(*(dw*)(raddr(ds,ebp+var_20)), dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cmpxchg8b [ebp+var_20]')),u'\tR(CMPXCHG8B(*(dw*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cwd')), '\tR(CWD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'cwde')), '\tR(CWDE);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'daa')), '\tR(DAA);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'das')),'\tR(DAS);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'dec     dl')), u'\tR(DEC(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'dec     dx')), u'\tR(DEC(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'dec     edx')), u'\tR(DEC(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'dec cl              ; decrease loop counter')), u'\tR(DEC(cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'dec cx')), u'\tR(DEC(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'dec eax')), u'\tR(DEC(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'div     cx')), u'\tR(DIV2(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'div     dl')), u'\tR(DIV1(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'div     s1_0')), u'\tR(DIV0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'idiv    cx')), u'\tR(IDIV2(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'idiv    dl')), u'\tR(IDIV1(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'idiv    s1_0')), u'\tR(IDIV0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    ax, cx')), u'\tR(IMUL2_2(ax,cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    ax, cx, 2Dh')), u'\tR(IMUL3_2(ax,cx,0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    ax, di, 8000h')), u'\tR(IMUL3_2(ax,di,0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    ax, dx, -2Dh')), u'\tR(IMUL3_2(ax,dx,-0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    ax, si, 7FFFh')), u'\tR(IMUL3_2(ax,si,0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    cl')), u'\tR(IMUL1_1(cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    cx')), u'\tR(IMUL1_2(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    eax, ecx, 2Dh')), u'\tR(IMUL3_4(eax,ecx,0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    eax, edi, 8000h')), u'\tR(IMUL3_4(eax,edi,0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    eax, edx, -2Dh')), u'\tR(IMUL3_4(eax,edx,-0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    eax, s1_0')), u'\tR(IMUL2_4(eax,s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    ebx, esi, 7FFFh')), u'\tR(IMUL3_4(ebx,esi,0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'imul    s1_0')), u'\tR(IMUL1_0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc     dl')), u'\tR(INC(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc     dx')), u'\tR(INC(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc     edx')), u'\tR(INC(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc     i')), u'\tR(INC(i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc byte ptr [edi+1]')), u'\tR(INC(*(raddr(ds,edi+1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc byte ptr [edi+7]')), u'\tR(INC(*(raddr(ds,edi+7))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc byte ptr es:[0]')), u'\tR(INC(*(raddr(es,0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc eax')), u'\tR(INC(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc ebx')), u'\tR(INC(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc ecx')), u'\tR(INC(ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc edi              ; increase target address')), u'\tR(INC(edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc edi')), u'\tR(INC(edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc edx')), u'\tR(INC(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'inc var3')), u'\tR(INC(*(db*)&m.var3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'int 10h')), u'\tR(_INT(0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'int 21h                         ; DOS INT 21h')), u'\tR(_INT(0x21));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'int 21h                       ; DOS INT 21h                     ; DOS INT 21h')), u'\tR(_INT(0x21));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'int 21h                       ; DOS INT 21h')), u'\tR(_INT(0x21));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'int 21h             ; maybe redirected under DOS 2+ for output to file')), u'\tR(_INT(0x21));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'int 21h')), u'\tR(_INT(0x21));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'int 31h')), u'\tR(_INT(0x31));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jC failure')), u'\t\tR(JC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jNC OK')), u'\t\tR(JNC(ok));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ja      short loc_407784')), u'\t\tR(JA(loc_407784));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ja      short loc_40781A')), u'\t\tR(JA(loc_40781a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ja      short loc_4078B0')), u'\t\tR(JA(loc_4078b0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ja failure')), u'\t\tR(JA(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jb      short loc_40723E')), u'\t\tR(JC(loc_40723e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jb      short loc_4072D4')), u'\t\tR(JC(loc_4072d4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jb      short loc_40736A')), u'\t\tR(JC(loc_40736a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jb failure  ; // because unsigned comparaison')), u'\t\tR(JC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jb failure')), u'\t\tR(JC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jbe     short loc_407400')), u'\t\tR(JBE(loc_407400));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jbe     short loc_407496')), u'\t\tR(JBE(loc_407496));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jbe     short loc_40752C')), u'\t\tR(JBE(loc_40752c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jc failure')), u'\t\tR(JC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jcxz    loc_4081F6')), u'\t\tR(JCXZ(loc_4081f6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jcxz    loc_408229')), u'\t\tR(JCXZ(loc_408229));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jcxz @df@@@@7')), u'\t\tR(JCXZ(arbdfarbarbarbarb7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jcxz failure')), u'\t\tR(JCXZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'je failure ; http://blog.rewolf.pl/blog/?p=177')), u'\t\tR(JZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'je failure')), u'\t\tR(JZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'je ok')), u'\t\tR(JZ(ok));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jecxz   short loc_4083E9')), u'\t\tR(JECXZ(loc_4083e9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jecxz   short loc_40841B')), u'\t\tR(JECXZ(loc_40841b));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jg      short loc_40707C')), u'\t\tR(JG(loc_40707c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jg      short loc_407112')), u'\t\tR(JG(loc_407112));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jg      short loc_4071A8')), u'\t\tR(JG(loc_4071a8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jg @df@@@@1')), u'\t\tR(JG(arbdfarbarbarbarb1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jg failure')), u'\t\tR(JG(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jge     short loc_406EBA')), u'\t\tR(JGE(loc_406eba));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jge     short loc_406F50')), u'\t\tR(JGE(loc_406f50));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jge     short loc_406FE6')), u'\t\tR(JGE(loc_406fe6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jge @df@@@@2')), u'\t\tR(JGE(arbdfarbarbarbarb2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jge @df@@@@3')), u'\t\tR(JGE(arbdfarbarbarbarb3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jge failure')), u'\t\tR(JGE(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jl      short loc_406B3F')), u'\t\tR(JL(loc_406b3f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jl      short loc_406BCF')), u'\t\tR(JL(loc_406bcf));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jl      short loc_406C5A')), u'\t\tR(JL(loc_406c5a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jl @df@@@@4')), u'\t\tR(JL(arbdfarbarbarbarb4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jl failure')), u'\t\tR(JL(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jle     short loc_406CF8')), u'\t\tR(JLE(loc_406cf8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jle     short loc_406D8E')), u'\t\tR(JLE(loc_406d8e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jle     short loc_406E24')), u'\t\tR(JLE(loc_406e24));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jle @df@@@@5')), u'\t\tR(JLE(arbdfarbarbarbarb5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jle @df@@@@6')), u'\t\tR(JLE(arbdfarbarbarbarb6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jle failure')), u'\t\tR(JLE(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     exec_rclb')), u'\t\tR(JMP(exec_rclb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     exec_rcrb')), u'\t\tR(JMP(exec_rcrb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     exec_rolb')), u'\t\tR(JMP(exec_rolb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     exec_rorb')), u'\t\tR(JMP(exec_rorb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     exec_sarb')), u'\t\tR(JMP(exec_sarb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     exec_shlb')), u'\t\tR(JMP(exec_shlb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     exec_shrb')), u'\t\tR(JMP(exec_shrb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp     short loc_40D571')), u'\t\tR(JMP(loc_40d571));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp [cs:table+ax]')), '\t\tR(JMP(__dispatch_call));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp exitLabel')), u'\t\tR(JMP(exitlabel));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp failure')), u'\t\tR(JMP(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp finTest')), u'\t\tR(JMP(fintest));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jmp next')), u'\t\tR(JMP(next));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnC failure')), u'\t\tR(JNC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jna short P2')), u'\t\tR(JBE(p2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnb     short loc_4075C2')), u'\t\tR(JNC(loc_4075c2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnb     short loc_407658')), u'\t\tR(JNC(loc_407658));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnb     short loc_4076EE')), u'\t\tR(JNC(loc_4076ee));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnb failure')), u'\t\tR(JNC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnc failure')), u'\t\tR(JNC(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnc noerror')), u'\t\tR(JNC(noerror));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jne exitLabel')), u'\t\tR(JNZ(exitlabel));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jne failure')), u'\t\tR(JNZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jns     short loc_408008')), u'\t\tR(JNS(loc_408008));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jns     short loc_40809E')), u'\t\tR(JNS(loc_40809e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jns     short loc_408139')), u'\t\tR(JNS(loc_408139));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jns failure')), u'\t\tR(JNS(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     loc_409652')), u'\t\tR(JNZ(loc_409652));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4046D6')), u'\t\tR(JNZ(loc_4046d6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4046F6')), u'\t\tR(JNZ(loc_4046f6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404716')), u'\t\tR(JNZ(loc_404716));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404736')), u'\t\tR(JNZ(loc_404736));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404756')), u'\t\tR(JNZ(loc_404756));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404776')), u'\t\tR(JNZ(loc_404776));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404796')), u'\t\tR(JNZ(loc_404796));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404924')), u'\t\tR(JNZ(loc_404924));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404944')), u'\t\tR(JNZ(loc_404944));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404964')), u'\t\tR(JNZ(loc_404964));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404984')), u'\t\tR(JNZ(loc_404984));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4049A4')), u'\t\tR(JNZ(loc_4049a4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4049C4')), u'\t\tR(JNZ(loc_4049c4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4049E4')), u'\t\tR(JNZ(loc_4049e4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404B72')), u'\t\tR(JNZ(loc_404b72));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404B92')), u'\t\tR(JNZ(loc_404b92));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404BB2')), u'\t\tR(JNZ(loc_404bb2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404BD2')), u'\t\tR(JNZ(loc_404bd2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404BF2')), u'\t\tR(JNZ(loc_404bf2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404C12')), u'\t\tR(JNZ(loc_404c12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404C32')), u'\t\tR(JNZ(loc_404c32));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404DC0')), u'\t\tR(JNZ(loc_404dc0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404DE0')), u'\t\tR(JNZ(loc_404de0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404E00')), u'\t\tR(JNZ(loc_404e00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404E20')), u'\t\tR(JNZ(loc_404e20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404E40')), u'\t\tR(JNZ(loc_404e40));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404E60')), u'\t\tR(JNZ(loc_404e60));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_404E80')), u'\t\tR(JNZ(loc_404e80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40500E')), u'\t\tR(JNZ(loc_40500e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40502E')), u'\t\tR(JNZ(loc_40502e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40504E')), u'\t\tR(JNZ(loc_40504e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40506E')), u'\t\tR(JNZ(loc_40506e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40508E')), u'\t\tR(JNZ(loc_40508e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4050AE')), u'\t\tR(JNZ(loc_4050ae));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4050CE')), u'\t\tR(JNZ(loc_4050ce));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4052A0')), u'\t\tR(JNZ(loc_4052a0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4052C0')), u'\t\tR(JNZ(loc_4052c0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4052E0')), u'\t\tR(JNZ(loc_4052e0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405300')), u'\t\tR(JNZ(loc_405300));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405320')), u'\t\tR(JNZ(loc_405320));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405340')), u'\t\tR(JNZ(loc_405340));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405360')), u'\t\tR(JNZ(loc_405360));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405532')), u'\t\tR(JNZ(loc_405532));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405552')), u'\t\tR(JNZ(loc_405552));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405572')), u'\t\tR(JNZ(loc_405572));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405592')), u'\t\tR(JNZ(loc_405592));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4055B2')), u'\t\tR(JNZ(loc_4055b2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4055D2')), u'\t\tR(JNZ(loc_4055d2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4055F2')), u'\t\tR(JNZ(loc_4055f2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40572C')), u'\t\tR(JNZ(loc_40572c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40574C')), u'\t\tR(JNZ(loc_40574c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40576C')), u'\t\tR(JNZ(loc_40576c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40578C')), u'\t\tR(JNZ(loc_40578c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4057AC')), u'\t\tR(JNZ(loc_4057ac));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4057CC')), u'\t\tR(JNZ(loc_4057cc));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4057EC')), u'\t\tR(JNZ(loc_4057ec));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405926')), u'\t\tR(JNZ(loc_405926));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405946')), u'\t\tR(JNZ(loc_405946));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405966')), u'\t\tR(JNZ(loc_405966));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405986')), u'\t\tR(JNZ(loc_405986));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4059A6')), u'\t\tR(JNZ(loc_4059a6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4059C6')), u'\t\tR(JNZ(loc_4059c6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4059E6')), u'\t\tR(JNZ(loc_4059e6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405B0A')), u'\t\tR(JNZ(loc_405b0a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405B2A')), u'\t\tR(JNZ(loc_405b2a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405B4A')), u'\t\tR(JNZ(loc_405b4a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405B6A')), u'\t\tR(JNZ(loc_405b6a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405B8A')), u'\t\tR(JNZ(loc_405b8a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405BAA')), u'\t\tR(JNZ(loc_405baa));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405BCA')), u'\t\tR(JNZ(loc_405bca));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405CEE')), u'\t\tR(JNZ(loc_405cee));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405D0E')), u'\t\tR(JNZ(loc_405d0e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405D2E')), u'\t\tR(JNZ(loc_405d2e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405D4E')), u'\t\tR(JNZ(loc_405d4e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405D6E')), u'\t\tR(JNZ(loc_405d6e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405D8E')), u'\t\tR(JNZ(loc_405d8e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405DAE')), u'\t\tR(JNZ(loc_405dae));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405ED2')), u'\t\tR(JNZ(loc_405ed2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405EF2')), u'\t\tR(JNZ(loc_405ef2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405F12')), u'\t\tR(JNZ(loc_405f12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405F32')), u'\t\tR(JNZ(loc_405f32));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405F52')), u'\t\tR(JNZ(loc_405f52));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405F72')), u'\t\tR(JNZ(loc_405f72));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_405F92')), u'\t\tR(JNZ(loc_405f92));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4060B6')), u'\t\tR(JNZ(loc_4060b6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4060D6')), u'\t\tR(JNZ(loc_4060d6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4060F6')), u'\t\tR(JNZ(loc_4060f6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_406116')), u'\t\tR(JNZ(loc_406116));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_406136')), u'\t\tR(JNZ(loc_406136));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_406156')), u'\t\tR(JNZ(loc_406156));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_406176')), u'\t\tR(JNZ(loc_406176));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4068F5')), u'\t\tR(JNZ(loc_4068f5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40698C')), u'\t\tR(JNZ(loc_40698c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4081D5')), u'\t\tR(JNZ(loc_4081d5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4083C9')), u'\t\tR(JNZ(loc_4083c9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_408444')), u'\t\tR(JNZ(loc_408444));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_4084BF')), u'\t\tR(JNZ(loc_4084bf));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40853A')), u'\t\tR(JNZ(loc_40853a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40B72A')), u'\t\tR(JNZ(loc_40b72a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz     short loc_40B7AD')), u'\t\tR(JNZ(loc_40b7ad));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz P1              ; jump if cl is not equal 0 (zeroflag is not set)')), u'\t\tR(JNZ(p1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jnz failure')), u'\t\tR(JNZ(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'js      short loc_407E46')), u'\t\tR(JS(loc_407e46));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'js      short loc_407F72')), u'\t\tR(JS(loc_407f72));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'js @df@@@@')), u'\t\tR(JS(arbdfarbarbarbarb));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'js failure')), u'\t\tR(JS(failure));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_40458F')), u'\t\tR(JZ(loc_40458f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_4045E7')), u'\t\tR(JZ(loc_4045e7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_40463E')), u'\t\tR(JZ(loc_40463e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_4047DD')), u'\t\tR(JZ(loc_4047dd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404835')), u'\t\tR(JZ(loc_404835));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_40488C')), u'\t\tR(JZ(loc_40488c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404A2B')), u'\t\tR(JZ(loc_404a2b));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404A83')), u'\t\tR(JZ(loc_404a83));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404ADA')), u'\t\tR(JZ(loc_404ada));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404C79')), u'\t\tR(JZ(loc_404c79));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404CD1')), u'\t\tR(JZ(loc_404cd1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404D28')), u'\t\tR(JZ(loc_404d28));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404EC7')), u'\t\tR(JZ(loc_404ec7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404F1F')), u'\t\tR(JZ(loc_404f1f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_404F76')), u'\t\tR(JZ(loc_404f76));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405115')), u'\t\tR(JZ(loc_405115));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_40516D')), u'\t\tR(JZ(loc_40516d));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_4051C4')), u'\t\tR(JZ(loc_4051c4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_4053A7')), u'\t\tR(JZ(loc_4053a7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_4053FF')), u'\t\tR(JZ(loc_4053ff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405456')), u'\t\tR(JZ(loc_405456));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_40563E')), u'\t\tR(JZ(loc_40563e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_4056A0')), u'\t\tR(JZ(loc_4056a0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405838')), u'\t\tR(JZ(loc_405838));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_40589A')), u'\t\tR(JZ(loc_40589a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405A2E')), u'\t\tR(JZ(loc_405a2e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405A85')), u'\t\tR(JZ(loc_405a85));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405C12')), u'\t\tR(JZ(loc_405c12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405C69')), u'\t\tR(JZ(loc_405c69));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405DF6')), u'\t\tR(JZ(loc_405df6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405E4D')), u'\t\tR(JZ(loc_405e4d));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_405FDA')), u'\t\tR(JZ(loc_405fda));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_406031')), u'\t\tR(JZ(loc_406031));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_406A1F')), u'\t\tR(JZ(loc_406a1f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_406AAF')), u'\t\tR(JZ(loc_406aaf));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz      short loc_40D581')), u'\t\tR(JZ(loc_40d581));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'jz failure')), u'\t\tR(JZ(failure));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [eax+4000h]')), u'\tR(eax = eax+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [eax+40h]')), u'\tR(eax = eax+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [eax+ecx+40h]')), u'\tR(eax = eax+ecx+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [eax+ecx]')), u'\tR(eax = eax+ecx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [eax]')), u'\tR(eax = eax);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ebx+4000h]')), u'\tR(eax = ebx+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ebx+40h]')), u'\tR(eax = ebx+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ebx+edx+4000h]')), u'\tR(eax = ebx+edx+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ebx+edx]')), u'\tR(eax = ebx+edx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ebx]')), u'\tR(eax = ebx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ecx+4000h]')), u'\tR(eax = ecx+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ecx+40h]')), u'\tR(eax = ecx+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ecx+ecx*2+4000h]')), u'\tR(eax = ecx+ecx*2+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ecx+ecx*2-0Ah]')), u'\tR(eax = ecx+ecx*2-0x0A);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ecx+ecx*2]')), u'\tR(eax = ecx+ecx*2);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ecx+ecx]')), u'\tR(eax = ecx+ecx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [ecx]')), u'\tR(eax = ecx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edi+4000h]')), u'\tR(eax = edi+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edi+40h]')), u'\tR(eax = edi+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edi+ecx]')), u'\tR(eax = edi+ecx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edi]')), u'\tR(eax = edi);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edx+4000h]')), u'\tR(eax = edx+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edx+40h]')), u'\tR(eax = edx+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edx+ecx*4+4000h]')), u'\tR(eax = edx+ecx*4+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edx+ecx*4-0Ah]')), u'\tR(eax = edx+ecx*4-0x0A);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edx+ecx*4]')), u'\tR(eax = edx+ecx*4);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edx+ecx]')), u'\tR(eax = edx+ecx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [edx]')), u'\tR(eax = edx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [esi+4000h]')), u'\tR(eax = esi+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [esi+40h]')), u'\tR(eax = esi+0x40);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [esi+ecx*8-0Ah]')), u'\tR(eax = esi+ecx*8-0x0A);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [esi+ecx*8]')), u'\tR(eax = esi+ecx*8);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [esi+ecx]')), u'\tR(eax = esi+ecx);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, [esi]')), u'\tR(eax = esi);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, ds:0[eax*2]')), u'\tR(eax = 0+eax*2);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, ds:0[ebx*4]')), u'\tR(eax = 0+ebx*4);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, ds:0[ecx*8]')), u'\tR(eax = 0+ecx*8);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, ds:40h[eax*2]')), u'\tR(eax = 0x40+eax*2);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, ds:40h[ebx*4]')), u'\tR(eax = 0x40+ebx*4);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, ds:40h[ecx*8]')), u'\tR(eax = 0x40+ecx*8);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     eax, large ds:4000h')), u'\tR(eax = large ds:0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     ebx, [ebp+table]')), u'\tR(ebx = ebp+offset(_text,table));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     ebx, [esi+ecx*8+4000h]')), u'\tR(ebx = esi+ecx*8+0x4000);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     edi, [ebp+ecx_vals]')), u'\tR(edi = ebp+ecx_vals);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     edi, [i+2]')), u'\tR(edi = i+2);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     edi, [i+3]')), u'\tR(edi = i+3);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     edi, [i+4]')), u'\tR(edi = i+4);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     edi, [i+5]')), u'\tR(edi = i+5);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     edi, [i-10h]')), u'\tR(edi = i-0x10);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     edx, [i+56h]')), u'\tR(edx = i+0x56);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea     esi, [i+1]')), u'\tR(esi = i+1);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea eax,enddata')), u'\tR(eax = offset(_data,enddata));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea ebx,beginningdata')), u'\tR(ebx = offset(_data,beginningdata));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea edi,buffer')), u'\tR(edi = offset(_data,buffer));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea edi,f')), u'\tR(edi = offset(_data,f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea edi,testOVerlap')), u'\tR(edi = offset(_data,testOVerlap));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea edi,var1')), u'\tR(edi = offset(_data,var1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea edx,fileName')), u'\tR(edx = offset(_data,fileName));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea esi,b')), u'\tR(esi = offset(_data,b));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea esi,f')), u'\tR(esi = offset(_data,f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea esi,var2')), u'\tR(esi = offset(_data,var2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lea esi,var5')), u'\tR(esi = offset(_data,var5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'leave')), '\tR(MOV(esp, ebp));\nR(POP(ebp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lodsb')), 'LODSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lodsd')), 'LODSD;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'lodsw')), 'LODSW;\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loop    loc_408464')), u'\t\tR(LOOP(loc_408464));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loop    loc_408496')), u'\t\tR(LOOP(loc_408496));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loop dffd')), u'\t\tR(LOOP(dffd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loop toto')), u'\t\tR(LOOP(toto));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loope   loc_4084DF')), u'\tR(LOOPE(loc_4084df));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loope   loc_408511')), u'\tR(LOOPE(loc_408511));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loope toto1')), u'\tR(LOOPE(toto1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loope toto2')), u'\tR(LOOPE(toto2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loopne  loc_40855A')), u'\tR(LOOPNE(loc_40855a));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'loopne  loc_40858C')), u'\tR(LOOPNE(loc_40858c));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+ecx_0], ecx_0_0')), u'\tR(MOV(*(dw*)(raddr(ds,ebp+ecx_0)), ecx_0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+edx_0], edx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+edx_0)), edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+i+table], dl')), u'\tR(MOV(*(raddr(ds,ebp+i+offset(_text,table))), dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+s0], esi')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+s1], 0')), u'\tR(MOV(*(raddr(ds,ebp+s1)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+s1], 1')), u'\tR(MOV(*(raddr(ds,ebp+s1)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+s2], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+var_1C], edx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_1C)), edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [ebp+var_20], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], edi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], edi_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), edi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], edx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], op0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), op0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], op1')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), op1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], r')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), r));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], resz')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), resz));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+0Ch], s1_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x0C)), s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], eax_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), eax_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], op1')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), op1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], resz')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), resz));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], rh')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), rh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+10h], s1_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x10)), s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], ecx_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), ecx_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], edi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], edx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], esi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], flags')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), flags));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+14h], resh')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x14)), resh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+18h], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+18h], edi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x18)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+18h], edx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+18h], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+0x18)), res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+1Ch], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x1C)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+1Ch], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x1C)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+4], eax_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+4)), eax_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+4], ebx    ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+4], edi    ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+4], esi    ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+4], esi    ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+4], i      ; op0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+4)), i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+4], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+4)), res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], eax')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], ebx    ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], ebx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], ecx')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], ecx_0_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), ecx_0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], edi    ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], edi    ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], edx_0_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), edx_0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], esi    ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], esi    ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], esi')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], esi_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), esi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], i      ; s1')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], i')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], op0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), op0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], res')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], resh')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), resh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp+8], s0_0')), u'\tR(MOV(*(dw*)(raddr(ds,esp+8)), s0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp], ebx      ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp], ebx      ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     [esp], edi      ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dl, al')), u'\tR(MOV(dl, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ds:byte_41411F[eax], dl')), u'\tR(MOV(*(raddr(ds,offset(_bss,byte_41411F)+eax)), dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [ebp+var_20+4], 0FBCA7h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20+4)), 0x0FBCA7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [ebp+var_20+4], 12345h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20+4)), 0x12345));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [ebp+var_20], 0FBCA7654h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [ebp+var_20], 65423456h')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x65423456));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [ebp+var_20], 6789ABCDh')), u'\tR(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x6789ABCD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+0Ch], 0 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+0Ch], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+0Ch], 1 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+0Ch], 1000h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+0Ch], 1234h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1234));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+0Ch], 17h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+0Ch], 80000000h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+10h], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+10h], 1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+10h], 10h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+10h], 11h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+14h], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+1Ch], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+0x1C)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0 ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFC70F9h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFC70F9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFE0080h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFE0080h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFEDCBFh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFA549h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFA549));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFD3h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFD3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFBh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFB));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFCh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFDh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFEh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFEh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFFh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFFh ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 0FFFFFFFFh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 1 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 1 ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 10000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 10000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 10000h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 100h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 100h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 10h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 1234001Dh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1234001D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 12341h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 12345678h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 12345678h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 12348000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x12348000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 127Eh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x127E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 17h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 1FF7Fh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 1FF80h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 1FF81h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 1FFFFh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 2 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 2 ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 20000h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 2Dh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 3 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 3 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 4 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 7FFFFFFFh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 80000000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 80000000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 80000001h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000001));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 80008688h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 8000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 8000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 80h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 80h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 812FADAh ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 81h ; s1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], 82345679h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000 ; "0x4000"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000Eax ; "0x4000(%%eax)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Eax)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000Ebx ; "0x4000(%%ebx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Ebx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000EbxEdx ; "0x4000(%%ebx, %%edx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EbxEdx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000Ecx ; "0x4000(%%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Ecx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000EcxEcx2 ; "0x4000(%%ecx, %%ecx, 2)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EcxEcx2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000Edi ; "0x4000(%%edi)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Edi)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000Edx ; "0x4000(%%edx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Edx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000EdxEcx4 ; "0x4000(%%edx, %%ecx, 4)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EdxEcx4)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000Esi ; "0x4000(%%esi)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Esi)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x4000EsiEcx8 ; "0x4000(%%esi, %%ecx, 8)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EsiEcx8)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Eax ; "0x40(%%eax)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Eax)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Eax2 ; "0x40(,%%eax, 2)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Eax2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40EaxEcx ; "0x40(%%eax, %%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40EaxEcx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Ebx ; "0x40(%%ebx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ebx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Ebx4 ; "0x40(,%%ebx, 4)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ebx4)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Ecx ; "0x40(%%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ecx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Ecx8 ; "0x40(,%%ecx, 8)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ecx8)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Edi ; "0x40(%%edi)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Edi)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Edx ; "0x40(%%edx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Edx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a0x40Esi ; "0x40(%%esi)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Esi)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a10EcxEcx2 ; "-10(%%ecx, %%ecx, 2)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a10EcxEcx2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a10EdxEcx4 ; "-10(%%edx, %%ecx, 4)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a10EdxEcx4)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset a10EsiEcx8 ; "-10(%%esi, %%ecx, 8)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a10EsiEcx8)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAaa ; "aaa"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAad ; "aad"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAad)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAam ; "aam"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAam)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAas ; "aas"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAdcb ; "adcb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAdcb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAdcl ; "adcl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAdcl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAdcw ; "adcw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAdcw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAddb ; "addb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAddb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAddl ; "addl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAddl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAddw ; "addw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAddw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAndb ; "andb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAndb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAndl ; "andl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAndl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aAndw ; "andw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAndw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBsfl ; "bsfl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBsfw ; "bsfw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBsrl ; "bsrl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBsrw ; "bsrw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBswapl ; "bswapl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBswapl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtcl ; "btcl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtcl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtcw ; "btcw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtcw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtl ; "btl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtrl ; "btrl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtrl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtrw ; "btrw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtrw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtsl ; "btsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtsw ; "btsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aBtw ; "btw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCbw ; "cbw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCbw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCdq ; "cdq"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCdq)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpb ; "cmpb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpl ; "cmpl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpsb ; "cmpsb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpsl ; "cmpsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpsw ; "cmpsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpw ; "cmpw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCwd ; "cwd"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCwd)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aCwde ; "cwde"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCwde)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDaa ; "daa"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDas ; "das"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDecb ; "decb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDecb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDecl ; "decl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDecl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDecw ; "decw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDecw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDivb ; "divb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDivb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDivl ; "divl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDivl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aDivw ; "divw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDivw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEax ; "(%%eax)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEax)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEax2 ; "(,%%eax, 2)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEax2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEaxEcx ; "(%%eax, %%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEaxEcx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEbx ; "(%%ebx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEbx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEbx4 ; "(,%%ebx, 4)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEbx4)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEbxEdx ; "(%%ebx, %%edx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEbxEdx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEcx ; "(%%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEcx8 ; "(,%%ecx, 8)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcx8)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEcxEcx ; "(%%ecx, %%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcxEcx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEcxEcx2 ; "(%%ecx, %%ecx, 2)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcxEcx2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEdi ; "(%%edi)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdi)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEdiEcx ; "(%%edi, %%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdiEcx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEdx ; "(%%edx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEdxEcx ; "(%%edx, %%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdxEcx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEdxEcx4 ; "(%%edx, %%ecx, 4)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdxEcx4)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEsi ; "(%%esi)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEsi)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEsiEcx ; "(%%esi, %%ecx)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEsiEcx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aEsiEcx8 ; "(%%esi, %%ecx, 8)"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEsiEcx8)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aIdivb ; "idivb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIdivb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aIdivl ; "idivl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIdivl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aIdivw ; "idivw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIdivw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aImulb ; "imulb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aImull ; "imull"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImull)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aImullIm ; "imull im"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImullIm)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aImulw ; "imulw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulwIm)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aIncb ; "incb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIncb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aIncl ; "incl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIncl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aIncw ; "incw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIncw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJa ; "ja"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJa)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJae ; "jae"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJae)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJb ; "jb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJbe ; "jbe"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJbe)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJcxz ; "jcxz"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJcxz)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJe ; "je"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJe)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJecxz ; "jecxz"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJecxz)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJg ; "jg"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJg)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJge ; "jge"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJge)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJl ; "jl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJle ; "jle"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJle)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJne ; "jne"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJne)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJns ; "jns"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJns)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aJs ; "js"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJs)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aLodsb ; "lodsb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aLodsl ; "lodsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aLodsw ; "lodsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aLoopl ; "loopl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aLoopnzl ; "loopnzl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopnzl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aLoopzl ; "loopzl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopzl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aMovsb ; "movsb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aMovsl ; "movsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aMovsw ; "movsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aMulb ; "mulb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMulb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aMull ; "mull"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMull)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aMulw ; "mulw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMulw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aNegb ; "negb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNegb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aNegl ; "negl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNegl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aNegw ; "negw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNegw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aNotb ; "notb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNotb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aNotl ; "notl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNotl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aNotw ; "notw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNotw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aOrb ; "orb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aOrb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aOrl ; "orl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aOrl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aOrw ; "orw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aOrw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRclb ; "rclb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRclb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRcll ; "rcll"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcll)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRclw ; "rclw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRclw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRcrb ; "rcrb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcrb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRcrl ; "rcrl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcrl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRcrw ; "rcrw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcrw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepLodsb ; "rep lodsb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepLodsl ; "rep lodsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepLodsw ; "rep lodsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepMovsb ; "rep movsb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepMovsl ; "rep movsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepMovsw ; "rep movsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepStosb ; "rep stosb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepStosl ; "rep stosl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepStosw ; "rep stosw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepnzCmpsb ; "repnz cmpsb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepnzCmpsl ; "repnz cmpsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepnzCmpsw ; "repnz cmpsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepnzScasb ; "repnz scasb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepnzScasl ; "repnz scasl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepnzScasw ; "repnz scasw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepzCmpsb ; "repz cmpsb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepzCmpsl ; "repz cmpsl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepzCmpsw ; "repz cmpsw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepzScasb ; "repz scasb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepzScasl ; "repz scasl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRepzScasw ; "repz scasw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRolb ; "rolb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRolb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRoll ; "roll"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRoll)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRolw ; "rolw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRolw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRorb ; "rorb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRorb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRorl ; "rorl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRorl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aRorw ; "rorw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRorw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSarb ; "sarb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSarb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSarl ; "sarl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSarl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSarw ; "sarw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSarw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSbbb ; "sbbb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSbbb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSbbl ; "sbbl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSbbl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSbbw ; "sbbw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSbbw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aScasb ; "scasb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aScasl ; "scasl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aScasw ; "scasw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSetb ; "setb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSetb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSete ; "sete"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSete)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSetne ; "setne"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSetne)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShlb ; "shlb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShlb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShldl ; "shldl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShldl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShldw ; "shldw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShldw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShll ; "shll"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShll)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShlw ; "shlw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShlw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShrb ; "shrb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShrdl ; "shrdl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrdl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShrdw ; "shrdw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrdw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShrl ; "shrl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aShrw ; "shrw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aStosb ; "stosb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aStosl ; "stosl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aStosw ; "stosw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSubb ; "subb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSubb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSubl ; "subl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSubl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aSubw ; "subw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSubw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXaddb ; "xaddb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXaddl ; "xaddl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXaddw ; "xaddw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXchgb ; "xchgb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXchgl ; "xchgl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXchgw ; "xchgw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXorb ; "xorb"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXorb)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXorl ; "xorl"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXorl)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+4], offset aXorw ; "xorw"')), u'\tR(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXorw)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FBCA7654h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFEFDFCh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFEFDFC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFF7FFFh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFF7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFED4h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFED4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFD3h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFD3h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFF7h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFF7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFAh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFA));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFBh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFB));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFCh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFDh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFEh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFFh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 0Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x0F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1 ; iflags')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 10000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 100h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340128h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340128));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340205h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340205));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340306h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340306));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340407h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340407));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1234040Ah')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234040A));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340503h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340506h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340507h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340507));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340547h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340547));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340559h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340559));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12340560h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340560));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1234059Fh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234059F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 123405A0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405A0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 123405FAh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405FA));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12345678h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 12Ch ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x12C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 1Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x1F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 2 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 2Dh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 2Dh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3 ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 303Bh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x303B));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 340128h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x340128));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 3Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x3F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFFFFFFh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFFh')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7FFh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 7Fh ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x7F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 80000000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 8000h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 8000h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 81234567h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x81234567));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 81238567h ; op1')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x81238567));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp+8], 8234A6F8h')), u'\tR(MOV(*(dd*)(raddr(ds,esp+8)), 0x8234A6F8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0 ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFE0080h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFE0080h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFECh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFECh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFFDh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFFFh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFFFh ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 0FFFFFFFFh ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 10000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x10000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 100h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x100));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 10h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12340004h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12340004));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1234001Dh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1234001D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12341678h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12341678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12341h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12341));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12343h ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12343));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1234561Dh ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1234561D));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12345678h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12347F7Fh ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12347FFFh ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12348000h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 12348080h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 14h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 14h ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 17h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1FEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1FFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1FFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1FFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1FFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 1FFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 2 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 21AD3D34h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3 ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3FEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3FFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3FFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3FFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3FFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 3FFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 4 ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 43210123h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x43210123));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7Eh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7E));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7FEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7FFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7FFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7FFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7FFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7FFFFFFEh ; op0h')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFE));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 7FFFFFFFh ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 80000000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 80000000h ; s0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 80008481h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 8000h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x8000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 80h ; op0')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x80));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], 813F3421h ; s2')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxC)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxR08lx ; "%-10s A=%08lx R=%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxR08lx0 ; "%-10s A=%08lx R=%08lx:%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx0)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08lxR08lx_0 ; "%-10s: A=%08lx R=%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx_0)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sD ; "%-10s %d\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset aCmpxchg8bEax08 ; "cmpxchg8b: eax=%08lx edx=%08lx op1=%016"...')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aCmpxchg8bEax08)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset aPopcntA08lxR08 ; "popcnt A=%08lx R=%08lx flags=%lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aPopcntA08lxR08)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset aPoplEsp08lx ; "popl esp=%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aPoplEsp08lx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset aPopwEsp08lx ; "popw esp=%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aPopwEsp08lx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset aXaddlSameRes08 ; "xaddl same res=%08x\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aXaddlSameRes08)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     dword ptr [esp], offset aXlatEax08lx ; "xlat: EAX=%08lx\\n"')), u'\tR(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aXlatEax08lx)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 0')), u'\tR(MOV(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 0FFFF7FFFh')), u'\tR(MOV(eax, 0x0FFFF7FFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 1')), u'\tR(MOV(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 12340407h')), u'\tR(MOV(eax, 0x12340407));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 12340547h')), u'\tR(MOV(eax, 0x12340547));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 12340559h')), u'\tR(MOV(eax, 0x12340559));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 12340560h')), u'\tR(MOV(eax, 0x12340560));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 1234059Fh')), u'\tR(MOV(eax, 0x1234059F));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 123405FAh')), u'\tR(MOV(eax, 0x123405FA));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 12345678h')), u'\tR(MOV(eax, 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, 7FFFFFFFh')), u'\tR(MOV(eax, 0x7FFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, dword ptr [ebp+var_20]')), u'\tR(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, ebx')), u'\tR(MOV(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, edi')), u'\tR(MOV(eax, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, edx')), u'\tR(MOV(eax, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, esi')), u'\tR(MOV(eax, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, flags')), u'\tR(MOV(eax, flags));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, res')), u'\tR(MOV(eax, res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     eax, s0_0')), u'\tR(MOV(eax, s0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebp, esp')), u'\tR(MOV(ebp, esp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, (offset str_buffer+800h)')), u'\tR(MOV(ebx, offset(_bss,str_buffer)+0x800));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, 1')), u'\tR(MOV(ebx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, 1234040Ah')), u'\tR(MOV(ebx, 0x1234040A));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, 12340506h')), u'\tR(MOV(ebx, 0x12340506));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, 12345678h')), u'\tR(MOV(ebx, 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, 2')), u'\tR(MOV(ebx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, 8234A6F8h')), u'\tR(MOV(ebx, 0x8234A6F8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, [ebp+iflags]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, [ebp+op0h]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+op0h))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, [ebp+s0]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, [ebp+s2]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, [ebp+var_4]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+var_4))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, dword ptr [ebp+var_20+4]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,ebp+var_20+4))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, edi')), u'\tR(MOV(ebx, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, i')), u'\tR(MOV(ebx, i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ebx, offset _test_btc')), u'\tR(MOV(ebx, offset(initcall,_test_btc)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, 1')), u'\tR(MOV(ecx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, 10h')), u'\tR(MOV(ecx, 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, 11h')), u'\tR(MOV(ecx, 0x11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, 1234h')), u'\tR(MOV(ecx, 0x1234));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, 4')), u'\tR(MOV(ecx, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, 65324h')), u'\tR(MOV(ecx, 0x65324));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, [ebp+ecx_0]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+ecx_0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, [ebp+edx_0]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+edx_0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, [ebp+i*4+ecx_vals]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, [ebp+s0]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, [ebp+s1]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, [ebp+var_20]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, dword ptr [ebp+var_20+4]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20+4))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, dword ptr [ebp+var_20]')), u'\tR(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, edi')), u'\tR(MOV(ecx, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     ecx, res')), u'\tR(MOV(ecx, res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, (offset str_buffer+810h)')), u'\tR(MOV(edi, offset(_bss,str_buffer)+0x810));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 0FBCA7654h')), u'\tR(MOV(edi, 0x0FBCA7654));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 0FFFFFFF7h')), u'\tR(MOV(edi, 0x0FFFFFFF7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 1')), u'\tR(MOV(edi, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 12340128h')), u'\tR(MOV(edi, 0x12340128));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 12340205h')), u'\tR(MOV(edi, 0x12340205));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 123405A0h')), u'\tR(MOV(edi, 0x123405A0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 12345h')), u'\tR(MOV(edi, 0x12345));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 20h')), u'\tR(MOV(edi, 0x20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, 80000000h')), u'\tR(MOV(edi, 0x80000000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, [ebp+iflags]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+iflags))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, [ebp+op0]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+op0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, [ebp+s1]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi, [ebp+s2]')), u'\tR(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edi_0, (offset str_buffer+810h)')), u'\tR(MOV(edi_0, offset(_bss,str_buffer)+0x810));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 1')), u'\tR(MOV(edx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 10h')), u'\tR(MOV(edx, 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 11h')), u'\tR(MOV(edx, 0x11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 12340507h')), u'\tR(MOV(edx, 0x12340507));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 12345678h')), u'\tR(MOV(edx, 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 17h')), u'\tR(MOV(edx, 0x17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 340128h')), u'\tR(MOV(edx, 0x340128));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, 8')), u'\tR(MOV(edx, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, [ebp+s1]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, [ebp+var_1C]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+var_1C))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, dword ptr [ebp+var_20]')), u'\tR(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, ebx')), u'\tR(MOV(edx, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, edi')), u'\tR(MOV(edx, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, esi')), u'\tR(MOV(edx, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, res')), u'\tR(MOV(edx, res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx, resh')), u'\tR(MOV(edx, resh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     edx_0_0, dword ptr [ebp+var_20]')), u'\tR(MOV(edx_0_0, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 0FFFEFDFCh')), u'\tR(MOV(esi, 0x0FFFEFDFC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 1000h')), u'\tR(MOV(esi, 0x1000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 10h')), u'\tR(MOV(esi, 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 12340306h')), u'\tR(MOV(esi, 0x12340306));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 12340503h')), u'\tR(MOV(esi, 0x12340503));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 12345678h')), u'\tR(MOV(esi, 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 6789ABCDh')), u'\tR(MOV(esi, 0x6789ABCD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, 8345A1F2h')), u'\tR(MOV(esi, 0x8345A1F2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, [ebp+iflags]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, [ebp+op0]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+op0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, [ebp+op0h]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+op0h))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, [ebp+s0]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, [ebp+s1]')), u'\tR(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, esi_0')), u'\tR(MOV(esi, esi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi, offset unk_40E008')), u'\tR(MOV(esi, offset(_data,unk_40E008)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     esi_0, ebx')), u'\tR(MOV(esi_0, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     i, 12345678h')), u'\tR(MOV(i, 0x12345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     i, esi')), u'\tR(MOV(i, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov     op0, 32432434h')), u'\tR(MOV(op0, 0x32432434));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov   al,0')), u'\tR(MOV(al, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov   dx,3c8h')), u'\tR(MOV(dx, 0x3c8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov   dx,3c9h')), u'\tR(MOV(dx, 0x3c9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov   esi,offset pal_jeu')), u'\tR(MOV(esi, offset(_data,pal_jeu)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov  bx,ax')), u'\tR(MOV(bx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov  fs,ax')), u'\tR(MOV(fs, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov [a],5')), u'\tR(MOV(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov [load_handle],eax')), u'\tR(MOV(*(dd*)(raddr(ds,offset(_data,load_handle))), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov a,5')), u'\tR(MOV(*(db*)&m.a, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov a,ah')), u'\tR(MOV(*(db*)&m.a, ah));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov a,al')), u'\tR(MOV(*(db*)&m.a, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,03dh')), u'\tR(MOV(ah, 0x03d));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,03eh')), u'\tR(MOV(ah, 0x03e));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,03fh')), u'\tR(MOV(ah, 0x03f));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,042h')), u'\tR(MOV(ah, 0x042));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,48h')), u'\tR(MOV(ah, 0x48));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,49h')), u'\tR(MOV(ah, 0x49));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,4Ah')), u'\tR(MOV(ah, 0x4A));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,4ch                    ; AH=4Ch - Exit To DOS')), u'\tR(MOV(ah, 0x4c));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,7')), u'\tR(MOV(ah, 7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ah,9                        ; AH=09h - Print DOS Message')), u'\tR(MOV(ah, 9));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov al,-5')), u'\tR(MOV(al, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov al,00h  ;ouverture du fichier pour lecture.')), u'\tR(MOV(al, 0x00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov al,00h ;debut du fichier')), u'\tR(MOV(al, 0x00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov al,1')), u'\tR(MOV(al, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov al,7')), u'\tR(MOV(al, 7));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov al,[a]')), u'\tR(MOV(al, *(raddr(ds,offset(_data,a)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,-1')), u'\tR(MOV(ax, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,0002h')), u'\tR(MOV(ax, 0x0002));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,0007')), u'\tR(MOV(ax, 0007));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,01010101010101010b')), u'\tR(MOV(ax, 0xaaaa));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,01111111111111111b')), u'\tR(MOV(ax, 0xffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,08h')), u'\tR(MOV(ax, 0x08));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,13h')), u'\tR(MOV(ax, 0x13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,3h')), u'\tR(MOV(ax, 0x3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,4')), u'\tR(MOV(ax, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,501h')), u'\tR(MOV(ax, 0x501));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,6')), u'\tR(MOV(ax, 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ax,bp')), u'\tR(MOV(ax, bp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov b,ax')), u'\tR(MOV(m.b, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bl,-1')), u'\tR(MOV(bl, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bl,0')), u'\tR(MOV(bl, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bl,011111111B')), u'\tR(MOV(bl, 0xff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bl,1')), u'\tR(MOV(bl, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bl,192')), u'\tR(MOV(bl, 192));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bl,[a+1]')), u'\tR(MOV(bl, *(raddr(ds,offset(_data,a)+1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bl,al')), u'\tR(MOV(bl, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,(1024*10/16)+5')), u'\tR(MOV(bx, (1024*10/16)+5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,(1024*10/16)-1')), u'\tR(MOV(bx, (1024*10/16)-1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,10')), u'\tR(MOV(bx, 10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,1024*10/16')), u'\tR(MOV(bx, 1024*10/16));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,5')), u'\tR(MOV(bx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,ax')), u'\tR(MOV(bx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,fs')), u'\tR(MOV(bx, fs));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,word ptr [d]')), u'\tR(MOV(bx, *(dw*)(raddr(ds,offset(_data,d)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov bx,word ptr [e]')), u'\tR(MOV(bx, *(dw*)(raddr(ds,offset(_data,e)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov byte ptr [a],5')), u'\tR(MOV(*(raddr(ds,offset(_data,a))), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov byte ptr [esi],-2')), u'\tR(MOV(*(raddr(ds,esi)), -2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov byte ptr [var1+1],5')), u'\tR(MOV(*(raddr(ds,offset(_data,var1)+1)), 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov byte ptr dl,[edi]')), u'\tR(MOV(dl, *(raddr(ds,edi))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov byte ptr ds:[0],55')), u'\tR(MOV(*(raddr(ds,0)), 55));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov byte ptr es:[0],55')), u'\tR(MOV(*(raddr(es,0)), 55));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov byte ptr es:[0],56')), u'\tR(MOV(*(raddr(es,0)), 56));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov c,eax')), u'\tR(MOV(m.c, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ch,011111111B')), u'\tR(MOV(ch, 0xff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cl,2')), u'\tR(MOV(cl, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cl,8            ; number of ASCII')), u'\tR(MOV(cl, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cx,-1')), u'\tR(MOV(cx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cx,-5')), u'\tR(MOV(cx, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cx,0')), u'\tR(MOV(cx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cx,1')), u'\tR(MOV(cx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cx,256*3')), u'\tR(MOV(cx, 256*3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov cx,ax')), u'\tR(MOV(cx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dl,[edi+1]')), u'\tR(MOV(dl, *(raddr(ds,edi+1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dl,[edi]')), u'\tR(MOV(dl, *(raddr(ds,edi))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dl,var1')), u'\tR(MOV(dl, m.var1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ds, _data')), u'\tR(MOV(ds, seg_offset(_data)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ds:[edi],cl')), u'\tR(MOV(*(raddr(ds,edi)), cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dword ptr es:[0],077aaFF00h')), u'\tR(MOV(*(dd*)(raddr(es,0)), 0x077aaFF00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dword ptr es:[20*320+160],077aaFF00h')), u'\tR(MOV(*(dd*)(raddr(es,20*320+160)), 0x077aaFF00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dx,-1')), u'\tR(MOV(dx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dx,0')), u'\tR(MOV(dx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dx,1')), u'\tR(MOV(dx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dx,5')), u'\tR(MOV(dx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dx,[edi+1]')), u'\tR(MOV(dx, *(dw*)(raddr(ds,edi+1))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dx,ax')), u'\tR(MOV(dx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov dx,cx')), u'\tR(MOV(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax, 0ffffffffh')), u'\tR(MOV(eax, 0x0ffffffff));\n')
        #self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax, B')), u'\tR(MOV(eax, B));\n')
        #self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax, CC')), u'\tR(MOV(eax, CC));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,-1')), u'\tR(MOV(eax, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,-1-(-2+3)')), u'\tR(MOV(eax, -1-(-2+3)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,-4')), u'\tR(MOV(eax, -4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,-5')), u'\tR(MOV(eax, -5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,-8')), u'\tR(MOV(eax, -8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,0')), u'\tR(MOV(eax, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,0100b')), u'\tR(MOV(eax, 0x4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,011111111111111111111111111111111b')), u'\tR(MOV(eax, 0xffffffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,012345678h')), u'\tR(MOV(eax, 0x012345678));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,077aaFF00h')), u'\tR(MOV(eax, 0x077aaFF00));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,0ffff00f3h')), u'\tR(MOV(eax, 0x0ffff00f3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,0ffffff03h')), u'\tR(MOV(eax, 0x0ffffff03));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,1')), u'\tR(MOV(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,1024*1024')), u'\tR(MOV(eax, 1024*1024));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,10B')), u'\tR(MOV(eax, 0x2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,2')), u'\tR(MOV(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,256+3+65536')), u'\tR(MOV(eax, 256+3+65536));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,3')), u'\tR(MOV(eax, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,4')), u'\tR(MOV(eax, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,5')), u'\tR(MOV(eax, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,511')), u'\tR(MOV(eax, 511));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,taille_moire  ;::!300000h-1 ;182400h-1 ;1582080 ;0300000h-1 ;2mega 182400h-1')), u'\tR(MOV(eax, taille_moire));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov eax,teST2')), u'\tR(MOV(eax, teST2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,10')), u'\tR(MOV(ebp, 10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,11')), u'\tR(MOV(ebp, 11));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,12')), u'\tR(MOV(ebp, 12));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,13')), u'\tR(MOV(ebp, 13));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,14')), u'\tR(MOV(ebp, 14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,15')), u'\tR(MOV(ebp, 15));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,16')), u'\tR(MOV(ebp, 16));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,17')), u'\tR(MOV(ebp, 17));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,18')), u'\tR(MOV(ebp, 18));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,19')), u'\tR(MOV(ebp, 19));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,2')), u'\tR(MOV(ebp, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,20')), u'\tR(MOV(ebp, 20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,21')), u'\tR(MOV(ebp, 21));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,22')), u'\tR(MOV(ebp, 22));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,23')), u'\tR(MOV(ebp, 23));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,24')), u'\tR(MOV(ebp, 24));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,25')), u'\tR(MOV(ebp, 25));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,26')), u'\tR(MOV(ebp, 26));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,27')), u'\tR(MOV(ebp, 27));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,28')), u'\tR(MOV(ebp, 28));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,29')), u'\tR(MOV(ebp, 29));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,3')), u'\tR(MOV(ebp, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,3*4')), u'\tR(MOV(ebp, 3*4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebp,30')), u'\tR(MOV(ebp, 30));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,-1')), u'\tR(MOV(ebx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,0')), u'\tR(MOV(ebx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,00fffh')), u'\tR(MOV(ebx, 0x00fff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,01B')), u'\tR(MOV(ebx, 0x1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,0FFFFFFFFh')), u'\tR(MOV(ebx, 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,0a000h')), u'\tR(MOV(ebx, 0x0a000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,0aabbccddh')), u'\tR(MOV(ebx, 0x0aabbccdd));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,0f222h')), u'\tR(MOV(ebx, 0x0f222));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,0ffff01ffh')), u'\tR(MOV(ebx, 0x0ffff01ff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,0ffffffffh')), u'\tR(MOV(ebx, 0x0ffffffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,2')), u'\tR(MOV(ebx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,255')), u'\tR(MOV(ebx, 255));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,3')), u'\tR(MOV(ebx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,5')), u'\tR(MOV(ebx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,[g]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,offset(_data,g)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,[load_handle]')), u'\tR(MOV(ebx, *(dd*)(raddr(ds,offset(_data,load_handle)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,eax')), u'\tR(MOV(ebx, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ebx,g')), u'\tR(MOV(ebx, m.g));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,-1')), u'\tR(MOV(ecx, -1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,000ff00ffh')), u'\tR(MOV(ecx, 0x000ff00ff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,0a0000h')), u'\tR(MOV(ecx, 0x0a0000));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,0df01h')), u'\tR(MOV(ecx, 0x0df01));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,0f0ffh')), u'\tR(MOV(ecx, 0x0f0ff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,0ffffffffh')), u'\tR(MOV(ecx, 0x0ffffffff));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,10')), u'\tR(MOV(ecx, 10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,2')), u'\tR(MOV(ecx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,3')), u'\tR(MOV(ecx, 3));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,320*200/4')), u'\tR(MOV(ecx, 320*200/4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,5')), u'\tR(MOV(ecx, 5));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,60')), u'\tR(MOV(ecx, 60));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov ecx,t')), u'\tR(MOV(ecx, t));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,1')), u'\tR(MOV(edi, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,8')), u'\tR(MOV(edi, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,OFFSET AsCii ; get the offset address')), u'\tR(MOV(edi, offset(_data,ASCII)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,esi')), u'\tR(MOV(edi, esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,offset str2')), u'\tR(MOV(edi, offset(_data,str2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,offset str3')), u'\tR(MOV(edi, offset(_data,str3)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,offset var1')), u'\tR(MOV(edi, offset(_data,var1)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,offset var2')), u'\tR(MOV(edi, offset(_data,var2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edi,offset var4')), u'\tR(MOV(edi, offset(_data,var4)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edx,0')), u'\tR(MOV(edx, 0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edx,0abcdef77h')), u'\tR(MOV(edx, 0x0abcdef77));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edx,2')), u'\tR(MOV(edx, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edx,4')), u'\tR(MOV(edx, 4));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edx,OFFSET ASCiI ; DOS 1+ WRITE STRING TO STANDARD OUTPUT')), u'\tR(MOV(edx, offset(_data,ASCII)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edx,edi')), u'\tR(MOV(edx, edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov edx,offset _msg             ; DS:EDX -> $ Terminated String')), u'\tR(MOV(edx, offset(_data,_msg)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov es,ax')), u'\tR(MOV(es, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov esi,2')), u'\tR(MOV(esi, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov esi,6')), u'\tR(MOV(esi, 6));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov esi,offset str1')), u'\tR(MOV(esi, offset(_data,str1)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov esi,offset testOVerlap')), u'\tR(MOV(esi, offset(_data,testOVerlap)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov esi,offset var1')), u'\tR(MOV(esi, offset(_data,var1)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov esi,offset var2')), u'\tR(MOV(esi, offset(_data,var2)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mov esi,offset var3')), u'\tR(MOV(esi, offset(_data,var3)));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsb')), 'MOVSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsd')), 'MOVSD;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsw')), 'MOVSW;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsx bx,[h2]')), u'\tR(MOVSX(bx, *(raddr(ds,offset(_data,h2)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsx bx,bl')), u'\tR(MOVSX(bx, bl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsx bx,byte ptr [h2]')), u'\tR(MOVSX(bx, *(raddr(ds,offset(_data,h2)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsx bx,byte ptr [h]')), u'\tR(MOVSX(bx, *(raddr(ds,offset(_data,h)))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movsx ecx,cx')), u'\tR(MOVSX(ecx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movzx eax, DDD')), u'\tR(MOVZX(eax, DDD));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'movzx ecx,bx')), u'\tR(MOVZX(ecx, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mul     cl')), u'\tR(MUL1_1(cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mul     cx')), u'\tR(MUL1_2(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'mul     s1_0')), u'\tR(MUL1_0(s1_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'neg     dl')), u'\tR(NEG(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'neg     dx')), u'\tR(NEG(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'neg     ebx')), u'\tR(NEG(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'neg     edx')), u'\tR(NEG(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'neg ebx')), u'\tR(NEG(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'neg edx')), u'\tR(NEG(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'not     dl')), u'\tR(NOT(dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'not     dx')), u'\tR(NOT(dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'not     edx')), u'\tR(NOT(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'not ax')), u'\tR(NOT(ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'not eax')), u'\tR(NOT(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or      dl, cl')), u'\tR(OR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or      dx, cx')), u'\tR(OR(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or      ebx, 0FFFFFFFFh')), u'\tR(OR(ebx, 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or      edx, ecx')), u'\tR(OR(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or      res, 0FFFFFFFFh')), u'\tR(OR(res, 0x0FFFFFFFF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or cl,0f0h')), u'\tR(OR(cl, 0x0f0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or cx,cx')), u'\tR(OR(cx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'or eax,eax')), u'\tR(OR(eax, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'out   dx,al')), u'\tR(OUT(dx, al));\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     dword ptr [esp]')), u'\tR(POP(dword));\n\tR(POP(ptr));\n\tR(POP(*(dw*)(raddr(ds,esp))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pOp  ebx ebp    eax')), u'\tR(POP(ebx));\n\tR(POP(ebp));\n\tR(POP(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     eax')), u'\tR(POP(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     ebp')), u'\tR(POP(ebp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     ebx')), u'\tR(POP(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     ecx')), u'\tR(POP(ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     edi')), u'\tR(POP(edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     edi_0')), u'\tR(POP(edi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     edx')), u'\tR(POP(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     esi')), u'\tR(POP(esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     esi_0')), u'\tR(POP(esi_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     i')), u'\tR(POP(i));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     res')), u'\tR(POP(res));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     s0_0')), u'\tR(POP(s0_0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop     small word ptr [esp]')), u'\tR(POP(small));\n\tR(POP(word));\n\tR(POP(ptr));\n\tR(POP(*(dw*)(raddr(ds,esp))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop  dx cx ; linear address of allocated memory block')), u'\tR(POP(dx));\n\tR(POP(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop ds es')), u'\tR(POP(ds));\n\tR(POP(es));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop ds')), u'\tR(POP(ds));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop eax')), u'\tR(POP(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop es')), u'\tR(POP(es));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pop fs cx')), u'\tR(POP(fs));\n\tR(POP(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'popad')), '\tR(POPAD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'popf')), '\tR(POPF);\n')
        '''
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    0')), u'\tR(PUSH(0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    0BC6058h')), u'\tR(PUSH(0x0BC6058));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    9ABCDEFh')), u'\tR(PUSH(0x9ABCDEF));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    eax')), u'\tR(PUSH(eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    ebp')), u'\tR(PUSH(ebp));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    ebx')), u'\tR(PUSH(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    ecx')), u'\tR(PUSH(ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    edi')), u'\tR(PUSH(edi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    edx')), u'\tR(PUSH(edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push    esi')), u'\tR(PUSH(esi));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push  eax ebp  ebx')), u'\tR(PUSH(eax));\n\tR(PUSH(ebp));\n\tR(PUSH(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push bx cx ; linear address of allocated memory block')), u'\tR(PUSH(bx));\n\tR(PUSH(cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push bx fs')), u'\tR(PUSH(bx));\n\tR(PUSH(fs));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push ds')), u'\tR(PUSH(ds));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push ebx')), u'\tR(PUSH(ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push es ds')), u'\tR(PUSH(es));\n\tR(PUSH(ds));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'push es')), u'\tR(PUSH(es));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pushad')), '\tR(PUSHAD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'pushf')), '\tR(PUSHF);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rcl     dl, cl')), u'\tR(RCL(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rcl     dx, cl')), u'\tR(RCL(dx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rcl     edx, cl')), u'\tR(RCL(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rcr     dl, cl')), u'\tR(RCR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rcr     dx, cl')), u'\tR(RCR(dx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rcr     edx, cl')), u'\tR(RCR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ret')), '\tR(RETN);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'retn')), '\tR(RETN);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rol     dl, cl')), u'\tR(ROL(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rol     dx, cl')), u'\tR(ROL(dx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rol     edx, cl')), u'\tR(ROL(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rol ebx,1')), u'\tR(ROL(ebx, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'rol ebx,31')), u'\tR(ROL(ebx, 31));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ror     dl, cl')), u'\tR(ROR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ror     dx, cl')), u'\tR(ROR(dx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'ror     edx, cl')), u'\tR(ROR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sar     dl, cl')), u'\tR(SAR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sar     dx, cl')), u'\tR(SAR(dx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sar     edx, cl')), u'\tR(SAR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sar eax,1')), u'\tR(SAR(eax, 1));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sar eax,2')), u'\tR(SAR(eax, 2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sbb     dl, cl')), u'\tR(SBB(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sbb     dx, cx')), u'\tR(SBB(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sbb     edx, ecx')), u'\tR(SBB(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'scasb')), '\tR(SCASB);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'scasd')),'\tR(SCASD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'scasw')),'\tR(SCASW);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setb    al')), u'\tR(SETB(al))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setb al')), u'\tR(SETB(al))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setnz   al')), u'\tR(SETNZ(al))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setnz al')), u'\tR(SETNZ(al))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setnz bh')), u'\tR(SETNZ(bh))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setz    al')), u'\tR(SETZ(al))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setz    cl')), u'\tR(SETZ(cl))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setz    dl')), u'\tR(SETZ(dl))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setz al')), u'\tR(SETZ(al))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'setz bh')), u'\tR(SETZ(bh))\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shl     dl, cl')), u'\tR(SHL(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shl     dx, cl')), u'\tR(SHL(dx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shl     edx, cl')), u'\tR(SHL(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shld    dx, bx, cl')), u'\tR(SHLD(dx, bx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shld    edx, ebx, cl')), u'\tR(SHLD(edx, ebx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shr     dl, cl')), u'\tR(SHR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shr     dx, cl')), u'\tR(SHR(dx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shr     edx, cl')), u'\tR(SHR(edx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shr eax,16')), u'\tR(SHR(eax, 16));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shr ecx,16')), u'\tR(SHR(ecx, 16));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shrd    dx, bx, cl')), u'\tR(SHRD(dx, bx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shrd    edx, ebx, cl')), u'\tR(SHRD(edx, ebx, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'shrd eax, edx, 8')), u'\tR(SHRD(eax, edx, 8));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'stc')), '\tR(STC);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'std')), '\tR(STD);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sti                             ; Set The Interrupt Flag')), '\tR(STI);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'stosb')), 'STOSB;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'stosd')), 'STOSD;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'stosw')), 'STOSW;\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     dl, cl')), u'\tR(SUB(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     dx, cx')), u'\tR(SUB(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     edx, ecx')), u'\tR(SUB(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 10h')), u'\tR(SUB(esp, 0x10));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 114h')), u'\tR(SUB(esp, 0x114));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 14h')), u'\tR(SUB(esp, 0x14));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 18h')), u'\tR(SUB(esp, 0x18));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 1Ch')), u'\tR(SUB(esp, 0x1C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 20h')), u'\tR(SUB(esp, 0x20));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 24h')), u'\tR(SUB(esp, 0x24));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 2Ch')), u'\tR(SUB(esp, 0x2C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 3Ch')), u'\tR(SUB(esp, 0x3C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub     esp, 4Ch')), u'\tR(SUB(esp, 0x4C));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub eax,eax')), u'\teax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub eax,ebx')), u'\tR(SUB(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub ebx,eax')), u'\tR(SUB(ebx, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'sub word ptr [var5+2],25')), u'\tR(SUB(*(dw*)(raddr(ds,offset(_data,var5)+2)), 25));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test    ebx, ebx')), u'\tR(TEST(ebx, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test al,010B')), u'\tR(TEST(al, 0x2));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test al,0B')), u'\tR(TEST(al, 0x0));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test ax,ax')), u'\tR(TEST(ax, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test bh,01h')), u'\tR(TEST(bh, 0x01));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test bh,02h')), u'\tR(TEST(bh, 0x02));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'test eax,eax')), u'\tR(TEST(eax, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xadd    byte ptr [ebp+var_20], al')),u'\tR(XADD(*(raddr(ds,ebp+var_20)), al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xadd    dl, al')),u'\tR(XADD(dl, al));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xadd    dword ptr [ebp+var_20], eax')),u'\tR(XADD(*(dd*)(raddr(ds,ebp+var_20)), eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xadd    dx, ax')),u'\tR(XADD(dx, ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xadd    eax, eax')),u'\tR(XADD(eax, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xadd    edx, eax')),u'\tR(XADD(edx, eax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xadd    word ptr [ebp+var_20], ax')),u'\tR(XADD(*(dw*)(raddr(ds,ebp+var_20)), ax));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xchg    al, byte ptr [ebp+var_20]')), u'\tR(XCHG(al, *(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xchg    al, dl')), u'\tR(XCHG(al, dl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xchg    ax, dx')), u'\tR(XCHG(ax, dx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xchg    ax, word ptr [ebp+var_20]')), u'\tR(XCHG(ax, *(dw*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xchg    eax, dword ptr [ebp+var_20]')), u'\tR(XCHG(eax, *(dd*)(raddr(ds,ebp+var_20))));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xchg    eax, edx')), u'\tR(XCHG(eax, edx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xchg eax,ebx')), u'\tR(XCHG(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xlat')), '\tR(XLAT);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     dl, cl')), u'\tR(XOR(dl, cl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     dx, cx')), u'\tR(XOR(dx, cx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     eax, eax')), u'\teax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     ebx, ebx')), u'\tebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     ecx, ecx')), u'\tecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     edi, edi')), u'\tedi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     edx, ecx')), u'\tR(XOR(edx, ecx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     edx, edx')), u'\tedx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     esi, esi')), u'\tesi = 0;AFFECT_ZF(0); AFFECT_SF(esi,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     i, i')), u'\ti = 0;AFFECT_ZF(0); AFFECT_SF(i,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor     res, res')), u'\tres = 0;AFFECT_ZF(0); AFFECT_SF(res,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor al,bl')), u'\tR(XOR(al, bl));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor ax,ax')), u'\tax = 0;AFFECT_ZF(0); AFFECT_SF(ax,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor ax,bx')), u'\tR(XOR(ax, bx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor ch,bh')), u'\tR(XOR(ch, bh));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor cx,cx')), u'\tcx = 0;AFFECT_ZF(0); AFFECT_SF(cx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor eax,eax')), u'\teax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor eax,ebx')), u'\tR(XOR(eax, ebx));\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor ebp,ebp')), u'\tebp = 0;AFFECT_ZF(0); AFFECT_SF(ebp,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor ebx,ebx')), u'\tebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor ecx,ecx')), u'\tecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor edi,edi')), u'\tedi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor edx,edx')), u'\tedx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,'xor esi,esi')), u'\tesi = 0;AFFECT_ZF(0); AFFECT_SF(esi,0);\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,u'rep')), '\tREP\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,u'repe')), '\tREPE\n')
        self.assertEqual(proc_instance.generate_c_cmd(cpp_instance,'',proc_instance.add_("",0,u'repne')), '\tREPNE\n')
        
if __name__ == "__main__":
    unittest.main()
