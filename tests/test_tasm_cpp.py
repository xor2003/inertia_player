from __future__ import absolute_import
from __future__ import print_function

from tasm import op
from tasm import cpp
from mock import patch
from tasm.cpp import Cpp
from tasm.parser import Parser
import logging
import unittest

class CppTest(unittest.TestCase):

    @patch.object(logging, 'debug')
    #@patch.object(parser, 'get_global')
    def test_expand(self, mock_debug):
        #mock_get_global.return_value = var()
        mock_debug.return_value = None
        #mock___getattribute__.return_value = <built-in method lower of newstr object at 0x0000000005D43C48>
        #mock_compile.return_value = <_sre.SRE_Pattern object at 0x0000000005B66830>
        #mock_match.return_value = None
        #mock_sub.return_value = u'doublequote+4'
        p = Parser([])
        p.set_global("_data", op.var(1, 0, issegment=True))
        cpp_instance = Cpp(p)
        self.assertEqual(cpp_instance.expand(expr=u"'Z' - 'A' +1",def_size=1,destination=False),u"'Z' - 'A' +1")
        self.assertEqual(cpp_instance.expand(expr=u"'a'",def_size=1,destination=False),u"'a'")
        self.assertEqual(cpp_instance.expand(expr=u"'c'",def_size=1,destination=False),u"'c'")
        self.assertEqual(cpp_instance.expand(expr=u"'d'",def_size=1,destination=False),u"'d'")
        self.assertEqual(cpp_instance.expand(expr=u"'dcba'",def_size=4,destination=False),u'0x64636261')
        self.assertEqual(cpp_instance.expand(expr=u"'tseT'",def_size=4,destination=False),u'0x74736554')
        self.assertEqual(cpp_instance.expand(expr=u'(1024*10/16)+5',def_size=2,destination=False),u'(1024*10/16)+5')
        self.assertEqual(cpp_instance.expand(expr=u'(1024*10/16)-1',def_size=2,destination=False),u'(1024*10/16)-1')
        #self.assertEqual(cpp_instance.expand(expr=u'(offset str_buffer+800h)',def_size=4,destination=False),u'offset(_bss,str_buffer)+0x800')
        #self.assertEqual(cpp_instance.expand(expr=u'(offset str_buffer+810h)',def_size=0,destination=False),u'offset(_bss,str_buffer)+0x810')
        #self.assertEqual(cpp_instance.expand(expr=u'(offset str_buffer+810h)',def_size=4,destination=False),u'offset(_bss,str_buffer)+0x810')
        self.assertEqual(cpp_instance.expand(expr=u'+0x40',def_size=0,destination=False),u'+0x40')
        self.assertEqual(cpp_instance.expand(expr=u'+0x4000',def_size=0,destination=False),u'+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx',def_size=0,destination=False),u'+ecx')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx*2',def_size=0,destination=False),u'+ecx*2')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx*2+0x4000',def_size=0,destination=False),u'+ecx*2+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx*2-0x0A',def_size=0,destination=False),u'+ecx*2-0x0A')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx*4',def_size=0,destination=False),u'+ecx*4')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx*4+0x4000',def_size=0,destination=False),u'+ecx*4+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx*4-0x0A',def_size=0,destination=False),u'+ecx*4-0x0A')
        self.assertEqual(cpp_instance.expand(expr=u'+ecx+0x40',def_size=0,destination=False),u'+ecx+0x40')
        self.assertEqual(cpp_instance.expand(expr=u'+edx',def_size=0,destination=False),u'+edx')
        self.assertEqual(cpp_instance.expand(expr=u'+edx+0x4000',def_size=0,destination=False),u'+edx+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'-0x108',def_size=0,destination=False),u'-0x108')
        self.assertEqual(cpp_instance.expand(expr=u'-0x1C',def_size=0,destination=False),u'-0x1C')
        self.assertEqual(cpp_instance.expand(expr=u'-0x20',def_size=0,destination=False),u'-0x20')
        self.assertEqual(cpp_instance.expand(expr=u'-0x28',def_size=0,destination=False),u'-0x28')
        self.assertEqual(cpp_instance.expand(expr=u'-0x2C',def_size=0,destination=False),u'-0x2C')
        self.assertEqual(cpp_instance.expand(expr=u'-1',def_size=1,destination=False),u'-1')
        self.assertEqual(cpp_instance.expand(expr=u'-1',def_size=2,destination=False),u'-1')
        self.assertEqual(cpp_instance.expand(expr=u'-1',def_size=4,destination=False),u'-1')
        self.assertEqual(cpp_instance.expand(expr=u'-1-(-2+3)',def_size=4,destination=False),u'-1-(-2+3)')
        self.assertEqual(cpp_instance.expand(expr=u'-12',def_size=4,destination=False),u'-12')
        self.assertEqual(cpp_instance.expand(expr=u'-13',def_size=4,destination=False),u'-13')
        self.assertEqual(cpp_instance.expand(expr=u'-2',def_size=1,destination=False),u'-2')
        self.assertEqual(cpp_instance.expand(expr=u'-2',def_size=4,destination=False),u'-2')
        self.assertEqual(cpp_instance.expand(expr=u'-2Dh',def_size=2,destination=False),u'-0x2D')
        self.assertEqual(cpp_instance.expand(expr=u'-2Dh',def_size=4,destination=False),u'-0x2D')
        self.assertEqual(cpp_instance.expand(expr=u'-4',def_size=0,destination=False),u'-4')
        self.assertEqual(cpp_instance.expand(expr=u'-4',def_size=4,destination=False),u'-4')
        self.assertEqual(cpp_instance.expand(expr=u'-5',def_size=1,destination=False),u'-5')
        self.assertEqual(cpp_instance.expand(expr=u'-5',def_size=2,destination=False),u'-5')
        self.assertEqual(cpp_instance.expand(expr=u'-5',def_size=4,destination=False),u'-5')
        self.assertEqual(cpp_instance.expand(expr=u'-8',def_size=4,destination=False),u'-8')
        self.assertEqual(cpp_instance.expand(expr=u'0',def_size=0,destination=False),u'0')
        self.assertEqual(cpp_instance.expand(expr=u'0',def_size=1,destination=False),u'0')
        self.assertEqual(cpp_instance.expand(expr=u'0002h',def_size=1,destination=False),u'0x0002')
        self.assertEqual(cpp_instance.expand(expr=u'0007',def_size=1,destination=False),u'0007')
        self.assertEqual(cpp_instance.expand(expr=u'000f3h',def_size=1,destination=False),u'0x000f3')
        self.assertEqual(cpp_instance.expand(expr=u'000ff00ffh',def_size=4,destination=False),u'0x000ff00ff')
        self.assertEqual(cpp_instance.expand(expr=u'001111111B',def_size=1,destination=False),u'0x7f')
        self.assertEqual(cpp_instance.expand(expr=u'00fffh',def_size=2,destination=False),u'0x00fff')
        self.assertEqual(cpp_instance.expand(expr=u'00h',def_size=1,destination=False),u'0x00')
        self.assertEqual(cpp_instance.expand(expr=u'0100b',def_size=4,destination=False),u'0x4')
        self.assertEqual(cpp_instance.expand(expr=u'01010101010101010b',def_size=2,destination=False),u'0xaaaa')
        self.assertEqual(cpp_instance.expand(expr=u'0101010101010101b',def_size=4,destination=False),u'0x5555')
        self.assertEqual(cpp_instance.expand(expr=u'0101b',def_size=4,destination=False),u'0x5')
        self.assertEqual(cpp_instance.expand(expr=u'010B',def_size=1,destination=False),u'0x2')
        self.assertEqual(cpp_instance.expand(expr=u'010B',def_size=4,destination=False),u'0x2')
        self.assertEqual(cpp_instance.expand(expr=u'011111100B',def_size=1,destination=False),u'0xfc')
        self.assertEqual(cpp_instance.expand(expr=u'011111111111111111111111111111111b',def_size=4,destination=False),u'0xffffffff')
        self.assertEqual(cpp_instance.expand(expr=u'01111111111111111b',def_size=2,destination=False),u'0xffff')
        self.assertEqual(cpp_instance.expand(expr=u'011111111B',def_size=1,destination=False),u'0xff')
        self.assertEqual(cpp_instance.expand(expr=u'012345678h',def_size=4,destination=False),u'0x012345678')
        self.assertEqual(cpp_instance.expand(expr=u'01B',def_size=4,destination=False),u'0x1')
        self.assertEqual(cpp_instance.expand(expr=u'01h',def_size=1,destination=False),u'0x01')
        self.assertEqual(cpp_instance.expand(expr=u'02h',def_size=1,destination=False),u'0x02')
        self.assertEqual(cpp_instance.expand(expr=u'03dh',def_size=1,destination=False),u'0x03d')
        self.assertEqual(cpp_instance.expand(expr=u'03eh',def_size=1,destination=False),u'0x03e')
        self.assertEqual(cpp_instance.expand(expr=u'03fh',def_size=1,destination=False),u'0x03f')
        self.assertEqual(cpp_instance.expand(expr=u'042h',def_size=1,destination=False),u'0x042')
        self.assertEqual(cpp_instance.expand(expr=u'077123456h',def_size=4,destination=False),u'0x077123456')
        self.assertEqual(cpp_instance.expand(expr=u'077aaFF00h',def_size=4,destination=False),u'0x077aaFF00')
        self.assertEqual(cpp_instance.expand(expr=u'08h',def_size=1,destination=False),u'0x08')
        self.assertEqual(cpp_instance.expand(expr=u'0B',def_size=1,destination=False),u'0x0')
        self.assertEqual(cpp_instance.expand(expr=u'0BC6058h',def_size=0,destination=False),u'0x0BC6058')
        self.assertEqual(cpp_instance.expand(expr=u'0D5h',def_size=1,destination=False),u'0x0D5')
        self.assertEqual(cpp_instance.expand(expr=u'0Eh',def_size=1,destination=False),u'0x0E')
        self.assertEqual(cpp_instance.expand(expr=u'0F7h',def_size=1,destination=False),u'0x0F7')
        self.assertEqual(cpp_instance.expand(expr=u'0FBCA7654h',def_size=4,destination=False),u'0x0FBCA7654')
        self.assertEqual(cpp_instance.expand(expr=u'0FBCA7h',def_size=4,destination=False),u'0x0FBCA7')
        self.assertEqual(cpp_instance.expand(expr=u'0FEh',def_size=1,destination=False),u'0x0FE')
        self.assertEqual(cpp_instance.expand(expr=u'0FFEh',def_size=2,destination=False),u'0x0FFE')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFC70F9h',def_size=4,destination=False),u'0x0FFFC70F9')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFE0080h',def_size=4,destination=False),u'0x0FFFE0080')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFEDCBFh',def_size=4,destination=False),u'0x0FFFEDCBF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFEFDFCh',def_size=4,destination=False),u'0x0FFFEFDFC')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFEh',def_size=2,destination=False),u'0x0FFFE')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFF7FFFh',def_size=4,destination=False),u'0x0FFFF7FFF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFA549h',def_size=4,destination=False),u'0x0FFFFA549')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFEh',def_size=4,destination=False),u'0x0FFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFED4h',def_size=4,destination=False),u'0x0FFFFFED4')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFEh',def_size=4,destination=False),u'0x0FFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFD3h',def_size=4,destination=False),u'0x0FFFFFFD3')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFECh',def_size=4,destination=False),u'0x0FFFFFFEC')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFEh',def_size=4,destination=False),u'0x0FFFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFF0h',def_size=4,destination=False),u'0x0FFFFFFF0')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFF7h',def_size=4,destination=False),u'0x0FFFFFFF7')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFFAh',def_size=4,destination=False),u'0x0FFFFFFFA')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFFBh',def_size=4,destination=False),u'0x0FFFFFFFB')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFFCh',def_size=4,destination=False),u'0x0FFFFFFFC')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFFDh',def_size=4,destination=False),u'0x0FFFFFFFD')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFFEh',def_size=4,destination=False),u'0x0FFFFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFFFh',def_size=4,destination=False),u'0x0FFFFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFFh',def_size=4,destination=False),u'0x0FFFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFFh',def_size=4,destination=False),u'0x0FFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFFh',def_size=4,destination=False),u'0x0FFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFFh',def_size=2,destination=False),u'0x0FFFF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFFh',def_size=2,destination=False),u'0x0FFF')
        self.assertEqual(cpp_instance.expand(expr=u'0FFh',def_size=1,destination=False),u'0x0FF')
        self.assertEqual(cpp_instance.expand(expr=u'0Fh',def_size=1,destination=False),u'0x0F')
        self.assertEqual(cpp_instance.expand(expr=u'0a0000h',def_size=4,destination=False),u'0x0a0000')
        self.assertEqual(cpp_instance.expand(expr=u'0a000h',def_size=2,destination=False),u'0x0a000')
        self.assertEqual(cpp_instance.expand(expr=u'0aabbccddh',def_size=4,destination=False),u'0x0aabbccdd')
        self.assertEqual(cpp_instance.expand(expr=u'0abcdef77h',def_size=4,destination=False),u'0x0abcdef77')
        self.assertEqual(cpp_instance.expand(expr=u'0af222h',def_size=4,destination=False),u'0x0af222')
        self.assertEqual(cpp_instance.expand(expr=u'0cch',def_size=1,destination=False),u'0x0cc')
        self.assertEqual(cpp_instance.expand(expr=u'0ddh',def_size=1,destination=False),u'0x0dd')
        self.assertEqual(cpp_instance.expand(expr=u'0df01h',def_size=2,destination=False),u'0x0df01')
        self.assertEqual(cpp_instance.expand(expr=u'0dff1h',def_size=2,destination=False),u'0x0dff1')
        self.assertEqual(cpp_instance.expand(expr=u'0f0ffh',def_size=2,destination=False),u'0x0f0ff')
        self.assertEqual(cpp_instance.expand(expr=u'0f0h',def_size=1,destination=False),u'0x0f0')
        self.assertEqual(cpp_instance.expand(expr=u'0f222h',def_size=2,destination=False),u'0x0f222')
        self.assertEqual(cpp_instance.expand(expr=u'0ffff0003h',def_size=4,destination=False),u'0x0ffff0003')
        self.assertEqual(cpp_instance.expand(expr=u'0ffff00f3h',def_size=4,destination=False),u'0x0ffff00f3')
        self.assertEqual(cpp_instance.expand(expr=u'0ffff01ffh',def_size=4,destination=False),u'0x0ffff01ff')
        self.assertEqual(cpp_instance.expand(expr=u'0ffffff00h',def_size=4,destination=False),u'0x0ffffff00')
        self.assertEqual(cpp_instance.expand(expr=u'0ffffff03h',def_size=4,destination=False),u'0x0ffffff03')
        self.assertEqual(cpp_instance.expand(expr=u'0fffffff3h',def_size=4,destination=False),u'0x0fffffff3')
        self.assertEqual(cpp_instance.expand(expr=u'0ffffffffh',def_size=4,destination=False),u'0x0ffffffff')
        self.assertEqual(cpp_instance.expand(expr=u'0ffffh',def_size=2,destination=False),u'0x0ffff')
        self.assertEqual(cpp_instance.expand(expr=u'0ffh',def_size=1,destination=False),u'0x0ff')
        self.assertEqual(cpp_instance.expand(expr=u'0x0C',def_size=0,destination=False),u'0x0C')
        self.assertEqual(cpp_instance.expand(expr=u'0x10',def_size=0,destination=False),u'0x10')
        self.assertEqual(cpp_instance.expand(expr=u'0x14',def_size=0,destination=False),u'0x14')
        self.assertEqual(cpp_instance.expand(expr=u'1',def_size=0,destination=False),u'1')
        self.assertEqual(cpp_instance.expand(expr=u'1',def_size=1,destination=False),u'1')
        self.assertEqual(cpp_instance.expand(expr=u'10',def_size=1,destination=False),u'10')
        self.assertEqual(cpp_instance.expand(expr=u'10000h',def_size=4,destination=False),u'0x10000')
        self.assertEqual(cpp_instance.expand(expr=u'1000h',def_size=2,destination=False),u'0x1000')
        self.assertEqual(cpp_instance.expand(expr=u'100h',def_size=2,destination=False),u'0x100')
        self.assertEqual(cpp_instance.expand(expr=u'1024*10/16',def_size=2,destination=False),u'1024*10/16')
        self.assertEqual(cpp_instance.expand(expr=u'1024*1024',def_size=4,destination=False),u'1024*1024')
        self.assertEqual(cpp_instance.expand(expr=u'10B',def_size=4,destination=False),u'0x2')
        self.assertEqual(cpp_instance.expand(expr=u'10h',def_size=0,destination=False),u'0x10')
        self.assertEqual(cpp_instance.expand(expr=u'10h',def_size=1,destination=False),u'0x10')
        self.assertEqual(cpp_instance.expand(expr=u'11',def_size=1,destination=False),u'11')
        self.assertEqual(cpp_instance.expand(expr=u'111',def_size=1,destination=False),u'111')
        self.assertEqual(cpp_instance.expand(expr=u'114h',def_size=2,destination=False),u'0x114')
        self.assertEqual(cpp_instance.expand(expr=u'11h',def_size=1,destination=False),u'0x11')
        self.assertEqual(cpp_instance.expand(expr=u'12',def_size=1,destination=False),u'12')
        self.assertEqual(cpp_instance.expand(expr=u'12340004h',def_size=4,destination=False),u'0x12340004')
        self.assertEqual(cpp_instance.expand(expr=u'1234001Dh',def_size=4,destination=False),u'0x1234001D')
        self.assertEqual(cpp_instance.expand(expr=u'12340128h',def_size=4,destination=False),u'0x12340128')
        self.assertEqual(cpp_instance.expand(expr=u'12340205h',def_size=4,destination=False),u'0x12340205')
        self.assertEqual(cpp_instance.expand(expr=u'12340306h',def_size=4,destination=False),u'0x12340306')
        self.assertEqual(cpp_instance.expand(expr=u'12340407h',def_size=4,destination=False),u'0x12340407')
        self.assertEqual(cpp_instance.expand(expr=u'1234040Ah',def_size=4,destination=False),u'0x1234040A')
        self.assertEqual(cpp_instance.expand(expr=u'12340503h',def_size=4,destination=False),u'0x12340503')
        self.assertEqual(cpp_instance.expand(expr=u'12340506h',def_size=4,destination=False),u'0x12340506')
        self.assertEqual(cpp_instance.expand(expr=u'12340507h',def_size=4,destination=False),u'0x12340507')
        self.assertEqual(cpp_instance.expand(expr=u'12340547h',def_size=4,destination=False),u'0x12340547')
        self.assertEqual(cpp_instance.expand(expr=u'12340559h',def_size=4,destination=False),u'0x12340559')
        self.assertEqual(cpp_instance.expand(expr=u'12340560h',def_size=4,destination=False),u'0x12340560')
        self.assertEqual(cpp_instance.expand(expr=u'1234059Fh',def_size=4,destination=False),u'0x1234059F')
        self.assertEqual(cpp_instance.expand(expr=u'123405A0h',def_size=4,destination=False),u'0x123405A0')
        self.assertEqual(cpp_instance.expand(expr=u'123405FAh',def_size=4,destination=False),u'0x123405FA')
        self.assertEqual(cpp_instance.expand(expr=u'12341678h',def_size=4,destination=False),u'0x12341678')
        self.assertEqual(cpp_instance.expand(expr=u'12341h',def_size=4,destination=False),u'0x12341')
        self.assertEqual(cpp_instance.expand(expr=u'12343h',def_size=4,destination=False),u'0x12343')
        self.assertEqual(cpp_instance.expand(expr=u'12345',def_size=2,destination=False),u'12345')
        self.assertEqual(cpp_instance.expand(expr=u'1234561Dh',def_size=4,destination=False),u'0x1234561D')
        self.assertEqual(cpp_instance.expand(expr=u'12345678h',def_size=4,destination=False),u'0x12345678')
        self.assertEqual(cpp_instance.expand(expr=u'12345h',def_size=4,destination=False),u'0x12345')
        self.assertEqual(cpp_instance.expand(expr=u'12347F7Fh',def_size=4,destination=False),u'0x12347F7F')
        self.assertEqual(cpp_instance.expand(expr=u'12347FFFh',def_size=4,destination=False),u'0x12347FFF')
        self.assertEqual(cpp_instance.expand(expr=u'12348000h',def_size=4,destination=False),u'0x12348000')
        self.assertEqual(cpp_instance.expand(expr=u'12348080h',def_size=4,destination=False),u'0x12348080')
        self.assertEqual(cpp_instance.expand(expr=u'1234h',def_size=2,destination=False),u'0x1234')
        self.assertEqual(cpp_instance.expand(expr=u'127Eh',def_size=2,destination=False),u'0x127E')
        self.assertEqual(cpp_instance.expand(expr=u'12Ch',def_size=2,destination=False),u'0x12C')
        self.assertEqual(cpp_instance.expand(expr=u'13',def_size=1,destination=False),u'13')
        self.assertEqual(cpp_instance.expand(expr=u'132',def_size=1,destination=False),u'132')
        self.assertEqual(cpp_instance.expand(expr=u'133',def_size=1,destination=False),u'133')
        self.assertEqual(cpp_instance.expand(expr=u'13h',def_size=1,destination=False),u'0x13')
        self.assertEqual(cpp_instance.expand(expr=u'14',def_size=1,destination=False),u'14')
        self.assertEqual(cpp_instance.expand(expr=u'14*320',def_size=4,destination=False),u'14*320')
        self.assertEqual(cpp_instance.expand(expr=u'14h',def_size=1,destination=False),u'0x14')
        self.assertEqual(cpp_instance.expand(expr=u'15',def_size=1,destination=False),u'15')
        self.assertEqual(cpp_instance.expand(expr=u'16',def_size=1,destination=False),u'16')
        self.assertEqual(cpp_instance.expand(expr=u'17',def_size=1,destination=False),u'17')
        self.assertEqual(cpp_instance.expand(expr=u'17h',def_size=1,destination=False),u'0x17')
        self.assertEqual(cpp_instance.expand(expr=u'18',def_size=1,destination=False),u'18')
        self.assertEqual(cpp_instance.expand(expr=u'18h',def_size=1,destination=False),u'0x18')
        self.assertEqual(cpp_instance.expand(expr=u'19',def_size=1,destination=False),u'19')
        self.assertEqual(cpp_instance.expand(expr=u'192',def_size=1,destination=False),u'192')
        self.assertEqual(cpp_instance.expand(expr=u'193',def_size=1,destination=False),u'193')
        self.assertEqual(cpp_instance.expand(expr=u'1Ch',def_size=1,destination=False),u'0x1C')
        self.assertEqual(cpp_instance.expand(expr=u'1Eh',def_size=1,destination=False),u'0x1E')
        self.assertEqual(cpp_instance.expand(expr=u'1FEh',def_size=2,destination=False),u'0x1FE')
        self.assertEqual(cpp_instance.expand(expr=u'1FF7Fh',def_size=4,destination=False),u'0x1FF7F')
        self.assertEqual(cpp_instance.expand(expr=u'1FF80h',def_size=4,destination=False),u'0x1FF80')
        self.assertEqual(cpp_instance.expand(expr=u'1FF81h',def_size=4,destination=False),u'0x1FF81')
        self.assertEqual(cpp_instance.expand(expr=u'1FFEh',def_size=2,destination=False),u'0x1FFE')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFEh',def_size=4,destination=False),u'0x1FFFE')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFFEh',def_size=4,destination=False),u'0x1FFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFFFEh',def_size=4,destination=False),u'0x1FFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFFFFEh',def_size=4,destination=False),u'0x1FFFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFFFFFh',def_size=4,destination=False),u'0x1FFFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFFFFh',def_size=4,destination=False),u'0x1FFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFFFh',def_size=4,destination=False),u'0x1FFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFFh',def_size=4,destination=False),u'0x1FFFF')
        self.assertEqual(cpp_instance.expand(expr=u'1FFFh',def_size=2,destination=False),u'0x1FFF')
        self.assertEqual(cpp_instance.expand(expr=u'1FFh',def_size=2,destination=False),u'0x1FF')
        self.assertEqual(cpp_instance.expand(expr=u'1Fh',def_size=1,destination=False),u'0x1F')
        self.assertEqual(cpp_instance.expand(expr=u'2',def_size=0,destination=False),u'2')
        self.assertEqual(cpp_instance.expand(expr=u'2',def_size=1,destination=False),u'2')
        self.assertEqual(cpp_instance.expand(expr=u'20',def_size=1,destination=False),u'20')
        self.assertEqual(cpp_instance.expand(expr=u'20000h',def_size=4,destination=False),u'0x20000')
        self.assertEqual(cpp_instance.expand(expr=u'20h',def_size=1,destination=False),u'0x20')
        self.assertEqual(cpp_instance.expand(expr=u'21',def_size=1,destination=False),u'21')
        self.assertEqual(cpp_instance.expand(expr=u'21AD3D34h',def_size=4,destination=False),u'0x21AD3D34')
        self.assertEqual(cpp_instance.expand(expr=u'21h',def_size=0,destination=False),u'0x21')
        self.assertEqual(cpp_instance.expand(expr=u'22',def_size=1,destination=False),u'22')
        self.assertEqual(cpp_instance.expand(expr=u'23',def_size=1,destination=False),u'23')
        self.assertEqual(cpp_instance.expand(expr=u'24',def_size=1,destination=False),u'24')
        self.assertEqual(cpp_instance.expand(expr=u'24h',def_size=1,destination=False),u'0x24')
        self.assertEqual(cpp_instance.expand(expr=u'25',def_size=1,destination=False),u'25')
        self.assertEqual(cpp_instance.expand(expr=u'255',def_size=1,destination=False),u'255')
        self.assertEqual(cpp_instance.expand(expr=u'256',def_size=2,destination=False),u'256')
        self.assertEqual(cpp_instance.expand(expr=u'256*3',def_size=2,destination=False),u'256*3')
        self.assertEqual(cpp_instance.expand(expr=u'256+3',def_size=2,destination=False),u'256+3')
        self.assertEqual(cpp_instance.expand(expr=u'256+3+65536',def_size=4,destination=False),u'256+3+65536')
        self.assertEqual(cpp_instance.expand(expr=u'26',def_size=1,destination=False),u'26')
        self.assertEqual(cpp_instance.expand(expr=u'27',def_size=1,destination=False),u'27')
        self.assertEqual(cpp_instance.expand(expr=u'28',def_size=1,destination=False),u'28')
        self.assertEqual(cpp_instance.expand(expr=u'29',def_size=1,destination=False),u'29')
        self.assertEqual(cpp_instance.expand(expr=u'2Ch',def_size=1,destination=False),u'0x2C')
        self.assertEqual(cpp_instance.expand(expr=u'2Dh',def_size=1,destination=False),u'0x2D')
        self.assertEqual(cpp_instance.expand(expr=u'2Dh',def_size=2,destination=False),u'0x2D')
        self.assertEqual(cpp_instance.expand(expr=u'2Dh',def_size=4,destination=False),u'0x2D')
        self.assertEqual(cpp_instance.expand(expr=u'3',def_size=0,destination=False),u'3')
        self.assertEqual(cpp_instance.expand(expr=u'3',def_size=1,destination=False),u'3')
        self.assertEqual(cpp_instance.expand(expr=u'3*4',def_size=4,destination=False),u'3*4')
        self.assertEqual(cpp_instance.expand(expr=u'30',def_size=1,destination=False),u'30')
        self.assertEqual(cpp_instance.expand(expr=u'303Bh',def_size=2,destination=False),u'0x303B')
        self.assertEqual(cpp_instance.expand(expr=u'30h',def_size=1,destination=False),u'0x30')
        self.assertEqual(cpp_instance.expand(expr=u'31',def_size=1,destination=False),u'31')
        self.assertEqual(cpp_instance.expand(expr=u'31h',def_size=0,destination=False),u'0x31')
        self.assertEqual(cpp_instance.expand(expr=u'32',def_size=1,destination=False),u'32')
        self.assertEqual(cpp_instance.expand(expr=u'320*200/4',def_size=4,destination=False),u'320*200/4')
        self.assertEqual(cpp_instance.expand(expr=u'32432434h',def_size=4,destination=False),u'0x32432434')
        self.assertEqual(cpp_instance.expand(expr=u'340128h',def_size=4,destination=False),u'0x340128')
        self.assertEqual(cpp_instance.expand(expr=u'35',def_size=1,destination=False),u'35')
        self.assertEqual(cpp_instance.expand(expr=u'37',def_size=1,destination=False),u'37')
        self.assertEqual(cpp_instance.expand(expr=u'39h',def_size=1,destination=False),u'0x39')
        self.assertEqual(cpp_instance.expand(expr=u'3Ch',def_size=1,destination=False),u'0x3C')
        self.assertEqual(cpp_instance.expand(expr=u'3DAh',def_size=2,destination=False),u'0x3DA')
        self.assertEqual(cpp_instance.expand(expr=u'3Eh',def_size=1,destination=False),u'0x3E')
        self.assertEqual(cpp_instance.expand(expr=u'3FEh',def_size=2,destination=False),u'0x3FE')
        self.assertEqual(cpp_instance.expand(expr=u'3FFEh',def_size=2,destination=False),u'0x3FFE')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFEh',def_size=4,destination=False),u'0x3FFFE')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFFEh',def_size=4,destination=False),u'0x3FFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFFFEh',def_size=4,destination=False),u'0x3FFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFFFFEh',def_size=4,destination=False),u'0x3FFFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFFFFFh',def_size=4,destination=False),u'0x3FFFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFFFFh',def_size=4,destination=False),u'0x3FFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFFFh',def_size=4,destination=False),u'0x3FFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFFh',def_size=4,destination=False),u'0x3FFFF')
        self.assertEqual(cpp_instance.expand(expr=u'3FFFh',def_size=2,destination=False),u'0x3FFF')
        self.assertEqual(cpp_instance.expand(expr=u'3FFh',def_size=2,destination=False),u'0x3FF')
        self.assertEqual(cpp_instance.expand(expr=u'3Fh',def_size=1,destination=False),u'0x3F')
        self.assertEqual(cpp_instance.expand(expr=u'3c8h',def_size=2,destination=False),u'0x3c8')
        self.assertEqual(cpp_instance.expand(expr=u'3c9h',def_size=2,destination=False),u'0x3c9')
        self.assertEqual(cpp_instance.expand(expr=u'3h',def_size=1,destination=False),u'0x3')
        self.assertEqual(cpp_instance.expand(expr=u'4',def_size=1,destination=False),u'4')
        self.assertEqual(cpp_instance.expand(expr=u'4+5*256',def_size=2,destination=False),u'4+5*256')
        self.assertEqual(cpp_instance.expand(expr=u'4000000',def_size=4,destination=False),u'4000000')
        self.assertEqual(cpp_instance.expand(expr=u'40h',def_size=1,destination=False),u'0x40')
        self.assertEqual(cpp_instance.expand(expr=u'43210123h',def_size=4,destination=False),u'0x43210123')
        self.assertEqual(cpp_instance.expand(expr=u'48h',def_size=1,destination=False),u'0x48')
        self.assertEqual(cpp_instance.expand(expr=u'49h',def_size=1,destination=False),u'0x49')
        self.assertEqual(cpp_instance.expand(expr=u'4Ah',def_size=1,destination=False),u'0x4A')
        self.assertEqual(cpp_instance.expand(expr=u'4Ch',def_size=1,destination=False),u'0x4C')
        self.assertEqual(cpp_instance.expand(expr=u'4ch',def_size=1,destination=False),u'0x4c')
        self.assertEqual(cpp_instance.expand(expr=u'5',def_size=1,destination=False),u'5')
        self.assertEqual(cpp_instance.expand(expr=u'50',def_size=1,destination=False),u'50')
        self.assertEqual(cpp_instance.expand(expr=u'501h',def_size=2,destination=False),u'0x501')
        self.assertEqual(cpp_instance.expand(expr=u'511',def_size=2,destination=False),u'511')
        self.assertEqual(cpp_instance.expand(expr=u'55',def_size=1,destination=False),u'55')
        self.assertEqual(cpp_instance.expand(expr=u'56',def_size=1,destination=False),u'56')
        self.assertEqual(cpp_instance.expand(expr=u'57',def_size=1,destination=False),u'57')
        self.assertEqual(cpp_instance.expand(expr=u'6',def_size=1,destination=False),u'6')
        self.assertEqual(cpp_instance.expand(expr=u'6*256+5',def_size=2,destination=False),u'6*256+5')
        self.assertEqual(cpp_instance.expand(expr=u'60',def_size=1,destination=False),u'60')
        self.assertEqual(cpp_instance.expand(expr=u'65324h',def_size=4,destination=False),u'0x65324')
        self.assertEqual(cpp_instance.expand(expr=u'65423456h',def_size=4,destination=False),u'0x65423456')
        self.assertEqual(cpp_instance.expand(expr=u'6789ABCDh',def_size=4,destination=False),u'0x6789ABCD')
        self.assertEqual(cpp_instance.expand(expr=u'7',def_size=1,destination=False),u'7')
        self.assertEqual(cpp_instance.expand(expr=u'7Eh',def_size=1,destination=False),u'0x7E')
        self.assertEqual(cpp_instance.expand(expr=u'7FEh',def_size=2,destination=False),u'0x7FE')
        self.assertEqual(cpp_instance.expand(expr=u'7FFEh',def_size=2,destination=False),u'0x7FFE')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFEh',def_size=4,destination=False),u'0x7FFFE')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFFEh',def_size=4,destination=False),u'0x7FFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFFFEh',def_size=4,destination=False),u'0x7FFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFFFFEh',def_size=4,destination=False),u'0x7FFFFFFE')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFFFFFh',def_size=4,destination=False),u'0x7FFFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFFFFh',def_size=4,destination=False),u'0x7FFFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFFFh',def_size=4,destination=False),u'0x7FFFFF')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFFh',def_size=4,destination=False),u'0x7FFFF')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFh',def_size=2,destination=False),u'0x7FFF')
        self.assertEqual(cpp_instance.expand(expr=u'7FFFh',def_size=4,destination=False),u'0x7FFF')
        self.assertEqual(cpp_instance.expand(expr=u'7FFh',def_size=2,destination=False),u'0x7FF')
        self.assertEqual(cpp_instance.expand(expr=u'7Fh',def_size=1,destination=False),u'0x7F')
        self.assertEqual(cpp_instance.expand(expr=u'8',def_size=0,destination=False),u'8')
        self.assertEqual(cpp_instance.expand(expr=u'8',def_size=1,destination=False),u'8')
        self.assertEqual(cpp_instance.expand(expr=u'80000000h',def_size=4,destination=False),u'0x80000000')
        self.assertEqual(cpp_instance.expand(expr=u'80000001h',def_size=4,destination=False),u'0x80000001')
        self.assertEqual(cpp_instance.expand(expr=u'80008481h',def_size=4,destination=False),u'0x80008481')
        self.assertEqual(cpp_instance.expand(expr=u'80008688h',def_size=4,destination=False),u'0x80008688')
        self.assertEqual(cpp_instance.expand(expr=u'8000h',def_size=2,destination=False),u'0x8000')
        self.assertEqual(cpp_instance.expand(expr=u'8000h',def_size=4,destination=False),u'0x8000')
        self.assertEqual(cpp_instance.expand(expr=u'801h',def_size=2,destination=False),u'0x801')
        self.assertEqual(cpp_instance.expand(expr=u'80h',def_size=1,destination=False),u'0x80')
        self.assertEqual(cpp_instance.expand(expr=u'81234567h',def_size=4,destination=False),u'0x81234567')
        self.assertEqual(cpp_instance.expand(expr=u'81238567h',def_size=4,destination=False),u'0x81238567')
        self.assertEqual(cpp_instance.expand(expr=u'812FADAh',def_size=4,destination=False),u'0x812FADA')
        self.assertEqual(cpp_instance.expand(expr=u'813F3421h',def_size=4,destination=False),u'0x813F3421')
        self.assertEqual(cpp_instance.expand(expr=u'81h',def_size=1,destination=False),u'0x81')
        self.assertEqual(cpp_instance.expand(expr=u'82345679h',def_size=4,destination=False),u'0x82345679')
        self.assertEqual(cpp_instance.expand(expr=u'8234A6F8h',def_size=4,destination=False),u'0x8234A6F8')
        self.assertEqual(cpp_instance.expand(expr=u'8345A1F2h',def_size=4,destination=False),u'0x8345A1F2')
        self.assertEqual(cpp_instance.expand(expr=u'8C5h',def_size=2,destination=False),u'0x8C5')
        self.assertEqual(cpp_instance.expand(expr=u'8D5h',def_size=2,destination=False),u'0x8D5')
        self.assertEqual(cpp_instance.expand(expr=u'9',def_size=1,destination=False),u'9')
        self.assertEqual(cpp_instance.expand(expr=u'9ABCDEFh',def_size=0,destination=False),u'0x9ABCDEF')
        self.assertEqual(cpp_instance.expand(expr=u'AL',def_size=1,destination=True),u'al')
        self.assertEqual(cpp_instance.expand(expr=u'B',def_size=4,destination=False),u'B')
        self.assertEqual(cpp_instance.expand(expr=u'CC',def_size=4,destination=False),u'CC')
        self.assertEqual(cpp_instance.expand(expr=u'DDD',def_size=0,destination=False),u'DDD')
        self.assertEqual(cpp_instance.expand(expr=u'DX',def_size=2,destination=True),u'dx')
        #self.assertEqual(cpp_instance.expand(expr=u'OFFSET ASCiI',def_size=4,destination=False),u'offset(_data,ASCII)')
        #self.assertEqual(cpp_instance.expand(expr=u'OFFSET AsCii',def_size=4,destination=False),u'offset(_data,ASCII)')
        self.assertEqual(cpp_instance.expand(expr=u'TWO',def_size=4,destination=False),u'TWO')
        self.assertEqual(cpp_instance.expand(expr=u'[a+1]',def_size=1,destination=False),u'*(raddr(ds,a+1))')
        #self.assertEqual(cpp_instance.expand(expr=u'[a+1]',def_size=1,destination=False),u'*(raddr(ds,offset(_data,a)+1))')
        #self.assertEqual(cpp_instance.expand(expr=u'[a]',def_size=1,destination=False),u'*(raddr(ds,offset(_data,a)))')
        #self.assertEqual(cpp_instance.expand(expr=u'[a]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,a)))')
        #self.assertEqual(cpp_instance.expand(expr=u'[cs:table+ax]',def_size=0,destination=True),u'*(dw*)(raddr(cs,offset(_text,table)+ax))')
        #self.assertEqual(cpp_instance.expand(expr=u'[doublequote+4]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,doublequote)+4))')
        #self.assertEqual(cpp_instance.expand(expr=u'[eax+4000h]',def_size=0,destination=False),u'eax+0x4000')
        #self.assertEqual(cpp_instance.expand(expr=u'[eax+40h]',def_size=0,destination=False),u'eax+0x40')
        #self.assertEqual(cpp_instance.expand(expr=u'[eax+ecx+40h]',def_size=0,destination=False),u'eax+ecx+0x40')
        '''
        self.assertEqual(cpp_instance.expand(expr=u'[eax+ecx]',def_size=0,destination=False),u'eax+ecx')
        self.assertEqual(cpp_instance.expand(expr=u'[eax]',def_size=0,destination=False),u'eax')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+ecx_0]',def_size=0,destination=True),u'*(dw*)(raddr(ds,ebp+ecx_0))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+ecx_0]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+ecx_0))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+ecx_vals]',def_size=0,destination=False),u'ebp+ecx_vals')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+edx_0]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+edx_0))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+edx_0]',def_size=4,destination=True),u'*(dd*)(raddr(ds,ebp+edx_0))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+i*4+ecx_vals]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+i*4+ecx_vals))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+i+table]',def_size=1,destination=True),u'*(raddr(ds,ebp+i+table))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+iflags]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+iflags))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+op0]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+op0))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+op0h]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+op0h))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+s0]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+s0))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+s0]',def_size=4,destination=True),u'*(dd*)(raddr(ds,ebp+s0))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+s1]',def_size=1,destination=True),u'*(raddr(ds,ebp+s1))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+s1]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+s1))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+s2]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+s2))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+s2]',def_size=4,destination=True),u'*(dd*)(raddr(ds,ebp+s2))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+table]',def_size=0,destination=False),u'ebp+table')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+var_1C]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+var_1C))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+var_1C]',def_size=4,destination=True),u'*(dd*)(raddr(ds,ebp+var_1C))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+var_20]',def_size=0,destination=False),u'*(dw*)(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+var_20]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+var_20]',def_size=4,destination=True),u'*(dd*)(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebp+var_4]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+var_4))')
        self.assertEqual(cpp_instance.expand(expr=u'[ebx+4000h]',def_size=0,destination=False),u'ebx+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[ebx+40h]',def_size=0,destination=False),u'ebx+0x40')
        self.assertEqual(cpp_instance.expand(expr=u'[ebx+edx+4000h]',def_size=0,destination=False),u'ebx+edx+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[ebx+edx]',def_size=0,destination=False),u'ebx+edx')
        self.assertEqual(cpp_instance.expand(expr=u'[ebx]',def_size=0,destination=False),u'ebx')
        self.assertEqual(cpp_instance.expand(expr=u'[ecx+4000h]',def_size=0,destination=False),u'ecx+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[ecx+40h]',def_size=0,destination=False),u'ecx+0x40')
        self.assertEqual(cpp_instance.expand(expr=u'[ecx+ecx*2+4000h]',def_size=0,destination=False),u'ecx+ecx*2+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[ecx+ecx*2-0Ah]',def_size=0,destination=False),u'ecx+ecx*2-0x0A')
        self.assertEqual(cpp_instance.expand(expr=u'[ecx+ecx*2]',def_size=0,destination=False),u'ecx+ecx*2')
        self.assertEqual(cpp_instance.expand(expr=u'[ecx+ecx]',def_size=0,destination=False),u'ecx+ecx')
        self.assertEqual(cpp_instance.expand(expr=u'[ecx]',def_size=0,destination=False),u'ecx')
        self.assertEqual(cpp_instance.expand(expr=u'[edi+1]',def_size=1,destination=False),u'*(raddr(ds,edi+1))')
        self.assertEqual(cpp_instance.expand(expr=u'[edi+1]',def_size=2,destination=False),u'*(dw*)(raddr(ds,edi+1))')
        self.assertEqual(cpp_instance.expand(expr=u'[edi+4000h]',def_size=0,destination=False),u'edi+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[edi+40h]',def_size=0,destination=False),u'edi+0x40')
        self.assertEqual(cpp_instance.expand(expr=u'[edi+ecx]',def_size=0,destination=False),u'edi+ecx')
        self.assertEqual(cpp_instance.expand(expr=u'[edi]',def_size=0,destination=False),u'edi')
        self.assertEqual(cpp_instance.expand(expr=u'[edi]',def_size=1,destination=False),u'*(raddr(ds,edi))')
        self.assertEqual(cpp_instance.expand(expr=u'[edx+4000h]',def_size=0,destination=False),u'edx+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[edx+40h]',def_size=0,destination=False),u'edx+0x40')
        self.assertEqual(cpp_instance.expand(expr=u'[edx+ecx*4+4000h]',def_size=0,destination=False),u'edx+ecx*4+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[edx+ecx*4-0Ah]',def_size=0,destination=False),u'edx+ecx*4-0x0A')
        self.assertEqual(cpp_instance.expand(expr=u'[edx+ecx*4]',def_size=0,destination=False),u'edx+ecx*4')
        self.assertEqual(cpp_instance.expand(expr=u'[edx+ecx]',def_size=0,destination=False),u'edx+ecx')
        self.assertEqual(cpp_instance.expand(expr=u'[edx]',def_size=0,destination=False),u'edx')
        self.assertEqual(cpp_instance.expand(expr=u'[esi+4000h]',def_size=0,destination=False),u'esi+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[esi+40h]',def_size=0,destination=False),u'esi+0x40')
        self.assertEqual(cpp_instance.expand(expr=u'[esi+ecx*8+4000h]',def_size=0,destination=False),u'esi+ecx*8+0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'[esi+ecx*8-0Ah]',def_size=0,destination=False),u'esi+ecx*8-0x0A')
        self.assertEqual(cpp_instance.expand(expr=u'[esi+ecx*8]',def_size=0,destination=False),u'esi+ecx*8')
        self.assertEqual(cpp_instance.expand(expr=u'[esi+ecx]',def_size=0,destination=False),u'esi+ecx')
        self.assertEqual(cpp_instance.expand(expr=u'[esi]',def_size=0,destination=False),u'esi')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+0Ch]',def_size=0,destination=True),u'*(dw*)(raddr(ds,esp+0x0C))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+0Ch]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x0C))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+10h]',def_size=0,destination=True),u'*(dw*)(raddr(ds,esp+0x10))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+10h]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x10))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+14h]',def_size=0,destination=True),u'*(dw*)(raddr(ds,esp+0x14))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+14h]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x14))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+18h]',def_size=0,destination=True),u'*(dw*)(raddr(ds,esp+0x18))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+18h]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x18))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+1Ch]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x1C))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+4]',def_size=0,destination=True),u'*(dw*)(raddr(ds,esp+4))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+4]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+4))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+8]',def_size=0,destination=True),u'*(dw*)(raddr(ds,esp+8))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp+8]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+8))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp]',def_size=0,destination=False),u'*(dw*)(raddr(ds,esp))')
        self.assertEqual(cpp_instance.expand(expr=u'[esp]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp))')
        self.assertEqual(cpp_instance.expand(expr=u'[g]',def_size=4,destination=False),u'*(dd*)(raddr(ds,offset(_data,g)))')
        self.assertEqual(cpp_instance.expand(expr=u'[h2]',def_size=0,destination=False),u'*(raddr(ds,offset(_data,h2)))')
        self.assertEqual(cpp_instance.expand(expr=u'[i+1]',def_size=0,destination=False),u'i+1')
        self.assertEqual(cpp_instance.expand(expr=u'[i+2]',def_size=0,destination=False),u'i+2')
        self.assertEqual(cpp_instance.expand(expr=u'[i+3]',def_size=0,destination=False),u'i+3')
        self.assertEqual(cpp_instance.expand(expr=u'[i+4]',def_size=0,destination=False),u'i+4')
        self.assertEqual(cpp_instance.expand(expr=u'[i+56h]',def_size=0,destination=False),u'i+0x56')
        self.assertEqual(cpp_instance.expand(expr=u'[i+5]',def_size=0,destination=False),u'i+5')
        self.assertEqual(cpp_instance.expand(expr=u'[i-10h]',def_size=0,destination=False),u'i-0x10')
        self.assertEqual(cpp_instance.expand(expr=u'[load_handle]',def_size=4,destination=False),u'*(dd*)(raddr(ds,offset(_data,load_handle)))')
        self.assertEqual(cpp_instance.expand(expr=u'[load_handle]',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,load_handle)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var+3]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var)+3))')
        self.assertEqual(cpp_instance.expand(expr=u'[var+4]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var)+4))')
        self.assertEqual(cpp_instance.expand(expr=u'[var-1]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var)-1))')
        self.assertEqual(cpp_instance.expand(expr=u'[var0+5]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var0)+5))')
        self.assertEqual(cpp_instance.expand(expr=u'[var1+1]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var1)+1))')
        self.assertEqual(cpp_instance.expand(expr=u'[var1]',def_size=0,destination=False),u'*(raddr(ds,offset(_data,var1)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var1]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var1)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var2+2]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var2)+2))')
        self.assertEqual(cpp_instance.expand(expr=u'[var2-1]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var2)-1))')
        self.assertEqual(cpp_instance.expand(expr=u'[var2]',def_size=0,destination=False),u'*(dw*)(raddr(ds,offset(_data,var2)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var2]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var2)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var2]',def_size=2,destination=True),u'*(dw*)(raddr(ds,offset(_data,var2)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var3+3*4]',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,var3)+3*4))')
        self.assertEqual(cpp_instance.expand(expr=u'[var3+ebp]',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,var3)+ebp))')
        self.assertEqual(cpp_instance.expand(expr=u'[var3]',def_size=0,destination=False),u'*(dd*)(raddr(ds,offset(_data,var3)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var3]',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,var3)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var4+t]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var4)+t))')
        self.assertEqual(cpp_instance.expand(expr=u'[var4]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var4)))')
        self.assertEqual(cpp_instance.expand(expr=u'[var]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var)))')
        self.assertEqual(cpp_instance.expand(expr=u'_data',def_size=1,destination=False),u'seg_offset(_data)')
        self.assertEqual(cpp_instance.expand(expr=u'a',def_size=1,destination=True),u'm.a')
        '''
        self.assertEqual(cpp_instance.expand(expr=u'ah',def_size=1,destination=False),u'ah')
        self.assertEqual(cpp_instance.expand(expr=u'ah',def_size=1,destination=True),u'ah')
        self.assertEqual(cpp_instance.expand(expr=u'al',def_size=0,destination=False),u'al')
        self.assertEqual(cpp_instance.expand(expr=u'al',def_size=1,destination=False),u'al')
        self.assertEqual(cpp_instance.expand(expr=u'al',def_size=1,destination=True),u'al')
        self.assertEqual(cpp_instance.expand(expr=u'ax',def_size=0,destination=False),u'ax')
        self.assertEqual(cpp_instance.expand(expr=u'ax',def_size=2,destination=False),u'ax')
        self.assertEqual(cpp_instance.expand(expr=u'ax',def_size=2,destination=True),u'ax')
        #self.assertEqual(cpp_instance.expand(expr=u'b',def_size=0,destination=False),u'offset(_data,b)')
        #self.assertEqual(cpp_instance.expand(expr=u'b',def_size=2,destination=True),u'm.b')
        #self.assertEqual(cpp_instance.expand(expr=u'beginningdata',def_size=0,destination=False),u'offset(_data,beginningdata)')
        self.assertEqual(cpp_instance.expand(expr=u'bh',def_size=0,destination=False),u'bh')
        self.assertEqual(cpp_instance.expand(expr=u'bh',def_size=1,destination=False),u'bh')
        self.assertEqual(cpp_instance.expand(expr=u'bh',def_size=1,destination=True),u'bh')
        self.assertEqual(cpp_instance.expand(expr=u'bl',def_size=0,destination=False),u'bl')
        self.assertEqual(cpp_instance.expand(expr=u'bl',def_size=1,destination=False),u'bl')
        self.assertEqual(cpp_instance.expand(expr=u'bl',def_size=1,destination=True),u'bl')
        self.assertEqual(cpp_instance.expand(expr=u'bp',def_size=2,destination=False),u'bp')
        #self.assertEqual(cpp_instance.expand(expr=u'buffer',def_size=0,destination=False),u'offset(_data,buffer)')
        self.assertEqual(cpp_instance.expand(expr=u'bx',def_size=0,destination=False),u'bx')
        self.assertEqual(cpp_instance.expand(expr=u'bx',def_size=2,destination=False),u'bx')
        self.assertEqual(cpp_instance.expand(expr=u'bx',def_size=2,destination=True),u'bx')
        '''
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [a]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,a)))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [ebp+var_20]',def_size=1,destination=False),u'*(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [ebp+var_20]',def_size=1,destination=True),u'*(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [edi+1]',def_size=0,destination=False),u'*(raddr(ds,edi+1))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [edi+1]',def_size=1,destination=True),u'*(raddr(ds,edi+1))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [edi+7]',def_size=0,destination=False),u'*(raddr(ds,edi+7))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [edi+7]',def_size=1,destination=True),u'*(raddr(ds,edi+7))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [esi]',def_size=1,destination=True),u'*(raddr(ds,esi))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [h2]',def_size=0,destination=False),u'*(raddr(ds,offset(_data,h2)))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [h]',def_size=0,destination=False),u'*(raddr(ds,offset(_data,h)))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [testOVerlap+1]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,testOVerlap)+1))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [var1+1]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var1)+1))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr [var1+2]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var1)+2))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr dl',def_size=1,destination=True),u'dl')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr ds:[0]',def_size=1,destination=True),u'*(raddr(ds,0))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr es:[0]',def_size=0,destination=False),u'*(raddr(es,0))')
        self.assertEqual(cpp_instance.expand(expr=u'byte ptr es:[0]',def_size=1,destination=True),u'*(raddr(es,0))')
        '''
        #self.assertEqual(cpp_instance.expand(expr=u'c',def_size=4,destination=True),u'm.c')
        self.assertEqual(cpp_instance.expand(expr=u'ch',def_size=1,destination=True),u'ch')
        self.assertEqual(cpp_instance.expand(expr=u'cl',def_size=0,destination=False),u'cl')
        self.assertEqual(cpp_instance.expand(expr=u'cl',def_size=1,destination=False),u'cl')
        self.assertEqual(cpp_instance.expand(expr=u'cl',def_size=1,destination=True),u'cl')
        self.assertEqual(cpp_instance.expand(expr=u'cx',def_size=0,destination=False),u'cx')
        self.assertEqual(cpp_instance.expand(expr=u'cx',def_size=2,destination=False),u'cx')
        self.assertEqual(cpp_instance.expand(expr=u'cx',def_size=2,destination=True),u'cx')
        self.assertEqual(cpp_instance.expand(expr=u'di',def_size=2,destination=False),u'di')
        self.assertEqual(cpp_instance.expand(expr=u'dl',def_size=0,destination=False),u'dl')
        self.assertEqual(cpp_instance.expand(expr=u'dl',def_size=1,destination=False),u'dl')
        self.assertEqual(cpp_instance.expand(expr=u'dl',def_size=1,destination=True),u'dl')
        self.assertEqual(cpp_instance.expand(expr=u'ds',def_size=0,destination=False),u'ds')
        self.assertEqual(cpp_instance.expand(expr=u'ds',def_size=2,destination=True),u'ds')
        self.assertEqual(cpp_instance.expand(expr=u'ds:0[eax*2]',def_size=0,destination=False),u'0+eax*2')
        self.assertEqual(cpp_instance.expand(expr=u'ds:0[ebx*4]',def_size=0,destination=False),u'0+ebx*4')
        self.assertEqual(cpp_instance.expand(expr=u'ds:0[ecx*8]',def_size=0,destination=False),u'0+ecx*8')
        self.assertEqual(cpp_instance.expand(expr=u'ds:40h[eax*2]',def_size=0,destination=False),u'0x40+eax*2')
        self.assertEqual(cpp_instance.expand(expr=u'ds:40h[ebx*4]',def_size=0,destination=False),u'0x40+ebx*4')
        self.assertEqual(cpp_instance.expand(expr=u'ds:40h[ecx*8]',def_size=0,destination=False),u'0x40+ecx*8')
        '''
        self.assertEqual(cpp_instance.expand(expr=u'ds:[edi]',def_size=1,destination=True),u'*(raddr(ds,edi))')
        self.assertEqual(cpp_instance.expand(expr=u'ds:byte_41411F[eax]',def_size=1,destination=True),u'*(raddr(ds,offset(_bss,byte_41411F)+eax))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [ebp+var_20+4]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+var_20+4))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [ebp+var_20+4]',def_size=4,destination=True),u'*(dd*)(raddr(ds,ebp+var_20+4))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [ebp+var_20]',def_size=4,destination=False),u'*(dd*)(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [ebp+var_20]',def_size=4,destination=True),u'*(dd*)(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [ebx-4]',def_size=0,destination=True),u'*(dd*)(raddr(ds,ebx-4))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [esp+0Ch]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x0C))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [esp+10h]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x10))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [esp+14h]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x14))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [esp+1Ch]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+0x1C))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [esp+4]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+4))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [esp+8]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp+8))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr [esp]',def_size=4,destination=True),u'*(dd*)(raddr(ds,esp))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr buffer',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,buffer)))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr es:[0]',def_size=4,destination=True),u'*(dd*)(raddr(es,0))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr es:[20*320+160]',def_size=4,destination=True),u'*(dd*)(raddr(es,20*320+160))')
        self.assertEqual(cpp_instance.expand(expr=u'dword ptr var4',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,var4)))')
        '''
        self.assertEqual(cpp_instance.expand(expr=u'dword',def_size=0,destination=False),u'dword')
        self.assertEqual(cpp_instance.expand(expr=u'dx',def_size=0,destination=False),u'dx')
        self.assertEqual(cpp_instance.expand(expr=u'dx',def_size=2,destination=False),u'dx')
        self.assertEqual(cpp_instance.expand(expr=u'dx',def_size=2,destination=True),u'dx')
        self.assertEqual(cpp_instance.expand(expr=u'eax',def_size=0,destination=False),u'eax')
        self.assertEqual(cpp_instance.expand(expr=u'eax',def_size=4,destination=False),u'eax')
        self.assertEqual(cpp_instance.expand(expr=u'eax',def_size=4,destination=True),u'eax')
        self.assertEqual(cpp_instance.expand(expr=u'eax_0',def_size=0,destination=False),u'eax_0')
        self.assertEqual(cpp_instance.expand(expr=u'ebp',def_size=0,destination=False),u'ebp')
        self.assertEqual(cpp_instance.expand(expr=u'ebp',def_size=4,destination=False),u'ebp')
        self.assertEqual(cpp_instance.expand(expr=u'ebp',def_size=4,destination=True),u'ebp')
        self.assertEqual(cpp_instance.expand(expr=u'ebx',def_size=0,destination=False),u'ebx')
        self.assertEqual(cpp_instance.expand(expr=u'ebx',def_size=4,destination=False),u'ebx')
        self.assertEqual(cpp_instance.expand(expr=u'ebx',def_size=4,destination=True),u'ebx')
        self.assertEqual(cpp_instance.expand(expr=u'ecx',def_size=0,destination=False),u'ecx')
        self.assertEqual(cpp_instance.expand(expr=u'ecx',def_size=4,destination=False),u'ecx')
        self.assertEqual(cpp_instance.expand(expr=u'ecx',def_size=4,destination=True),u'ecx')
        self.assertEqual(cpp_instance.expand(expr=u'ecx_0',def_size=0,destination=False),u'ecx_0')
        self.assertEqual(cpp_instance.expand(expr=u'ecx_0_0',def_size=0,destination=False),u'ecx_0_0')
        self.assertEqual(cpp_instance.expand(expr=u'edi',def_size=0,destination=False),u'edi')
        self.assertEqual(cpp_instance.expand(expr=u'edi',def_size=4,destination=False),u'edi')
        self.assertEqual(cpp_instance.expand(expr=u'edi',def_size=4,destination=True),u'edi')
        self.assertEqual(cpp_instance.expand(expr=u'edi_0',def_size=0,destination=False),u'edi_0')
        self.assertEqual(cpp_instance.expand(expr=u'edi_0',def_size=0,destination=True),u'edi_0')
        self.assertEqual(cpp_instance.expand(expr=u'edx',def_size=0,destination=False),u'edx')
        self.assertEqual(cpp_instance.expand(expr=u'edx',def_size=4,destination=False),u'edx')
        self.assertEqual(cpp_instance.expand(expr=u'edx',def_size=4,destination=True),u'edx')
        self.assertEqual(cpp_instance.expand(expr=u'edx_0_0',def_size=0,destination=False),u'edx_0_0')
        self.assertEqual(cpp_instance.expand(expr=u'edx_0_0',def_size=4,destination=True),u'edx_0_0')
        self.assertEqual(cpp_instance.expand(expr=u'eflags',def_size=1,destination=True),u'eflags')
        self.assertEqual(cpp_instance.expand(expr=u'eflags',def_size=2,destination=True),u'eflags')
        #self.assertEqual(cpp_instance.expand(expr=u'enddata',def_size=0,destination=False),u'offset(_data,enddata)')
        self.assertEqual(cpp_instance.expand(expr=u'es',def_size=0,destination=False),u'es')
        self.assertEqual(cpp_instance.expand(expr=u'es',def_size=2,destination=True),u'es')
        self.assertEqual(cpp_instance.expand(expr=u'esi',def_size=0,destination=False),u'esi')
        self.assertEqual(cpp_instance.expand(expr=u'esi',def_size=4,destination=False),u'esi')
        self.assertEqual(cpp_instance.expand(expr=u'esi',def_size=4,destination=True),u'esi')
        self.assertEqual(cpp_instance.expand(expr=u'esi_0',def_size=0,destination=False),u'esi_0')
        self.assertEqual(cpp_instance.expand(expr=u'esi_0',def_size=4,destination=False),u'esi_0')
        self.assertEqual(cpp_instance.expand(expr=u'esi_0',def_size=4,destination=True),u'esi_0')
        self.assertEqual(cpp_instance.expand(expr=u'esp',def_size=4,destination=False),u'esp')
        self.assertEqual(cpp_instance.expand(expr=u'esp',def_size=4,destination=True),u'esp')
        #self.assertEqual(cpp_instance.expand(expr=u'f',def_size=0,destination=False),u'offset(_data,f)')
        #self.assertEqual(cpp_instance.expand(expr=u'fileName',def_size=0,destination=False),u'offset(_data,fileName)')
        self.assertEqual(cpp_instance.expand(expr=u'flags',def_size=0,destination=False),u'flags')
        self.assertEqual(cpp_instance.expand(expr=u'flags',def_size=1,destination=True),u'flags')
        self.assertEqual(cpp_instance.expand(expr=u'flags',def_size=2,destination=True),u'flags')
        self.assertEqual(cpp_instance.expand(expr=u'flags',def_size=4,destination=False),u'flags')
        self.assertEqual(cpp_instance.expand(expr=u'fs',def_size=0,destination=False),u'fs')
        self.assertEqual(cpp_instance.expand(expr=u'fs',def_size=2,destination=False),u'fs')
        self.assertEqual(cpp_instance.expand(expr=u'fs',def_size=2,destination=True),u'fs')
        #self.assertEqual(cpp_instance.expand(expr=u'g',def_size=4,destination=False),u'm.g')
        self.assertEqual(cpp_instance.expand(expr=u'i',def_size=0,destination=False),u'i')
        self.assertEqual(cpp_instance.expand(expr=u'i',def_size=0,destination=True),u'i')
        self.assertEqual(cpp_instance.expand(expr=u'i',def_size=1,destination=True),u'i')
        self.assertEqual(cpp_instance.expand(expr=u'i',def_size=2,destination=True),u'i')
        self.assertEqual(cpp_instance.expand(expr=u'i',def_size=4,destination=False),u'i')
        self.assertEqual(cpp_instance.expand(expr=u'i',def_size=4,destination=True),u'i')
        '''
        self.assertEqual(cpp_instance.expand(expr=u'large ds:4000h',def_size=0,destination=False),u'large ds:0x4000')
        self.assertEqual(cpp_instance.expand(expr=u'offset _msg',def_size=4,destination=False),u'offset(_data,_msg)')
        self.assertEqual(cpp_instance.expand(expr=u'offset _test_btc',def_size=4,destination=False),u'offset(initcall,_test_btc)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000',def_size=4,destination=False),u'offset(_rdata,a0x4000)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000Eax',def_size=4,destination=False),u'offset(_rdata,a0x4000Eax)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000Ebx',def_size=4,destination=False),u'offset(_rdata,a0x4000Ebx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000EbxEdx',def_size=4,destination=False),u'offset(_rdata,a0x4000EbxEdx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000Ecx',def_size=4,destination=False),u'offset(_rdata,a0x4000Ecx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000EcxEcx2',def_size=4,destination=False),u'offset(_rdata,a0x4000EcxEcx2)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000Edi',def_size=4,destination=False),u'offset(_rdata,a0x4000Edi)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000Edx',def_size=4,destination=False),u'offset(_rdata,a0x4000Edx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000EdxEcx4',def_size=4,destination=False),u'offset(_rdata,a0x4000EdxEcx4)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000Esi',def_size=4,destination=False),u'offset(_rdata,a0x4000Esi)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x4000EsiEcx8',def_size=4,destination=False),u'offset(_rdata,a0x4000EsiEcx8)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Eax',def_size=4,destination=False),u'offset(_rdata,a0x40Eax)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Eax2',def_size=4,destination=False),u'offset(_rdata,a0x40Eax2)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40EaxEcx',def_size=4,destination=False),u'offset(_rdata,a0x40EaxEcx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Ebx',def_size=4,destination=False),u'offset(_rdata,a0x40Ebx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Ebx4',def_size=4,destination=False),u'offset(_rdata,a0x40Ebx4)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Ecx',def_size=4,destination=False),u'offset(_rdata,a0x40Ecx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Ecx8',def_size=4,destination=False),u'offset(_rdata,a0x40Ecx8)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Edi',def_size=4,destination=False),u'offset(_rdata,a0x40Edi)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Edx',def_size=4,destination=False),u'offset(_rdata,a0x40Edx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a0x40Esi',def_size=4,destination=False),u'offset(_rdata,a0x40Esi)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10EcxEcx2',def_size=4,destination=False),u'offset(_rdata,a10EcxEcx2)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10EdxEcx4',def_size=4,destination=False),u'offset(_rdata,a10EdxEcx4)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10EsiEcx8',def_size=4,destination=False),u'offset(_rdata,a10EsiEcx8)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxB08lx',def_size=4,destination=False),u'offset(_rdata,a10sA08lxB08lx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxB08lxC',def_size=4,destination=False),u'offset(_rdata,a10sA08lxB08lxC)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxB08lxR',def_size=4,destination=False),u'offset(_rdata,a10sA08lxB08lxR)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxB08lxR_0',def_size=4,destination=False),u'offset(_rdata,a10sA08lxB08lxR_0)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxR08lx',def_size=4,destination=False),u'offset(_rdata,a10sA08lxR08lx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxR08lx0',def_size=4,destination=False),u'offset(_rdata,a10sA08lxR08lx0)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxR08lxC',def_size=4,destination=False),u'offset(_rdata,a10sA08lxR08lxC)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxR08lxL',def_size=4,destination=False),u'offset(_rdata,a10sA08lxR08lxL)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08lxR08lx_0',def_size=4,destination=False),u'offset(_rdata,a10sA08lxR08lx_0)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sA08xR08xCci',def_size=4,destination=False),u'offset(_rdata,a10sA08xR08xCci)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sAh08lxAl08l',def_size=4,destination=False),u'offset(_rdata,a10sAh08lxAl08l)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sD',def_size=4,destination=False),u'offset(_rdata,a10sD)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sEax08lxA08l',def_size=4,destination=False),u'offset(_rdata,a10sEax08lxA08l)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sEcx08lxZfLd',def_size=4,destination=False),u'offset(_rdata,a10sEcx08lxZfLd)')
        self.assertEqual(cpp_instance.expand(expr=u'offset a10sEsi08lxEdi0',def_size=4,destination=False),u'offset(_rdata,a10sEsi08lxEdi0)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAaa',def_size=4,destination=False),u'offset(_rdata,aAaa)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAad',def_size=4,destination=False),u'offset(_rdata,aAad)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAam',def_size=4,destination=False),u'offset(_rdata,aAam)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAas',def_size=4,destination=False),u'offset(_rdata,aAas)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAdcb',def_size=4,destination=False),u'offset(_rdata,aAdcb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAdcl',def_size=4,destination=False),u'offset(_rdata,aAdcl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAdcw',def_size=4,destination=False),u'offset(_rdata,aAdcw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAddb',def_size=4,destination=False),u'offset(_rdata,aAddb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAddl',def_size=4,destination=False),u'offset(_rdata,aAddl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAddw',def_size=4,destination=False),u'offset(_rdata,aAddw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAndb',def_size=4,destination=False),u'offset(_rdata,aAndb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAndl',def_size=4,destination=False),u'offset(_rdata,aAndl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aAndw',def_size=4,destination=False),u'offset(_rdata,aAndw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBsfl',def_size=4,destination=False),u'offset(_rdata,aBsfl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBsfw',def_size=4,destination=False),u'offset(_rdata,aBsfw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBsrl',def_size=4,destination=False),u'offset(_rdata,aBsrl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBsrw',def_size=4,destination=False),u'offset(_rdata,aBsrw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBswapl',def_size=4,destination=False),u'offset(_rdata,aBswapl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtcl',def_size=4,destination=False),u'offset(_rdata,aBtcl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtcw',def_size=4,destination=False),u'offset(_rdata,aBtcw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtl',def_size=4,destination=False),u'offset(_rdata,aBtl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtrl',def_size=4,destination=False),u'offset(_rdata,aBtrl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtrw',def_size=4,destination=False),u'offset(_rdata,aBtrw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtsl',def_size=4,destination=False),u'offset(_rdata,aBtsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtsw',def_size=4,destination=False),u'offset(_rdata,aBtsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aBtw',def_size=4,destination=False),u'offset(_rdata,aBtw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCbw',def_size=4,destination=False),u'offset(_rdata,aCbw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCdq',def_size=4,destination=False),u'offset(_rdata,aCdq)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpb',def_size=4,destination=False),u'offset(_rdata,aCmpb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpl',def_size=4,destination=False),u'offset(_rdata,aCmpl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpsb',def_size=4,destination=False),u'offset(_rdata,aCmpsb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpsl',def_size=4,destination=False),u'offset(_rdata,aCmpsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpsw',def_size=4,destination=False),u'offset(_rdata,aCmpsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpw',def_size=4,destination=False),u'offset(_rdata,aCmpw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpxchg8bEax08',def_size=4,destination=False),u'offset(_rdata,aCmpxchg8bEax08)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpxchgb',def_size=4,destination=False),u'offset(_rdata,aCmpxchgb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpxchgl',def_size=4,destination=False),u'offset(_rdata,aCmpxchgl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCmpxchgw',def_size=4,destination=False),u'offset(_rdata,aCmpxchgw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCwd',def_size=4,destination=False),u'offset(_rdata,aCwd)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aCwde',def_size=4,destination=False),u'offset(_rdata,aCwde)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDaa',def_size=4,destination=False),u'offset(_rdata,aDaa)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDas',def_size=4,destination=False),u'offset(_rdata,aDas)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDecb',def_size=4,destination=False),u'offset(_rdata,aDecb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDecl',def_size=4,destination=False),u'offset(_rdata,aDecl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDecw',def_size=4,destination=False),u'offset(_rdata,aDecw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDivb',def_size=4,destination=False),u'offset(_rdata,aDivb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDivl',def_size=4,destination=False),u'offset(_rdata,aDivl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aDivw',def_size=4,destination=False),u'offset(_rdata,aDivw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEax',def_size=4,destination=False),u'offset(_rdata,aEax)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEax2',def_size=4,destination=False),u'offset(_rdata,aEax2)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEaxEcx',def_size=4,destination=False),u'offset(_rdata,aEaxEcx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEbx',def_size=4,destination=False),u'offset(_rdata,aEbx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEbx4',def_size=4,destination=False),u'offset(_rdata,aEbx4)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEbxEdx',def_size=4,destination=False),u'offset(_rdata,aEbxEdx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEcx',def_size=4,destination=False),u'offset(_rdata,aEcx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEcx8',def_size=4,destination=False),u'offset(_rdata,aEcx8)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEcxEcx',def_size=4,destination=False),u'offset(_rdata,aEcxEcx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEcxEcx2',def_size=4,destination=False),u'offset(_rdata,aEcxEcx2)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEdi',def_size=4,destination=False),u'offset(_rdata,aEdi)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEdiEcx',def_size=4,destination=False),u'offset(_rdata,aEdiEcx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEdx',def_size=4,destination=False),u'offset(_rdata,aEdx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEdxEcx',def_size=4,destination=False),u'offset(_rdata,aEdxEcx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEdxEcx4',def_size=4,destination=False),u'offset(_rdata,aEdxEcx4)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEsi',def_size=4,destination=False),u'offset(_rdata,aEsi)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEsiEcx',def_size=4,destination=False),u'offset(_rdata,aEsiEcx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aEsiEcx8',def_size=4,destination=False),u'offset(_rdata,aEsiEcx8)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aIdivb',def_size=4,destination=False),u'offset(_rdata,aIdivb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aIdivl',def_size=4,destination=False),u'offset(_rdata,aIdivl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aIdivw',def_size=4,destination=False),u'offset(_rdata,aIdivw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aImulb',def_size=4,destination=False),u'offset(_rdata,aImulb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aImull',def_size=4,destination=False),u'offset(_rdata,aImull)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aImullIm',def_size=4,destination=False),u'offset(_rdata,aImullIm)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aImulw',def_size=4,destination=False),u'offset(_rdata,aImulw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aImulwIm',def_size=4,destination=False),u'offset(_rdata,aImulwIm)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aIncb',def_size=4,destination=False),u'offset(_rdata,aIncb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aIncl',def_size=4,destination=False),u'offset(_rdata,aIncl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aIncw',def_size=4,destination=False),u'offset(_rdata,aIncw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJa',def_size=4,destination=False),u'offset(_rdata,aJa)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJae',def_size=4,destination=False),u'offset(_rdata,aJae)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJb',def_size=4,destination=False),u'offset(_rdata,aJb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJbe',def_size=4,destination=False),u'offset(_rdata,aJbe)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJcxz',def_size=4,destination=False),u'offset(_rdata,aJcxz)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJe',def_size=4,destination=False),u'offset(_rdata,aJe)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJecxz',def_size=4,destination=False),u'offset(_rdata,aJecxz)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJg',def_size=4,destination=False),u'offset(_rdata,aJg)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJge',def_size=4,destination=False),u'offset(_rdata,aJge)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJl',def_size=4,destination=False),u'offset(_rdata,aJl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJle',def_size=4,destination=False),u'offset(_rdata,aJle)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJne',def_size=4,destination=False),u'offset(_rdata,aJne)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJns',def_size=4,destination=False),u'offset(_rdata,aJns)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aJs',def_size=4,destination=False),u'offset(_rdata,aJs)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aLeaS08lx',def_size=4,destination=False),u'offset(_rdata,aLeaS08lx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aLodsb',def_size=4,destination=False),u'offset(_rdata,aLodsb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aLodsl',def_size=4,destination=False),u'offset(_rdata,aLodsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aLodsw',def_size=4,destination=False),u'offset(_rdata,aLodsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aLoopl',def_size=4,destination=False),u'offset(_rdata,aLoopl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aLoopnzl',def_size=4,destination=False),u'offset(_rdata,aLoopnzl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aLoopzl',def_size=4,destination=False),u'offset(_rdata,aLoopzl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aMovsb',def_size=4,destination=False),u'offset(_rdata,aMovsb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aMovsl',def_size=4,destination=False),u'offset(_rdata,aMovsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aMovsw',def_size=4,destination=False),u'offset(_rdata,aMovsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aMulb',def_size=4,destination=False),u'offset(_rdata,aMulb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aMull',def_size=4,destination=False),u'offset(_rdata,aMull)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aMulw',def_size=4,destination=False),u'offset(_rdata,aMulw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aNegb',def_size=4,destination=False),u'offset(_rdata,aNegb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aNegl',def_size=4,destination=False),u'offset(_rdata,aNegl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aNegw',def_size=4,destination=False),u'offset(_rdata,aNegw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aNotb',def_size=4,destination=False),u'offset(_rdata,aNotb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aNotl',def_size=4,destination=False),u'offset(_rdata,aNotl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aNotw',def_size=4,destination=False),u'offset(_rdata,aNotw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aOrb',def_size=4,destination=False),u'offset(_rdata,aOrb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aOrl',def_size=4,destination=False),u'offset(_rdata,aOrl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aOrw',def_size=4,destination=False),u'offset(_rdata,aOrw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aPopcntA08lxR08',def_size=4,destination=False),u'offset(_rdata,aPopcntA08lxR08)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aPoplEsp08lx',def_size=4,destination=False),u'offset(_rdata,aPoplEsp08lx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aPopwEsp08lx',def_size=4,destination=False),u'offset(_rdata,aPopwEsp08lx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRclb',def_size=4,destination=False),u'offset(_rdata,aRclb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRcll',def_size=4,destination=False),u'offset(_rdata,aRcll)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRclw',def_size=4,destination=False),u'offset(_rdata,aRclw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRcrb',def_size=4,destination=False),u'offset(_rdata,aRcrb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRcrl',def_size=4,destination=False),u'offset(_rdata,aRcrl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRcrw',def_size=4,destination=False),u'offset(_rdata,aRcrw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepLodsb',def_size=4,destination=False),u'offset(_rdata,aRepLodsb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepLodsl',def_size=4,destination=False),u'offset(_rdata,aRepLodsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepLodsw',def_size=4,destination=False),u'offset(_rdata,aRepLodsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepMovsb',def_size=4,destination=False),u'offset(_rdata,aRepMovsb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepMovsl',def_size=4,destination=False),u'offset(_rdata,aRepMovsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepMovsw',def_size=4,destination=False),u'offset(_rdata,aRepMovsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepStosb',def_size=4,destination=False),u'offset(_rdata,aRepStosb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepStosl',def_size=4,destination=False),u'offset(_rdata,aRepStosl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepStosw',def_size=4,destination=False),u'offset(_rdata,aRepStosw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepnzCmpsb',def_size=4,destination=False),u'offset(_rdata,aRepnzCmpsb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepnzCmpsl',def_size=4,destination=False),u'offset(_rdata,aRepnzCmpsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepnzCmpsw',def_size=4,destination=False),u'offset(_rdata,aRepnzCmpsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepnzScasb',def_size=4,destination=False),u'offset(_rdata,aRepnzScasb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepnzScasl',def_size=4,destination=False),u'offset(_rdata,aRepnzScasl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepnzScasw',def_size=4,destination=False),u'offset(_rdata,aRepnzScasw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepzCmpsb',def_size=4,destination=False),u'offset(_rdata,aRepzCmpsb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepzCmpsl',def_size=4,destination=False),u'offset(_rdata,aRepzCmpsl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepzCmpsw',def_size=4,destination=False),u'offset(_rdata,aRepzCmpsw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepzScasb',def_size=4,destination=False),u'offset(_rdata,aRepzScasb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepzScasl',def_size=4,destination=False),u'offset(_rdata,aRepzScasl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRepzScasw',def_size=4,destination=False),u'offset(_rdata,aRepzScasw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRolb',def_size=4,destination=False),u'offset(_rdata,aRolb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRoll',def_size=4,destination=False),u'offset(_rdata,aRoll)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRolw',def_size=4,destination=False),u'offset(_rdata,aRolw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRorb',def_size=4,destination=False),u'offset(_rdata,aRorb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRorl',def_size=4,destination=False),u'offset(_rdata,aRorl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aRorw',def_size=4,destination=False),u'offset(_rdata,aRorw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSarb',def_size=4,destination=False),u'offset(_rdata,aSarb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSarl',def_size=4,destination=False),u'offset(_rdata,aSarl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSarw',def_size=4,destination=False),u'offset(_rdata,aSarw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSbbb',def_size=4,destination=False),u'offset(_rdata,aSbbb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSbbl',def_size=4,destination=False),u'offset(_rdata,aSbbl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSbbw',def_size=4,destination=False),u'offset(_rdata,aSbbw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aScasb',def_size=4,destination=False),u'offset(_rdata,aScasb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aScasl',def_size=4,destination=False),u'offset(_rdata,aScasl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aScasw',def_size=4,destination=False),u'offset(_rdata,aScasw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSetb',def_size=4,destination=False),u'offset(_rdata,aSetb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSete',def_size=4,destination=False),u'offset(_rdata,aSete)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSetne',def_size=4,destination=False),u'offset(_rdata,aSetne)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShlb',def_size=4,destination=False),u'offset(_rdata,aShlb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShldl',def_size=4,destination=False),u'offset(_rdata,aShldl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShldw',def_size=4,destination=False),u'offset(_rdata,aShldw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShll',def_size=4,destination=False),u'offset(_rdata,aShll)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShlw',def_size=4,destination=False),u'offset(_rdata,aShlw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShrb',def_size=4,destination=False),u'offset(_rdata,aShrb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShrdl',def_size=4,destination=False),u'offset(_rdata,aShrdl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShrdw',def_size=4,destination=False),u'offset(_rdata,aShrdw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShrl',def_size=4,destination=False),u'offset(_rdata,aShrl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aShrw',def_size=4,destination=False),u'offset(_rdata,aShrw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aStosb',def_size=4,destination=False),u'offset(_rdata,aStosb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aStosl',def_size=4,destination=False),u'offset(_rdata,aStosl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aStosw',def_size=4,destination=False),u'offset(_rdata,aStosw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSubb',def_size=4,destination=False),u'offset(_rdata,aSubb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSubl',def_size=4,destination=False),u'offset(_rdata,aSubl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aSubw',def_size=4,destination=False),u'offset(_rdata,aSubw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXaddb',def_size=4,destination=False),u'offset(_rdata,aXaddb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXaddl',def_size=4,destination=False),u'offset(_rdata,aXaddl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXaddlSameRes08',def_size=4,destination=False),u'offset(_rdata,aXaddlSameRes08)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXaddw',def_size=4,destination=False),u'offset(_rdata,aXaddw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXchgb',def_size=4,destination=False),u'offset(_rdata,aXchgb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXchgl',def_size=4,destination=False),u'offset(_rdata,aXchgl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXchgw',def_size=4,destination=False),u'offset(_rdata,aXchgw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXlatEax08lx',def_size=4,destination=False),u'offset(_rdata,aXlatEax08lx)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXorb',def_size=4,destination=False),u'offset(_rdata,aXorb)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXorl',def_size=4,destination=False),u'offset(_rdata,aXorl)')
        self.assertEqual(cpp_instance.expand(expr=u'offset aXorw',def_size=4,destination=False),u'offset(_rdata,aXorw)')
        self.assertEqual(cpp_instance.expand(expr=u'offset pal_jeu',def_size=4,destination=False),u'offset(_data,pal_jeu)')
        self.assertEqual(cpp_instance.expand(expr=u'offset str1',def_size=4,destination=False),u'offset(_data,str1)')
        self.assertEqual(cpp_instance.expand(expr=u'offset str2',def_size=4,destination=False),u'offset(_data,str2)')
        self.assertEqual(cpp_instance.expand(expr=u'offset str3',def_size=4,destination=False),u'offset(_data,str3)')
        self.assertEqual(cpp_instance.expand(expr=u'offset testOVerlap',def_size=4,destination=False),u'offset(_data,testOVerlap)')
        self.assertEqual(cpp_instance.expand(expr=u'offset unk_40E008',def_size=4,destination=False),u'offset(_data,unk_40E008)')
        self.assertEqual(cpp_instance.expand(expr=u'offset unk_40F064',def_size=4,destination=False),u'offset(initcall,unk_40F064)')
        self.assertEqual(cpp_instance.expand(expr=u'offset var1',def_size=4,destination=False),u'offset(_data,var1)')
        self.assertEqual(cpp_instance.expand(expr=u'offset var1+1',def_size=4,destination=False),u'offset(_data,var1)+1')
        self.assertEqual(cpp_instance.expand(expr=u'offset var2',def_size=4,destination=False),u'offset(_data,var2)')
        self.assertEqual(cpp_instance.expand(expr=u'offset var3',def_size=4,destination=False),u'offset(_data,var3)')
        self.assertEqual(cpp_instance.expand(expr=u'offset var3+4',def_size=4,destination=False),u'offset(_data,var3)+4')
        self.assertEqual(cpp_instance.expand(expr=u'offset var4',def_size=4,destination=False),u'offset(_data,var4)')
        self.assertEqual(cpp_instance.expand(expr=u'offset var4+1',def_size=4,destination=False),u'offset(_data,var4)+1')
        self.assertEqual(cpp_instance.expand(expr=u'offset var4+4',def_size=4,destination=False),u'offset(_data,var4)+4')
        self.assertEqual(cpp_instance.expand(expr=u'op0',def_size=0,destination=False),u'op0')
        self.assertEqual(cpp_instance.expand(expr=u'op0',def_size=4,destination=True),u'op0')
        self.assertEqual(cpp_instance.expand(expr=u'op1',def_size=0,destination=False),u'op1')
        self.assertEqual(cpp_instance.expand(expr=u'printf',def_size=0,destination=True),u'printf')
        self.assertEqual(cpp_instance.expand(expr=u'ptr',def_size=0,destination=False),u'ptr')
        self.assertEqual(cpp_instance.expand(expr=u'r',def_size=0,destination=False),u'r')
        self.assertEqual(cpp_instance.expand(expr=u'res',def_size=0,destination=False),u'res')
        self.assertEqual(cpp_instance.expand(expr=u'res',def_size=0,destination=True),u'res')
        self.assertEqual(cpp_instance.expand(expr=u'res',def_size=4,destination=False),u'res')
        self.assertEqual(cpp_instance.expand(expr=u'res',def_size=4,destination=True),u'res')
        self.assertEqual(cpp_instance.expand(expr=u'resh',def_size=0,destination=False),u'resh')
        self.assertEqual(cpp_instance.expand(expr=u'resh',def_size=4,destination=False),u'resh')
        self.assertEqual(cpp_instance.expand(expr=u'resz',def_size=0,destination=False),u'resz')
        self.assertEqual(cpp_instance.expand(expr=u'rh',def_size=0,destination=False),u'rh')
        self.assertEqual(cpp_instance.expand(expr=u's0_0',def_size=0,destination=False),u's0_0')
        self.assertEqual(cpp_instance.expand(expr=u's0_0',def_size=4,destination=False),u's0_0')
        self.assertEqual(cpp_instance.expand(expr=u's1_0',def_size=0,destination=False),u's1_0')
        self.assertEqual(cpp_instance.expand(expr=u's1_0',def_size=4,destination=False),u's1_0')
        self.assertEqual(cpp_instance.expand(expr=u'si',def_size=2,destination=False),u'si')
        self.assertEqual(cpp_instance.expand(expr=u'small',def_size=0,destination=False),u'small')
        self.assertEqual(cpp_instance.expand(expr=u't',def_size=4,destination=False),u't')
        self.assertEqual(cpp_instance.expand(expr=u'taille_moire',def_size=4,destination=False),u'taille_moire')
        self.assertEqual(cpp_instance.expand(expr=u'teST2',def_size=4,destination=False),u'teST2')
        self.assertEqual(cpp_instance.expand(expr=u'testOVerlap',def_size=0,destination=False),u'offset(_data,testOVerlap)')
        self.assertEqual(cpp_instance.expand(expr=u'var1',def_size=0,destination=False),u'm.var1')
        self.assertEqual(cpp_instance.expand(expr=u'var1',def_size=0,destination=False),u'offset(_data,var1)')
        self.assertEqual(cpp_instance.expand(expr=u'var1',def_size=1,destination=False),u'm.var1')
        self.assertEqual(cpp_instance.expand(expr=u'var1',def_size=1,destination=True),u'*(db*)&m.var1')
        self.assertEqual(cpp_instance.expand(expr=u'var1',def_size=1,destination=True),u'm.var1')
        self.assertEqual(cpp_instance.expand(expr=u'var1[1]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var1)+1))')
        self.assertEqual(cpp_instance.expand(expr=u'var1[bx+si]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var1)+bx+si))')
        self.assertEqual(cpp_instance.expand(expr=u'var1[bx]',def_size=1,destination=True),u'*(raddr(ds,offset(_data,var1)+bx))')
        self.assertEqual(cpp_instance.expand(expr=u'var2',def_size=0,destination=False),u'offset(_data,var2)')
        self.assertEqual(cpp_instance.expand(expr=u'var2',def_size=2,destination=True),u'm.var2')
        self.assertEqual(cpp_instance.expand(expr=u'var3',def_size=4,destination=True),u'm.var3')
        self.assertEqual(cpp_instance.expand(expr=u'var3+3*4',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,var3)+3*4))')
        self.assertEqual(cpp_instance.expand(expr=u'var3+ebp',def_size=4,destination=True),u'*(dd*)(raddr(ds,offset(_data,var3)+ebp))')
        self.assertEqual(cpp_instance.expand(expr=u'var5',def_size=0,destination=False),u'offset(_data,var5)')
        self.assertEqual(cpp_instance.expand(expr=u'word ptr [d]',def_size=2,destination=False),u'*(dw*)(raddr(ds,offset(_data,d)))')
        self.assertEqual(cpp_instance.expand(expr=u'word ptr [e]',def_size=2,destination=False),u'*(dw*)(raddr(ds,offset(_data,e)))')
        self.assertEqual(cpp_instance.expand(expr=u'word ptr [ebp+var_20]',def_size=2,destination=False),u'*(dw*)(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'word ptr [ebp+var_20]',def_size=2,destination=True),u'*(dw*)(raddr(ds,ebp+var_20))')
        self.assertEqual(cpp_instance.expand(expr=u'word ptr [var5+2]',def_size=2,destination=True),u'*(dw*)(raddr(ds,offset(_data,var5)+2))')
        self.assertEqual(cpp_instance.expand(expr=u'word ptr var5',def_size=2,destination=True),u'*(dw*)(raddr(ds,offset(_data,var5)))')
        self.assertEqual(cpp_instance.expand(expr=u'word',def_size=0,destination=False),u'word')
        self.assertEqual(cpp_instance.expand(expr=u'var3',def_size=0,destination=False),u'm.var3')
        '''

    @patch.object(logging, 'debug')
    #@patch.object(parser, 'get_global')
    def test_get_size(self, mock_debug):
        #mock_get_global.return_value = var()
        mock_debug.return_value = None

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(cpp_instance.get_size(expr=u"'Z' - 'A' +1"),0)
        self.assertEqual(cpp_instance.get_size(expr=u"'a'"),1)
        self.assertEqual(cpp_instance.get_size(expr=u"'c'"),1)
        self.assertEqual(cpp_instance.get_size(expr=u"'d'"),1)
        self.assertEqual(cpp_instance.get_size(expr=u"'dcba'"),4)
        self.assertEqual(cpp_instance.get_size(expr=u"'tseT'"),4)
        self.assertEqual(cpp_instance.get_size(expr=u'(1024*10/16)+5'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'(1024*10/16)-1'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'(offset str_buffer+800h)'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'(offset str_buffer+810h)'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+0x40'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'+0x4000'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx*2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx*2+0x4000'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx*2-0x0A'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx*4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx*4+0x4000'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx*4-0x0A'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+ecx+0x40'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+edx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'+edx+0x4000'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-0x108'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-0x1C'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-0x20'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-0x28'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-0x2C'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-1'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-1-(-2+3)'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-12'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-13'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-5'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'-8'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'0'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0002h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0007'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'000f3h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'000ff00ffh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'001111111B'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'00fffh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'00h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0100b'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'01010101010101010b'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0101010101010101b'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0101b'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'010B'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'011111100B'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'011111111111111111111111111111111b'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'01111111111111111b'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'011111111B'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'012345678h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'01B'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'01h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'02h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'03dh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'03eh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'03fh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'042h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'077123456h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'077aaFF00h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'08h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0B'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0BC6058h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0D5h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0Eh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0F7h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0FBCA7654h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FBCA7h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FEh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFC70F9h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFE0080h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFEDCBFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFEFDFCh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFF7FFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFA549h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFED4h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFD3h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFECh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFF0h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFF7h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFFAh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFFBh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFFCh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFFDh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0FFh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0Fh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0a0000h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0a000h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0aabbccddh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0abcdef77h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0af222h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0cch'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0ddh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0df01h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0dff1h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0f0ffh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0f0h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0f222h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffff0003h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffff00f3h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffff01ffh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffffff00h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffffff03h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0fffffff3h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffffffffh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffffh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'0ffh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'0x0C'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'1'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'10'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'10000h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1000h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'100h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'1024*10/16'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'1024*1024'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'10B'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'10h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'11'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'111'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'114h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'11h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'12'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'12340004h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1234001Dh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340128h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340205h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340306h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340407h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1234040Ah'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340503h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340506h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340507h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340547h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340559h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12340560h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1234059Fh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'123405A0h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'123405FAh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12341678h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12341h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12343h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12345'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'1234561Dh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12345678h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12345h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12347F7Fh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12347FFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12348000h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'12348080h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1234h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'127Eh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'12Ch'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'13'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'132'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'133'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'13h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'14'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'14*320'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'14h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'15'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'16'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'17'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'17h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'18'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'18h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'19'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'192'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'193'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'1Ch'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'1Eh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'1FEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'1FF7Fh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FF80h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FF81h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'1FFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'1Fh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'2'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'20'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'20000h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'20h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'21'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'21AD3D34h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'21h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'22'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'23'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'24'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'24h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'25'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'255'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'256'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'256*3'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'256+3'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'256+3+65536'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'26'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'2Dh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'3'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'3*4'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'30'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'303Bh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'30h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'31'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'31h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'32'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'320*200/4'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'32432434h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'340128h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'35'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'37'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'39h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'3Ch'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'3DAh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'3Eh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'3FEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'3FFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'3Fh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'3c8h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'3c9h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'3h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'4'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'4+5*256'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'4000000'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'40h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'43210123h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'48h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'49h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'4Ah'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'4Ch'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'4ch'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'5'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'50'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'501h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'511'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'55'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'56'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'57'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'6'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'6*256+5'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'60'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'65324h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'65423456h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'6789ABCDh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'7Eh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'7FEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFEh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFFFFEh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'7FFh'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'7Fh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'8'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'80000000h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'80000001h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'80008481h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'80008688h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'8000h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'801h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'80h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'81234567h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'81238567h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'812FADAh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'813F3421h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'81h'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'82345679h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'8234A6F8h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'8345A1F2h'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'8C5h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'8D5h'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'9'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'9ABCDEFh'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'AL'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'B'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'CC'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'DDD'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'DX'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'OFFSET ASCiI'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'OFFSET AsCii'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'TWO'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[a+1]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'[a]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'[cs:table+ax]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[doublequote+4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[eax+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[eax+40h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[eax+ecx+40h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[eax+ecx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[eax]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+ecx_0]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+ecx_vals]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+edx_0]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+i*4+ecx_vals]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+i+table]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+iflags]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+op0]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+op0h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+s0]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+s1]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+s2]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+table]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+var_1C]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+var_20]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebp+var_4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebx+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebx+40h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebx+edx+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebx+edx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ebx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ecx+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ecx+40h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ecx+ecx*2+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ecx+ecx*2-0Ah]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ecx+ecx*2]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ecx+ecx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[ecx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edi+1]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edi+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edi+40h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edi+ecx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edi]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edx+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edx+40h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edx+ecx*4+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edx+ecx*4-0Ah]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edx+ecx*4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edx+ecx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[edx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esi+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esi+40h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esi+ecx*8+4000h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esi+ecx*8-0Ah]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esi+ecx*8]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esi+ecx]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esi]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp+0Ch]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp+10h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp+14h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp+18h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp+1Ch]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp+4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp+8]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[esp]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'[g]'),4)
        #self.assertEqual(cpp_instance.get_size(expr=u'[h2]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'[i+1]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[i+2]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[i+3]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[i+4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[i+56h]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[i+5]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[i-10h]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'[load_handle]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'[var+3]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[var+4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[var-1]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[var0+5]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[var1+1]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'[var1]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'[var2+2]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[var2-1]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'[var2]'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'[var2]'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'[var3+3*4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'[var3+ebp]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'[var3]'),4)
        #self.assertEqual(cpp_instance.get_size(expr=u'[var4+t]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'[var4]'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'[var]'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'_data'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'a'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'ah'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'al'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'ax'),2)
        #self.assertEqual(cpp_instance.get_size(expr=u'b'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'b'),2)
        #self.assertEqual(cpp_instance.get_size(expr=u'beginningdata'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'bh'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'bl'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'bp'),2)
        #self.assertEqual(cpp_instance.get_size(expr=u'buffer'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'bx'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [a]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [ebp+var_20]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [edi+1]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [edi+7]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [esi]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [h2]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [h]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [testOVerlap+1]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [var1+1]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr [var1+2]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr dl'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr ds:[0]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'byte ptr es:[0]'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'c'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'ch'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'cl'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'cx'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'di'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'dl'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'ds'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'ds:0[eax*2]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ds:0[ebx*4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ds:0[ecx*8]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ds:40h[eax*2]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ds:40h[ebx*4]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ds:40h[ecx*8]'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ds:[edi]'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'ds:byte_41411F[eax]'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [ebp+var_20+4]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [ebp+var_20]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [ebx-4]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [esp+0Ch]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [esp+10h]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [esp+14h]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [esp+1Ch]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [esp+4]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [esp+8]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr [esp]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr buffer'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr es:[0]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr es:[20*320+160]'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword ptr var4'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'dword'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'dx'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'eax'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'eax_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ebp'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'ebx'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'ecx'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'ecx_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ecx_0_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'edi'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'edi_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'edx'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'edx_0_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'eflags'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'enddata'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'es'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'esi'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'esi_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'esp'),4)
        #self.assertEqual(cpp_instance.get_size(expr=u'fileName'),1)
        self.assertEqual(cpp_instance.get_size(expr=u'flags'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'fs'),2)
        #self.assertEqual(cpp_instance.get_size(expr=u'g'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'i'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'large ds:4000h'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset _msg'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset _test_btc'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000Eax'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000Ebx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000EbxEdx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000Ecx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000EcxEcx2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000Edi'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000Edx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000EdxEcx4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000Esi'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x4000EsiEcx8'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Eax'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Eax2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40EaxEcx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Ebx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Ebx4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Ecx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Ecx8'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Edi'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Edx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a0x40Esi'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10EcxEcx2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10EdxEcx4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10EsiEcx8'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxB08lx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxB08lxC'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxB08lxR'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxB08lxR_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxR08lx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxR08lx0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxR08lxC'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxR08lxL'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08lxR08lx_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sA08xR08xCci'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sAh08lxAl08l'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sD'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sEax08lxA08l'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sEcx08lxZfLd'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset a10sEsi08lxEdi0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAaa'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAad'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAam'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAas'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAdcb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAdcl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAdcw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAddb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAddl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAddw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAndb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAndl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aAndw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBsfl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBsfw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBsrl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBsrw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBswapl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtcl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtcw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtrl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtrw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aBtw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCbw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCdq'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpsb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpxchg8bEax08'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpxchgb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpxchgl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCmpxchgw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCwd'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aCwde'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDaa'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDas'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDecb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDecl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDecw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDivb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDivl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aDivw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEax'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEax2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEaxEcx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEbx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEbx4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEbxEdx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEcx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEcx8'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEcxEcx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEcxEcx2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEdi'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEdiEcx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEdx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEdxEcx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEdxEcx4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEsi'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEsiEcx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aEsiEcx8'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aIdivb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aIdivl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aIdivw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aImulb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aImull'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aImullIm'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aImulw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aImulwIm'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aIncb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aIncl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aIncw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJa'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJae'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJbe'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJcxz'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJe'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJecxz'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJg'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJge'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJle'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJne'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJns'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aJs'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aLeaS08lx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aLodsb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aLodsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aLodsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aLoopl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aLoopnzl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aLoopzl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aMovsb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aMovsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aMovsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aMulb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aMull'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aMulw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aNegb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aNegl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aNegw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aNotb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aNotl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aNotw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aOrb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aOrl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aOrw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aPopcntA08lxR08'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aPoplEsp08lx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aPopwEsp08lx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRclb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRcll'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRclw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRcrb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRcrl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRcrw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepLodsb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepLodsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepLodsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepMovsb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepMovsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepMovsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepStosb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepStosl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepStosw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepnzCmpsb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepnzCmpsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepnzCmpsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepnzScasb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepnzScasl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepnzScasw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepzCmpsb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepzCmpsl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepzCmpsw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepzScasb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepzScasl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRepzScasw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRolb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRoll'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRolw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRorb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRorl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aRorw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSarb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSarl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSarw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSbbb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSbbl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSbbw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aScasb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aScasl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aScasw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSetb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSete'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSetne'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShlb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShldl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShldw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShll'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShlw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShrb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShrdl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShrdw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShrl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aShrw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aStosb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aStosl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aStosw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSubb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSubl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aSubw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXaddb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXaddl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXaddlSameRes08'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXaddw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXchgb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXchgl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXchgw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXlatEax08lx'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXorb'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXorl'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset aXorw'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset pal_jeu'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset str1'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset str2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset str3'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset str_buffer+810h'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset testOVerlap'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset unk_40E008'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset unk_40F064'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var1'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var1+1'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var2'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var3'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var3+4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var4+1'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'offset var4+4'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'op0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'op1'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'printf'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'ptr'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'r'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'res'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'resh'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'resz'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'rh'),0)
        self.assertEqual(cpp_instance.get_size(expr=u's0_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u's1_0'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'si'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'small'),0)
        self.assertEqual(cpp_instance.get_size(expr=u't'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'taille_moire'),0)
        self.assertEqual(cpp_instance.get_size(expr=u'teST2'),0)
        #self.assertEqual(cpp_instance.get_size(expr=u'testOVerlap'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'var1'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'var1[1]'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'var1[bx+si]'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'var1[bx]'),1)
        #self.assertEqual(cpp_instance.get_size(expr=u'var2'),2)
        '''
        self.assertEqual(cpp_instance.get_size(expr=u'var3'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'var3+3*4'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'var3+ebp'),4)
        self.assertEqual(cpp_instance.get_size(expr=u'var5'),1)
        '''
        self.assertEqual(cpp_instance.get_size(expr=u'word ptr [d]'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'word ptr [e]'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'word ptr [ebp+var_20]'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'word ptr [var5+2]'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'word ptr var5'),2)
        self.assertEqual(cpp_instance.get_size(expr=u'word'),0)

    @patch.object(logging, 'debug')
    def test_is_register(self, mock_debug):
        mock_debug.return_value = None
        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'_data'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'offset var1'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'var1'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'cl'),
            1
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'edx'),
            4
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'[edi+1]'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'[doublequote+4]'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'dl'),
            1
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'-12'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'teST2'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'var3'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u"'d'"),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'dx'),
            2
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'esi'),
            4
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'enddata'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u"'Z' - 'A' +1"),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'beginningdata'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'al'),
            1
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'ebx'),
            4
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'offset var2'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'OFFSET ASCiI'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'bl'),
            1
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'OFFSET AsCii'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'[edi]'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'-13'),
            0
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'edi'),
            4
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'ds'),
            2
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.is_register(expr=u'eax'),
            4
        )

    def test_parse2(self):
        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='ebx',dst=u'eax'),
            (u'eax', u'ebx')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src=" 'Z' - 'A' +1",dst=u'al'),
            (u'al', u"'Z' - 'A' +1")
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='11',dst=u'dx'),
            (u'dx', u'11')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='30h ',dst=u'bl'),
            (u'bl', u'0x30')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='1',dst=u'al'),
            (u'al', u'1')
        )

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src='-12',dst=u'var3'),(u'm.var3', u'-12'))

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='9 ',dst=u'ah'),
            (u'ah', u'9')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='8 ',dst=u'cl'),
            (u'cl', u'8')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='2',dst=u'dl'),
            (u'dl', u'2')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='0',dst=u'al'),
            (u'al', u'0')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='[edi]',dst=u'byte ptr dl'),
            (u'dl', u'*(raddr(ds,edi))')
        )

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src='OFFSET AsCii ',dst=u'edi'),(u'edi', u'offset(_data,ASCII)'))

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src='-13',dst=u'var3'),(u'm.var3', u'-13'))

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src="'d'",dst=u'[doublequote+4]'),(u'*(raddr(ds,offset(_data,doublequote)+4))', u"'d'"))

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='0Fh ',dst=u'bl'),
            (u'bl', u'0x0F')
        )

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src='OFFSET ASCiI ',dst=u'edx'),(u'edx', u'offset(_data,ASCII)'))

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src='offset var2',dst=u'esi'),(u'esi', u'offset(_data,var2)'))

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='7 ',dst=u'bl'),
            (u'bl', u'7')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='[edi+1]',dst=u'dx'),
            (u'dx', u'*(dw*)(raddr(ds,edi+1))')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='4ch ',dst=u'ah'),
            (u'ah', u'0x4c')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='39h ',dst=u'bl'),
            (u'bl', u'0x39')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='-13',dst=u'eax'),
            (u'eax', u'-13')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='al',dst=u'bl'),
            (u'bl', u'al')
        )

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='132',dst=u'byte ptr [edi+7]'),
            (u'*(raddr(ds,edi+7))', u'132')
        )

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src='var1',dst=u'dl'),(u'dl', u'm.var1'))

        #p = parser([])
        #cpp_instance = cpp(p)
        #self.assertEqual(cpp_instance.parse2(src='offset var1',dst=u'edi'),(u'edi', u'offset(_data,var1)'))

        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(
            cpp_instance.parse2(src='teST2',dst=u'eax'),
            (u'eax', u'teST2')
        )

    def test_convert_number(self):
        self.assertEqual(cpp.convert_number_to_c(expr=u"'Z' - 'A' +1"), u"'Z' - 'A' +1")
        self.assertEqual(cpp.convert_number_to_c(expr=u'((((2030080+64000*26)/4096)+1)*4096)-1'), u'((((2030080+64000*26)/4096)+1)*4096)-1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'(00+38*3)*320+1/2+33*(3-1)'), u'(00+38*3)*320+1/2+33*(3-1)')
        self.assertEqual(cpp.convert_number_to_c(expr=u'(1024*10/16)+5'), u'(1024*10/16)+5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'(1024*10/16)-1'), u'(1024*10/16)-1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+0x40'), u'+0x40')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+0x4000'), u'+0x4000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx'), u'+ecx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx*2'), u'+ecx*2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx*2+0x4000'), u'+ecx*2+0x4000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx*2-0x0A'), u'+ecx*2-0x0A')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx*4'), u'+ecx*4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx*4+0x4000'), u'+ecx*4+0x4000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx*4-0x0A'), u'+ecx*4-0x0A')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+ecx+0x40'), u'+ecx+0x40')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+edx'), u'+edx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'+edx+0x4000'), u'+edx+0x4000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-0x108'), u'-0x108')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-0x1C'), u'-0x1C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-0x20'), u'-0x20')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-0x28'), u'-0x28')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-0x2C'), u'-0x2C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-1'), u'-1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-1-(-2+3)'), u'-1-(-2+3)')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-108h'), u'-0x108')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-12'), u'-12')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-13'), u'-13')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-1Ch'), u'-0x1C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-2'), u'-2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-20h'), u'-0x20')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-28h'), u'-0x28')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-2Ch'), u'-0x2C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-2Dh'), u'-0x2D')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-4'), u'-4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-5'), u'-5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'-8'), u'-8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0'), u'0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0002h'), u'0x0002')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0007'), u'0007')
        self.assertEqual(cpp.convert_number_to_c(expr=u'000f3h'), u'0x000f3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'000ff00ffh'), u'0x000ff00ff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'001111111B'), u'0x7f')
        self.assertEqual(cpp.convert_number_to_c(expr=u'00fffh'), u'0x00fff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'00h'), u'0x00')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0100b'), u'0x4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'01010101010101010b'), u'0xaaaa')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0101010101010101b'), u'0x5555')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0101b'), u'0x5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'010B'), u'0x2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'011111100B'), u'0xfc')
        self.assertEqual(cpp.convert_number_to_c(expr=u'011111111111111111111111111111111b'), u'0xffffffff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'01111111111111111b'), u'0xffff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'011111111B'), u'0xff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'012345678h'), u'0x012345678')
        self.assertEqual(cpp.convert_number_to_c(expr=u'01B'), u'0x1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'01h'), u'0x01')
        self.assertEqual(cpp.convert_number_to_c(expr=u'02h'), u'0x02')
        self.assertEqual(cpp.convert_number_to_c(expr=u'03dh'), u'0x03d')
        self.assertEqual(cpp.convert_number_to_c(expr=u'03eh'), u'0x03e')
        self.assertEqual(cpp.convert_number_to_c(expr=u'03fh'), u'0x03f')
        self.assertEqual(cpp.convert_number_to_c(expr=u'042h'), u'0x042')
        self.assertEqual(cpp.convert_number_to_c(expr=u'077123456h'), u'0x077123456')
        self.assertEqual(cpp.convert_number_to_c(expr=u'077aaFF00h'), u'0x077aaFF00')
        self.assertEqual(cpp.convert_number_to_c(expr=u'08h'), u'0x08')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0B'), u'0x0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0BC6058h'), u'0x0BC6058')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0Ch'), u'0x0C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0D5h'), u'0x0D5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0Eh'), u'0x0E')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0F7h'), u'0x0F7')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FBCA7654h'), u'0x0FBCA7654')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FBCA7h'), u'0x0FBCA7')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FEh'), u'0x0FE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFEh'), u'0x0FFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFC70F9h'), u'0x0FFFC70F9')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFE0080h'), u'0x0FFFE0080')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFEDCBFh'), u'0x0FFFEDCBF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFEFDFCh'), u'0x0FFFEFDFC')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFEh'), u'0x0FFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFF7FFFh'), u'0x0FFFF7FFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFA549h'), u'0x0FFFFA549')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFEh'), u'0x0FFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFED4h'), u'0x0FFFFFED4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFEh'), u'0x0FFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFD3h'), u'0x0FFFFFFD3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFECh'), u'0x0FFFFFFEC')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFEh'), u'0x0FFFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFF0h'), u'0x0FFFFFFF0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFF7h'), u'0x0FFFFFFF7')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFFAh'), u'0x0FFFFFFFA')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFFh'), u'0x0FFFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFFh'), u'0x0FFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFFh'), u'0x0FFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFFh'), u'0x0FFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFFh'), u'0x0FFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0FFh'), u'0x0FF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0Fh'), u'0x0F')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0a0000h'), u'0x0a0000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0a000h'), u'0x0a000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0aabbccddh'), u'0x0aabbccdd')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0abcdef77h'), u'0x0abcdef77')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0af222h'), u'0x0af222')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0cch'), u'0x0cc')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ddh'), u'0x0dd')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0df01h'), u'0x0df01')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0dff1h'), u'0x0dff1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0f0ffh'), u'0x0f0ff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0f0h'), u'0x0f0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0f222h'), u'0x0f222')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffff0003h'), u'0x0ffff0003')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffff00f3h'), u'0x0ffff00f3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffff01ffh'), u'0x0ffff01ff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffffff00h'), u'0x0ffffff00')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffffff03h'), u'0x0ffffff03')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0fffffff3h'), u'0x0fffffff3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffffffffh'), u'0x0ffffffff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffffh'), u'0x0ffff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0ffh'), u'0x0ff')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0x0C'), u'0x0C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0x10'), u'0x10')
        self.assertEqual(cpp.convert_number_to_c(expr=u'0x14'), u'0x14')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1'), u'1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'10'), u'10')
        self.assertEqual(cpp.convert_number_to_c(expr=u'10000h'), u'0x10000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1000h'), u'0x1000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'100h'), u'0x100')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1024*10/16'), u'1024*10/16')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1024*1024'), u'1024*1024')
        self.assertEqual(cpp.convert_number_to_c(expr=u'10B'), u'0x2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'10h'), u'0x10')
        self.assertEqual(cpp.convert_number_to_c(expr=u'11'), u'11')
        self.assertEqual(cpp.convert_number_to_c(expr=u'111'), u'111')
        self.assertEqual(cpp.convert_number_to_c(expr=u'114h'), u'0x114')
        self.assertEqual(cpp.convert_number_to_c(expr=u'11h'), u'0x11')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12'), u'12')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12340004h'), u'0x12340004')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1234001Dh'), u'0x1234001D')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12341h'), u'0x12341')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12343h'), u'0x12343')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12345'), u'12345')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1234561Dh'), u'0x1234561D')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12345678h'), u'0x12345678')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12345h'), u'0x12345')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12347F7Fh'), u'0x12347F7F')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12347FFFh'), u'0x12347FFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12348000h'), u'0x12348000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12348080h'), u'0x12348080')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1234h'), u'0x1234')
        self.assertEqual(cpp.convert_number_to_c(expr=u'127Eh'), u'0x127E')
        self.assertEqual(cpp.convert_number_to_c(expr=u'12Ch'), u'0x12C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'13'), u'13')
        self.assertEqual(cpp.convert_number_to_c(expr=u'132'), u'132')
        self.assertEqual(cpp.convert_number_to_c(expr=u'133'), u'133')
        self.assertEqual(cpp.convert_number_to_c(expr=u'13h'), u'0x13')
        self.assertEqual(cpp.convert_number_to_c(expr=u'14'), u'14')
        self.assertEqual(cpp.convert_number_to_c(expr=u'14*320'), u'14*320')
        self.assertEqual(cpp.convert_number_to_c(expr=u'14h'), u'0x14')
        self.assertEqual(cpp.convert_number_to_c(expr=u'15'), u'15')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1500'), u'1500')
        self.assertEqual(cpp.convert_number_to_c(expr=u'16'), u'16')
        self.assertEqual(cpp.convert_number_to_c(expr=u'17'), u'17')
        self.assertEqual(cpp.convert_number_to_c(expr=u'17h'), u'0x17')
        self.assertEqual(cpp.convert_number_to_c(expr=u'18'), u'18')
        self.assertEqual(cpp.convert_number_to_c(expr=u'18h'), u'0x18')
        self.assertEqual(cpp.convert_number_to_c(expr=u'19'), u'19')
        self.assertEqual(cpp.convert_number_to_c(expr=u'192'), u'192')
        self.assertEqual(cpp.convert_number_to_c(expr=u'193'), u'193')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1Ch'), u'0x1C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1Eh'), u'0x1E')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FEh'), u'0x1FE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FF7Fh'), u'0x1FF7F')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FF80h'), u'0x1FF80')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FF81h'), u'0x1FF81')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFEh'), u'0x1FFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFEh'), u'0x1FFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFFEh'), u'0x1FFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFFFEh'), u'0x1FFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFFFFEh'), u'0x1FFFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFFFFFh'), u'0x1FFFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFFFFh'), u'0x1FFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFFFh'), u'0x1FFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFFh'), u'0x1FFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFFh'), u'0x1FFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1FFh'), u'0x1FF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'1Fh'), u'0x1F')
        self.assertEqual(cpp.convert_number_to_c(expr=u'2'), u'2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'20'), u'20')
        self.assertEqual(cpp.convert_number_to_c(expr=u'20000h'), u'0x20000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'20h'), u'0x20')
        self.assertEqual(cpp.convert_number_to_c(expr=u'21'), u'21')
        self.assertEqual(cpp.convert_number_to_c(expr=u'21AD3D34h'), u'0x21AD3D34')
        self.assertEqual(cpp.convert_number_to_c(expr=u'21h'), u'0x21')
        self.assertEqual(cpp.convert_number_to_c(expr=u'22'), u'22')
        self.assertEqual(cpp.convert_number_to_c(expr=u'23'), u'23')
        self.assertEqual(cpp.convert_number_to_c(expr=u'24'), u'24')
        self.assertEqual(cpp.convert_number_to_c(expr=u'24h'), u'0x24')
        self.assertEqual(cpp.convert_number_to_c(expr=u'25'), u'25')
        self.assertEqual(cpp.convert_number_to_c(expr=u'255'), u'255')
        self.assertEqual(cpp.convert_number_to_c(expr=u'256'), u'256')
        self.assertEqual(cpp.convert_number_to_c(expr=u'256*3'), u'256*3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'256+3'), u'256+3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'256+3+65536'), u'256+3+65536')
        self.assertEqual(cpp.convert_number_to_c(expr=u'26'), u'26')
        self.assertEqual(cpp.convert_number_to_c(expr=u'27'), u'27')
        self.assertEqual(cpp.convert_number_to_c(expr=u'28'), u'28')
        self.assertEqual(cpp.convert_number_to_c(expr=u'29'), u'29')
        self.assertEqual(cpp.convert_number_to_c(expr=u'2Ch'), u'0x2C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'2Dh'), u'0x2D')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3'), u'3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3*4'), u'3*4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'30'), u'30')
        self.assertEqual(cpp.convert_number_to_c(expr=u'303Bh'), u'0x303B')
        self.assertEqual(cpp.convert_number_to_c(expr=u'30h'), u'0x30')
        self.assertEqual(cpp.convert_number_to_c(expr=u'31'), u'31')
        self.assertEqual(cpp.convert_number_to_c(expr=u'31h'), u'0x31')
        self.assertEqual(cpp.convert_number_to_c(expr=u'32'), u'32')
        self.assertEqual(cpp.convert_number_to_c(expr=u'320*200/4'), u'320*200/4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'32432434h'), u'0x32432434')
        self.assertEqual(cpp.convert_number_to_c(expr=u'340128h'), u'0x340128')
        self.assertEqual(cpp.convert_number_to_c(expr=u'35'), u'35')
        self.assertEqual(cpp.convert_number_to_c(expr=u'37'), u'37')
        self.assertEqual(cpp.convert_number_to_c(expr=u'39h'), u'0x39')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3Ch'), u'0x3C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3DAh'), u'0x3DA')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3Eh'), u'0x3E')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FEh'), u'0x3FE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFEh'), u'0x3FFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFEh'), u'0x3FFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFFEh'), u'0x3FFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFFFEh'), u'0x3FFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFFFFEh'), u'0x3FFFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFFFFFh'), u'0x3FFFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFFFFh'), u'0x3FFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFFFh'), u'0x3FFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFFh'), u'0x3FFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFFh'), u'0x3FFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3FFh'), u'0x3FF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3Fh'), u'0x3F')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3c8h'), u'0x3c8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3c9h'), u'0x3c9')
        self.assertEqual(cpp.convert_number_to_c(expr=u'3h'), u'0x3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'4'), u'4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'4+5*256'), u'4+5*256')
        self.assertEqual(cpp.convert_number_to_c(expr=u'4000000'), u'4000000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'40h'), u'0x40')
        self.assertEqual(cpp.convert_number_to_c(expr=u'43210123h'), u'0x43210123')
        self.assertEqual(cpp.convert_number_to_c(expr=u'48h'), u'0x48')
        self.assertEqual(cpp.convert_number_to_c(expr=u'49h'), u'0x49')
        self.assertEqual(cpp.convert_number_to_c(expr=u'4Ah'), u'0x4A')
        self.assertEqual(cpp.convert_number_to_c(expr=u'4Ch'), u'0x4C')
        self.assertEqual(cpp.convert_number_to_c(expr=u'4ch'), u'0x4c')
        self.assertEqual(cpp.convert_number_to_c(expr=u'5'), u'5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'50'), u'50')
        self.assertEqual(cpp.convert_number_to_c(expr=u'501h'), u'0x501')
        self.assertEqual(cpp.convert_number_to_c(expr=u'511'), u'511')
        self.assertEqual(cpp.convert_number_to_c(expr=u'55'), u'55')
        self.assertEqual(cpp.convert_number_to_c(expr=u'56'), u'56')
        self.assertEqual(cpp.convert_number_to_c(expr=u'57'), u'57')
        self.assertEqual(cpp.convert_number_to_c(expr=u'6'), u'6')
        self.assertEqual(cpp.convert_number_to_c(expr=u'6*256+5'), u'6*256+5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'60'), u'60')
        self.assertEqual(cpp.convert_number_to_c(expr=u'65324h'), u'0x65324')
        self.assertEqual(cpp.convert_number_to_c(expr=u'65423456h'), u'0x65423456')
        self.assertEqual(cpp.convert_number_to_c(expr=u'6789ABCDh'), u'0x6789ABCD')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7'), u'7')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7Eh'), u'0x7E')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FEh'), u'0x7FE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFEh'), u'0x7FFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFEh'), u'0x7FFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFFEh'), u'0x7FFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFFFEh'), u'0x7FFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFFFFEh'), u'0x7FFFFFFE')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFFFFFh'), u'0x7FFFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFFFFh'), u'0x7FFFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFFFh'), u'0x7FFFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFFh'), u'0x7FFFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFFh'), u'0x7FFF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7FFh'), u'0x7FF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'7Fh'), u'0x7F')
        self.assertEqual(cpp.convert_number_to_c(expr=u'8'), u'8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'80000000h'), u'0x80000000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'80000001h'), u'0x80000001')
        self.assertEqual(cpp.convert_number_to_c(expr=u'80008481h'), u'0x80008481')
        self.assertEqual(cpp.convert_number_to_c(expr=u'80008688h'), u'0x80008688')
        self.assertEqual(cpp.convert_number_to_c(expr=u'8000h'), u'0x8000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'801h'), u'0x801')
        self.assertEqual(cpp.convert_number_to_c(expr=u'80h'), u'0x80')
        self.assertEqual(cpp.convert_number_to_c(expr=u'81234567h'), u'0x81234567')
        self.assertEqual(cpp.convert_number_to_c(expr=u'81238567h'), u'0x81238567')
        self.assertEqual(cpp.convert_number_to_c(expr=u'812FADAh'), u'0x812FADA')
        self.assertEqual(cpp.convert_number_to_c(expr=u'813F3421h'), u'0x813F3421')
        self.assertEqual(cpp.convert_number_to_c(expr=u'81h'), u'0x81')
        self.assertEqual(cpp.convert_number_to_c(expr=u'82345679h'), u'0x82345679')
        self.assertEqual(cpp.convert_number_to_c(expr=u'8234A6F8h'), u'0x8234A6F8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'8345A1F2h'), u'0x8345A1F2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'8C5h'), u'0x8C5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'8D5h'), u'0x8D5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'9'), u'9')
        self.assertEqual(cpp.convert_number_to_c(expr=u'9ABCDEFh'), u'0x9ABCDEF')
        self.assertEqual(cpp.convert_number_to_c(expr=u'AL'), u'AL')
        self.assertEqual(cpp.convert_number_to_c(expr=u'B'), u'B')
        self.assertEqual(cpp.convert_number_to_c(expr=u'CC'), u'CC')
        self.assertEqual(cpp.convert_number_to_c(expr=u'DDD'), u'DDD')
        self.assertEqual(cpp.convert_number_to_c(expr=u'DX'), u'DX')
        self.assertEqual(cpp.convert_number_to_c(expr=u'OFFSET ASCiI'), u'OFFSET ASCiI')
        self.assertEqual(cpp.convert_number_to_c(expr=u'OFFSET AsCii'), u'OFFSET AsCii')
        self.assertEqual(cpp.convert_number_to_c(expr=u'TWO'), u'TWO')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[a+1]'), u'[a+1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[a]'), u'[a]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[cs:table+ax]'), u'[cs:table+ax]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[doublequote+4]'), u'[doublequote+4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[eax+4000h]'), u'[eax+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[eax+40h]'), u'[eax+0x40]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[eax+ecx+40h]'), u'[eax+ecx+0x40]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[eax+ecx]'), u'[eax+ecx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[eax]'), u'[eax]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+ecx_0]'), u'[ebp+ecx_0]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+ecx_vals]'), u'[ebp+ecx_vals]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+edx_0]'), u'[ebp+edx_0]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+i*4+ecx_vals]'), u'[ebp+i*4+ecx_vals]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+i+table]'), u'[ebp+i+table]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+iflags]'), u'[ebp+iflags]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+op0]'), u'[ebp+op0]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+op0h]'), u'[ebp+op0h]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+s0]'), u'[ebp+s0]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+s1]'), u'[ebp+s1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+s2]'), u'[ebp+s2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+table]'), u'[ebp+table]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+var_1C]'), u'[ebp+var_1C]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+var_20]'), u'[ebp+var_20]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebp+var_4]'), u'[ebp+var_4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebx+4000h]'), u'[ebx+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebx+40h]'), u'[ebx+0x40]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebx+edx+4000h]'), u'[ebx+edx+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebx+edx]'), u'[ebx+edx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ebx]'), u'[ebx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ecx+4000h]'), u'[ecx+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ecx+40h]'), u'[ecx+0x40]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ecx+ecx*2+4000h]'), u'[ecx+ecx*2+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ecx+ecx*2-0Ah]'), u'[ecx+ecx*2-0x0A]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ecx+ecx*2]'), u'[ecx+ecx*2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ecx+ecx]'), u'[ecx+ecx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[ecx]'), u'[ecx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edi+1]'), u'[edi+1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edi+4000h]'), u'[edi+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edi+40h]'), u'[edi+0x40]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edi+ecx]'), u'[edi+ecx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edi]'), u'[edi]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edx+4000h]'), u'[edx+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edx+40h]'), u'[edx+0x40]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edx+ecx*4+4000h]'), u'[edx+ecx*4+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edx+ecx*4-0Ah]'), u'[edx+ecx*4-0x0A]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edx+ecx*4]'), u'[edx+ecx*4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edx+ecx]'), u'[edx+ecx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[edx]'), u'[edx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esi+4000h]'), u'[esi+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esi+40h]'), u'[esi+0x40]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esi+ecx*8+4000h]'), u'[esi+ecx*8+0x4000]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esi+ecx*8-0Ah]'), u'[esi+ecx*8-0x0A]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esi+ecx*8]'), u'[esi+ecx*8]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esi+ecx]'), u'[esi+ecx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esi]'), u'[esi]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp+0Ch]'), u'[esp+0x0C]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp+10h]'), u'[esp+0x10]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp+14h]'), u'[esp+0x14]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp+18h]'), u'[esp+0x18]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp+1Ch]'), u'[esp+0x1C]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp+4]'), u'[esp+4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp+8]'), u'[esp+8]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[esp]'), u'[esp]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[g]'), u'[g]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[h2]'), u'[h2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[i+1]'), u'[i+1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[i+2]'), u'[i+2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[i+3]'), u'[i+3]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[i+4]'), u'[i+4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[i+56h]'), u'[i+0x56]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[i+5]'), u'[i+5]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[i-10h]'), u'[i-0x10]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[load_handle]'), u'[load_handle]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var+3]'), u'[var+3]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var+4]'), u'[var+4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var-1]'), u'[var-1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var0+5]'), u'[var0+5]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var1+1]'), u'[var1+1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var1]'), u'[var1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var2+2]'), u'[var2+2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var2-1]'), u'[var2-1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var2]'), u'[var2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var3+3*4]'), u'[var3+3*4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var3+ebp]'), u'[var3+ebp]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var3]'), u'[var3]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var4+t]'), u'[var4+t]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var4]'), u'[var4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'[var]'), u'[var]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ah'), u'ah')
        self.assertEqual(cpp.convert_number_to_c(expr=u'al'), u'al')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ax'), u'ax')
        self.assertEqual(cpp.convert_number_to_c(expr=u'b'), u'b')
        self.assertEqual(cpp.convert_number_to_c(expr=u'beginningdata'), u'beginningdata')
        self.assertEqual(cpp.convert_number_to_c(expr=u'bh'), u'bh')
        self.assertEqual(cpp.convert_number_to_c(expr=u'bl'), u'bl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'bp'), u'bp')
        self.assertEqual(cpp.convert_number_to_c(expr=u'buffer'), u'buffer')
        self.assertEqual(cpp.convert_number_to_c(expr=u'bx'), u'bx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [a]'), u'byte ptr [a]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [ebp+var_20]'), u'byte ptr [ebp+var_20]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [edi+1]'), u'byte ptr [edi+1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [edi+7]'), u'byte ptr [edi+7]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [esi]'), u'byte ptr [esi]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [h2]'), u'byte ptr [h2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [h]'), u'byte ptr [h]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [testOVerlap+1]'), u'byte ptr [testOVerlap+1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [var1+1]'), u'byte ptr [var1+1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr [var1+2]'), u'byte ptr [var1+2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr dl'), u'byte ptr dl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr ds:[0]'), u'byte ptr ds:[0]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'byte ptr es:[0]'), u'byte ptr es:[0]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ch'), u'ch')
        self.assertEqual(cpp.convert_number_to_c(expr=u'cl'), u'cl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'cx'), u'cx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'di'), u'di')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dl'), u'dl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds'), u'ds')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:0[eax*2]'), u'ds:0[eax*2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:0[ebx*4]'), u'ds:0[ebx*4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:0[ecx*8]'), u'ds:0[ecx*8]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:40h[eax*2]'), u'ds:0x40[eax*2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:40h[ebx*4]'), u'ds:0x40[ebx*4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:40h[ecx*8]'), u'ds:0x40[ecx*8]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:[edi]'), u'ds:[edi]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ds:byte_41411F[eax]'), u'ds:byte_41411F[eax]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [ebp+var_20+4]'), u'dword ptr [ebp+var_20+4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [ebp+var_20]'), u'dword ptr [ebp+var_20]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [ebx-4]'), u'dword ptr [ebx-4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [esp+0Ch]'), u'dword ptr [esp+0x0C]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [esp+10h]'), u'dword ptr [esp+0x10]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [esp+14h]'), u'dword ptr [esp+0x14]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [esp+1Ch]'), u'dword ptr [esp+0x1C]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [esp+4]'), u'dword ptr [esp+4]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [esp+8]'), u'dword ptr [esp+8]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr [esp]'), u'dword ptr [esp]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr buffer'), u'dword ptr buffer')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr es:[0]'), u'dword ptr es:[0]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr es:[20*320+160]'), u'dword ptr es:[20*320+160]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword ptr var4'), u'dword ptr var4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dword'), u'dword')
        self.assertEqual(cpp.convert_number_to_c(expr=u'dx'), u'dx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'eax'), u'eax')
        self.assertEqual(cpp.convert_number_to_c(expr=u'eax_0'), u'eax_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ebp'), u'ebp')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ebx'), u'ebx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ecx'), u'ecx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ecx_0'), u'ecx_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ecx_0_0'), u'ecx_0_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'edi'), u'edi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'edi_0'), u'edi_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'edx'), u'edx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'edx_0_0'), u'edx_0_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'eflags'), u'eflags')
        self.assertEqual(cpp.convert_number_to_c(expr=u'enddata'), u'enddata')
        self.assertEqual(cpp.convert_number_to_c(expr=u'es'), u'es')
        self.assertEqual(cpp.convert_number_to_c(expr=u'esi'), u'esi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'esi_0'), u'esi_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'esp'), u'esp')
        self.assertEqual(cpp.convert_number_to_c(expr=u'f'), u'f')
        self.assertEqual(cpp.convert_number_to_c(expr=u'fileName'), u'fileName')
        self.assertEqual(cpp.convert_number_to_c(expr=u'flags'), u'flags')
        self.assertEqual(cpp.convert_number_to_c(expr=u'fs'), u'fs')
        self.assertEqual(cpp.convert_number_to_c(expr=u'i'), u'i')
        self.assertEqual(cpp.convert_number_to_c(expr=u'large ds:4000h'), u'large ds:0x4000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset _msg'), u'offset _msg')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset _test_btc'), u'offset _test_btc')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000'), u'offset a0x4000')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000Eax'), u'offset a0x4000Eax')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000Ebx'), u'offset a0x4000Ebx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000EbxEdx'), u'offset a0x4000EbxEdx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000Ecx'), u'offset a0x4000Ecx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000EcxEcx2'), u'offset a0x4000EcxEcx2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000Edi'), u'offset a0x4000Edi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000Edx'), u'offset a0x4000Edx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000EdxEcx4'), u'offset a0x4000EdxEcx4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000Esi'), u'offset a0x4000Esi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x4000EsiEcx8'), u'offset a0x4000EsiEcx8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Eax'), u'offset a0x40Eax')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Eax2'), u'offset a0x40Eax2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40EaxEcx'), u'offset a0x40EaxEcx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Ebx'), u'offset a0x40Ebx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Ebx4'), u'offset a0x40Ebx4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Ecx'), u'offset a0x40Ecx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Ecx8'), u'offset a0x40Ecx8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Edi'), u'offset a0x40Edi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Edx'), u'offset a0x40Edx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a0x40Esi'), u'offset a0x40Esi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10EcxEcx2'), u'offset a10EcxEcx2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10EdxEcx4'), u'offset a10EdxEcx4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10EsiEcx8'), u'offset a10EsiEcx8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxB08lx'), u'offset a10sA08lxB08lx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxB08lxC'), u'offset a10sA08lxB08lxC')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxB08lxR'), u'offset a10sA08lxB08lxR')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxB08lxR_0'), u'offset a10sA08lxB08lxR_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxR08lx'), u'offset a10sA08lxR08lx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxR08lx0'), u'offset a10sA08lxR08lx0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxR08lxC'), u'offset a10sA08lxR08lxC')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxR08lxL'), u'offset a10sA08lxR08lxL')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08lxR08lx_0'), u'offset a10sA08lxR08lx_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sA08xR08xCci'), u'offset a10sA08xR08xCci')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sAh08lxAl08l'), u'offset a10sAh08lxAl08l')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sD'), u'offset a10sD')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sEax08lxA08l'), u'offset a10sEax08lxA08l')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sEcx08lxZfLd'), u'offset a10sEcx08lxZfLd')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset a10sEsi08lxEdi0'), u'offset a10sEsi08lxEdi0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAaa'), u'offset aAaa')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAad'), u'offset aAad')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAam'), u'offset aAam')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAas'), u'offset aAas')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAdcb'), u'offset aAdcb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAdcl'), u'offset aAdcl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAdcw'), u'offset aAdcw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAddb'), u'offset aAddb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAddl'), u'offset aAddl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAddw'), u'offset aAddw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAndb'), u'offset aAndb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAndl'), u'offset aAndl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aAndw'), u'offset aAndw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBsfl'), u'offset aBsfl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBsfw'), u'offset aBsfw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBsrl'), u'offset aBsrl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBsrw'), u'offset aBsrw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBswapl'), u'offset aBswapl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtcl'), u'offset aBtcl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtcw'), u'offset aBtcw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtl'), u'offset aBtl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtrl'), u'offset aBtrl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtrw'), u'offset aBtrw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtsl'), u'offset aBtsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtsw'), u'offset aBtsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aBtw'), u'offset aBtw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCbw'), u'offset aCbw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCdq'), u'offset aCdq')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpb'), u'offset aCmpb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpl'), u'offset aCmpl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpsb'), u'offset aCmpsb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpsl'), u'offset aCmpsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpsw'), u'offset aCmpsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpw'), u'offset aCmpw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpxchg8bEax08'), u'offset aCmpxchg8bEax08')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpxchgb'), u'offset aCmpxchgb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpxchgl'), u'offset aCmpxchgl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCmpxchgw'), u'offset aCmpxchgw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCwd'), u'offset aCwd')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aCwde'), u'offset aCwde')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDaa'), u'offset aDaa')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDas'), u'offset aDas')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDecb'), u'offset aDecb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDecl'), u'offset aDecl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDecw'), u'offset aDecw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDivb'), u'offset aDivb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDivl'), u'offset aDivl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aDivw'), u'offset aDivw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEax'), u'offset aEax')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEax2'), u'offset aEax2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEaxEcx'), u'offset aEaxEcx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEbx'), u'offset aEbx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEbx4'), u'offset aEbx4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEbxEdx'), u'offset aEbxEdx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEcx'), u'offset aEcx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEcx8'), u'offset aEcx8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEcxEcx'), u'offset aEcxEcx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEcxEcx2'), u'offset aEcxEcx2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEdi'), u'offset aEdi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEdiEcx'), u'offset aEdiEcx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEdx'), u'offset aEdx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEdxEcx'), u'offset aEdxEcx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEdxEcx4'), u'offset aEdxEcx4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEsi'), u'offset aEsi')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEsiEcx'), u'offset aEsiEcx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aEsiEcx8'), u'offset aEsiEcx8')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aIdivb'), u'offset aIdivb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aIdivl'), u'offset aIdivl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aIdivw'), u'offset aIdivw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aImulb'), u'offset aImulb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aImull'), u'offset aImull')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aImullIm'), u'offset aImullIm')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aImulw'), u'offset aImulw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aImulwIm'), u'offset aImulwIm')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aIncb'), u'offset aIncb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aIncl'), u'offset aIncl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aIncw'), u'offset aIncw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJa'), u'offset aJa')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJae'), u'offset aJae')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJb'), u'offset aJb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJbe'), u'offset aJbe')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJcxz'), u'offset aJcxz')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJe'), u'offset aJe')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJecxz'), u'offset aJecxz')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJg'), u'offset aJg')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJge'), u'offset aJge')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJl'), u'offset aJl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJle'), u'offset aJle')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJne'), u'offset aJne')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJns'), u'offset aJns')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aJs'), u'offset aJs')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aLeaS08lx'), u'offset aLeaS08lx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aLodsb'), u'offset aLodsb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aLodsl'), u'offset aLodsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aLodsw'), u'offset aLodsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aLoopl'), u'offset aLoopl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aLoopnzl'), u'offset aLoopnzl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aLoopzl'), u'offset aLoopzl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aMovsb'), u'offset aMovsb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aMovsl'), u'offset aMovsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aMovsw'), u'offset aMovsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aMulb'), u'offset aMulb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aMull'), u'offset aMull')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aMulw'), u'offset aMulw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aNegb'), u'offset aNegb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aNegl'), u'offset aNegl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aNegw'), u'offset aNegw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aNotb'), u'offset aNotb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aNotl'), u'offset aNotl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aNotw'), u'offset aNotw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aOrb'), u'offset aOrb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aOrl'), u'offset aOrl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aOrw'), u'offset aOrw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aPopcntA08lxR08'), u'offset aPopcntA08lxR08')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aPoplEsp08lx'), u'offset aPoplEsp08lx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aPopwEsp08lx'), u'offset aPopwEsp08lx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRclb'), u'offset aRclb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRcll'), u'offset aRcll')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRclw'), u'offset aRclw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRcrb'), u'offset aRcrb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRcrl'), u'offset aRcrl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRcrw'), u'offset aRcrw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepLodsb'), u'offset aRepLodsb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepLodsl'), u'offset aRepLodsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepLodsw'), u'offset aRepLodsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepMovsb'), u'offset aRepMovsb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepMovsl'), u'offset aRepMovsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepMovsw'), u'offset aRepMovsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepStosb'), u'offset aRepStosb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepStosl'), u'offset aRepStosl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepStosw'), u'offset aRepStosw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepnzCmpsb'), u'offset aRepnzCmpsb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepnzCmpsl'), u'offset aRepnzCmpsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepnzCmpsw'), u'offset aRepnzCmpsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepnzScasb'), u'offset aRepnzScasb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepnzScasl'), u'offset aRepnzScasl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepnzScasw'), u'offset aRepnzScasw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepzCmpsb'), u'offset aRepzCmpsb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepzCmpsl'), u'offset aRepzCmpsl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepzCmpsw'), u'offset aRepzCmpsw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepzScasb'), u'offset aRepzScasb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepzScasl'), u'offset aRepzScasl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRepzScasw'), u'offset aRepzScasw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRolb'), u'offset aRolb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRoll'), u'offset aRoll')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRolw'), u'offset aRolw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRorb'), u'offset aRorb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRorl'), u'offset aRorl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aRorw'), u'offset aRorw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSarb'), u'offset aSarb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSarl'), u'offset aSarl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSarw'), u'offset aSarw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSbbb'), u'offset aSbbb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSbbl'), u'offset aSbbl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSbbw'), u'offset aSbbw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aScasb'), u'offset aScasb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aScasl'), u'offset aScasl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aScasw'), u'offset aScasw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSetb'), u'offset aSetb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSete'), u'offset aSete')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSetne'), u'offset aSetne')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShlb'), u'offset aShlb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShldl'), u'offset aShldl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShldw'), u'offset aShldw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShll'), u'offset aShll')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShlw'), u'offset aShlw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShrb'), u'offset aShrb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShrdl'), u'offset aShrdl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShrdw'), u'offset aShrdw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShrl'), u'offset aShrl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aShrw'), u'offset aShrw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aStosb'), u'offset aStosb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aStosl'), u'offset aStosl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aStosw'), u'offset aStosw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSubb'), u'offset aSubb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSubl'), u'offset aSubl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aSubw'), u'offset aSubw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXaddb'), u'offset aXaddb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXaddl'), u'offset aXaddl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXaddlSameRes08'), u'offset aXaddlSameRes08')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXaddw'), u'offset aXaddw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXchgb'), u'offset aXchgb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXchgl'), u'offset aXchgl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXchgw'), u'offset aXchgw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXlatEax08lx'), u'offset aXlatEax08lx')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXorb'), u'offset aXorb')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXorl'), u'offset aXorl')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset aXorw'), u'offset aXorw')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset pal_jeu'), u'offset pal_jeu')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset str1'), u'offset str1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset str2'), u'offset str2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset str3'), u'offset str3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset str_buffer+800h'), u'offset str_buffer+0x800')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset str_buffer+810h'), u'offset str_buffer+0x810')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset testOVerlap'), u'offset testOVerlap')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset unk_40E008'), u'offset unk_40E008')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset unk_40F064'), u'offset unk_40F064')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var1'), u'offset var1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var1+1'), u'offset var1+1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var2'), u'offset var2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var3'), u'offset var3')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var3+4'), u'offset var3+4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var4'), u'offset var4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var4+1'), u'offset var4+1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'offset var4+4'), u'offset var4+4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'op0'), u'op0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'op1'), u'op1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'printf'), u'printf')
        self.assertEqual(cpp.convert_number_to_c(expr=u'ptr'), u'ptr')
        self.assertEqual(cpp.convert_number_to_c(expr=u'r'), u'r')
        self.assertEqual(cpp.convert_number_to_c(expr=u'res'), u'res')
        self.assertEqual(cpp.convert_number_to_c(expr=u'resh'), u'resh')
        self.assertEqual(cpp.convert_number_to_c(expr=u'resz'), u'resz')
        self.assertEqual(cpp.convert_number_to_c(expr=u'rh'), u'rh')
        self.assertEqual(cpp.convert_number_to_c(expr=u's0_0'), u's0_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u's1_0'), u's1_0')
        self.assertEqual(cpp.convert_number_to_c(expr=u'si'), u'si')
        self.assertEqual(cpp.convert_number_to_c(expr=u'small'), u'small')
        self.assertEqual(cpp.convert_number_to_c(expr=u't'), u't')
        self.assertEqual(cpp.convert_number_to_c(expr=u'taille_moire'), u'taille_moire')
        self.assertEqual(cpp.convert_number_to_c(expr=u'teST2'), u'teST2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'testOVerlap'), u'testOVerlap')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var1'), u'var1')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var1[1]'), u'var1[1]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var1[bx+si]'), u'var1[bx+si]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var1[bx]'), u'var1[bx]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var2'), u'var2')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var3+3*4'), u'var3+3*4')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var3+ebp'), u'var3+ebp')
        self.assertEqual(cpp.convert_number_to_c(expr=u'var5'), u'var5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'word ptr [d]'), u'word ptr [d]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'word ptr [e]'), u'word ptr [e]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'word ptr [ebp+var_20]'), u'word ptr [ebp+var_20]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'word ptr [var5+2]'), u'word ptr [var5+2]')
        self.assertEqual(cpp.convert_number_to_c(expr=u'word ptr var5'), u'word ptr var5')
        self.assertEqual(cpp.convert_number_to_c(expr=u'word'), u'word')

    def test_mangle_label(self):
        p = Parser([])
        cpp_instance = Cpp(p)
        self.assertEqual(cpp_instance.mangle_label(name='loc_40458F'),'loc_40458f')
        self.assertEqual(cpp_instance.mangle_label(name=u'_start'),u'_start')
        self.assertEqual(cpp_instance.mangle_label(name=u'_st$art$'),u'_st_tmpart_tmp')


if __name__ == "__main__":
    unittest.main()
