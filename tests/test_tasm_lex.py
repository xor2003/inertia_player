from __future__ import absolute_import
from __future__ import print_function

import unittest

import tasm.cpp
import tasm.lex
import tasm.op
import tasm.parser
import tasm.proc
from tasm import lex
from tasm.lex import Lex


class LexTest(unittest.TestCase):
    def test_parse_args(self):
        lex = tasm.lex.Lex()

        self.assertEqual(lex.parse_args(text="'%-10s %d',0Ah,0     ; DATA XREF: test_jcc+28\xe2\x86\x91o"),[u"'%-10s %d'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx B=%08lx C=%08lx R=%08lx CCIN=%04lx CC=%04lx',0Ah,0"),[u"'%-10s A=%08lx B=%08lx C=%08lx R=%08lx CCIN=%04lx CC=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx B=%08lx R=%08lx CC=%04lx',0Ah,0"),[u"'%-10s A=%08lx B=%08lx R=%08lx CC=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx B=%08lx R=%08lx CCIN=%04lx CC=%04lx',0Ah,0"),[u"'%-10s A=%08lx B=%08lx R=%08lx CCIN=%04lx CC=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx B=%08lx',0Ah,0"),[u"'%-10s A=%08lx B=%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx R=%08lx %ld',0Ah,0"),[u"'%-10s A=%08lx R=%08lx %ld'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04lx',0Ah,0"),[u"'%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx R=%08lx',0Ah,0"),[u"'%-10s A=%08lx R=%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08lx R=%08lx:%08lx',0Ah,0"),[u"'%-10s A=%08lx R=%08lx:%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s A=%08x R=%08x CCIN=%04x CC=%04x',0Ah,0"),[u"'%-10s A=%08x R=%08x CCIN=%04x CC=%04x'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s AH=%08lx AL=%08lx B=%08lx RH=%08lx RL=%08lx CC=%04lx',0Ah,0"),[u"'%-10s AH=%08lx AL=%08lx B=%08lx RH=%08lx RL=%08lx CC=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s EAX=%08lx A=%08lx C=%08lx CC=%02lx',0Ah,0"),[u"'%-10s EAX=%08lx A=%08lx C=%08lx CC=%02lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s ECX=%08lx ZF=%ld r=%d',0Ah,0"),[u"'%-10s ECX=%08lx ZF=%ld r=%d'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX=%08lx EFL=%04x',0Ah,0"),[u"'%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX=%08lx EFL=%04x'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s R=%08lx',0Ah,0 ; DATA XREF: test_jcc+74\xe2\x86\x91o"),[u"'%-10s R=%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'%-10s: A=%08lx R=%08lx',0Ah,0"),[u"'%-10s: A=%08lx R=%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'(%%eax)',0          ; DATA XREF: test_lea+4F\xe2\x86\x91o"),[u"'(%%eax)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%eax, %%ecx)',0   ; DATA XREF: test_lea+34F\xe2\x86\x91o"),[u"'(%%eax, %%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%ebx)',0          ; DATA XREF: test_lea+78\xe2\x86\x91o"),[u"'(%%ebx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%ebx, %%edx)',0   ; DATA XREF: test_lea+379\xe2\x86\x91o"),[u"'(%%ebx, %%edx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%ecx)',0          ; DATA XREF: test_lea+A1\xe2\x86\x91o"),[u"'(%%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%ecx, %%ecx)',0   ; DATA XREF: test_lea+3A3\xe2\x86\x91o"),[u"'(%%ecx, %%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%ecx, %%ecx, 2)',0 ; DATA XREF: test_lea+4A4\xe2\x86\x91o"),[u"'(%%ecx, %%ecx, 2)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%edi)',0          ; DATA XREF: test_lea+11C\xe2\x86\x91o"),[u"'(%%edi)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%edi, %%ecx)',0   ; DATA XREF: test_lea+421\xe2\x86\x91o"),[u"'(%%edi, %%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%edx)',0          ; DATA XREF: test_lea+CA\xe2\x86\x91o"),[u"'(%%edx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%edx, %%ecx)',0   ; DATA XREF: test_lea+3CD\xe2\x86\x91o"),[u"'(%%edx, %%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%edx, %%ecx, 4)',0 ; DATA XREF: test_lea+4CE\xe2\x86\x91o"),[u"'(%%edx, %%ecx, 4)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%esi)',0          ; DATA XREF: test_lea+F3\xe2\x86\x91o"),[u"'(%%esi)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%esi, %%ecx)',0   ; DATA XREF: test_lea+3F7\xe2\x86\x91o"),[u"'(%%esi, %%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(%%esi, %%ecx, 8)',0 ; DATA XREF: test_lea+4F8\xe2\x86\x91o"),[u"'(%%esi, %%ecx, 8)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(,%%eax, 2)',0      ; DATA XREF: test_lea+522\xe2\x86\x91o"),[u"'(,%%eax, 2)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(,%%ebx, 4)',0      ; DATA XREF: test_lea+550\xe2\x86\x91o"),[u"'(,%%ebx, 4)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(,%%ecx, 8)',0      ; DATA XREF: test_lea+57E\xe2\x86\x91o"),[u"'(,%%ecx, 8)'", u'0'])
        self.assertEqual(lex.parse_args(text="'(float)%f = %f',0Ah,0 ; DATA XREF: test_fcvt+A\xe2\x86\x91o"),[u"'(float)%f = %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'(int)a = %d',0Ah,0  ; DATA XREF: test_fcvt+D7\xe2\x86\x91o"),[u"'(int)a = %d'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'(int64_t)a = %016llx',0Ah,0"),[u"'(int64_t)a = %016llx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'(long double)%f = %Lf',0Ah,0"),[u"'(long double)%f = %Lf'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'(short)a = %d',0Ah,0 ; DATA XREF: test_fcvt+BF\xe2\x86\x91o"),[u"'(short)a = %d'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'-10(%%ecx, %%ecx, 2)',0 ; DATA XREF: test_lea+636\xe2\x86\x91o"),[u"'-10(%%ecx, %%ecx, 2)'", u'0'])
        self.assertEqual(lex.parse_args(text="'-10(%%edx, %%ecx, 4)',0 ; DATA XREF: test_lea+661\xe2\x86\x91o"),[u"'-10(%%edx, %%ecx, 4)'", u'0'])
        self.assertEqual(lex.parse_args(text="'-10(%%esi, %%ecx, 8)',0 ; DATA XREF: test_lea+68C\xe2\x86\x91o"),[u"'-10(%%esi, %%ecx, 8)'", u'0'])
        self.assertEqual(lex.parse_args(text="'00000000',0Dh,0Ah,'$' ; buffer for ASCII string"),[u"'00000000'", u'0Dh', u'0Ah', u"'$'"])
        self.assertEqual(lex.parse_args(text="'0x40(%%eax)',0      ; DATA XREF: test_lea+145\xe2\x86\x91o"),[u"'0x40(%%eax)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(%%eax, %%ecx)',0 ; DATA XREF: test_lea+44B\xe2\x86\x91o"),[u"'0x40(%%eax, %%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(%%ebx)',0      ; DATA XREF: test_lea+16F\xe2\x86\x91o"),[u"'0x40(%%ebx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(%%ecx)',0      ; DATA XREF: test_lea+199\xe2\x86\x91o"),[u"'0x40(%%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(%%edi)',0      ; DATA XREF: test_lea+217\xe2\x86\x91o"),[u"'0x40(%%edi)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(%%edx)',0      ; DATA XREF: test_lea+1C3\xe2\x86\x91o"),[u"'0x40(%%edx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(%%esi)',0      ; DATA XREF: test_lea+1ED\xe2\x86\x91o"),[u"'0x40(%%esi)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(,%%eax, 2)',0  ; DATA XREF: test_lea+5AC\xe2\x86\x91o"),[u"'0x40(,%%eax, 2)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(,%%ebx, 4)',0  ; DATA XREF: test_lea+5DA\xe2\x86\x91o"),[u"'0x40(,%%ebx, 4)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x40(,%%ecx, 8)',0  ; DATA XREF: test_lea+608\xe2\x86\x91o"),[u"'0x40(,%%ecx, 8)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000',0           ; DATA XREF: test_lea+22\xe2\x86\x91o"),[u"'0x4000'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%eax)',0    ; DATA XREF: test_lea+241\xe2\x86\x91o"),[u"'0x4000(%%eax)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%ebx)',0    ; DATA XREF: test_lea+26E\xe2\x86\x91o"),[u"'0x4000(%%ebx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%ebx, %%edx)',0 ; DATA XREF: test_lea+476\xe2\x86\x91o"),[u"'0x4000(%%ebx, %%edx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%ecx)',0    ; DATA XREF: test_lea+29B\xe2\x86\x91o"),[u"'0x4000(%%ecx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%ecx, %%ecx, 2)',0"),[u"'0x4000(%%ecx, %%ecx, 2)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%edi)',0    ; DATA XREF: test_lea+322\xe2\x86\x91o"),[u"'0x4000(%%edi)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%edx)',0    ; DATA XREF: test_lea+2C8\xe2\x86\x91o"),[u"'0x4000(%%edx)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%edx, %%ecx, 4)',0"),[u"'0x4000(%%edx, %%ecx, 4)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%esi)',0    ; DATA XREF: test_lea+2F5\xe2\x86\x91o"),[u"'0x4000(%%esi)'", u'0'])
        self.assertEqual(lex.parse_args(text="'0x4000(%%esi, %%ecx, 8)',0"),[u"'0x4000(%%esi, %%ecx, 8)'", u'0'])
        self.assertEqual(lex.parse_args(text="'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0"),[u"'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)'", u'0'])
        self.assertEqual(lex.parse_args(text="'GCC: (GNU) 7.3.0',0"),[u"'GCC: (GNU) 7.3.0'", u'0'])
        self.assertEqual(lex.parse_args(text="'Hello World From Protected Mode!',10,13,'$'"),[u"'Hello World From Protected Mode!'", u'10', u'13', u"'$'"])
        self.assertEqual(lex.parse_args(text="'NOT enought memory for VGA display, controls work for network games',13,10,'$'"),[u"'NOT enought memory for VGA display, controls work for network games'", u'13', u'10', u"'$'"])
        self.assertEqual(lex.parse_args(text="'OKOKOKOK'"),[u"'OKOKOKOK'"])
        self.assertEqual(lex.parse_args(text="'OKOKOKOK',10,13"),[u"'OKOKOKOK'", u'10', u'13'])
        self.assertEqual(lex.parse_args(text="'__deregister_frame_info',0"),[u"'__deregister_frame_info'", u'0'])
        self.assertEqual(lex.parse_args(text="'__register_frame_info',0"),[u"'__register_frame_info'", u'0'])
        self.assertEqual(lex.parse_args(text="'a=%016llx',0Ah,0    ; DATA XREF: test_fcvt+52\xe2\x86\x91o"),[u"'a=%016llx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f b=%f =%f',0Ah,0 ; DATA XREF: test_fops+9D\xe2\x86\x91o"),[u"'a=%f b=%f =%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f b=%f a*b=%f',0Ah,0 ; DATA XREF: test_fops+52\xe2\x86\x91o"),[u"'a=%f b=%f a*b=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f b=%f a+b=%f',0Ah,0 ; DATA XREF: test_fops+10\xe2\x86\x91o"),[u"'a=%f b=%f a+b=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f b=%f a-b=%f',0Ah,0 ; DATA XREF: test_fops+2E\xe2\x86\x91o"),[u"'a=%f b=%f a-b=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f b=%f a/b=%f',0Ah,0 ; DATA XREF: test_fops+79\xe2\x86\x91o"),[u"'a=%f b=%f a/b=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f b=%f fmod(a, b)=%f',0Ah,0"),[u"'a=%f b=%f fmod(a, b)=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f bcd=%04x%04x%04x%04x%04x b=%f',0Ah,0"),[u"'a=%f bcd=%04x%04x%04x%04x%04x b=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f copysign(a,b)=%f',0Ah,0"),[u"'a=%f copysign(a,b)=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f exp(a)=%f',0Ah,0 ; DATA XREF: test_fops+1B3\xe2\x86\x91o"),[u"'a=%f exp(a)=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'a=%f sqrt(a)=%f',0Ah,0 ; DATA XREF: test_fops+191\xe2\x86\x91o"),[u"'a=%f sqrt(a)=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'aaa',0              ; DATA XREF: test_bcd+6A6\xe2\x86\x91o"),[u"'aaa'", u'0'])
        self.assertEqual(lex.parse_args(text="'aad',0              ; DATA XREF: test_bcd+A98\xe2\x86\x91o"),[u"'aad'", u'0'])
        self.assertEqual(lex.parse_args(text="'aam',0              ; DATA XREF: test_bcd+A56\xe2\x86\x91o"),[u"'aam'", u'0'])
        self.assertEqual(lex.parse_args(text="'aas',0              ; DATA XREF: test_bcd+87D\xe2\x86\x91o"),[u"'aas'", u'0'])
        self.assertEqual(lex.parse_args(text="'ab''cd'"),[u"'ab''cd'"])
        self.assertEqual(lex.parse_args(text="'abcd'"),[u"'abcd'"])
        self.assertEqual(lex.parse_args(text="'abcde'"),[u"'abcde'"])
        self.assertEqual(lex.parse_args(text="'adcb',0             ; DATA XREF: exec_adcb+34\xe2\x86\x91o"),[u"'adcb'", u'0'])
        self.assertEqual(lex.parse_args(text="'adcl',0             ; DATA XREF: exec_adcl+34\xe2\x86\x91o"),[u"'adcl'", u'0'])
        self.assertEqual(lex.parse_args(text="'adcw',0             ; DATA XREF: exec_adcw+35\xe2\x86\x91o"),[u"'adcw'", u'0'])
        self.assertEqual(lex.parse_args(text="'addb',0             ; DATA XREF: exec_addb+34\xe2\x86\x91o"),[u"'addb'", u'0'])
        self.assertEqual(lex.parse_args(text="'addl',0             ; DATA XREF: exec_addl+34\xe2\x86\x91o"),[u"'addl'", u'0'])
        self.assertEqual(lex.parse_args(text="'addw',0             ; DATA XREF: exec_addw+35\xe2\x86\x91o"),[u"'addw'", u'0'])
        self.assertEqual(lex.parse_args(text="'andb',0             ; DATA XREF: exec_andb+34\xe2\x86\x91o"),[u"'andb'", u'0'])
        self.assertEqual(lex.parse_args(text="'andl',0             ; DATA XREF: exec_andl+34\xe2\x86\x91o"),[u"'andl'", u'0'])
        self.assertEqual(lex.parse_args(text="'andw',0             ; DATA XREF: exec_andw+35\xe2\x86\x91o"),[u"'andw'", u'0'])
        self.assertEqual(lex.parse_args(text="'b',0                ; DATA XREF: test_fcmov+30\xe2\x86\x91o"),[u"'b'", u'0'])
        self.assertEqual(lex.parse_args(text="'be',0               ; DATA XREF: test_fcmov+85\xe2\x86\x91o"),[u"'be'", u'0'])
        self.assertEqual(lex.parse_args(text="'bsfl',0             ; DATA XREF: test_bsx+290\xe2\x86\x91o"),[u"'bsfl'", u'0'])
        self.assertEqual(lex.parse_args(text="'bsfw',0             ; DATA XREF: test_bsx+F6\xe2\x86\x91o"),[u"'bsfw'", u'0'])
        self.assertEqual(lex.parse_args(text="'bsrl',0             ; DATA XREF: test_bsx+1C2\xe2\x86\x91o"),[u"'bsrl'", u'0'])
        self.assertEqual(lex.parse_args(text="'bsrw',0             ; DATA XREF: test_bsx+29\xe2\x86\x91o"),[u"'bsrw'", u'0'])
        self.assertEqual(lex.parse_args(text="'bswapl',0           ; DATA XREF: test_conv+BF\xe2\x86\x91o"),[u"'bswapl'", u'0'])
        self.assertEqual(lex.parse_args(text="'btcl',0             ; DATA XREF: exec_btcl+3B\xe2\x86\x91o"),[u"'btcl'", u'0'])
        self.assertEqual(lex.parse_args(text="'btcw',0             ; DATA XREF: exec_btcw+3C\xe2\x86\x91o"),[u"'btcw'", u'0'])
        self.assertEqual(lex.parse_args(text="'btl',0              ; DATA XREF: exec_btl+3B\xe2\x86\x91o"),[u"'btl'", u'0'])
        self.assertEqual(lex.parse_args(text="'btrl',0             ; DATA XREF: exec_btrl+3B\xe2\x86\x91o"),[u"'btrl'", u'0'])
        self.assertEqual(lex.parse_args(text="'btrw',0             ; DATA XREF: exec_btrw+3C\xe2\x86\x91o"),[u"'btrw'", u'0'])
        self.assertEqual(lex.parse_args(text="'btsl',0             ; DATA XREF: exec_btsl+3B\xe2\x86\x91o"),[u"'btsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'btsw',0             ; DATA XREF: exec_btsw+3C\xe2\x86\x91o"),[u"'btsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'btw',0              ; DATA XREF: exec_btw+3C\xe2\x86\x91o"),[u"'btw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cbw',0              ; DATA XREF: test_conv+1D\xe2\x86\x91o"),[u"'cbw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cdeab'"),[u"'cdeab'"])
        self.assertEqual(lex.parse_args(text="'cdq',0              ; DATA XREF: test_conv+98\xe2\x86\x91o"),[u"'cdq'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovael',0          ; DATA XREF: test_jcc+D22\xe2\x86\x91o"),[u"'cmovael'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovaew',0          ; DATA XREF: test_jcc+D51\xe2\x86\x91o"),[u"'cmovaew'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmoval',0           ; DATA XREF: test_jcc+EE4\xe2\x86\x91o"),[u"'cmoval'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovaw',0           ; DATA XREF: test_jcc+F13\xe2\x86\x91o"),[u"'cmovaw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovbel',0          ; DATA XREF: test_jcc+B60\xe2\x86\x91o"),[u"'cmovbel'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovbew',0          ; DATA XREF: test_jcc+B8F\xe2\x86\x91o"),[u"'cmovbew'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovbl',0           ; DATA XREF: test_jcc+99E\xe2\x86\x91o"),[u"'cmovbl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovbw',0           ; DATA XREF: test_jcc+9CD\xe2\x86\x91o"),[u"'cmovbw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovel',0           ; DATA XREF: test_jcc+184\xe2\x86\x91o"),[u"'cmovel'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovew',0           ; DATA XREF: test_jcc+1A2\xe2\x86\x91o"),[u"'cmovew'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovgel',0          ; DATA XREF: test_jcc+61A\xe2\x86\x91o"),[u"'cmovgel'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovgew',0          ; DATA XREF: test_jcc+649\xe2\x86\x91o"),[u"'cmovgew'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovgl',0           ; DATA XREF: test_jcc+7DC\xe2\x86\x91o"),[u"'cmovgl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovgw',0           ; DATA XREF: test_jcc+80B\xe2\x86\x91o"),[u"'cmovgw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovlel',0          ; DATA XREF: test_jcc+458\xe2\x86\x91o"),[u"'cmovlel'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovlew',0          ; DATA XREF: test_jcc+487\xe2\x86\x91o"),[u"'cmovlew'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovll',0           ; DATA XREF: test_jcc+2A4\xe2\x86\x91o"),[u"'cmovll'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovlw',0           ; DATA XREF: test_jcc+2C2\xe2\x86\x91o"),[u"'cmovlw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnel',0          ; DATA XREF: test_jcc+68\xe2\x86\x91o"),[u"'cmovnel'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnew',0          ; DATA XREF: test_jcc+85\xe2\x86\x91o"),[u"'cmovnew'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnol',0          ; DATA XREF: test_jcc+1461\xe2\x86\x91o"),[u"'cmovnol'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnow',0          ; DATA XREF: test_jcc+148F\xe2\x86\x91o"),[u"'cmovnow'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnpl',0          ; DATA XREF: test_jcc+11D2\xe2\x86\x91o"),[u"'cmovnpl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnpw',0          ; DATA XREF: test_jcc+1201\xe2\x86\x91o"),[u"'cmovnpw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnsl',0          ; DATA XREF: test_jcc+1768\xe2\x86\x91o"),[u"'cmovnsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovnsw',0          ; DATA XREF: test_jcc+1797\xe2\x86\x91o"),[u"'cmovnsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovol',0           ; DATA XREF: test_jcc+130D\xe2\x86\x91o"),[u"'cmovol'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovow',0           ; DATA XREF: test_jcc+133B\xe2\x86\x91o"),[u"'cmovow'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovpl',0           ; DATA XREF: test_jcc+10A6\xe2\x86\x91o"),[u"'cmovpl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovpw',0           ; DATA XREF: test_jcc+10D5\xe2\x86\x91o"),[u"'cmovpw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovsl',0           ; DATA XREF: test_jcc+15A6\xe2\x86\x91o"),[u"'cmovsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmovsw',0           ; DATA XREF: test_jcc+15D5\xe2\x86\x91o"),[u"'cmovsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpb',0             ; DATA XREF: exec_cmpb+34\xe2\x86\x91o"),[u"'cmpb'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpl',0             ; DATA XREF: exec_cmpl+34\xe2\x86\x91o"),[u"'cmpl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpsb',0            ; DATA XREF: test_string+110B\xe2\x86\x91o"),[u"'cmpsb'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpsl',0            ; DATA XREF: test_string+1198\xe2\x86\x91o"),[u"'cmpsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpsw',0            ; DATA XREF: test_string+1152\xe2\x86\x91o"),[u"'cmpsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpw',0             ; DATA XREF: exec_cmpw+35\xe2\x86\x91o"),[u"'cmpw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpxchg8b: eax=%08lx edx=%08lx op1=%016llx CC=%02lx',0Ah,0"),[u"'cmpxchg8b: eax=%08lx edx=%08lx op1=%016llx CC=%02lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'cmpxchgb',0         ; DATA XREF: test_xchg+295\xe2\x86\x91o"),[u"'cmpxchgb'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpxchgl',0         ; DATA XREF: test_xchg+226\xe2\x86\x91o"),[u"'cmpxchgl'", u'0'])
        self.assertEqual(lex.parse_args(text="'cmpxchgw',0         ; DATA XREF: test_xchg+25E\xe2\x86\x91o"),[u"'cmpxchgw'", u'0'])
        self.assertEqual(lex.parse_args(text="'cwd',0              ; DATA XREF: test_conv+6F\xe2\x86\x91o"),[u"'cwd'", u'0'])
        self.assertEqual(lex.parse_args(text="'cwde',0             ; DATA XREF: test_conv+45\xe2\x86\x91o"),[u"'cwde'", u'0'])
        self.assertEqual(lex.parse_args(text="'cyggcc_s-1.dll',0   ; DATA XREF: sub_401090+9\xe2\x86\x91o"),[u"'cyggcc_s-1.dll'", u'0'])
        self.assertEqual(lex.parse_args(text="'daa',0              ; DATA XREF: test_bcd+3D\xe2\x86\x91o"),[u"'daa'", u'0'])
        self.assertEqual(lex.parse_args(text="'das',0              ; DATA XREF: test_bcd+373\xe2\x86\x91o"),[u"'das'", u'0'])
        self.assertEqual(lex.parse_args(text="'decb',0             ; DATA XREF: exec_decb+2C\xe2\x86\x91o"),[u"'decb'", u'0'])
        self.assertEqual(lex.parse_args(text="'decl',0             ; DATA XREF: exec_decl+2B\xe2\x86\x91o"),[u"'decl'", u'0'])
        self.assertEqual(lex.parse_args(text="'decw',0             ; DATA XREF: exec_decw+2C\xe2\x86\x91o"),[u"'decw'", u'0'])
        self.assertEqual(lex.parse_args(text="'divb',0             ; DATA XREF: test_divb+2B\xe2\x86\x91o"),[u"'divb'", u'0'])
        self.assertEqual(lex.parse_args(text="'divl',0             ; DATA XREF: test_divl+3A\xe2\x86\x91o"),[u"'divl'", u'0'])
        self.assertEqual(lex.parse_args(text="'divw',0             ; DATA XREF: test_divw+3B\xe2\x86\x91o"),[u"'divw'", u'0'])
        self.assertEqual(lex.parse_args(text="'e',0                ; DATA XREF: test_fcmov+5B\xe2\x86\x91o"),[u"'e'", u'0'])
        self.assertEqual(lex.parse_args(text="'fcmov%s eflags=0x%04lx-> %f',0Ah,0"),[u"'fcmov%s eflags=0x%04lx-> %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fcom(%f %f)=%04lx',0Ah,0 ; DATA XREF: test_fcmp+17\xe2\x86\x91o"),[u"'fcom(%f %f)=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fcomi(%f %f)=%04lx %02lx',0Ah,0"),[u"'fcomi(%f %f)=%04lx %02lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'file.txt',0"),[u"'file.txt'", u'0'])
        self.assertEqual(lex.parse_args(text="'fld1= %f',0Ah,0     ; DATA XREF: test_fconst+C\xe2\x86\x91o"),[u"'fld1= %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fldl2e= %f',0Ah,0   ; DATA XREF: test_fconst+2A\xe2\x86\x91o"),[u"'fldl2e= %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fldl2t= %f',0Ah,0   ; DATA XREF: test_fconst+18\xe2\x86\x91o"),[u"'fldl2t= %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fldlg2= %f',0Ah,0   ; DATA XREF: test_fconst+4E\xe2\x86\x91o"),[u"'fldlg2= %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fldln2= %f',0Ah,0   ; DATA XREF: test_fconst+60\xe2\x86\x91o"),[u"'fldln2= %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fldpi= %f',0Ah,0    ; DATA XREF: test_fconst+3C\xe2\x86\x91o"),[u"'fldpi= %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fldz= %f',0Ah,0     ; DATA XREF: test_fconst+72\xe2\x86\x91o"),[u"'fldz= %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fptag=%04x',0Ah,0   ; DATA XREF: test_fenv+1B6\xe2\x86\x91o"),[u"'fptag=%04x'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fpuc=%04x fpus=%04x fptag=%04x',0Ah,0"),[u"'fpuc=%04x fpus=%04x fptag=%04x'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fucom(%f %f)=%04lx',0Ah,0"),[u"'fucom(%f %f)=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fucomi(%f %f)=%04lx %02lx',0Ah,0"),[u"'fucomi(%f %f)=%04lx %02lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'fxam(%f)=%04lx',0Ah,0 ; DATA XREF: test_fcmp+F6\xe2\x86\x91o"),[u"'fxam(%f)=%04lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'idivb',0            ; DATA XREF: test_idivb+2B\xe2\x86\x91o"),[u"'idivb'", u'0'])
        self.assertEqual(lex.parse_args(text="'idivl',0            ; DATA XREF: test_idivl+3A\xe2\x86\x91o"),[u"'idivl'", u'0'])
        self.assertEqual(lex.parse_args(text="'idivw',0            ; DATA XREF: test_idivw+3B\xe2\x86\x91o"),[u"'idivw'", u'0'])
        self.assertEqual(lex.parse_args(text="'imulb',0            ; DATA XREF: test_imulb+2D\xe2\x86\x91o"),[u"'imulb'", u'0'])
        self.assertEqual(lex.parse_args(text="'imull im',0         ; DATA XREF: test_mul+575\xe2\x86\x91o"),[u"'imull im'", u'0'])
        self.assertEqual(lex.parse_args(text="'imull',0            ; DATA XREF: test_imull+3C\xe2\x86\x91o"),[u"'imull'", u'0'])
        self.assertEqual(lex.parse_args(text="'imulw im',0         ; DATA XREF: test_mul+46C\xe2\x86\x91o"),[u"'imulw im'", u'0'])
        self.assertEqual(lex.parse_args(text="'imulw',0            ; DATA XREF: test_imulw+3D\xe2\x86\x91o"),[u"'imulw'", u'0'])
        self.assertEqual(lex.parse_args(text="'incb',0             ; DATA XREF: exec_incb+2C\xe2\x86\x91o"),[u"'incb'", u'0'])
        self.assertEqual(lex.parse_args(text="'incl',0             ; DATA XREF: exec_incl+2B\xe2\x86\x91o"),[u"'incl'", u'0'])
        self.assertEqual(lex.parse_args(text="'incw',0             ; DATA XREF: exec_incw+2C\xe2\x86\x91o"),[u"'incw'", u'0'])
        self.assertEqual(lex.parse_args(text="'ja',0               ; DATA XREF: test_jcc+E95\xe2\x86\x91o"),[u"'ja'", u'0'])
        self.assertEqual(lex.parse_args(text="'jae',0              ; DATA XREF: test_jcc+CD3\xe2\x86\x91o"),[u"'jae'", u'0'])
        self.assertEqual(lex.parse_args(text="'jb',0               ; DATA XREF: test_jcc+94F\xe2\x86\x91o"),[u"'jb'", u'0'])
        self.assertEqual(lex.parse_args(text="'jbe',0              ; DATA XREF: test_jcc+B11\xe2\x86\x91o"),[u"'jbe'", u'0'])
        self.assertEqual(lex.parse_args(text="'jcxz',0             ; DATA XREF: test_loop:loc_4081F6\xe2\x86\x91o"),[u"'jcxz'", u'0'])
        self.assertEqual(lex.parse_args(text="'je',0               ; DATA XREF: test_jcc+130\xe2\x86\x91o"),[u"'je'", u'0'])
        self.assertEqual(lex.parse_args(text="'jecxz',0            ; DATA XREF: test_loop:loc_4083E9\xe2\x86\x91o"),[u"'jecxz'", u'0'])
        self.assertEqual(lex.parse_args(text="'jg',0               ; DATA XREF: test_jcc+78D\xe2\x86\x91o"),[u"'jg'", u'0'])
        self.assertEqual(lex.parse_args(text="'jge',0              ; DATA XREF: test_jcc+5CB\xe2\x86\x91o"),[u"'jge'", u'0'])
        self.assertEqual(lex.parse_args(text="'jl',0               ; DATA XREF: test_jcc+250\xe2\x86\x91o"),[u"'jl'", u'0'])
        self.assertEqual(lex.parse_args(text="'jle',0              ; DATA XREF: test_jcc+409\xe2\x86\x91o"),[u"'jle'", u'0'])
        self.assertEqual(lex.parse_args(text="'jne',0              ; DATA XREF: test_jcc:loc_4068F5\xe2\x86\x91o"),[u"'jne'", u'0'])
        self.assertEqual(lex.parse_args(text="'jno',0              ; DATA XREF: test_jcc+1403\xe2\x86\x91o"),[u"'jno'", u'0'])
        self.assertEqual(lex.parse_args(text="'jnp',0              ; DATA XREF: test_jcc+1183\xe2\x86\x91o"),[u"'jnp'", u'0'])
        self.assertEqual(lex.parse_args(text="'jns',0              ; DATA XREF: test_jcc+1719\xe2\x86\x91o"),[u"'jns'", u'0'])
        self.assertEqual(lex.parse_args(text="'jo',0               ; DATA XREF: test_jcc+12AF\xe2\x86\x91o"),[u"'jo'", u'0'])
        self.assertEqual(lex.parse_args(text="'jp',0               ; DATA XREF: test_jcc+1057\xe2\x86\x91o"),[u"'jp'", u'0'])
        self.assertEqual(lex.parse_args(text="'js',0               ; DATA XREF: test_jcc+1557\xe2\x86\x91o"),[u"'js'", u'0'])
        self.assertEqual(lex.parse_args(text="'la=%016llx %04x',0Ah,0 ; DATA XREF: test_fcvt+5E\xe2\x86\x91o"),[u"'la=%016llx %04x'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'lea %s = %08lx',0Ah,0 ; DATA XREF: test_lea+2A\xe2\x86\x91o"),[u"'lea %s = %08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'lodsb',0            ; DATA XREF: test_string+3AB\xe2\x86\x91o"),[u"'lodsb'", u'0'])
        self.assertEqual(lex.parse_args(text="'lodsl',0            ; DATA XREF: test_string+438\xe2\x86\x91o"),[u"'lodsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'lodsw',0            ; DATA XREF: test_string+3F2\xe2\x86\x91o"),[u"'lodsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'loopl',0            ; DATA XREF: test_loop:loc_408464\xe2\x86\x91o"),[u"'loopl'", u'0'])
        self.assertEqual(lex.parse_args(text="'loopnzl',0          ; DATA XREF: test_loop:loc_40855A\xe2\x86\x91o"),[u"'loopnzl'", u'0'])
        self.assertEqual(lex.parse_args(text="'loopnzw',0          ; DATA XREF: test_loop:loc_40836D\xe2\x86\x91o"),[u"'loopnzw'", u'0'])
        self.assertEqual(lex.parse_args(text="'loopw',0            ; DATA XREF: test_loop:loc_408273\xe2\x86\x91o"),[u"'loopw'", u'0'])
        self.assertEqual(lex.parse_args(text="'loopzl',0           ; DATA XREF: test_loop:loc_4084DF\xe2\x86\x91o"),[u"'loopzl'", u'0'])
        self.assertEqual(lex.parse_args(text="'loopzw',0           ; DATA XREF: test_loop:loc_4082F0\xe2\x86\x91o"),[u"'loopzw'", u'0'])
        self.assertEqual(lex.parse_args(text="'movsb',0            ; DATA XREF: test_string+703\xe2\x86\x91o"),[u"'movsb'", u'0'])
        self.assertEqual(lex.parse_args(text="'movsl',0            ; DATA XREF: test_string+790\xe2\x86\x91o"),[u"'movsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'movsw',0            ; DATA XREF: test_string+74A\xe2\x86\x91o"),[u"'movsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'mulb',0             ; DATA XREF: test_mulb+2D\xe2\x86\x91o"),[u"'mulb'", u'0'])
        self.assertEqual(lex.parse_args(text="'mull',0             ; DATA XREF: test_mull+3C\xe2\x86\x91o"),[u"'mull'", u'0'])
        self.assertEqual(lex.parse_args(text="'mulw',0             ; DATA XREF: test_mulw+3D\xe2\x86\x91o"),[u"'mulw'", u'0'])
        self.assertEqual(lex.parse_args(text="'nb',0               ; DATA XREF: test_fcmov+AF\xe2\x86\x91o"),[u"'nb'", u'0'])
        self.assertEqual(lex.parse_args(text="'nbe',0              ; DATA XREF: test_fcmov+103\xe2\x86\x91o"),[u"'nbe'", u'0'])
        self.assertEqual(lex.parse_args(text="'ne',0               ; DATA XREF: test_fcmov+D9\xe2\x86\x91o"),[u"'ne'", u'0'])
        self.assertEqual(lex.parse_args(text="'negb',0             ; DATA XREF: exec_negb+2C\xe2\x86\x91o"),[u"'negb'", u'0'])
        self.assertEqual(lex.parse_args(text="'negl',0             ; DATA XREF: exec_negl+2C\xe2\x86\x91o"),[u"'negl'", u'0'])
        self.assertEqual(lex.parse_args(text="'negw',0             ; DATA XREF: exec_negw+2D\xe2\x86\x91o"),[u"'negw'", u'0'])
        self.assertEqual(lex.parse_args(text="'notb',0             ; DATA XREF: exec_notb+2C\xe2\x86\x91o"),[u"'notb'", u'0'])
        self.assertEqual(lex.parse_args(text="'notl',0             ; DATA XREF: exec_notl+2C\xe2\x86\x91o"),[u"'notl'", u'0'])
        self.assertEqual(lex.parse_args(text="'notw',0             ; DATA XREF: exec_notw+2D\xe2\x86\x91o"),[u"'notw'", u'0'])
        self.assertEqual(lex.parse_args(text="'nu',0               ; DATA XREF: test_fcmov+199\xe2\x86\x91o"),[u"'nu'", u'0'])
        self.assertEqual(lex.parse_args(text="'orb',0              ; DATA XREF: exec_orb+34\xe2\x86\x91o"),[u"'orb'", u'0'])
        self.assertEqual(lex.parse_args(text="'orl',0              ; DATA XREF: exec_orl+34\xe2\x86\x91o"),[u"'orl'", u'0'])
        self.assertEqual(lex.parse_args(text="'orw',0              ; DATA XREF: exec_orw+35\xe2\x86\x91o"),[u"'orw'", u'0'])
        self.assertEqual(lex.parse_args(text="'popcnt A=%08lx R=%08lx flags=%lx',0Ah,0"),[u"'popcnt A=%08lx R=%08lx flags=%lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'popl esp=%08lx',0Ah,0 ; DATA XREF: test_misc+4D\xe2\x86\x91o"),[u"'popl esp=%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'popw esp=%08lx',0Ah,0 ; DATA XREF: test_misc+6F\xe2\x86\x91o"),[u"'popw esp=%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'probleme dans allocation de descriptor..',13,10,'$'"),[u"'probleme dans allocation de descriptor..'", u'13', u'10', u"'$'"])
        self.assertEqual(lex.parse_args(text="'probleme dans dans definition de la taille du segment',13,10,'$'"),[u"'probleme dans dans definition de la taille du segment'", u'13', u'10', u"'$'"])
        self.assertEqual(lex.parse_args(text="'rclb',0             ; DATA XREF: exec_rclb+3C\xe2\x86\x91o"),[u"'rclb'", u'0'])
        self.assertEqual(lex.parse_args(text="'rcll',0             ; DATA XREF: exec_rcll+3C\xe2\x86\x91o"),[u"'rcll'", u'0'])
        self.assertEqual(lex.parse_args(text="'rclw',0             ; DATA XREF: exec_rclw+3D\xe2\x86\x91o"),[u"'rclw'", u'0'])
        self.assertEqual(lex.parse_args(text="'rcrb',0             ; DATA XREF: exec_rcrb+3C\xe2\x86\x91o"),[u"'rcrb'", u'0'])
        self.assertEqual(lex.parse_args(text="'rcrl',0             ; DATA XREF: exec_rcrl+3C\xe2\x86\x91o"),[u"'rcrl'", u'0'])
        self.assertEqual(lex.parse_args(text="'rcrw',0             ; DATA XREF: exec_rcrw+3D\xe2\x86\x91o"),[u"'rcrw'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep lodsb',0        ; DATA XREF: test_string+555\xe2\x86\x91o"),[u"'rep lodsb'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep lodsl',0        ; DATA XREF: test_string+5E4\xe2\x86\x91o"),[u"'rep lodsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep lodsw',0        ; DATA XREF: test_string+59D\xe2\x86\x91o"),[u"'rep lodsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep movsb',0        ; DATA XREF: test_string+8AD\xe2\x86\x91o"),[u"'rep movsb'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep movsl',0        ; DATA XREF: test_string+93C\xe2\x86\x91o"),[u"'rep movsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep movsw',0        ; DATA XREF: test_string+8F5\xe2\x86\x91o"),[u"'rep movsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep stosb',0        ; DATA XREF: test_string+1FD\xe2\x86\x91o"),[u"'rep stosb'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep stosl',0        ; DATA XREF: test_string+28C\xe2\x86\x91o"),[u"'rep stosl'", u'0'])
        self.assertEqual(lex.parse_args(text="'rep stosw',0        ; DATA XREF: test_string+245\xe2\x86\x91o"),[u"'rep stosw'", u'0'])
        self.assertEqual(lex.parse_args(text="'repnz cmpsb',0      ; DATA XREF: test_string+1464\xe2\x86\x91o"),[u"'repnz cmpsb'", u'0'])
        self.assertEqual(lex.parse_args(text="'repnz cmpsl',0      ; DATA XREF: test_string+14F3\xe2\x86\x91o"),[u"'repnz cmpsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'repnz cmpsw',0      ; DATA XREF: test_string+14AC\xe2\x86\x91o"),[u"'repnz cmpsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'repnz scasb',0      ; DATA XREF: test_string+F5D\xe2\x86\x91o"),[u"'repnz scasb'", u'0'])
        self.assertEqual(lex.parse_args(text="'repnz scasl',0      ; DATA XREF: test_string+FEC\xe2\x86\x91o"),[u"'repnz scasl'", u'0'])
        self.assertEqual(lex.parse_args(text="'repnz scasw',0      ; DATA XREF: test_string+FA5\xe2\x86\x91o"),[u"'repnz scasw'", u'0'])
        self.assertEqual(lex.parse_args(text="'repz cmpsb',0       ; DATA XREF: test_string+12B5\xe2\x86\x91o"),[u"'repz cmpsb'", u'0'])
        self.assertEqual(lex.parse_args(text="'repz cmpsl',0       ; DATA XREF: test_string+1344\xe2\x86\x91o"),[u"'repz cmpsl'", u'0'])
        self.assertEqual(lex.parse_args(text="'repz cmpsw',0       ; DATA XREF: test_string+12FD\xe2\x86\x91o"),[u"'repz cmpsw'", u'0'])
        self.assertEqual(lex.parse_args(text="'repz scasb',0       ; DATA XREF: test_string+DAE\xe2\x86\x91o"),[u"'repz scasb'", u'0'])
        self.assertEqual(lex.parse_args(text="'repz scasl',0       ; DATA XREF: test_string+E3D\xe2\x86\x91o"),[u"'repz scasl'", u'0'])
        self.assertEqual(lex.parse_args(text="'repz scasw',0       ; DATA XREF: test_string+DF6\xe2\x86\x91o"),[u"'repz scasw'", u'0'])
        self.assertEqual(lex.parse_args(text="'res[%d]=%f',0Ah,0   ; DATA XREF: test_fenv+8D\xe2\x86\x91o"),[u"'res[%d]=%f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'rint(a) = %f',0Ah,0 ; DATA XREF: test_fcvt+101\xe2\x86\x91o"),[u"'rint(a) = %f'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'rolb',0             ; DATA XREF: exec_rolb+3C\xe2\x86\x91o"),[u"'rolb'", u'0'])
        self.assertEqual(lex.parse_args(text="'roll',0             ; DATA XREF: exec_roll+3C\xe2\x86\x91o"),[u"'roll'", u'0'])
        self.assertEqual(lex.parse_args(text="'rolw',0             ; DATA XREF: exec_rolw+3D\xe2\x86\x91o"),[u"'rolw'", u'0'])
        self.assertEqual(lex.parse_args(text="'rorb',0             ; DATA XREF: exec_rorb+3C\xe2\x86\x91o"),[u"'rorb'", u'0'])
        self.assertEqual(lex.parse_args(text="'rorl',0             ; DATA XREF: exec_rorl+3C\xe2\x86\x91o"),[u"'rorl'", u'0'])
        self.assertEqual(lex.parse_args(text="'rorw',0             ; DATA XREF: exec_rorw+3D\xe2\x86\x91o"),[u"'rorw'", u'0'])
        self.assertEqual(lex.parse_args(text="'sarb',0             ; DATA XREF: exec_sarb+3C\xe2\x86\x91o"),[u"'sarb'", u'0'])
        self.assertEqual(lex.parse_args(text="'sarl',0             ; DATA XREF: exec_sarl+3C\xe2\x86\x91o"),[u"'sarl'", u'0'])
        self.assertEqual(lex.parse_args(text="'sarw',0             ; DATA XREF: exec_sarw+3D\xe2\x86\x91o"),[u"'sarw'", u'0'])
        self.assertEqual(lex.parse_args(text="'sbbb',0             ; DATA XREF: exec_sbbb+34\xe2\x86\x91o"),[u"'sbbb'", u'0'])
        self.assertEqual(lex.parse_args(text="'sbbl',0             ; DATA XREF: exec_sbbl+34\xe2\x86\x91o"),[u"'sbbl'", u'0'])
        self.assertEqual(lex.parse_args(text="'sbbw',0             ; DATA XREF: exec_sbbw+35\xe2\x86\x91o"),[u"'sbbw'", u'0'])
        self.assertEqual(lex.parse_args(text="'scasb',0            ; DATA XREF: test_string+C04\xe2\x86\x91o"),[u"'scasb'", u'0'])
        self.assertEqual(lex.parse_args(text="'scasl',0            ; DATA XREF: test_string+C91\xe2\x86\x91o"),[u"'scasl'", u'0'])
        self.assertEqual(lex.parse_args(text="'scasw',0            ; DATA XREF: test_string+C4B\xe2\x86\x91o"),[u"'scasw'", u'0'])
        self.assertEqual(lex.parse_args(text="'seta',0             ; DATA XREF: test_jcc+EBB\xe2\x86\x91o"),[u"'seta'", u'0'])
        self.assertEqual(lex.parse_args(text="'setae',0            ; DATA XREF: test_jcc+CF9\xe2\x86\x91o"),[u"'setae'", u'0'])
        self.assertEqual(lex.parse_args(text="'setb',0             ; DATA XREF: test_jcc+975\xe2\x86\x91o"),[u"'setb'", u'0'])
        self.assertEqual(lex.parse_args(text="'setbe',0            ; DATA XREF: test_jcc+B37\xe2\x86\x91o"),[u"'setbe'", u'0'])
        self.assertEqual(lex.parse_args(text="'sete',0             ; DATA XREF: test_jcc+156\xe2\x86\x91o"),[u"'sete'", u'0'])
        self.assertEqual(lex.parse_args(text="'setg',0             ; DATA XREF: test_jcc+7B3\xe2\x86\x91o"),[u"'setg'", u'0'])
        self.assertEqual(lex.parse_args(text="'setge',0            ; DATA XREF: test_jcc+5F1\xe2\x86\x91o"),[u"'setge'", u'0'])
        self.assertEqual(lex.parse_args(text="'setl',0             ; DATA XREF: test_jcc+276\xe2\x86\x91o"),[u"'setl'", u'0'])
        self.assertEqual(lex.parse_args(text="'setle',0            ; DATA XREF: test_jcc+42F\xe2\x86\x91o"),[u"'setle'", u'0'])
        self.assertEqual(lex.parse_args(text="'setne',0            ; DATA XREF: test_jcc+39\xe2\x86\x91o"),[u"'setne'", u'0'])
        self.assertEqual(lex.parse_args(text="'setno',0            ; DATA XREF: test_jcc+142E\xe2\x86\x91o"),[u"'setno'", u'0'])
        self.assertEqual(lex.parse_args(text="'setnp',0            ; DATA XREF: test_jcc+11A9\xe2\x86\x91o"),[u"'setnp'", u'0'])
        self.assertEqual(lex.parse_args(text="'setns',0            ; DATA XREF: test_jcc+173F\xe2\x86\x91o"),[u"'setns'", u'0'])
        self.assertEqual(lex.parse_args(text="'seto',0             ; DATA XREF: test_jcc+12DA\xe2\x86\x91o"),[u"'seto'", u'0'])
        self.assertEqual(lex.parse_args(text="'setp',0             ; DATA XREF: test_jcc+107D\xe2\x86\x91o"),[u"'setp'", u'0'])
        self.assertEqual(lex.parse_args(text="'sets',0             ; DATA XREF: test_jcc+157D\xe2\x86\x91o"),[u"'sets'", u'0'])
        self.assertEqual(lex.parse_args(text="'shlb',0             ; DATA XREF: exec_shlb+3C\xe2\x86\x91o"),[u"'shlb'", u'0'])
        self.assertEqual(lex.parse_args(text="'shldl',0            ; DATA XREF: exec_shldl+45\xe2\x86\x91o"),[u"'shldl'", u'0'])
        self.assertEqual(lex.parse_args(text="'shldw',0            ; DATA XREF: exec_shldw+46\xe2\x86\x91o"),[u"'shldw'", u'0'])
        self.assertEqual(lex.parse_args(text="'shll',0             ; DATA XREF: exec_shll+3C\xe2\x86\x91o"),[u"'shll'", u'0'])
        self.assertEqual(lex.parse_args(text="'shlw',0             ; DATA XREF: exec_shlw+3D\xe2\x86\x91o"),[u"'shlw'", u'0'])
        self.assertEqual(lex.parse_args(text="'shrb',0             ; DATA XREF: exec_shrb+3C\xe2\x86\x91o"),[u"'shrb'", u'0'])
        self.assertEqual(lex.parse_args(text="'shrdl',0            ; DATA XREF: exec_shrdl+45\xe2\x86\x91o"),[u"'shrdl'", u'0'])
        self.assertEqual(lex.parse_args(text="'shrdw',0            ; DATA XREF: exec_shrdw+46\xe2\x86\x91o"),[u"'shrdw'", u'0'])
        self.assertEqual(lex.parse_args(text="'shrl',0             ; DATA XREF: exec_shrl+3C\xe2\x86\x91o"),[u"'shrl'", u'0'])
        self.assertEqual(lex.parse_args(text="'shrw',0             ; DATA XREF: exec_shrw+3D\xe2\x86\x91o"),[u"'shrw'", u'0'])
        self.assertEqual(lex.parse_args(text="'stosb',0            ; DATA XREF: test_string+53\xe2\x86\x91o"),[u"'stosb'", u'0'])
        self.assertEqual(lex.parse_args(text="'stosl',0            ; DATA XREF: test_string+E0\xe2\x86\x91o"),[u"'stosl'", u'0'])
        self.assertEqual(lex.parse_args(text="'stosw',0            ; DATA XREF: test_string+9A\xe2\x86\x91o"),[u"'stosw'", u'0'])
        self.assertEqual(lex.parse_args(text="'subb',0             ; DATA XREF: exec_subb+34\xe2\x86\x91o"),[u"'subb'", u'0'])
        self.assertEqual(lex.parse_args(text="'subl',0             ; DATA XREF: exec_subl+34\xe2\x86\x91o"),[u"'subl'", u'0'])
        self.assertEqual(lex.parse_args(text="'subw',0             ; DATA XREF: exec_subw+35\xe2\x86\x91o"),[u"'subw'", u'0'])
        self.assertEqual(lex.parse_args(text="'u',0                ; DATA XREF: test_fcmov+13B\xe2\x86\x91o"),[u"'u'", u'0'])
        self.assertEqual(lex.parse_args(text="'xaddb',0            ; DATA XREF: test_xchg+14A\xe2\x86\x91o"),[u"'xaddb'", u'0'])
        self.assertEqual(lex.parse_args(text="'xaddl same res=%08x',0Ah,0"),[u"'xaddl same res=%08x'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'xaddl',0            ; DATA XREF: test_xchg+103\xe2\x86\x91o"),[u"'xaddl'", u'0'])
        self.assertEqual(lex.parse_args(text="'xaddw',0            ; DATA XREF: test_xchg+126\xe2\x86\x91o"),[u"'xaddw'", u'0'])
        self.assertEqual(lex.parse_args(text="'xchgb',0            ; DATA XREF: test_xchg+5F\xe2\x86\x91o"),[u"'xchgb'", u'0'])
        self.assertEqual(lex.parse_args(text="'xchgl',0            ; DATA XREF: test_xchg+17\xe2\x86\x91o"),[u"'xchgl'", u'0'])
        self.assertEqual(lex.parse_args(text="'xchgw',0            ; DATA XREF: test_xchg+3D\xe2\x86\x91o"),[u"'xchgw'", u'0'])
        self.assertEqual(lex.parse_args(text="'xlat: EAX=%08lx',0Ah,0 ; DATA XREF: test_misc+25\xe2\x86\x91o"),[u"'xlat: EAX=%08lx'", u'0Ah', u'0'])
        self.assertEqual(lex.parse_args(text="'xorb',0             ; DATA XREF: exec_xorb+34\xe2\x86\x91o"),[u"'xorb'", u'0'])
        self.assertEqual(lex.parse_args(text="'xorl',0             ; DATA XREF: exec_xorl+34\xe2\x86\x91o"),[u"'xorl'", u'0'])
        self.assertEqual(lex.parse_args(text="'xorw',0             ; DATA XREF: exec_xorw+35\xe2\x86\x91o"),[u"'xorw'", u'0'])
        self.assertEqual(lex.parse_args(text="27h ; '"),[u'27h'])
        self.assertEqual(lex.parse_args(text="[doublequote+4],'d'"),[u'[doublequote+4]', u"'d'"])
        self.assertEqual(lex.parse_args(text="ah,9 ; DS:DX->'$'-terminated string"),[u'ah', u'9'])
        self.assertEqual(lex.parse_args(text="al, 'Z' - 'A' +1"),[u'al', u"'Z' - 'A' +1"])
        self.assertEqual(lex.parse_args(text="cx, 80h ; '\x80'"),[u'cx', u'80h'])
        self.assertEqual(lex.parse_args(text="dl,'a'"),[u'dl', u"'a'"])
        self.assertEqual(lex.parse_args(text="dl,'c'"),[u'dl', u"'c'"])
        self.assertEqual(lex.parse_args(text="dword ptr buffer,'tseT'"),[u'dword ptr buffer', u"'tseT'"])
        self.assertEqual(lex.parse_args(text="ebx,'dcba'"),[u'ebx', u"'dcba'"])
        self.assertEqual(lex.parse_args(text="ecx,'dcba'"),[u'ecx', u"'dcba'"])
        self.assertEqual(lex.parse_args(text=''),[])
        self.assertEqual(lex.parse_args(text='((((2030080+64000*26)/4096)+1)*4096)-1'),[u'((((2030080+64000*26)/4096)+1)*4096)-1'])
        self.assertEqual(lex.parse_args(text='(00+38*3)*320+1/2+33*(3-1)'),[u'(00+38*3)*320+1/2+33*(3-1)'])
        self.assertEqual(lex.parse_args(text='-0.5                 ; DATA XREF: test_floats+5E\xe2\x86\x91r'),[u'-0.5'])
        self.assertEqual(lex.parse_args(text='-1'),[u'-1'])
        self.assertEqual(lex.parse_args(text='-13'),[u'-13'])
        self.assertEqual(lex.parse_args(text='-20.5                ; DATA XREF: test_floats+46\xe2\x86\x91r'),[u'-20.5'])
        self.assertEqual(lex.parse_args(text='-4.0                 ; DATA XREF: test_floats+54\xe2\x86\x91r'),[u'-4.0'])
        self.assertEqual(lex.parse_args(text='-5.0                 ; DATA XREF: test_floats+25\xe2\x86\x91r'),[u'-5.0'])
        self.assertEqual(lex.parse_args(text='0                    ; DATA XREF: sub_401090+60\xe2\x86\x91w'),[u'0'])
        self.assertEqual(lex.parse_args(text='0                 ; DATA XREF: _cygwin_crt0_common@8+19C\xe2\x86\x91o'),[u'0'])
        self.assertEqual(lex.parse_args(text='0                 ; DATA XREF: _cygwin_crt0_common@8+1B1\xe2\x86\x91o'),[u'0'])
        self.assertEqual(lex.parse_args(text='0                 ; DATA XREF: main:loc_40D571\xe2\x86\x91o'),[u'0'])
        self.assertEqual(lex.parse_args(text='0                 ; DATA XREF: sub_401090:loc_40110A\xe2\x86\x91o'),[u'0'])
        self.assertEqual(lex.parse_args(text='0                 ; DATA XREF: test_loop+11\xe2\x86\x91o'),[u'0'])
        self.assertEqual(lex.parse_args(text='0'),[u'0'])
        self.assertEqual(lex.parse_args(text='0.5                  ; DATA XREF: test_floats+114\xe2\x86\x91r'),[u'0.5'])
        self.assertEqual(lex.parse_args(text='000,000,000,000,000,021,000,000,042,000,000,063,009,000,000,009'),[u'000', u'000', u'000', u'000', u'000', u'021', u'000', u'000', u'042', u'000', u'000', u'063', u'009', u'000', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='000,009,000,000,009,021,000,009,042,000,009,063,009,009,000,009'),[u'000', u'009', u'000', u'000', u'009', u'021', u'000', u'009', u'042', u'000', u'009', u'063', u'009', u'009', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='000,018,000,000,018,021,000,018,042,000,018,063,009,018,000,009'),[u'000', u'018', u'000', u'000', u'018', u'021', u'000', u'018', u'042', u'000', u'018', u'063', u'009', u'018', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='000,021,009,000,042,009,000,063,018,000,000,018,000,021,018,000'),[u'000', u'021', u'009', u'000', u'042', u'009', u'000', u'063', u'018', u'000', u'000', u'018', u'000', u'021', u'018', u'000'])
        self.assertEqual(lex.parse_args(text='000,021,045,000,042,045,000,063,054,000,000,054,000,021,054,000'),[u'000', u'021', u'045', u'000', u'042', u'045', u'000', u'063', u'054', u'000', u'000', u'054', u'000', u'021', u'054', u'000'])
        self.assertEqual(lex.parse_args(text='000,027,000,000,027,021,000,027,042,000,027,063,009,027,000,009'),[u'000', u'027', u'000', u'000', u'027', u'021', u'000', u'027', u'042', u'000', u'027', u'063', u'009', u'027', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='000,036,000,000,036,021,000,036,042,000,036,063,009,036,000,009'),[u'000', u'036', u'000', u'000', u'036', u'021', u'000', u'036', u'042', u'000', u'036', u'063', u'009', u'036', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='000,045,000,000,045,021,000,045,042,000,045,063,009,045,000,009'),[u'000', u'045', u'000', u'000', u'045', u'021', u'000', u'045', u'042', u'000', u'045', u'063', u'009', u'045', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='000,054,000,000,054,021,000,054,042,000,054,063,009,054,000,009'),[u'000', u'054', u'000', u'000', u'054', u'021', u'000', u'054', u'042', u'000', u'054', u'063', u'009', u'054', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='000,063,000,000,063,021,000,063,042,000,063,063,009,063,000,009'),[u'000', u'063', u'000', u'000', u'063', u'021', u'000', u'063', u'042', u'000', u'063', u'063', u'009', u'063', u'000', u'009'])
        self.assertEqual(lex.parse_args(text='009,021,009,009,042,009,009,063,018,009,000,018,009,021,018,009'),[u'009', u'021', u'009', u'009', u'042', u'009', u'009', u'063', u'018', u'009', u'000', u'018', u'009', u'021', u'018', u'009'])
        self.assertEqual(lex.parse_args(text='009,021,045,009,042,045,009,063,054,009,000,054,009,021,054,009'),[u'009', u'021', u'045', u'009', u'042', u'045', u'009', u'063', u'054', u'009', u'000', u'054', u'009', u'021', u'054', u'009'])
        self.assertEqual(lex.parse_args(text='018,021,009,018,042,009,018,063,018,018,000,018,018,021,018,018'),[u'018', u'021', u'009', u'018', u'042', u'009', u'018', u'063', u'018', u'018', u'000', u'018', u'018', u'021', u'018', u'018'])
        self.assertEqual(lex.parse_args(text='018,021,045,018,042,045,018,063,054,018,000,054,018,021,054,018'),[u'018', u'021', u'045', u'018', u'042', u'045', u'018', u'063', u'054', u'018', u'000', u'054', u'018', u'021', u'054', u'018'])
        self.assertEqual(lex.parse_args(text='027,021,009,027,042,009,027,063,018,027,000,018,027,021,018,027'),[u'027', u'021', u'009', u'027', u'042', u'009', u'027', u'063', u'018', u'027', u'000', u'018', u'027', u'021', u'018', u'027'])
        self.assertEqual(lex.parse_args(text='027,021,045,027,042,045,027,063,054,027,000,054,027,021,054,027'),[u'027', u'021', u'045', u'027', u'042', u'045', u'027', u'063', u'054', u'027', u'000', u'054', u'027', u'021', u'054', u'027'])
        self.assertEqual(lex.parse_args(text='036,000,000,036,000,021,036,000,042,036,000,063,045,000,000,045'),[u'036', u'000', u'000', u'036', u'000', u'021', u'036', u'000', u'042', u'036', u'000', u'063', u'045', u'000', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='036,009,000,036,009,021,036,009,042,036,009,063,045,009,000,045'),[u'036', u'009', u'000', u'036', u'009', u'021', u'036', u'009', u'042', u'036', u'009', u'063', u'045', u'009', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='036,018,000,036,018,021,036,018,042,036,018,063,045,018,000,045'),[u'036', u'018', u'000', u'036', u'018', u'021', u'036', u'018', u'042', u'036', u'018', u'063', u'045', u'018', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='036,021,009,036,042,009,036,063,018,036,000,018,036,021,018,036'),[u'036', u'021', u'009', u'036', u'042', u'009', u'036', u'063', u'018', u'036', u'000', u'018', u'036', u'021', u'018', u'036'])
        self.assertEqual(lex.parse_args(text='036,021,045,036,042,045,036,063,054,036,000,054,036,021,054,036'),[u'036', u'021', u'045', u'036', u'042', u'045', u'036', u'063', u'054', u'036', u'000', u'054', u'036', u'021', u'054', u'036'])
        self.assertEqual(lex.parse_args(text='036,027,000,036,027,021,036,027,042,036,027,063,045,027,000,045'),[u'036', u'027', u'000', u'036', u'027', u'021', u'036', u'027', u'042', u'036', u'027', u'063', u'045', u'027', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='036,036,000,036,036,021,036,036,042,036,036,063,045,036,000,045'),[u'036', u'036', u'000', u'036', u'036', u'021', u'036', u'036', u'042', u'036', u'036', u'063', u'045', u'036', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='036,045,000,036,045,021,036,045,042,036,045,063,045,045,000,045'),[u'036', u'045', u'000', u'036', u'045', u'021', u'036', u'045', u'042', u'036', u'045', u'063', u'045', u'045', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='036,054,000,036,054,021,036,054,042,036,054,063,045,054,000,045'),[u'036', u'054', u'000', u'036', u'054', u'021', u'036', u'054', u'042', u'036', u'054', u'063', u'045', u'054', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='036,063,000,036,063,021,036,063,042,036,063,063,045,063,000,045'),[u'036', u'063', u'000', u'036', u'063', u'021', u'036', u'063', u'042', u'036', u'063', u'063', u'045', u'063', u'000', u'045'])
        self.assertEqual(lex.parse_args(text='042,018,000,063,027,000,000,027,000,021,027,000,042,027,000,063'),[u'042', u'018', u'000', u'063', u'027', u'000', u'000', u'027', u'000', u'021', u'027', u'000', u'042', u'027', u'000', u'063'])
        self.assertEqual(lex.parse_args(text='042,018,009,063,027,009,000,027,009,021,027,009,042,027,009,063'),[u'042', u'018', u'009', u'063', u'027', u'009', u'000', u'027', u'009', u'021', u'027', u'009', u'042', u'027', u'009', u'063'])
        self.assertEqual(lex.parse_args(text='042,018,018,063,027,018,000,027,018,021,027,018,042,027,018,063'),[u'042', u'018', u'018', u'063', u'027', u'018', u'000', u'027', u'018', u'021', u'027', u'018', u'042', u'027', u'018', u'063'])
        self.assertEqual(lex.parse_args(text='042,018,027,063,027,027,000,027,027,021,027,027,042,027,027,063'),[u'042', u'018', u'027', u'063', u'027', u'027', u'000', u'027', u'027', u'021', u'027', u'027', u'042', u'027', u'027', u'063'])
        self.assertEqual(lex.parse_args(text='042,018,036,063,027,036,000,027,036,021,027,036,042,027,036,063'),[u'042', u'018', u'036', u'063', u'027', u'036', u'000', u'027', u'036', u'021', u'027', u'036', u'042', u'027', u'036', u'063'])
        self.assertEqual(lex.parse_args(text='042,018,045,063,027,045,000,027,045,021,027,045,042,027,045,063'),[u'042', u'018', u'045', u'063', u'027', u'045', u'000', u'027', u'045', u'021', u'027', u'045', u'042', u'027', u'045', u'063'])
        self.assertEqual(lex.parse_args(text='042,018,054,063,027,054,000,027,054,021,027,054,042,027,054,063'),[u'042', u'018', u'054', u'063', u'027', u'054', u'000', u'027', u'054', u'021', u'027', u'054', u'042', u'027', u'054', u'063'])
        self.assertEqual(lex.parse_args(text='042,018,063,063,027,063,000,027,063,021,027,063,042,027,063,063'),[u'042', u'018', u'063', u'063', u'027', u'063', u'000', u'027', u'063', u'021', u'027', u'063', u'042', u'027', u'063', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,000,063,063,000,000,063,000,021,063,000,042,063,000,063'),[u'042', u'054', u'000', u'063', u'063', u'000', u'000', u'063', u'000', u'021', u'063', u'000', u'042', u'063', u'000', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,009,063,063,009,000,063,009,021,063,009,042,063,009,063'),[u'042', u'054', u'009', u'063', u'063', u'009', u'000', u'063', u'009', u'021', u'063', u'009', u'042', u'063', u'009', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,018,063,063,018,000,063,018,021,063,018,042,063,018,063'),[u'042', u'054', u'018', u'063', u'063', u'018', u'000', u'063', u'018', u'021', u'063', u'018', u'042', u'063', u'018', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,027,063,063,027,000,063,027,021,063,027,042,063,027,063'),[u'042', u'054', u'027', u'063', u'063', u'027', u'000', u'063', u'027', u'021', u'063', u'027', u'042', u'063', u'027', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,036,063,063,036,000,063,036,021,063,036,042,063,036,063'),[u'042', u'054', u'036', u'063', u'063', u'036', u'000', u'063', u'036', u'021', u'063', u'036', u'042', u'063', u'036', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,045,063,063,045,000,063,045,021,063,045,042,063,045,063'),[u'042', u'054', u'045', u'063', u'063', u'045', u'000', u'063', u'045', u'021', u'063', u'045', u'042', u'063', u'045', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,054,063,063,054,000,063,054,021,063,054,042,063,054,063'),[u'042', u'054', u'054', u'063', u'063', u'054', u'000', u'063', u'054', u'021', u'063', u'054', u'042', u'063', u'054', u'063'])
        self.assertEqual(lex.parse_args(text='042,054,063,063,063,063,000,063,063,021,063,063,042,063,063,063'),[u'042', u'054', u'063', u'063', u'063', u'063', u'000', u'063', u'063', u'021', u'063', u'063', u'042', u'063', u'063', u'063'])
        self.assertEqual(lex.parse_args(text='045,021,009,045,042,009,045,063,018,045,000,018,045,021,018,045'),[u'045', u'021', u'009', u'045', u'042', u'009', u'045', u'063', u'018', u'045', u'000', u'018', u'045', u'021', u'018', u'045'])
        self.assertEqual(lex.parse_args(text='045,021,045,045,042,045,045,063,054,045,000,054,045,021,054,045'),[u'045', u'021', u'045', u'045', u'042', u'045', u'045', u'063', u'054', u'045', u'000', u'054', u'045', u'021', u'054', u'045'])
        self.assertEqual(lex.parse_args(text='054,021,009,054,042,009,054,063,018,054,000,018,054,021,018,054'),[u'054', u'021', u'009', u'054', u'042', u'009', u'054', u'063', u'018', u'054', u'000', u'018', u'054', u'021', u'018', u'054'])
        self.assertEqual(lex.parse_args(text='054,021,045,054,042,045,054,063,054,054,000,054,054,021,054,054'),[u'054', u'021', u'045', u'054', u'042', u'045', u'054', u'063', u'054', u'054', u'000', u'054', u'054', u'021', u'054', u'054'])
        self.assertEqual(lex.parse_args(text='063,021,009,063,042,009,063,063,018,063,000,018,063,021,018,063'),[u'063', u'021', u'009', u'063', u'042', u'009', u'063', u'063', u'018', u'063', u'000', u'018', u'063', u'021', u'018', u'063'])
        self.assertEqual(lex.parse_args(text='063,021,045,063,042,045,063,063,054,063,000,054,063,021,054,063'),[u'063', u'021', u'045', u'063', u'042', u'045', u'063', u'063', u'054', u'063', u'000', u'054', u'063', u'021', u'054', u'063'])
        self.assertEqual(lex.parse_args(text='0A0h ; \xc2\xa0'),[u'0A0h'])
        self.assertEqual(lex.parse_args(text='0A2h ; \xd1\x9e'),[u'0A2h'])
        self.assertEqual(lex.parse_args(text='0A3h ; \xd0\x88'),[u'0A3h'])
        self.assertEqual(lex.parse_args(text='0A4h ; \xc2\xa4'),[u'0A4h'])
        self.assertEqual(lex.parse_args(text='0A5h ; \xd2\x90'),[u'0A5h'])
        self.assertEqual(lex.parse_args(text='0A6h ; \xc2\xa6'),[u'0A6h'])
        self.assertEqual(lex.parse_args(text='0A8h ; \xd0\x81'),[u'0A8h'])
        self.assertEqual(lex.parse_args(text='0A9h ; \xc2\xa9'),[u'0A9h'])
        self.assertEqual(lex.parse_args(text='0ACh ; \xc2\xac'),[u'0ACh'])
        self.assertEqual(lex.parse_args(text='0AEh ; \xc2\xae'),[u'0AEh'])
        self.assertEqual(lex.parse_args(text='0Ah'),[u'0Ah'])
        self.assertEqual(lex.parse_args(text='0B0h ; \xc2\xb0'),[u'0B0h'])
        self.assertEqual(lex.parse_args(text='0B1h ; \xc2\xb1'),[u'0B1h'])
        self.assertEqual(lex.parse_args(text='0B2h ; \xd0\x86'),[u'0B2h'])
        self.assertEqual(lex.parse_args(text='0B3h ; \xd1\x96'),[u'0B3h'])
        self.assertEqual(lex.parse_args(text='0B4h ; \xd2\x91'),[u'0B4h'])
        self.assertEqual(lex.parse_args(text='0B5h ; \xc2\xb5'),[u'0B5h'])
        self.assertEqual(lex.parse_args(text='0BAh ; \xd1\x94'),[u'0BAh'])
        self.assertEqual(lex.parse_args(text='0BC6058h'),[u'0BC6058h'])
        self.assertEqual(lex.parse_args(text='0BCh ; \xd1\x98'),[u'0BCh'])
        self.assertEqual(lex.parse_args(text='0BEh ; \xd1\x95'),[u'0BEh'])
        self.assertEqual(lex.parse_args(text='0BFh ; \xd1\x97'),[u'0BFh'])
        self.assertEqual(lex.parse_args(text='0Bh'),[u'0Bh'])
        self.assertEqual(lex.parse_args(text='0C0h ; \xd0\x90'),[u'0C0h'])
        self.assertEqual(lex.parse_args(text='0C1h ; \xd0\x91'),[u'0C1h'])
        self.assertEqual(lex.parse_args(text='0C2h ; \xd0\x92'),[u'0C2h'])
        self.assertEqual(lex.parse_args(text='0C3h ; \xd0\x93'),[u'0C3h'])
        self.assertEqual(lex.parse_args(text='0C4h ; \xd0\x94'),[u'0C4h'])
        self.assertEqual(lex.parse_args(text='0C5h ; \xd0\x95'),[u'0C5h'])
        self.assertEqual(lex.parse_args(text='0C6h ; \xd0\x96'),[u'0C6h'])
        self.assertEqual(lex.parse_args(text='0C7h ; \xd0\x97'),[u'0C7h'])
        self.assertEqual(lex.parse_args(text='0C8h ; \xd0\x98'),[u'0C8h'])
        self.assertEqual(lex.parse_args(text='0C9h ; \xd0\x99'),[u'0C9h'])
        self.assertEqual(lex.parse_args(text='0CAh ; \xd0\x9a'),[u'0CAh'])
        self.assertEqual(lex.parse_args(text='0CBh ; \xd0\x9b'),[u'0CBh'])
        self.assertEqual(lex.parse_args(text='0CCh ; \xd0\x9c'),[u'0CCh'])
        self.assertEqual(lex.parse_args(text='0CDh ; \xd0\x9d'),[u'0CDh'])
        self.assertEqual(lex.parse_args(text='0Ch'),[u'0Ch'])
        self.assertEqual(lex.parse_args(text='0D0h ; \xd0\xa0'),[u'0D0h'])
        self.assertEqual(lex.parse_args(text='0D1h ; \xd0\xa1'),[u'0D1h'])
        self.assertEqual(lex.parse_args(text='0D2h ; \xd0\xa2'),[u'0D2h'])
        self.assertEqual(lex.parse_args(text='0D4h ; \xd0\xa4'),[u'0D4h'])
        self.assertEqual(lex.parse_args(text='0D9h ; \xd0\xa9'),[u'0D9h'])
        self.assertEqual(lex.parse_args(text='0DAh ; \xd0\xaa'),[u'0DAh'])
        self.assertEqual(lex.parse_args(text='0DBh ; \xd0\xab'),[u'0DBh'])
        self.assertEqual(lex.parse_args(text='0DCh ; \xd0\xac'),[u'0DCh'])
        self.assertEqual(lex.parse_args(text='0DDh ; \xd0\xad'),[u'0DDh'])
        self.assertEqual(lex.parse_args(text='0DEh ; \xd0\xae'),[u'0DEh'])
        self.assertEqual(lex.parse_args(text='0Dh'),[u'0Dh'])
        self.assertEqual(lex.parse_args(text='0E0h ; \xd0\xb0'),[u'0E0h'])
        self.assertEqual(lex.parse_args(text='0E1h ; \xd0\xb1'),[u'0E1h'])
        self.assertEqual(lex.parse_args(text='0E3h ; \xd0\xb3'),[u'0E3h'])
        self.assertEqual(lex.parse_args(text='0E4h ; \xd0\xb4'),[u'0E4h'])
        self.assertEqual(lex.parse_args(text='0E5h ; \xd0\xb5'),[u'0E5h'])
        self.assertEqual(lex.parse_args(text='0E7h ; \xd0\xb7'),[u'0E7h'])
        self.assertEqual(lex.parse_args(text='0E8h ; \xd0\xb8'),[u'0E8h'])
        self.assertEqual(lex.parse_args(text='0E9h ; \xd0\xb9'),[u'0E9h'])
        self.assertEqual(lex.parse_args(text='0EBh ; \xd0\xbb'),[u'0EBh'])
        self.assertEqual(lex.parse_args(text='0ECh ; \xd0\xbc'),[u'0ECh'])
        self.assertEqual(lex.parse_args(text='0EDh ; \xd0\xbd'),[u'0EDh'])
        self.assertEqual(lex.parse_args(text='0EEh ; \xd0\xbe'),[u'0EEh'])
        self.assertEqual(lex.parse_args(text='0EFh ; \xd0\xbf'),[u'0EFh'])
        self.assertEqual(lex.parse_args(text='0Eh'),[u'0Eh'])
        self.assertEqual(lex.parse_args(text='0F0h ; \xd1\x80'),[u'0F0h'])
        self.assertEqual(lex.parse_args(text='0F1h ; \xd1\x81'),[u'0F1h'])
        self.assertEqual(lex.parse_args(text='0F3h ; \xd1\x83'),[u'0F3h'])
        self.assertEqual(lex.parse_args(text='0F4h ; \xd1\x84'),[u'0F4h'])
        self.assertEqual(lex.parse_args(text='0F5h ; \xd1\x85'),[u'0F5h'])
        self.assertEqual(lex.parse_args(text='0F6h ; \xd1\x86'),[u'0F6h'])
        self.assertEqual(lex.parse_args(text='0F7h ; \xd1\x87'),[u'0F7h'])
        self.assertEqual(lex.parse_args(text='0F8h ; \xd1\x88'),[u'0F8h'])
        self.assertEqual(lex.parse_args(text='0F9h ; \xd1\x89'),[u'0F9h'])
        self.assertEqual(lex.parse_args(text='0FAh ; \xd1\x8a'),[u'0FAh'])
        self.assertEqual(lex.parse_args(text='0FBh ; \xd1\x8b'),[u'0FBh'])
        self.assertEqual(lex.parse_args(text='0FCh ; \xd1\x8c'),[u'0FCh'])
        self.assertEqual(lex.parse_args(text='0FEh ; \xd1\x8e'),[u'0FEh'])
        self.assertEqual(lex.parse_args(text='0FFFFFFFFh, 40D5C0h, 0'),[u'0FFFFFFFFh', u'40D5C0h', u'0'])
        self.assertEqual(lex.parse_args(text='0FFFFFFFFh, 8 dup(0) ; DATA XREF: _cygwin_crt0_common@8+59\xe2\x86\x91o'),[u'0FFFFFFFFh', u'8 dup(0)'])
        self.assertEqual(lex.parse_args(text='0FFh ; \xd1\x8f'),[u'0FFh'])
        self.assertEqual(lex.parse_args(text='0Fh'),[u'0Fh'])
        self.assertEqual(lex.parse_args(text='0ffh,0dfh,0h'),[u'0ffh', u'0dfh', u'0h'])
        self.assertEqual(lex.parse_args(text='1'),[u'1'])
        self.assertEqual(lex.parse_args(text='1,2,3,4'),[u'1', u'2', u'3', u'4'])
        self.assertEqual(lex.parse_args(text='1,2,3,4,5,6,7,8,9,10,11,12,13,14'),[u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9', u'10', u'11', u'12', u'13', u'14'])
        self.assertEqual(lex.parse_args(text='10 dup (?)'),[u'10 dup (?)'])
        self.assertEqual(lex.parse_args(text='100 dup (1)'),[u'100 dup (1)'])
        self.assertEqual(lex.parse_args(text='1000h dup(?) ;IGNORE'),[u'1000h dup(?)'])
        self.assertEqual(lex.parse_args(text='1000h dup(?)'),[u'1000h dup(?)'])
        self.assertEqual(lex.parse_args(text='10h'),[u'10h'])
        self.assertEqual(lex.parse_args(text='11'),[u'11'])
        self.assertEqual(lex.parse_args(text='11,-11,2,4'),[u'11', u'-11', u'2', u'4'])
        self.assertEqual(lex.parse_args(text='11,-11,2,4000000'),[u'11', u'-11', u'2', u'4000000'])
        self.assertEqual(lex.parse_args(text='111,1'),[u'111', u'1'])
        self.assertEqual(lex.parse_args(text='11h'),[u'11h'])
        self.assertEqual(lex.parse_args(text='12'),[u'12'])
        self.assertEqual(lex.parse_args(text='12345'),[u'12345'])
        self.assertEqual(lex.parse_args(text='128.0                ; DATA XREF: test_floats+3C\xe2\x86\x91r'),[u'128.0'])
        self.assertEqual(lex.parse_args(text='12h'),[u'12h'])
        self.assertEqual(lex.parse_args(text='13'),[u'13'])
        self.assertEqual(lex.parse_args(text='131'),[u'131'])
        self.assertEqual(lex.parse_args(text='13h'),[u'13h'])
        self.assertEqual(lex.parse_args(text='141'),[u'141'])
        self.assertEqual(lex.parse_args(text='14h                 ; DATA XREF: sub_401090+71\xe2\x86\x91o'),[u'14h'])
        self.assertEqual(lex.parse_args(text='14h'),[u'14h'])
        self.assertEqual(lex.parse_args(text='1500 ; 8*2*3 ;+1 +19*13*2*4'),[u'1500'])
        self.assertEqual(lex.parse_args(text='15h'),[u'15h'])
        self.assertEqual(lex.parse_args(text='16h'),[u'16h'])
        self.assertEqual(lex.parse_args(text='17h'),[u'17h'])
        self.assertEqual(lex.parse_args(text='18h'),[u'18h'])
        self.assertEqual(lex.parse_args(text='1Ah'),[u'1Ah'])
        self.assertEqual(lex.parse_args(text='1Bh'),[u'1Bh'])
        self.assertEqual(lex.parse_args(text='1Ch'),[u'1Ch'])
        self.assertEqual(lex.parse_args(text='1Dh'),[u'1Dh'])
        self.assertEqual(lex.parse_args(text='1Eh'),[u'1Eh'])
        self.assertEqual(lex.parse_args(text='1Fh'),[u'1Fh'])
        self.assertEqual(lex.parse_args(text='2'),[u'2'])
        self.assertEqual(lex.parse_args(text='2,5,0'),[u'2', u'5', u'0'])
        self.assertEqual(lex.parse_args(text='2,5,6'),[u'2', u'5', u'6'])
        self.assertEqual(lex.parse_args(text='2.0                  ; DATA XREF: test_fcmov:loc_40A370\xe2\x86\x91r'),[u'2.0'])
        self.assertEqual(lex.parse_args(text='2.0                  ; DATA XREF: test_floats+10\xe2\x86\x91r'),[u'2.0'])
        self.assertEqual(lex.parse_args(text='20h'),[u'20h'])
        self.assertEqual(lex.parse_args(text='21h ; !'),[u'21h'])
        self.assertEqual(lex.parse_args(text='21h ; DOS - 2+ - CLOSE A FILE WITH HANDLE'),[u'21h'])
        self.assertEqual(lex.parse_args(text='21h ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)'),[u'21h'])
        self.assertEqual(lex.parse_args(text='21h ; DOS - 2+ - OPEN DISK FILE WITH HANDLE'),[u'21h'])
        self.assertEqual(lex.parse_args(text='21h ; DOS INT 21h ; DOS INT 21h'),[u'21h'])
        self.assertEqual(lex.parse_args(text='21h ; DOS INT 21h'),[u'21h'])
        self.assertEqual(lex.parse_args(text='21h ; maybe redirected under DOS 2+ for output to file'),[u'21h'])
        self.assertEqual(lex.parse_args(text='21h'),[u'21h'])
        self.assertEqual(lex.parse_args(text='223,22'),[u'223', u'22'])
        self.assertEqual(lex.parse_args(text='22h ; "'),[u'22h'])
        self.assertEqual(lex.parse_args(text='23h ; #'),[u'23h'])
        self.assertEqual(lex.parse_args(text='24h ; $'),[u'24h'])
        self.assertEqual(lex.parse_args(text='25h ; %'),[u'25h'])
        self.assertEqual(lex.parse_args(text='26h ; &'),[u'26h'])
        self.assertEqual(lex.parse_args(text='280h dup(?)'),[u'280h dup(?)'])
        self.assertEqual(lex.parse_args(text='28h ; ('),[u'28h'])
        self.assertEqual(lex.parse_args(text='29h ; )'),[u'29h'])
        self.assertEqual(lex.parse_args(text='2Ah ; *'),[u'2Ah'])
        self.assertEqual(lex.parse_args(text='2Bh ; +'),[u'2Bh'])
        self.assertEqual(lex.parse_args(text='2Ch ; ,'),[u'2Ch'])
        self.assertEqual(lex.parse_args(text='2Dh ; -'),[u'2Dh'])
        self.assertEqual(lex.parse_args(text='2Eh ; .'),[u'2Eh'])
        self.assertEqual(lex.parse_args(text='2Fh ; /'),[u'2Fh'])
        self.assertEqual(lex.parse_args(text='3'),[u'3'])
        self.assertEqual(lex.parse_args(text='3.0                  ; DATA XREF: test_fops+101\xe2\x86\x91r'),[u'3.0'])
        self.assertEqual(lex.parse_args(text='3.5                  ; DATA XREF: test_fops+F7\xe2\x86\x91r'),[u'3.5'])
        self.assertEqual(lex.parse_args(text='3.7                  ; DATA XREF: test_fops+C9\xe2\x86\x91r'),[u'3.7'])
        self.assertEqual(lex.parse_args(text='30h ; 0'),[u'30h'])
        self.assertEqual(lex.parse_args(text='31h'),[u'31h'])
        self.assertEqual(lex.parse_args(text='32768.0              ; DATA XREF: test_floats+158\xe2\x86\x91r'),[u'32768.0'])
        self.assertEqual(lex.parse_args(text='32h ; 2'),[u'32h'])
        self.assertEqual(lex.parse_args(text='34'),[u'34'])
        self.assertEqual(lex.parse_args(text='34h ; 4'),[u'34h'])
        self.assertEqual(lex.parse_args(text='35h ; 5'),[u'35h'])
        self.assertEqual(lex.parse_args(text='36h ; 6'),[u'36h'])
        self.assertEqual(lex.parse_args(text='38h ; 8'),[u'38h'])
        self.assertEqual(lex.parse_args(text='3Ah ; :'),[u'3Ah'])
        self.assertEqual(lex.parse_args(text='3Bh ; ;'),[u'3Bh'])
        self.assertEqual(lex.parse_args(text='3Ch ; <'),[u'3Ch'])
        self.assertEqual(lex.parse_args(text='3Dh ; ='),[u'3Dh'])
        self.assertEqual(lex.parse_args(text='3Eh ; >'),[u'3Eh'])
        self.assertEqual(lex.parse_args(text='3Fh ; ?'),[u'3Fh'])
        self.assertEqual(lex.parse_args(text='4 dup (5)'),[u'4 dup (5)'])
        self.assertEqual(lex.parse_args(text='4'),[u'4'])
        self.assertEqual(lex.parse_args(text='4,6,9'),[u'4', u'6', u'9'])
        self.assertEqual(lex.parse_args(text='40h ; @'),[u'40h'])
        self.assertEqual(lex.parse_args(text='41h ; A'),[u'41h'])
        self.assertEqual(lex.parse_args(text='42h ; B'),[u'42h'])
        self.assertEqual(lex.parse_args(text='43h ; C'),[u'43h'])
        self.assertEqual(lex.parse_args(text='44h ; D'),[u'44h'])
        self.assertEqual(lex.parse_args(text='45h ; E'),[u'45h'])
        self.assertEqual(lex.parse_args(text='46h ; F'),[u'46h'])
        self.assertEqual(lex.parse_args(text='47h ; G'),[u'47h'])
        self.assertEqual(lex.parse_args(text='48h ; H'),[u'48h'])
        self.assertEqual(lex.parse_args(text='49h ; I'),[u'49h'])
        self.assertEqual(lex.parse_args(text='4Ah ; J'),[u'4Ah'])
        self.assertEqual(lex.parse_args(text='4Bh ; K'),[u'4Bh'])
        self.assertEqual(lex.parse_args(text='4Ch ; L'),[u'4Ch'])
        self.assertEqual(lex.parse_args(text='4Dh ; M'),[u'4Dh'])
        self.assertEqual(lex.parse_args(text='4Eh ; N'),[u'4Eh'])
        self.assertEqual(lex.parse_args(text='4Fh ; O'),[u'4Fh'])
        self.assertEqual(lex.parse_args(text='5 dup (0)'),[u'5 dup (0)'])
        self.assertEqual(lex.parse_args(text='5'),[u'5'])
        self.assertEqual(lex.parse_args(text='5*5 dup (0,testEqu*2,2*2,3)'),[u'5*5 dup (0', u'testEqu*2', u'2*2', u'3)'])
        self.assertEqual(lex.parse_args(text='5.5                  ; DATA XREF: test_fops+DD\xe2\x86\x91r'),[u'5.5'])
        self.assertEqual(lex.parse_args(text='50h ; P'),[u'50h'])
        self.assertEqual(lex.parse_args(text='51h ; Q'),[u'51h'])
        self.assertEqual(lex.parse_args(text='52h ; R'),[u'52h'])
        self.assertEqual(lex.parse_args(text='53h ; S'),[u'53h'])
        self.assertEqual(lex.parse_args(text='54h ; T'),[u'54h'])
        self.assertEqual(lex.parse_args(text='55h ; U'),[u'55h'])
        self.assertEqual(lex.parse_args(text='56h ; V'),[u'56h'])
        self.assertEqual(lex.parse_args(text='57h ; W'),[u'57h'])
        self.assertEqual(lex.parse_args(text='58h ; X'),[u'58h'])
        self.assertEqual(lex.parse_args(text='59h ; Y'),[u'59h'])
        self.assertEqual(lex.parse_args(text='5Ah ; Z'),[u'5Ah'])
        self.assertEqual(lex.parse_args(text='5Bh ; ['),[u'5Bh'])
        self.assertEqual(lex.parse_args(text='5Ch ; \\'),[u'5Ch'])
        self.assertEqual(lex.parse_args(text='5Dh ; ]'),[u'5Dh'])
        self.assertEqual(lex.parse_args(text='5Fh ; _'),[u'5Fh'])
        self.assertEqual(lex.parse_args(text='6'),[u'6'])
        self.assertEqual(lex.parse_args(text='6.5                  ; DATA XREF: test_fops+B0\xe2\x86\x91r'),[u'6.5'])
        self.assertEqual(lex.parse_args(text='60h ; `'),[u'60h'])
        self.assertEqual(lex.parse_args(text='61h ; a'),[u'61h'])
        self.assertEqual(lex.parse_args(text='62h ; b'),[u'62h'])
        self.assertEqual(lex.parse_args(text='63h ; c'),[u'63h'])
        self.assertEqual(lex.parse_args(text='64000 dup(0)'),[u'64000 dup(0)'])
        self.assertEqual(lex.parse_args(text='64h ; d'),[u'64h'])
        self.assertEqual(lex.parse_args(text='66h ; f'),[u'66h'])
        self.assertEqual(lex.parse_args(text='67h ; g'),[u'67h'])
        self.assertEqual(lex.parse_args(text='68h ; h'),[u'68h'])
        self.assertEqual(lex.parse_args(text='69h ; i'),[u'69h'])
        self.assertEqual(lex.parse_args(text='6Ah ; j'),[u'6Ah'])
        self.assertEqual(lex.parse_args(text='6Bh ; k'),[u'6Bh'])
        self.assertEqual(lex.parse_args(text='6Ch ; l'),[u'6Ch'])
        self.assertEqual(lex.parse_args(text='6Dh ; m'),[u'6Dh'])
        self.assertEqual(lex.parse_args(text='6Eh ; n'),[u'6Eh'])
        self.assertEqual(lex.parse_args(text='6Fh ; o'),[u'6Fh'])
        self.assertEqual(lex.parse_args(text='7'),[u'7'])
        self.assertEqual(lex.parse_args(text='70h ; p'),[u'70h'])
        self.assertEqual(lex.parse_args(text='71h ; q'),[u'71h'])
        self.assertEqual(lex.parse_args(text='72h ; r'),[u'72h'])
        self.assertEqual(lex.parse_args(text='73h ; s'),[u'73h'])
        self.assertEqual(lex.parse_args(text='74h ; t'),[u'74h'])
        self.assertEqual(lex.parse_args(text='75h ; u'),[u'75h'])
        self.assertEqual(lex.parse_args(text='76h ; v'),[u'76h'])
        self.assertEqual(lex.parse_args(text='78h ; x'),[u'78h'])
        self.assertEqual(lex.parse_args(text='79h ; y'),[u'79h'])
        self.assertEqual(lex.parse_args(text='7Ah ; z'),[u'7Ah'])
        self.assertEqual(lex.parse_args(text='7Bh ; {'),[u'7Bh'])
        self.assertEqual(lex.parse_args(text='7Ch ; |'),[u'7Ch'])
        self.assertEqual(lex.parse_args(text='7Dh ; }'),[u'7Dh'])
        self.assertEqual(lex.parse_args(text='7Eh ; ~'),[u'7Eh'])
        self.assertEqual(lex.parse_args(text='7Fh ; \x7f'),[u'7Fh'])
        self.assertEqual(lex.parse_args(text='8'),[u'8'])
        self.assertEqual(lex.parse_args(text='80h ; \xd0\x82'),[u'80h'])
        self.assertEqual(lex.parse_args(text='82h ; \xe2\x80\x9a'),[u'82h'])
        self.assertEqual(lex.parse_args(text='83h ; \xd1\x93'),[u'83h'])
        self.assertEqual(lex.parse_args(text='84h ; \xe2\x80\x9e'),[u'84h'])
        self.assertEqual(lex.parse_args(text='85h ; \xe2\x80\xa6'),[u'85h'])
        self.assertEqual(lex.parse_args(text='86h ; \xe2\x80\xa0'),[u'86h'])
        self.assertEqual(lex.parse_args(text='87h ; \xe2\x80\xa1'),[u'87h'])
        self.assertEqual(lex.parse_args(text='88h ; \xe2\x82\xac'),[u'88h'])
        self.assertEqual(lex.parse_args(text='8Ah ; \xd0\x89'),[u'8Ah'])
        self.assertEqual(lex.parse_args(text='8Ch ; \xd0\x8a'),[u'8Ch'])
        self.assertEqual(lex.parse_args(text='8Dh ; \xd0\x8c'),[u'8Dh'])
        self.assertEqual(lex.parse_args(text='8Eh ; \xd0\x8b'),[u'8Eh'])
        self.assertEqual(lex.parse_args(text='8Fh ; \xd0\x8f'),[u'8Fh'])
        self.assertEqual(lex.parse_args(text='9'),[u'9'])
        self.assertEqual(lex.parse_args(text='9,8,7,1'),[u'9', u'8', u'7', u'1'])
        self.assertEqual(lex.parse_args(text='90h ; \xd1\x92'),[u'90h'])
        self.assertEqual(lex.parse_args(text='91h ; \xe2\x80\x98'),[u'91h'])
        self.assertEqual(lex.parse_args(text='94h ; \xe2\x80\x9d'),[u'94h'])
        self.assertEqual(lex.parse_args(text='95h ; \xe2\x80\xa2'),[u'95h'])
        self.assertEqual(lex.parse_args(text='96h ; \xe2\x80\x93'),[u'96h'])
        self.assertEqual(lex.parse_args(text='97h ; \xe2\x80\x94'),[u'97h'])
        self.assertEqual(lex.parse_args(text='99h ; \xe2\x84\xa2'),[u'99h'])
        self.assertEqual(lex.parse_args(text='9ABCDEFh'),[u'9ABCDEFh'])
        self.assertEqual(lex.parse_args(text='9Ah ; \xd1\x99'),[u'9Ah'])
        self.assertEqual(lex.parse_args(text='9Ch ; \xd1\x9a'),[u'9Ch'])
        self.assertEqual(lex.parse_args(text='9Dh ; \xd1\x9c'),[u'9Dh'])
        self.assertEqual(lex.parse_args(text='9Eh ; \xd1\x9b'),[u'9Eh'])
        self.assertEqual(lex.parse_args(text='9Fh ; \xd1\x9f'),[u'9Fh'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: __dllMain+15\xe2\x86\x91r'),[u'?'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: __dllMain+3\xe2\x86\x91r'),[u'?'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: __dllMain+C\xe2\x86\x91r'),[u'?'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: _cygwin_crt0_common@8+60\xe2\x86\x91o'),[u'?'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: _cygwin_crt0_common@8+89\xe2\x86\x91o'),[u'?'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: _cygwin_dll_entry@12+8B\xe2\x86\x91r'),[u'?'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: sub_401090+39\xe2\x86\x91w'),[u'?'])
        self.assertEqual(lex.parse_args(text='?                    ; DATA XREF: test_string+F\xe2\x86\x91w'),[u'?'])
        self.assertEqual(lex.parse_args(text='?               ; DATA XREF: _cygwin_crt0_common@8:loc_40D11D\xe2\x86\x91r'),[u'?'])
        self.assertEqual(lex.parse_args(text='? ;               ; DATA XREF: _cygwin_crt0_common@8+1AA\xe2\x86\x91o'),[u'?'])
        self.assertEqual(lex.parse_args(text='? ;               ; DATA XREF: sub_401090+69\xe2\x86\x91o'),[u'?'])
        self.assertEqual(lex.parse_args(text='? ;'),[u'?'])
        self.assertEqual(lex.parse_args(text='@@saaccvaaaax'),[u'@@saaccvaaaax'])
        self.assertEqual(lex.parse_args(text='@VBL1 ;on attends le retrace'),[u'@VBL1'])
        self.assertEqual(lex.parse_args(text='@VBL12 ;on attends le retrace'),[u'@VBL12'])
        self.assertEqual(lex.parse_args(text='@VBL2 ;on attends la fin du retrace'),[u'@VBL2'])
        self.assertEqual(lex.parse_args(text='@VBL22 ;on attends la fin du retrace'),[u'@VBL22'])
        self.assertEqual(lex.parse_args(text='@df@@@@'),[u'@df@@@@'])
        self.assertEqual(lex.parse_args(text='@df@@@@1'),[u'@df@@@@1'])
        self.assertEqual(lex.parse_args(text='@df@@@@2'),[u'@df@@@@2'])
        self.assertEqual(lex.parse_args(text='@df@@@@3'),[u'@df@@@@3'])
        self.assertEqual(lex.parse_args(text='@df@@@@4'),[u'@df@@@@4'])
        self.assertEqual(lex.parse_args(text='@df@@@@5'),[u'@df@@@@5'])
        self.assertEqual(lex.parse_args(text='@df@@@@6'),[u'@df@@@@6'])
        self.assertEqual(lex.parse_args(text='@df@@@@7'),[u'@df@@@@7'])
        self.assertEqual(lex.parse_args(text='@df@@@@8'),[u'@df@@@@8'])
        self.assertEqual(lex.parse_args(text='@df@@@@9'),[u'@df@@@@9'])
        self.assertEqual(lex.parse_args(text='AL,8'),[u'AL', u'8'])
        self.assertEqual(lex.parse_args(text='DX,3DAh'),[u'DX', u'3DAh'])
        self.assertEqual(lex.parse_args(text='OK'),[u'OK'])
        self.assertEqual(lex.parse_args(text='P1 ; jump if cl is not equal 0 (zeroflag is not set)'),[u'P1'])
        self.assertEqual(lex.parse_args(text='[a],5'),[u'[a]', u'5'])
        self.assertEqual(lex.parse_args(text='[cs:table+ax]'),[u'[cs:table+ax]'])
        self.assertEqual(lex.parse_args(text='[ebp+ecx_0], ecx_0_0'),[u'[ebp+ecx_0]', u'ecx_0_0'])
        self.assertEqual(lex.parse_args(text='[ebp+edx_0], edx'),[u'[ebp+edx_0]', u'edx'])
        self.assertEqual(lex.parse_args(text='[ebp+i+table], dl'),[u'[ebp+i+table]', u'dl'])
        self.assertEqual(lex.parse_args(text='[ebp+s0], esi'),[u'[ebp+s0]', u'esi'])
        self.assertEqual(lex.parse_args(text='[ebp+s1], 0'),[u'[ebp+s1]', u'0'])
        self.assertEqual(lex.parse_args(text='[ebp+s1], 1'),[u'[ebp+s1]', u'1'])
        self.assertEqual(lex.parse_args(text='[ebp+s2], ebx'),[u'[ebp+s2]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[ebp+var_1C], edx'),[u'[ebp+var_1C]', u'edx'])
        self.assertEqual(lex.parse_args(text='[ebp+var_20]'),[u'[ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='[ebp+var_20], ecx'),[u'[ebp+var_20]', u'ecx'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], ebx'),[u'[esp+0Ch]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], ecx'),[u'[esp+0Ch]', u'ecx'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], edi'),[u'[esp+0Ch]', u'edi'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], edi_0'),[u'[esp+0Ch]', u'edi_0'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], edx'),[u'[esp+0Ch]', u'edx'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], op0'),[u'[esp+0Ch]', u'op0'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], op1'),[u'[esp+0Ch]', u'op1'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], r'),[u'[esp+0Ch]', u'r'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], res'),[u'[esp+0Ch]', u'res'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], resz'),[u'[esp+0Ch]', u'resz'])
        self.assertEqual(lex.parse_args(text='[esp+0Ch], s1_0'),[u'[esp+0Ch]', u's1_0'])
        self.assertEqual(lex.parse_args(text='[esp+10h], eax'),[u'[esp+10h]', u'eax'])
        self.assertEqual(lex.parse_args(text='[esp+10h], eax_0'),[u'[esp+10h]', u'eax_0'])
        self.assertEqual(lex.parse_args(text='[esp+10h], ebx'),[u'[esp+10h]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp+10h], ecx'),[u'[esp+10h]', u'ecx'])
        self.assertEqual(lex.parse_args(text='[esp+10h], op1'),[u'[esp+10h]', u'op1'])
        self.assertEqual(lex.parse_args(text='[esp+10h], res'),[u'[esp+10h]', u'res'])
        self.assertEqual(lex.parse_args(text='[esp+10h], resz'),[u'[esp+10h]', u'resz'])
        self.assertEqual(lex.parse_args(text='[esp+10h], rh'),[u'[esp+10h]', u'rh'])
        self.assertEqual(lex.parse_args(text='[esp+10h], s1_0'),[u'[esp+10h]', u's1_0'])
        self.assertEqual(lex.parse_args(text='[esp+14h], eax'),[u'[esp+14h]', u'eax'])
        self.assertEqual(lex.parse_args(text='[esp+14h], ebx'),[u'[esp+14h]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp+14h], ecx'),[u'[esp+14h]', u'ecx'])
        self.assertEqual(lex.parse_args(text='[esp+14h], ecx_0'),[u'[esp+14h]', u'ecx_0'])
        self.assertEqual(lex.parse_args(text='[esp+14h], edi'),[u'[esp+14h]', u'edi'])
        self.assertEqual(lex.parse_args(text='[esp+14h], edx'),[u'[esp+14h]', u'edx'])
        self.assertEqual(lex.parse_args(text='[esp+14h], esi'),[u'[esp+14h]', u'esi'])
        self.assertEqual(lex.parse_args(text='[esp+14h], flags'),[u'[esp+14h]', u'flags'])
        self.assertEqual(lex.parse_args(text='[esp+14h], res'),[u'[esp+14h]', u'res'])
        self.assertEqual(lex.parse_args(text='[esp+14h], resh'),[u'[esp+14h]', u'resh'])
        self.assertEqual(lex.parse_args(text='[esp+18h], eax'),[u'[esp+18h]', u'eax'])
        self.assertEqual(lex.parse_args(text='[esp+18h], edi'),[u'[esp+18h]', u'edi'])
        self.assertEqual(lex.parse_args(text='[esp+18h], edx'),[u'[esp+18h]', u'edx'])
        self.assertEqual(lex.parse_args(text='[esp+18h], res'),[u'[esp+18h]', u'res'])
        self.assertEqual(lex.parse_args(text='[esp+1Ch], eax'),[u'[esp+1Ch]', u'eax'])
        self.assertEqual(lex.parse_args(text='[esp+1Ch], ebx'),[u'[esp+1Ch]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp+4], eax_0'),[u'[esp+4]', u'eax_0'])
        self.assertEqual(lex.parse_args(text='[esp+4], ebx ; s0'),[u'[esp+4]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp+4], edi ; op0'),[u'[esp+4]', u'edi'])
        self.assertEqual(lex.parse_args(text='[esp+4], esi ; s0'),[u'[esp+4]', u'esi'])
        self.assertEqual(lex.parse_args(text='[esp+4], esi ; s1'),[u'[esp+4]', u'esi'])
        self.assertEqual(lex.parse_args(text='[esp+4], i ; op0'),[u'[esp+4]', u'i'])
        self.assertEqual(lex.parse_args(text='[esp+4], res'),[u'[esp+4]', u'res'])
        self.assertEqual(lex.parse_args(text='[esp+8], eax'),[u'[esp+8]', u'eax'])
        self.assertEqual(lex.parse_args(text='[esp+8], ebx ; op1'),[u'[esp+8]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp+8], ebx'),[u'[esp+8]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp+8], ecx'),[u'[esp+8]', u'ecx'])
        self.assertEqual(lex.parse_args(text='[esp+8], ecx_0_0'),[u'[esp+8]', u'ecx_0_0'])
        self.assertEqual(lex.parse_args(text='[esp+8], edi ; op1'),[u'[esp+8]', u'edi'])
        self.assertEqual(lex.parse_args(text='[esp+8], edi ; s1'),[u'[esp+8]', u'edi'])
        self.assertEqual(lex.parse_args(text='[esp+8], edx_0_0'),[u'[esp+8]', u'edx_0_0'])
        self.assertEqual(lex.parse_args(text='[esp+8], esi ; op1'),[u'[esp+8]', u'esi'])
        self.assertEqual(lex.parse_args(text='[esp+8], esi ; s1'),[u'[esp+8]', u'esi'])
        self.assertEqual(lex.parse_args(text='[esp+8], esi'),[u'[esp+8]', u'esi'])
        self.assertEqual(lex.parse_args(text='[esp+8], esi_0'),[u'[esp+8]', u'esi_0'])
        self.assertEqual(lex.parse_args(text='[esp+8], i ; s1'),[u'[esp+8]', u'i'])
        self.assertEqual(lex.parse_args(text='[esp+8], i'),[u'[esp+8]', u'i'])
        self.assertEqual(lex.parse_args(text='[esp+8], op0'),[u'[esp+8]', u'op0'])
        self.assertEqual(lex.parse_args(text='[esp+8], res'),[u'[esp+8]', u'res'])
        self.assertEqual(lex.parse_args(text='[esp+8], resh'),[u'[esp+8]', u'resh'])
        self.assertEqual(lex.parse_args(text='[esp+8], s0_0'),[u'[esp+8]', u's0_0'])
        self.assertEqual(lex.parse_args(text='[esp], ebx ; s0'),[u'[esp]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp], ebx ; s2'),[u'[esp]', u'ebx'])
        self.assertEqual(lex.parse_args(text='[esp], edi ; s2'),[u'[esp]', u'edi'])
        self.assertEqual(lex.parse_args(text='[load_handle],eax'),[u'[load_handle]', u'eax'])
        self.assertEqual(lex.parse_args(text='[var+3],5'),[u'[var+3]', u'5'])
        self.assertEqual(lex.parse_args(text='[var+4],0'),[u'[var+4]', u'0'])
        self.assertEqual(lex.parse_args(text='[var-1],0'),[u'[var-1]', u'0'])
        self.assertEqual(lex.parse_args(text='[var0+5],0'),[u'[var0+5]', u'0'])
        self.assertEqual(lex.parse_args(text='[var1+1],5'),[u'[var1+1]', u'5'])
        self.assertEqual(lex.parse_args(text='[var1]'),[u'[var1]'])
        self.assertEqual(lex.parse_args(text='[var1],111'),[u'[var1]', u'111'])
        self.assertEqual(lex.parse_args(text='[var1],2'),[u'[var1]', u'2'])
        self.assertEqual(lex.parse_args(text='[var1],3'),[u'[var1]', u'3'])
        self.assertEqual(lex.parse_args(text='[var2+2],6'),[u'[var2+2]', u'6'])
        self.assertEqual(lex.parse_args(text='[var2-1],5'),[u'[var2-1]', u'5'])
        self.assertEqual(lex.parse_args(text='[var2]'),[u'[var2]'])
        self.assertEqual(lex.parse_args(text='[var2],0'),[u'[var2]', u'0'])
        self.assertEqual(lex.parse_args(text='[var2],1'),[u'[var2]', u'1'])
        self.assertEqual(lex.parse_args(text='[var2],13'),[u'[var2]', u'13'])
        self.assertEqual(lex.parse_args(text='[var2],4'),[u'[var2]', u'4'])
        self.assertEqual(lex.parse_args(text='[var3+3*4],4000000'),[u'[var3+3*4]', u'4000000'])
        self.assertEqual(lex.parse_args(text='[var3+ebp],4000000'),[u'[var3+ebp]', u'4000000'])
        self.assertEqual(lex.parse_args(text='[var3]'),[u'[var3]'])
        self.assertEqual(lex.parse_args(text='[var3],11'),[u'[var3]', u'11'])
        self.assertEqual(lex.parse_args(text='[var3],35'),[u'[var3]', u'35'])
        self.assertEqual(lex.parse_args(text='[var3],37'),[u'[var3]', u'37'])
        self.assertEqual(lex.parse_args(text='[var4+t],1'),[u'[var4+t]', u'1'])
        self.assertEqual(lex.parse_args(text='[var4],2'),[u'[var4]', u'2'])
        self.assertEqual(lex.parse_args(text='[var],5'),[u'[var]', u'5'])
        self.assertEqual(lex.parse_args(text='_byte_2461B, 0'),[u'_byte_2461B', u'0'])
        self.assertEqual(lex.parse_args(text='_byte_24665, 1'),[u'_byte_24665', u'1'])
        self.assertEqual(lex.parse_args(text='_dosfread'),[u'_dosfread'])
        self.assertEqual(lex.parse_args(text='_ems_restore_mapctx'),[u'_ems_restore_mapctx'])
        self.assertEqual(lex.parse_args(text='_ems_save_mapctx'),[u'_ems_save_mapctx'])
        self.assertEqual(lex.parse_args(text='_fhandle_module, ax'),[u'_fhandle_module', u'ax'])
        self.assertEqual(lex.parse_args(text='_mod_1021E'),[u'_mod_1021E'])
        self.assertEqual(lex.parse_args(text='_mod_102F5'),[u'_mod_102F5'])
        self.assertEqual(lex.parse_args(text='_mod_channels_number, 4'),[u'_mod_channels_number', u'4'])
        self.assertEqual(lex.parse_args(text='_mod_channels_number, 8'),[u'_mod_channels_number', u'8'])
        self.assertEqual(lex.parse_args(text='_module_type_text, 2E542E4Eh'),[u'_module_type_text', u'2E542E4Eh'])
        self.assertEqual(lex.parse_args(text='_module_type_text, 38544C46h ; FLT8'),[u'_module_type_text', u'38544C46h'])
        self.assertEqual(lex.parse_args(text='_moduleflag_246D0, 11b'),[u'_moduleflag_246D0', u'11b'])
        self.assertEqual(lex.parse_args(text='_savesp_245D0, sp'),[u'_savesp_245D0', u'sp'])
        self.assertEqual(lex.parse_args(text='_word_245D2, 0Fh'),[u'_word_245D2', u'0Fh'])
        self.assertEqual(lex.parse_args(text='_word_245D2, 1Fh'),[u'_word_245D2', u'1Fh'])
        self.assertEqual(lex.parse_args(text='_word_24662, 0'),[u'_word_24662', u'0'])
        self.assertEqual(lex.parse_args(text='a,1'),[u'a', u'1'])
        self.assertEqual(lex.parse_args(text='a,3'),[u'a', u'3'])
        self.assertEqual(lex.parse_args(text='a,5'),[u'a', u'5'])
        self.assertEqual(lex.parse_args(text='a,ah'),[u'a', u'ah'])
        self.assertEqual(lex.parse_args(text='a,al'),[u'a', u'al'])
        self.assertEqual(lex.parse_args(text='affpal'),[u'affpal'])
        self.assertEqual(lex.parse_args(text='ah, 0F7h'),[u'ah', u'0F7h'])
        self.assertEqual(lex.parse_args(text='ah, 3Eh'),[u'ah', u'3Eh'])
        self.assertEqual(lex.parse_args(text='ah,-1'),[u'ah', u'-1'])
        self.assertEqual(lex.parse_args(text='ah,03dh'),[u'ah', u'03dh'])
        self.assertEqual(lex.parse_args(text='ah,03eh'),[u'ah', u'03eh'])
        self.assertEqual(lex.parse_args(text='ah,03fh'),[u'ah', u'03fh'])
        self.assertEqual(lex.parse_args(text='ah,042h'),[u'ah', u'042h'])
        self.assertEqual(lex.parse_args(text='ah,0ffh'),[u'ah', u'0ffh'])
        self.assertEqual(lex.parse_args(text='ah,48h'),[u'ah', u'48h'])
        self.assertEqual(lex.parse_args(text='ah,49h'),[u'ah', u'49h'])
        self.assertEqual(lex.parse_args(text='ah,4Ah'),[u'ah', u'4Ah'])
        self.assertEqual(lex.parse_args(text='ah,4ch ; AH=4Ch - Exit To DOS'),[u'ah', u'4ch'])
        self.assertEqual(lex.parse_args(text='ah,7'),[u'ah', u'7'])
        self.assertEqual(lex.parse_args(text='ah,9 ; AH=09h - Print DOS Message'),[u'ah', u'9'])
        self.assertEqual(lex.parse_args(text='aincecx'),[u'aincecx'])
        self.assertEqual(lex.parse_args(text='aincedx'),[u'aincedx'])
        self.assertEqual(lex.parse_args(text='al'),[u'al'])
        self.assertEqual(lex.parse_args(text='al, byte ptr [ebp+var_20]'),[u'al', u'byte ptr [ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='al, dl'),[u'al', u'dl'])
        self.assertEqual(lex.parse_args(text='al,-5'),[u'al', u'-5'])
        self.assertEqual(lex.parse_args(text='al,0'),[u'al', u'0'])
        self.assertEqual(lex.parse_args(text='al,00h ;debut du fichier'),[u'al', u'00h'])
        self.assertEqual(lex.parse_args(text='al,00h ;ouverture du fichier pour lecture.'),[u'al', u'00h'])
        self.assertEqual(lex.parse_args(text='al,010B'),[u'al', u'010B'])
        self.assertEqual(lex.parse_args(text='al,0B'),[u'al', u'0B'])
        self.assertEqual(lex.parse_args(text='al,1'),[u'al', u'1'])
        self.assertEqual(lex.parse_args(text='al,2'),[u'al', u'2'])
        self.assertEqual(lex.parse_args(text='al,7'),[u'al', u'7'])
        self.assertEqual(lex.parse_args(text='al,[a]'),[u'al', u'[a]'])
        self.assertEqual(lex.parse_args(text='al,ah'),[u'al', u'ah'])
        self.assertEqual(lex.parse_args(text='al,al'),[u'al', u'al'])
        self.assertEqual(lex.parse_args(text='al,bl'),[u'al', u'bl'])
        self.assertEqual(lex.parse_args(text='ax'),[u'ax'])
        self.assertEqual(lex.parse_args(text='ax, 0FFFEh'),[u'ax', u'0FFFEh'])
        self.assertEqual(lex.parse_args(text='ax, 0FFFFh'),[u'ax', u'0FFFFh'])
        self.assertEqual(lex.parse_args(text='ax, 3D00h'),[u'ax', u'3D00h'])
        self.assertEqual(lex.parse_args(text='ax, 4200h'),[u'ax', u'4200h'])
        self.assertEqual(lex.parse_args(text='ax, [bx]'),[u'ax', u'[bx]'])
        self.assertEqual(lex.parse_args(text='ax, _byte_2461B'),[u'ax', u'_byte_2461B'])
        self.assertEqual(lex.parse_args(text='ax, _mod_channels_number'),[u'ax', u'_mod_channels_number'])
        self.assertEqual(lex.parse_args(text='ax, ax'),[u'ax', u'ax'])
        self.assertEqual(lex.parse_args(text='ax, bx'),[u'ax', u'bx'])
        self.assertEqual(lex.parse_args(text='ax, cx'),[u'ax', u'cx'])
        self.assertEqual(lex.parse_args(text='ax, cx, 2Dh'),[u'ax', u'cx', u'2Dh'])
        self.assertEqual(lex.parse_args(text='ax, di'),[u'ax', u'di'])
        self.assertEqual(lex.parse_args(text='ax, di, 8000h'),[u'ax', u'di', u'8000h'])
        self.assertEqual(lex.parse_args(text='ax, ds'),[u'ax', u'ds'])
        self.assertEqual(lex.parse_args(text='ax, dx'),[u'ax', u'dx'])
        self.assertEqual(lex.parse_args(text='ax, dx, -2Dh'),[u'ax', u'dx', u'-2Dh'])
        self.assertEqual(lex.parse_args(text='ax, offset _mod_n_t_module ; N.T.'),[u'ax', u'offset _mod_n_t_module'])
        self.assertEqual(lex.parse_args(text='ax, si'),[u'ax', u'si'])
        self.assertEqual(lex.parse_args(text='ax, si, 7FFFh'),[u'ax', u'si', u'7FFFh'])
        self.assertEqual(lex.parse_args(text='ax, word ptr [ebp+var_20]'),[u'ax', u'word ptr [ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='ax,-1'),[u'ax', u'-1'])
        self.assertEqual(lex.parse_args(text='ax,-5'),[u'ax', u'-5'])
        self.assertEqual(lex.parse_args(text='ax,0002h'),[u'ax', u'0002h'])
        self.assertEqual(lex.parse_args(text='ax,0007'),[u'ax', u'0007'])
        self.assertEqual(lex.parse_args(text='ax,01010101010101010b'),[u'ax', u'01010101010101010b'])
        self.assertEqual(lex.parse_args(text='ax,01111111111111111b'),[u'ax', u'01111111111111111b'])
        self.assertEqual(lex.parse_args(text='ax,08h'),[u'ax', u'08h'])
        self.assertEqual(lex.parse_args(text='ax,13h'),[u'ax', u'13h'])
        self.assertEqual(lex.parse_args(text='ax,3h'),[u'ax', u'3h'])
        self.assertEqual(lex.parse_args(text='ax,4'),[u'ax', u'4'])
        self.assertEqual(lex.parse_args(text='ax,501h'),[u'ax', u'501h'])
        self.assertEqual(lex.parse_args(text='ax,6'),[u'ax', u'6'])
        self.assertEqual(lex.parse_args(text='ax,ax'),[u'ax', u'ax'])
        self.assertEqual(lex.parse_args(text='ax,bp'),[u'ax', u'bp'])
        self.assertEqual(lex.parse_args(text='ax,bx'),[u'ax', u'bx'])
        self.assertEqual(lex.parse_args(text='b,256+3'),[u'b', u'256+3'])
        self.assertEqual(lex.parse_args(text='b,ax'),[u'b', u'ax'])
        self.assertEqual(lex.parse_args(text='bh'),[u'bh'])
        self.assertEqual(lex.parse_args(text='bh,01h'),[u'bh', u'01h'])
        self.assertEqual(lex.parse_args(text='bh,02h'),[u'bh', u'02h'])
        self.assertEqual(lex.parse_args(text='bh,0cch'),[u'bh', u'0cch'])
        self.assertEqual(lex.parse_args(text='bl,-1'),[u'bl', u'-1'])
        self.assertEqual(lex.parse_args(text='bl,0'),[u'bl', u'0'])
        self.assertEqual(lex.parse_args(text='bl,001111111B'),[u'bl', u'001111111B'])
        self.assertEqual(lex.parse_args(text='bl,011111111B'),[u'bl', u'011111111B'])
        self.assertEqual(lex.parse_args(text='bl,0Fh ; only low-Nibble'),[u'bl', u'0Fh'])
        self.assertEqual(lex.parse_args(text='bl,0ddh'),[u'bl', u'0ddh'])
        self.assertEqual(lex.parse_args(text='bl,1'),[u'bl', u'1'])
        self.assertEqual(lex.parse_args(text='bl,192'),[u'bl', u'192'])
        self.assertEqual(lex.parse_args(text='bl,193'),[u'bl', u'193'])
        self.assertEqual(lex.parse_args(text='bl,30h ; convert to ASCII'),[u'bl', u'30h'])
        self.assertEqual(lex.parse_args(text='bl,39h ; above 9?'),[u'bl', u'39h'])
        self.assertEqual(lex.parse_args(text='bl,7 ; "A" to "F"'),[u'bl', u'7'])
        self.assertEqual(lex.parse_args(text='bl,[a+1]'),[u'bl', u'[a+1]'])
        self.assertEqual(lex.parse_args(text='bl,al'),[u'bl', u'al'])
        self.assertEqual(lex.parse_args(text='bx cx ; linear address of allocated memory block'),[u'bx cx'])
        self.assertEqual(lex.parse_args(text='bx fs'),[u'bx fs'])
        self.assertEqual(lex.parse_args(text='bx, _fhandle_module'),[u'bx', u'_fhandle_module'])
        self.assertEqual(lex.parse_args(text='bx, cx'),[u'bx', u'cx'])
        self.assertEqual(lex.parse_args(text='bx, offset off_25326'),[u'bx', u'offset off_25326'])
        self.assertEqual(lex.parse_args(text='bx, seg003'),[u'bx', u'seg003'])
        self.assertEqual(lex.parse_args(text='bx, si'),[u'bx', u'si'])
        self.assertEqual(lex.parse_args(text='bx,(1024*10/16)+5'),[u'bx', u'(1024*10/16)+5'])
        self.assertEqual(lex.parse_args(text='bx,(1024*10/16)-1'),[u'bx', u'(1024*10/16)-1'])
        self.assertEqual(lex.parse_args(text='bx,-1'),[u'bx', u'-1'])
        self.assertEqual(lex.parse_args(text='bx,1'),[u'bx', u'1'])
        self.assertEqual(lex.parse_args(text='bx,10'),[u'bx', u'10'])
        self.assertEqual(lex.parse_args(text='bx,1024*10/16'),[u'bx', u'1024*10/16'])
        self.assertEqual(lex.parse_args(text='bx,4+5*256'),[u'bx', u'4+5*256'])
        self.assertEqual(lex.parse_args(text='bx,5'),[u'bx', u'5'])
        self.assertEqual(lex.parse_args(text='bx,6*256+5'),[u'bx', u'6*256+5'])
        self.assertEqual(lex.parse_args(text='bx,[h2]'),[u'bx', u'[h2]'])
        self.assertEqual(lex.parse_args(text='bx,ax'),[u'bx', u'ax'])
        self.assertEqual(lex.parse_args(text='bx,bl'),[u'bx', u'bl'])
        self.assertEqual(lex.parse_args(text='bx,byte ptr [h2]'),[u'bx', u'byte ptr [h2]'])
        self.assertEqual(lex.parse_args(text='bx,byte ptr [h]'),[u'bx', u'byte ptr [h]'])
        self.assertEqual(lex.parse_args(text='bx,fs'),[u'bx', u'fs'])
        self.assertEqual(lex.parse_args(text='bx,word ptr [d]'),[u'bx', u'word ptr [d]'])
        self.assertEqual(lex.parse_args(text='bx,word ptr [e]'),[u'bx', u'word ptr [e]'])
        self.assertEqual(lex.parse_args(text='byte ptr -108h'),[u'byte ptr -108h'])
        self.assertEqual(lex.parse_args(text='byte ptr [a],5'),[u'byte ptr [a]', u'5'])
        self.assertEqual(lex.parse_args(text='byte ptr [ebp+var_20], al'),[u'byte ptr [ebp+var_20]', u'al'])
        self.assertEqual(lex.parse_args(text='byte ptr [ebp+var_20], bl'),[u'byte ptr [ebp+var_20]', u'bl'])
        self.assertEqual(lex.parse_args(text='byte ptr [ebp+var_20], dl'),[u'byte ptr [ebp+var_20]', u'dl'])
        self.assertEqual(lex.parse_args(text='byte ptr [edi+1]'),[u'byte ptr [edi+1]'])
        self.assertEqual(lex.parse_args(text='byte ptr [edi+1],6'),[u'byte ptr [edi+1]', u'6'])
        self.assertEqual(lex.parse_args(text='byte ptr [edi+7]'),[u'byte ptr [edi+7]'])
        self.assertEqual(lex.parse_args(text='byte ptr [edi+7],132'),[u'byte ptr [edi+7]', u'132'])
        self.assertEqual(lex.parse_args(text='byte ptr [esi],-2'),[u'byte ptr [esi]', u'-2'])
        self.assertEqual(lex.parse_args(text='byte ptr [esi],1'),[u'byte ptr [esi]', u'1'])
        self.assertEqual(lex.parse_args(text='byte ptr [esi],4'),[u'byte ptr [esi]', u'4'])
        self.assertEqual(lex.parse_args(text='byte ptr [testOVerlap+1],1'),[u'byte ptr [testOVerlap+1]', u'1'])
        self.assertEqual(lex.parse_args(text='byte ptr [var1+1],5'),[u'byte ptr [var1+1]', u'5'])
        self.assertEqual(lex.parse_args(text='byte ptr [var1+2],5'),[u'byte ptr [var1+2]', u'5'])
        self.assertEqual(lex.parse_args(text='byte ptr dl,[edi]'),[u'byte ptr dl', u'[edi]'])
        self.assertEqual(lex.parse_args(text='byte ptr ds:[0],55'),[u'byte ptr ds:[0]', u'55'])
        self.assertEqual(lex.parse_args(text='byte ptr es:[0]'),[u'byte ptr es:[0]'])
        self.assertEqual(lex.parse_args(text='byte ptr es:[0],55'),[u'byte ptr es:[0]', u'55'])
        self.assertEqual(lex.parse_args(text='byte ptr es:[0],56'),[u'byte ptr es:[0]', u'56'])
        self.assertEqual(lex.parse_args(text='byte ptr es:[0],57'),[u'byte ptr es:[0]', u'57'])
        self.assertEqual(lex.parse_args(text='c,256+3+65536'),[u'c', u'256+3+65536'])
        self.assertEqual(lex.parse_args(text='c,eax'),[u'c', u'eax'])
        self.assertEqual(lex.parse_args(text='ch,001111111B'),[u'ch', u'001111111B'])
        self.assertEqual(lex.parse_args(text='ch,011111100B'),[u'ch', u'011111100B'])
        self.assertEqual(lex.parse_args(text='ch,011111111B'),[u'ch', u'011111111B'])
        self.assertEqual(lex.parse_args(text='ch,1'),[u'ch', u'1'])
        self.assertEqual(lex.parse_args(text='ch,2'),[u'ch', u'2'])
        self.assertEqual(lex.parse_args(text='ch,bh'),[u'ch', u'bh'])
        self.assertEqual(lex.parse_args(text='cl ; decrease loop counter'),[u'cl'])
        self.assertEqual(lex.parse_args(text='cl'),[u'cl'])
        self.assertEqual(lex.parse_args(text='cl, dl'),[u'cl', u'dl'])
        self.assertEqual(lex.parse_args(text='cl,0f0h'),[u'cl', u'0f0h'])
        self.assertEqual(lex.parse_args(text='cl,2'),[u'cl', u'2'])
        self.assertEqual(lex.parse_args(text='cl,8 ; number of ASCII'),[u'cl', u'8'])
        self.assertEqual(lex.parse_args(text='cs'),[u'cs'])
        self.assertEqual(lex.parse_args(text='cx'),[u'cx'])
        self.assertEqual(lex.parse_args(text='cx, 1084'),[u'cx', u'1084'])
        self.assertEqual(lex.parse_args(text='cx, byte ptr [bx+4]'),[u'cx', u'byte ptr [bx+4]'])
        self.assertEqual(lex.parse_args(text='cx, cx'),[u'cx', u'cx'])
        self.assertEqual(lex.parse_args(text='cx, dx'),[u'cx', u'dx'])
        self.assertEqual(lex.parse_args(text='cx,-1'),[u'cx', u'-1'])
        self.assertEqual(lex.parse_args(text='cx,-5'),[u'cx', u'-5'])
        self.assertEqual(lex.parse_args(text='cx,0'),[u'cx', u'0'])
        self.assertEqual(lex.parse_args(text='cx,1'),[u'cx', u'1'])
        self.assertEqual(lex.parse_args(text='cx,256*3'),[u'cx', u'256*3'])
        self.assertEqual(lex.parse_args(text='cx,ax'),[u'cx', u'ax'])
        self.assertEqual(lex.parse_args(text='cx,cx'),[u'cx', u'cx'])
        self.assertEqual(lex.parse_args(text='dffd'),[u'dffd'])
        self.assertEqual(lex.parse_args(text='di, [bx+2]'),[u'di', u'[bx+2]'])
        self.assertEqual(lex.parse_args(text='di, offset _chrin'),[u'di', u'offset _chrin'])
        self.assertEqual(lex.parse_args(text='dl'),[u'dl'])
        self.assertEqual(lex.parse_args(text='dl, 23'),[u'dl', u'23'])
        self.assertEqual(lex.parse_args(text='dl, al'),[u'dl', u'al'])
        self.assertEqual(lex.parse_args(text='dl, cl'),[u'dl', u'cl'])
        self.assertEqual(lex.parse_args(text='dl,2'),[u'dl', u'2'])
        self.assertEqual(lex.parse_args(text='dl,4'),[u'dl', u'4'])
        self.assertEqual(lex.parse_args(text='dl,5'),[u'dl', u'5'])
        self.assertEqual(lex.parse_args(text='dl,[edi+1]'),[u'dl', u'[edi+1]'])
        self.assertEqual(lex.parse_args(text='dl,[edi]'),[u'dl', u'[edi]'])
        self.assertEqual(lex.parse_args(text='dl,var1'),[u'dl', u'var1'])
        self.assertEqual(lex.parse_args(text='ds es'),[u'ds es'])
        self.assertEqual(lex.parse_args(text='ds'),[u'ds'])
        self.assertEqual(lex.parse_args(text='ds, _data'),[u'ds', u'_data'])
        self.assertEqual(lex.parse_args(text='ds, bx'),[u'ds', u'bx'])
        self.assertEqual(lex.parse_args(text='ds:[edi],cl'),[u'ds:[edi]', u'cl'])
        self.assertEqual(lex.parse_args(text='ds:byte_41411F[eax], dl'),[u'ds:byte_41411F[eax]', u'dl'])
        self.assertEqual(lex.parse_args(text='dword ptr -1Ch'),[u'dword ptr -1Ch'])
        self.assertEqual(lex.parse_args(text='dword ptr -20h'),[u'dword ptr -20h'])
        self.assertEqual(lex.parse_args(text='dword ptr -28h'),[u'dword ptr -28h'])
        self.assertEqual(lex.parse_args(text='dword ptr -2Ch'),[u'dword ptr -2Ch'])
        self.assertEqual(lex.parse_args(text='dword ptr -4'),[u'dword ptr -4'])
        self.assertEqual(lex.parse_args(text='dword ptr 0Ch'),[u'dword ptr 0Ch'])
        self.assertEqual(lex.parse_args(text='dword ptr 10h'),[u'dword ptr 10h'])
        self.assertEqual(lex.parse_args(text='dword ptr 14h'),[u'dword ptr 14h'])
        self.assertEqual(lex.parse_args(text='dword ptr 8'),[u'dword ptr 8'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebp+var_20+4], 0FBCA7h'),[u'dword ptr [ebp+var_20+4]', u'0FBCA7h'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebp+var_20+4], 12345h'),[u'dword ptr [ebp+var_20+4]', u'12345h'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebp+var_20], 0FBCA7654h'),[u'dword ptr [ebp+var_20]', u'0FBCA7654h'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebp+var_20], 65423456h'),[u'dword ptr [ebp+var_20]', u'65423456h'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebp+var_20], 6789ABCDh'),[u'dword ptr [ebp+var_20]', u'6789ABCDh'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebp+var_20], eax'),[u'dword ptr [ebp+var_20]', u'eax'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebp+var_20], edx'),[u'dword ptr [ebp+var_20]', u'edx'])
        self.assertEqual(lex.parse_args(text='dword ptr [ebx-4]'),[u'dword ptr [ebx-4]'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+0Ch], 0 ; iflags'),[u'dword ptr [esp+0Ch]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+0Ch], 0'),[u'dword ptr [esp+0Ch]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+0Ch], 1 ; iflags'),[u'dword ptr [esp+0Ch]', u'1'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+0Ch], 1000h'),[u'dword ptr [esp+0Ch]', u'1000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+0Ch], 1234h'),[u'dword ptr [esp+0Ch]', u'1234h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+0Ch], 17h'),[u'dword ptr [esp+0Ch]', u'17h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+0Ch], 80000000h'),[u'dword ptr [esp+0Ch]', u'80000000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+10h], 0'),[u'dword ptr [esp+10h]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+10h], 1'),[u'dword ptr [esp+10h]', u'1'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+10h], 10h'),[u'dword ptr [esp+10h]', u'10h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+10h], 11h'),[u'dword ptr [esp+10h]', u'11h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+14h], 0'),[u'dword ptr [esp+14h]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+1Ch], 0'),[u'dword ptr [esp+1Ch]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0 ; op0'),[u'dword ptr [esp+4]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0 ; s1'),[u'dword ptr [esp+4]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0'),[u'dword ptr [esp+4]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFC70F9h ; op0'),[u'dword ptr [esp+4]', u'0FFFC70F9h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFE0080h ; s0'),[u'dword ptr [esp+4]', u'0FFFE0080h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFE0080h ; s1'),[u'dword ptr [esp+4]', u'0FFFE0080h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFEDCBFh ; s1'),[u'dword ptr [esp+4]', u'0FFFEDCBFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFA549h ; op0'),[u'dword ptr [esp+4]', u'0FFFFA549h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFD3h ; op1'),[u'dword ptr [esp+4]', u'0FFFFFFD3h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFBh ; op1'),[u'dword ptr [esp+4]', u'0FFFFFFFBh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFCh ; op1'),[u'dword ptr [esp+4]', u'0FFFFFFFCh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFDh ; op1'),[u'dword ptr [esp+4]', u'0FFFFFFFDh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFEh ; op0'),[u'dword ptr [esp+4]', u'0FFFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFEh ; s1'),[u'dword ptr [esp+4]', u'0FFFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFFh ; op0'),[u'dword ptr [esp+4]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFFh ; op1'),[u'dword ptr [esp+4]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFFh ; s0'),[u'dword ptr [esp+4]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 0FFFFFFFFh ; s1'),[u'dword ptr [esp+4]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 1 ; op0'),[u'dword ptr [esp+4]', u'1'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 1 ; s1'),[u'dword ptr [esp+4]', u'1'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 10000h ; op0'),[u'dword ptr [esp+4]', u'10000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 10000h ; op1'),[u'dword ptr [esp+4]', u'10000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 10000h ; s1'),[u'dword ptr [esp+4]', u'10000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 100h ; op0'),[u'dword ptr [esp+4]', u'100h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 100h ; op1'),[u'dword ptr [esp+4]', u'100h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 10h ; op1'),[u'dword ptr [esp+4]', u'10h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 1234001Dh ; op0'),[u'dword ptr [esp+4]', u'1234001Dh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 12341h ; s1'),[u'dword ptr [esp+4]', u'12341h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 12345678h ; op0'),[u'dword ptr [esp+4]', u'12345678h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 12345678h ; s0'),[u'dword ptr [esp+4]', u'12345678h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 12348000h ; op0'),[u'dword ptr [esp+4]', u'12348000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 127Eh ; op1'),[u'dword ptr [esp+4]', u'127Eh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 17h ; op0'),[u'dword ptr [esp+4]', u'17h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 1FF7Fh ; s1'),[u'dword ptr [esp+4]', u'1FF7Fh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 1FF80h ; s1'),[u'dword ptr [esp+4]', u'1FF80h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 1FF81h ; s1'),[u'dword ptr [esp+4]', u'1FF81h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 1FFFFh ; s1'),[u'dword ptr [esp+4]', u'1FFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 2 ; op0'),[u'dword ptr [esp+4]', u'2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 2 ; s1'),[u'dword ptr [esp+4]', u'2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 20000h ; s1'),[u'dword ptr [esp+4]', u'20000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 2Dh ; op1'),[u'dword ptr [esp+4]', u'2Dh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 3 ; op0'),[u'dword ptr [esp+4]', u'3'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 3 ; op1'),[u'dword ptr [esp+4]', u'3'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 4 ; op1'),[u'dword ptr [esp+4]', u'4'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 7FFFFFFFh ; op0'),[u'dword ptr [esp+4]', u'7FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 80000000h ; op0'),[u'dword ptr [esp+4]', u'80000000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 80000000h ; op1'),[u'dword ptr [esp+4]', u'80000000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 80000001h ; op0'),[u'dword ptr [esp+4]', u'80000001h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 80008688h ; s0'),[u'dword ptr [esp+4]', u'80008688h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 8000h ; op0'),[u'dword ptr [esp+4]', u'8000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 8000h ; op1'),[u'dword ptr [esp+4]', u'8000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 80h ; op1'),[u'dword ptr [esp+4]', u'80h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 80h ; s1'),[u'dword ptr [esp+4]', u'80h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 812FADAh ; s1'),[u'dword ptr [esp+4]', u'812FADAh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 81h ; s1'),[u'dword ptr [esp+4]', u'81h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], 82345679h ; s0'),[u'dword ptr [esp+4]', u'82345679h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000 ; "0x4000"'),[u'dword ptr [esp+4]', u'offset a0x4000'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000Eax ; "0x4000(%%eax)"'),[u'dword ptr [esp+4]', u'offset a0x4000Eax'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000Ebx ; "0x4000(%%ebx)"'),[u'dword ptr [esp+4]', u'offset a0x4000Ebx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000EbxEdx ; "0x4000(%%ebx, %%edx)"'),[u'dword ptr [esp+4]', u'offset a0x4000EbxEdx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000Ecx ; "0x4000(%%ecx)"'),[u'dword ptr [esp+4]', u'offset a0x4000Ecx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000EcxEcx2 ; "0x4000(%%ecx, %%ecx, 2)"'),[u'dword ptr [esp+4]', u'offset a0x4000EcxEcx2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000Edi ; "0x4000(%%edi)"'),[u'dword ptr [esp+4]', u'offset a0x4000Edi'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000Edx ; "0x4000(%%edx)"'),[u'dword ptr [esp+4]', u'offset a0x4000Edx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000EdxEcx4 ; "0x4000(%%edx, %%ecx, 4)"'),[u'dword ptr [esp+4]', u'offset a0x4000EdxEcx4'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000Esi ; "0x4000(%%esi)"'),[u'dword ptr [esp+4]', u'offset a0x4000Esi'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x4000EsiEcx8 ; "0x4000(%%esi, %%ecx, 8)"'),[u'dword ptr [esp+4]', u'offset a0x4000EsiEcx8'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Eax ; "0x40(%%eax)"'),[u'dword ptr [esp+4]', u'offset a0x40Eax'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Eax2 ; "0x40(,%%eax, 2)"'),[u'dword ptr [esp+4]', u'offset a0x40Eax2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40EaxEcx ; "0x40(%%eax, %%ecx)"'),[u'dword ptr [esp+4]', u'offset a0x40EaxEcx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Ebx ; "0x40(%%ebx)"'),[u'dword ptr [esp+4]', u'offset a0x40Ebx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Ebx4 ; "0x40(,%%ebx, 4)"'),[u'dword ptr [esp+4]', u'offset a0x40Ebx4'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Ecx ; "0x40(%%ecx)"'),[u'dword ptr [esp+4]', u'offset a0x40Ecx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Ecx8 ; "0x40(,%%ecx, 8)"'),[u'dword ptr [esp+4]', u'offset a0x40Ecx8'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Edi ; "0x40(%%edi)"'),[u'dword ptr [esp+4]', u'offset a0x40Edi'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Edx ; "0x40(%%edx)"'),[u'dword ptr [esp+4]', u'offset a0x40Edx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a0x40Esi ; "0x40(%%esi)"'),[u'dword ptr [esp+4]', u'offset a0x40Esi'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a10EcxEcx2 ; "-10(%%ecx, %%ecx, 2)"'),[u'dword ptr [esp+4]', u'offset a10EcxEcx2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a10EdxEcx4 ; "-10(%%edx, %%ecx, 4)"'),[u'dword ptr [esp+4]', u'offset a10EdxEcx4'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset a10EsiEcx8 ; "-10(%%esi, %%ecx, 8)"'),[u'dword ptr [esp+4]', u'offset a10EsiEcx8'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAaa ; "aaa"'),[u'dword ptr [esp+4]', u'offset aAaa'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAad ; "aad"'),[u'dword ptr [esp+4]', u'offset aAad'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAam ; "aam"'),[u'dword ptr [esp+4]', u'offset aAam'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAas ; "aas"'),[u'dword ptr [esp+4]', u'offset aAas'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAdcb ; "adcb"'),[u'dword ptr [esp+4]', u'offset aAdcb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAdcl ; "adcl"'),[u'dword ptr [esp+4]', u'offset aAdcl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAdcw ; "adcw"'),[u'dword ptr [esp+4]', u'offset aAdcw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAddb ; "addb"'),[u'dword ptr [esp+4]', u'offset aAddb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAddl ; "addl"'),[u'dword ptr [esp+4]', u'offset aAddl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAddw ; "addw"'),[u'dword ptr [esp+4]', u'offset aAddw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAndb ; "andb"'),[u'dword ptr [esp+4]', u'offset aAndb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAndl ; "andl"'),[u'dword ptr [esp+4]', u'offset aAndl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aAndw ; "andw"'),[u'dword ptr [esp+4]', u'offset aAndw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBsfl ; "bsfl"'),[u'dword ptr [esp+4]', u'offset aBsfl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBsfw ; "bsfw"'),[u'dword ptr [esp+4]', u'offset aBsfw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBsrl ; "bsrl"'),[u'dword ptr [esp+4]', u'offset aBsrl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBsrw ; "bsrw"'),[u'dword ptr [esp+4]', u'offset aBsrw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBswapl ; "bswapl"'),[u'dword ptr [esp+4]', u'offset aBswapl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtcl ; "btcl"'),[u'dword ptr [esp+4]', u'offset aBtcl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtcw ; "btcw"'),[u'dword ptr [esp+4]', u'offset aBtcw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtl ; "btl"'),[u'dword ptr [esp+4]', u'offset aBtl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtrl ; "btrl"'),[u'dword ptr [esp+4]', u'offset aBtrl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtrw ; "btrw"'),[u'dword ptr [esp+4]', u'offset aBtrw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtsl ; "btsl"'),[u'dword ptr [esp+4]', u'offset aBtsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtsw ; "btsw"'),[u'dword ptr [esp+4]', u'offset aBtsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aBtw ; "btw"'),[u'dword ptr [esp+4]', u'offset aBtw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCbw ; "cbw"'),[u'dword ptr [esp+4]', u'offset aCbw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCdq ; "cdq"'),[u'dword ptr [esp+4]', u'offset aCdq'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpb ; "cmpb"'),[u'dword ptr [esp+4]', u'offset aCmpb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpl ; "cmpl"'),[u'dword ptr [esp+4]', u'offset aCmpl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpsb ; "cmpsb"'),[u'dword ptr [esp+4]', u'offset aCmpsb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpsl ; "cmpsl"'),[u'dword ptr [esp+4]', u'offset aCmpsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpsw ; "cmpsw"'),[u'dword ptr [esp+4]', u'offset aCmpsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpw ; "cmpw"'),[u'dword ptr [esp+4]', u'offset aCmpw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"'),[u'dword ptr [esp+4]', u'offset aCmpxchgb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"'),[u'dword ptr [esp+4]', u'offset aCmpxchgl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"'),[u'dword ptr [esp+4]', u'offset aCmpxchgw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCwd ; "cwd"'),[u'dword ptr [esp+4]', u'offset aCwd'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aCwde ; "cwde"'),[u'dword ptr [esp+4]', u'offset aCwde'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDaa ; "daa"'),[u'dword ptr [esp+4]', u'offset aDaa'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDas ; "das"'),[u'dword ptr [esp+4]', u'offset aDas'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDecb ; "decb"'),[u'dword ptr [esp+4]', u'offset aDecb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDecl ; "decl"'),[u'dword ptr [esp+4]', u'offset aDecl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDecw ; "decw"'),[u'dword ptr [esp+4]', u'offset aDecw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDivb ; "divb"'),[u'dword ptr [esp+4]', u'offset aDivb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDivl ; "divl"'),[u'dword ptr [esp+4]', u'offset aDivl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aDivw ; "divw"'),[u'dword ptr [esp+4]', u'offset aDivw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEax ; "(%%eax)"'),[u'dword ptr [esp+4]', u'offset aEax'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEax2 ; "(,%%eax, 2)"'),[u'dword ptr [esp+4]', u'offset aEax2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEaxEcx ; "(%%eax, %%ecx)"'),[u'dword ptr [esp+4]', u'offset aEaxEcx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEbx ; "(%%ebx)"'),[u'dword ptr [esp+4]', u'offset aEbx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEbx4 ; "(,%%ebx, 4)"'),[u'dword ptr [esp+4]', u'offset aEbx4'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEbxEdx ; "(%%ebx, %%edx)"'),[u'dword ptr [esp+4]', u'offset aEbxEdx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEcx ; "(%%ecx)"'),[u'dword ptr [esp+4]', u'offset aEcx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEcx8 ; "(,%%ecx, 8)"'),[u'dword ptr [esp+4]', u'offset aEcx8'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEcxEcx ; "(%%ecx, %%ecx)"'),[u'dword ptr [esp+4]', u'offset aEcxEcx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEcxEcx2 ; "(%%ecx, %%ecx, 2)"'),[u'dword ptr [esp+4]', u'offset aEcxEcx2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEdi ; "(%%edi)"'),[u'dword ptr [esp+4]', u'offset aEdi'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEdiEcx ; "(%%edi, %%ecx)"'),[u'dword ptr [esp+4]', u'offset aEdiEcx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEdx ; "(%%edx)"'),[u'dword ptr [esp+4]', u'offset aEdx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEdxEcx ; "(%%edx, %%ecx)"'),[u'dword ptr [esp+4]', u'offset aEdxEcx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEdxEcx4 ; "(%%edx, %%ecx, 4)"'),[u'dword ptr [esp+4]', u'offset aEdxEcx4'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEsi ; "(%%esi)"'),[u'dword ptr [esp+4]', u'offset aEsi'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEsiEcx ; "(%%esi, %%ecx)"'),[u'dword ptr [esp+4]', u'offset aEsiEcx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aEsiEcx8 ; "(%%esi, %%ecx, 8)"'),[u'dword ptr [esp+4]', u'offset aEsiEcx8'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aIdivb ; "idivb"'),[u'dword ptr [esp+4]', u'offset aIdivb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aIdivl ; "idivl"'),[u'dword ptr [esp+4]', u'offset aIdivl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aIdivw ; "idivw"'),[u'dword ptr [esp+4]', u'offset aIdivw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aImulb ; "imulb"'),[u'dword ptr [esp+4]', u'offset aImulb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aImull ; "imull"'),[u'dword ptr [esp+4]', u'offset aImull'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aImullIm ; "imull im"'),[u'dword ptr [esp+4]', u'offset aImullIm'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aImulw ; "imulw"'),[u'dword ptr [esp+4]', u'offset aImulw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aImulwIm ; "imulw im"'),[u'dword ptr [esp+4]', u'offset aImulwIm'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aIncb ; "incb"'),[u'dword ptr [esp+4]', u'offset aIncb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aIncl ; "incl"'),[u'dword ptr [esp+4]', u'offset aIncl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aIncw ; "incw"'),[u'dword ptr [esp+4]', u'offset aIncw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJa ; "ja"'),[u'dword ptr [esp+4]', u'offset aJa'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJae ; "jae"'),[u'dword ptr [esp+4]', u'offset aJae'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJb ; "jb"'),[u'dword ptr [esp+4]', u'offset aJb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJbe ; "jbe"'),[u'dword ptr [esp+4]', u'offset aJbe'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJcxz ; "jcxz"'),[u'dword ptr [esp+4]', u'offset aJcxz'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJe ; "je"'),[u'dword ptr [esp+4]', u'offset aJe'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJecxz ; "jecxz"'),[u'dword ptr [esp+4]', u'offset aJecxz'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJg ; "jg"'),[u'dword ptr [esp+4]', u'offset aJg'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJge ; "jge"'),[u'dword ptr [esp+4]', u'offset aJge'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJl ; "jl"'),[u'dword ptr [esp+4]', u'offset aJl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJle ; "jle"'),[u'dword ptr [esp+4]', u'offset aJle'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJne ; "jne"'),[u'dword ptr [esp+4]', u'offset aJne'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJns ; "jns"'),[u'dword ptr [esp+4]', u'offset aJns'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aJs ; "js"'),[u'dword ptr [esp+4]', u'offset aJs'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aLodsb ; "lodsb"'),[u'dword ptr [esp+4]', u'offset aLodsb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aLodsl ; "lodsl"'),[u'dword ptr [esp+4]', u'offset aLodsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aLodsw ; "lodsw"'),[u'dword ptr [esp+4]', u'offset aLodsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aLoopl ; "loopl"'),[u'dword ptr [esp+4]', u'offset aLoopl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aLoopnzl ; "loopnzl"'),[u'dword ptr [esp+4]', u'offset aLoopnzl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aLoopzl ; "loopzl"'),[u'dword ptr [esp+4]', u'offset aLoopzl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aMovsb ; "movsb"'),[u'dword ptr [esp+4]', u'offset aMovsb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aMovsl ; "movsl"'),[u'dword ptr [esp+4]', u'offset aMovsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aMovsw ; "movsw"'),[u'dword ptr [esp+4]', u'offset aMovsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aMulb ; "mulb"'),[u'dword ptr [esp+4]', u'offset aMulb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aMull ; "mull"'),[u'dword ptr [esp+4]', u'offset aMull'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aMulw ; "mulw"'),[u'dword ptr [esp+4]', u'offset aMulw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aNegb ; "negb"'),[u'dword ptr [esp+4]', u'offset aNegb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aNegl ; "negl"'),[u'dword ptr [esp+4]', u'offset aNegl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aNegw ; "negw"'),[u'dword ptr [esp+4]', u'offset aNegw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aNotb ; "notb"'),[u'dword ptr [esp+4]', u'offset aNotb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aNotl ; "notl"'),[u'dword ptr [esp+4]', u'offset aNotl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aNotw ; "notw"'),[u'dword ptr [esp+4]', u'offset aNotw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aOrb ; "orb"'),[u'dword ptr [esp+4]', u'offset aOrb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aOrl ; "orl"'),[u'dword ptr [esp+4]', u'offset aOrl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aOrw ; "orw"'),[u'dword ptr [esp+4]', u'offset aOrw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRclb ; "rclb"'),[u'dword ptr [esp+4]', u'offset aRclb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRcll ; "rcll"'),[u'dword ptr [esp+4]', u'offset aRcll'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRclw ; "rclw"'),[u'dword ptr [esp+4]', u'offset aRclw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRcrb ; "rcrb"'),[u'dword ptr [esp+4]', u'offset aRcrb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRcrl ; "rcrl"'),[u'dword ptr [esp+4]', u'offset aRcrl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRcrw ; "rcrw"'),[u'dword ptr [esp+4]', u'offset aRcrw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepLodsb ; "rep lodsb"'),[u'dword ptr [esp+4]', u'offset aRepLodsb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepLodsl ; "rep lodsl"'),[u'dword ptr [esp+4]', u'offset aRepLodsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepLodsw ; "rep lodsw"'),[u'dword ptr [esp+4]', u'offset aRepLodsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepMovsb ; "rep movsb"'),[u'dword ptr [esp+4]', u'offset aRepMovsb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepMovsl ; "rep movsl"'),[u'dword ptr [esp+4]', u'offset aRepMovsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepMovsw ; "rep movsw"'),[u'dword ptr [esp+4]', u'offset aRepMovsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepStosb ; "rep stosb"'),[u'dword ptr [esp+4]', u'offset aRepStosb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepStosl ; "rep stosl"'),[u'dword ptr [esp+4]', u'offset aRepStosl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepStosw ; "rep stosw"'),[u'dword ptr [esp+4]', u'offset aRepStosw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepnzCmpsb ; "repnz cmpsb"'),[u'dword ptr [esp+4]', u'offset aRepnzCmpsb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepnzCmpsl ; "repnz cmpsl"'),[u'dword ptr [esp+4]', u'offset aRepnzCmpsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepnzCmpsw ; "repnz cmpsw"'),[u'dword ptr [esp+4]', u'offset aRepnzCmpsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepnzScasb ; "repnz scasb"'),[u'dword ptr [esp+4]', u'offset aRepnzScasb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepnzScasl ; "repnz scasl"'),[u'dword ptr [esp+4]', u'offset aRepnzScasl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepnzScasw ; "repnz scasw"'),[u'dword ptr [esp+4]', u'offset aRepnzScasw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepzCmpsb ; "repz cmpsb"'),[u'dword ptr [esp+4]', u'offset aRepzCmpsb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepzCmpsl ; "repz cmpsl"'),[u'dword ptr [esp+4]', u'offset aRepzCmpsl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepzCmpsw ; "repz cmpsw"'),[u'dword ptr [esp+4]', u'offset aRepzCmpsw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepzScasb ; "repz scasb"'),[u'dword ptr [esp+4]', u'offset aRepzScasb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepzScasl ; "repz scasl"'),[u'dword ptr [esp+4]', u'offset aRepzScasl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRepzScasw ; "repz scasw"'),[u'dword ptr [esp+4]', u'offset aRepzScasw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRolb ; "rolb"'),[u'dword ptr [esp+4]', u'offset aRolb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRoll ; "roll"'),[u'dword ptr [esp+4]', u'offset aRoll'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRolw ; "rolw"'),[u'dword ptr [esp+4]', u'offset aRolw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRorb ; "rorb"'),[u'dword ptr [esp+4]', u'offset aRorb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRorl ; "rorl"'),[u'dword ptr [esp+4]', u'offset aRorl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aRorw ; "rorw"'),[u'dword ptr [esp+4]', u'offset aRorw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSarb ; "sarb"'),[u'dword ptr [esp+4]', u'offset aSarb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSarl ; "sarl"'),[u'dword ptr [esp+4]', u'offset aSarl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSarw ; "sarw"'),[u'dword ptr [esp+4]', u'offset aSarw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSbbb ; "sbbb"'),[u'dword ptr [esp+4]', u'offset aSbbb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSbbl ; "sbbl"'),[u'dword ptr [esp+4]', u'offset aSbbl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSbbw ; "sbbw"'),[u'dword ptr [esp+4]', u'offset aSbbw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aScasb ; "scasb"'),[u'dword ptr [esp+4]', u'offset aScasb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aScasl ; "scasl"'),[u'dword ptr [esp+4]', u'offset aScasl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aScasw ; "scasw"'),[u'dword ptr [esp+4]', u'offset aScasw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSetb ; "setb"'),[u'dword ptr [esp+4]', u'offset aSetb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSete ; "sete"'),[u'dword ptr [esp+4]', u'offset aSete'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSetne ; "setne"'),[u'dword ptr [esp+4]', u'offset aSetne'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShlb ; "shlb"'),[u'dword ptr [esp+4]', u'offset aShlb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShldl ; "shldl"'),[u'dword ptr [esp+4]', u'offset aShldl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShldw ; "shldw"'),[u'dword ptr [esp+4]', u'offset aShldw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShll ; "shll"'),[u'dword ptr [esp+4]', u'offset aShll'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShlw ; "shlw"'),[u'dword ptr [esp+4]', u'offset aShlw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShrb ; "shrb"'),[u'dword ptr [esp+4]', u'offset aShrb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShrdl ; "shrdl"'),[u'dword ptr [esp+4]', u'offset aShrdl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShrdw ; "shrdw"'),[u'dword ptr [esp+4]', u'offset aShrdw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShrl ; "shrl"'),[u'dword ptr [esp+4]', u'offset aShrl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aShrw ; "shrw"'),[u'dword ptr [esp+4]', u'offset aShrw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aStosb ; "stosb"'),[u'dword ptr [esp+4]', u'offset aStosb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aStosl ; "stosl"'),[u'dword ptr [esp+4]', u'offset aStosl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aStosw ; "stosw"'),[u'dword ptr [esp+4]', u'offset aStosw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSubb ; "subb"'),[u'dword ptr [esp+4]', u'offset aSubb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSubl ; "subl"'),[u'dword ptr [esp+4]', u'offset aSubl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aSubw ; "subw"'),[u'dword ptr [esp+4]', u'offset aSubw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXaddb ; "xaddb"'),[u'dword ptr [esp+4]', u'offset aXaddb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXaddl ; "xaddl"'),[u'dword ptr [esp+4]', u'offset aXaddl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXaddw ; "xaddw"'),[u'dword ptr [esp+4]', u'offset aXaddw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXchgb ; "xchgb"'),[u'dword ptr [esp+4]', u'offset aXchgb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXchgl ; "xchgl"'),[u'dword ptr [esp+4]', u'offset aXchgl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXchgw ; "xchgw"'),[u'dword ptr [esp+4]', u'offset aXchgw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXorb ; "xorb"'),[u'dword ptr [esp+4]', u'offset aXorb'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXorl ; "xorl"'),[u'dword ptr [esp+4]', u'offset aXorl'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+4], offset aXorw ; "xorw"'),[u'dword ptr [esp+4]', u'offset aXorw'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0 ; iflags'),[u'dword ptr [esp+8]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0 ; op1'),[u'dword ptr [esp+8]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0'),[u'dword ptr [esp+8]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FBCA7654h'),[u'dword ptr [esp+8]', u'0FBCA7654h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFEFDFCh'),[u'dword ptr [esp+8]', u'0FFFEFDFCh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFF7FFFh'),[u'dword ptr [esp+8]', u'0FFFF7FFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFED4h ; op1'),[u'dword ptr [esp+8]', u'0FFFFFED4h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFD3h ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFD3h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFD3h'),[u'dword ptr [esp+8]', u'0FFFFFFD3h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFF7h'),[u'dword ptr [esp+8]', u'0FFFFFFF7h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFAh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFFAh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFBh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFFBh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFCh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFFCh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFDh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFFDh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFEh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFFh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFFh'),[u'dword ptr [esp+8]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFFh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFFh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFFh ; op1'),[u'dword ptr [esp+8]', u'0FFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFFh ; op1'),[u'dword ptr [esp+8]', u'0FFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFFh ; op1'),[u'dword ptr [esp+8]', u'0FFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0FFh ; op1'),[u'dword ptr [esp+8]', u'0FFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 0Fh ; op1'),[u'dword ptr [esp+8]', u'0Fh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1 ; iflags'),[u'dword ptr [esp+8]', u'1'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1 ; op1'),[u'dword ptr [esp+8]', u'1'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 10000h ; op1'),[u'dword ptr [esp+8]', u'10000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 100h ; op1'),[u'dword ptr [esp+8]', u'100h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340128h'),[u'dword ptr [esp+8]', u'12340128h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340205h'),[u'dword ptr [esp+8]', u'12340205h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340306h'),[u'dword ptr [esp+8]', u'12340306h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340407h'),[u'dword ptr [esp+8]', u'12340407h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1234040Ah'),[u'dword ptr [esp+8]', u'1234040Ah'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340503h'),[u'dword ptr [esp+8]', u'12340503h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340506h'),[u'dword ptr [esp+8]', u'12340506h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340507h'),[u'dword ptr [esp+8]', u'12340507h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340547h'),[u'dword ptr [esp+8]', u'12340547h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340559h'),[u'dword ptr [esp+8]', u'12340559h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12340560h'),[u'dword ptr [esp+8]', u'12340560h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1234059Fh'),[u'dword ptr [esp+8]', u'1234059Fh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 123405A0h'),[u'dword ptr [esp+8]', u'123405A0h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 123405FAh'),[u'dword ptr [esp+8]', u'123405FAh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12345678h'),[u'dword ptr [esp+8]', u'12345678h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 12Ch ; op1'),[u'dword ptr [esp+8]', u'12Ch'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1FFFFFFFh ; op1'),[u'dword ptr [esp+8]', u'1FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1FFFFFFh ; op1'),[u'dword ptr [esp+8]', u'1FFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1FFFFFh ; op1'),[u'dword ptr [esp+8]', u'1FFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1FFFFh ; op1'),[u'dword ptr [esp+8]', u'1FFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1FFFh ; op1'),[u'dword ptr [esp+8]', u'1FFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1FFh ; op1'),[u'dword ptr [esp+8]', u'1FFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 1Fh ; op1'),[u'dword ptr [esp+8]', u'1Fh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 2 ; op1'),[u'dword ptr [esp+8]', u'2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 2Dh ; op1'),[u'dword ptr [esp+8]', u'2Dh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 2Dh'),[u'dword ptr [esp+8]', u'2Dh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3 ; op1'),[u'dword ptr [esp+8]', u'3'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 303Bh ; op1'),[u'dword ptr [esp+8]', u'303Bh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 340128h'),[u'dword ptr [esp+8]', u'340128h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3FFFFFFFh ; op1'),[u'dword ptr [esp+8]', u'3FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3FFFFFFh ; op1'),[u'dword ptr [esp+8]', u'3FFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3FFFFFh ; op1'),[u'dword ptr [esp+8]', u'3FFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3FFFFh ; op1'),[u'dword ptr [esp+8]', u'3FFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3FFFh ; op1'),[u'dword ptr [esp+8]', u'3FFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3FFh ; op1'),[u'dword ptr [esp+8]', u'3FFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 3Fh ; op1'),[u'dword ptr [esp+8]', u'3Fh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFFFFFFh ; op1'),[u'dword ptr [esp+8]', u'7FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFFFFFFh'),[u'dword ptr [esp+8]', u'7FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFFFFFh ; op1'),[u'dword ptr [esp+8]', u'7FFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFFFFh ; op1'),[u'dword ptr [esp+8]', u'7FFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFFFh ; op1'),[u'dword ptr [esp+8]', u'7FFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFFh ; op1'),[u'dword ptr [esp+8]', u'7FFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFFh'),[u'dword ptr [esp+8]', u'7FFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7FFh ; op1'),[u'dword ptr [esp+8]', u'7FFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 7Fh ; op1'),[u'dword ptr [esp+8]', u'7Fh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 80000000h ; op1'),[u'dword ptr [esp+8]', u'80000000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 8000h ; op1'),[u'dword ptr [esp+8]', u'8000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 8000h'),[u'dword ptr [esp+8]', u'8000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 81234567h ; op1'),[u'dword ptr [esp+8]', u'81234567h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 81238567h ; op1'),[u'dword ptr [esp+8]', u'81238567h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp+8], 8234A6F8h'),[u'dword ptr [esp+8]', u'8234A6F8h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp]'),[u'dword ptr [esp]'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0 ; op0h'),[u'dword ptr [esp]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0 ; s0'),[u'dword ptr [esp]', u'0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0Eh ; op0h'),[u'dword ptr [esp]', u'0Eh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FEh ; op0h'),[u'dword ptr [esp]', u'0FEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFEh ; op0h'),[u'dword ptr [esp]', u'0FFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFE0080h ; s0'),[u'dword ptr [esp]', u'0FFFE0080h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFE0080h ; s2'),[u'dword ptr [esp]', u'0FFFE0080h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFEh ; op0h'),[u'dword ptr [esp]', u'0FFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFEh ; op0h'),[u'dword ptr [esp]', u'0FFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFEh ; op0h'),[u'dword ptr [esp]', u'0FFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFECh ; op0'),[u'dword ptr [esp]', u'0FFFFFFECh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFECh ; op0h'),[u'dword ptr [esp]', u'0FFFFFFECh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFEh ; op0h'),[u'dword ptr [esp]', u'0FFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFFDh ; op0h'),[u'dword ptr [esp]', u'0FFFFFFFDh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFFEh ; op0h'),[u'dword ptr [esp]', u'0FFFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFFFh ; op0h'),[u'dword ptr [esp]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFFFh ; s0'),[u'dword ptr [esp]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 0FFFFFFFFh ; s2'),[u'dword ptr [esp]', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1 ; op0h'),[u'dword ptr [esp]', u'1'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 10000h ; op0'),[u'dword ptr [esp]', u'10000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 100h ; op0'),[u'dword ptr [esp]', u'100h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 10h ; op0'),[u'dword ptr [esp]', u'10h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12340004h ; op0'),[u'dword ptr [esp]', u'12340004h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1234001Dh ; op0'),[u'dword ptr [esp]', u'1234001Dh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12341678h ; op0'),[u'dword ptr [esp]', u'12341678h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12341h ; s0'),[u'dword ptr [esp]', u'12341h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12343h ; op0h'),[u'dword ptr [esp]', u'12343h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1234561Dh ; op0'),[u'dword ptr [esp]', u'1234561Dh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12345678h ; s0'),[u'dword ptr [esp]', u'12345678h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12347F7Fh ; s0'),[u'dword ptr [esp]', u'12347F7Fh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12347FFFh ; s0'),[u'dword ptr [esp]', u'12347FFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12348000h ; s0'),[u'dword ptr [esp]', u'12348000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 12348080h ; s0'),[u'dword ptr [esp]', u'12348080h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 14h ; op0'),[u'dword ptr [esp]', u'14h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 14h ; op0h'),[u'dword ptr [esp]', u'14h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 17h ; op0'),[u'dword ptr [esp]', u'17h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1Eh ; op0h'),[u'dword ptr [esp]', u'1Eh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1FEh ; op0h'),[u'dword ptr [esp]', u'1FEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1FFEh ; op0h'),[u'dword ptr [esp]', u'1FFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1FFFEh ; op0h'),[u'dword ptr [esp]', u'1FFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1FFFFEh ; op0h'),[u'dword ptr [esp]', u'1FFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1FFFFFEh ; op0h'),[u'dword ptr [esp]', u'1FFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 1FFFFFFEh ; op0h'),[u'dword ptr [esp]', u'1FFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 2 ; op0h'),[u'dword ptr [esp]', u'2'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 21AD3D34h ; s2'),[u'dword ptr [esp]', u'21AD3D34h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3 ; op0'),[u'dword ptr [esp]', u'3'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3 ; op0h'),[u'dword ptr [esp]', u'3'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3Eh ; op0h'),[u'dword ptr [esp]', u'3Eh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3FEh ; op0h'),[u'dword ptr [esp]', u'3FEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3FFEh ; op0h'),[u'dword ptr [esp]', u'3FFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3FFFEh ; op0h'),[u'dword ptr [esp]', u'3FFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3FFFFEh ; op0h'),[u'dword ptr [esp]', u'3FFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3FFFFFEh ; op0h'),[u'dword ptr [esp]', u'3FFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 3FFFFFFEh ; op0h'),[u'dword ptr [esp]', u'3FFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 4 ; op0h'),[u'dword ptr [esp]', u'4'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 43210123h ; op0'),[u'dword ptr [esp]', u'43210123h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7Eh ; op0h'),[u'dword ptr [esp]', u'7Eh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7FEh ; op0h'),[u'dword ptr [esp]', u'7FEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7FFEh ; op0h'),[u'dword ptr [esp]', u'7FFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7FFFEh ; op0h'),[u'dword ptr [esp]', u'7FFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7FFFFEh ; op0h'),[u'dword ptr [esp]', u'7FFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7FFFFFEh ; op0h'),[u'dword ptr [esp]', u'7FFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7FFFFFFEh ; op0h'),[u'dword ptr [esp]', u'7FFFFFFEh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 7FFFFFFFh ; s0'),[u'dword ptr [esp]', u'7FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 80000000h ; op0'),[u'dword ptr [esp]', u'80000000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 80000000h ; s0'),[u'dword ptr [esp]', u'80000000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 80008481h ; s2'),[u'dword ptr [esp]', u'80008481h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 8000h ; op0'),[u'dword ptr [esp]', u'8000h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 80h ; op0'),[u'dword ptr [esp]', u'80h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], 813F3421h ; s2'),[u'dword ptr [esp]', u'813F3421h'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\\n"'),[u'dword ptr [esp]', u'offset a10sA08lxB08lx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...'),[u'dword ptr [esp]', u'offset a10sA08lxB08lxC'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...'),[u'dword ptr [esp]', u'offset a10sA08lxB08lxR'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...'),[u'dword ptr [esp]', u'offset a10sA08lxB08lxR_0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxR08lx ; "%-10s A=%08lx R=%08lx\\n"'),[u'dword ptr [esp]', u'offset a10sA08lxR08lx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxR08lx0 ; "%-10s A=%08lx R=%08lx:%08lx\\n"'),[u'dword ptr [esp]', u'offset a10sA08lxR08lx0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...'),[u'dword ptr [esp]', u'offset a10sA08lxR08lxC'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\\n"'),[u'dword ptr [esp]', u'offset a10sA08lxR08lxL'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08lxR08lx_0 ; "%-10s: A=%08lx R=%08lx\\n"'),[u'dword ptr [esp]', u'offset a10sA08lxR08lx_0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\\n"'),[u'dword ptr [esp]', u'offset a10sA08xR08xCci'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...'),[u'dword ptr [esp]', u'offset a10sAh08lxAl08l'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sD ; "%-10s %d\\n"'),[u'dword ptr [esp]', u'offset a10sD'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...'),[u'dword ptr [esp]', u'offset a10sEax08lxA08l'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\\n"'),[u'dword ptr [esp]', u'offset a10sEcx08lxZfLd'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...'),[u'dword ptr [esp]', u'offset a10sEsi08lxEdi0'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset aCmpxchg8bEax08 ; "cmpxchg8b: eax=%08lx edx=%08lx op1=%016"...'),[u'dword ptr [esp]', u'offset aCmpxchg8bEax08'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\\n"'),[u'dword ptr [esp]', u'offset aLeaS08lx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset aPopcntA08lxR08 ; "popcnt A=%08lx R=%08lx flags=%lx\\n"'),[u'dword ptr [esp]', u'offset aPopcntA08lxR08'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset aPoplEsp08lx ; "popl esp=%08lx\\n"'),[u'dword ptr [esp]', u'offset aPoplEsp08lx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset aPopwEsp08lx ; "popw esp=%08lx\\n"'),[u'dword ptr [esp]', u'offset aPopwEsp08lx'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset aXaddlSameRes08 ; "xaddl same res=%08x\\n"'),[u'dword ptr [esp]', u'offset aXaddlSameRes08'])
        self.assertEqual(lex.parse_args(text='dword ptr [esp], offset aXlatEax08lx ; "xlat: EAX=%08lx\\n"'),[u'dword ptr [esp]', u'offset aXlatEax08lx'])
        self.assertEqual(lex.parse_args(text='dword ptr es:[0],077aaFF00h'),[u'dword ptr es:[0]', u'077aaFF00h'])
        self.assertEqual(lex.parse_args(text='dword ptr es:[20*320+160],077aaFF00h'),[u'dword ptr es:[20*320+160]', u'077aaFF00h'])
        self.assertEqual(lex.parse_args(text='dword ptr var4,11'),[u'dword ptr var4', u'11'])
        self.assertEqual(lex.parse_args(text='dx cx ; linear address of allocated memory block'),[u'dx cx'])
        self.assertEqual(lex.parse_args(text='dx'),[u'dx'])
        self.assertEqual(lex.parse_args(text='dx, 258h'),[u'dx', u'258h'])
        self.assertEqual(lex.parse_args(text='dx, ax'),[u'dx', u'ax'])
        self.assertEqual(lex.parse_args(text='dx, bx, cl'),[u'dx', u'bx', u'cl'])
        self.assertEqual(lex.parse_args(text='dx, cl'),[u'dx', u'cl'])
        self.assertEqual(lex.parse_args(text='dx, cx'),[u'dx', u'cx'])
        self.assertEqual(lex.parse_args(text='dx, offset _aNotEnoughMemory ; "Not enough Memory available\\r\\n"'),[u'dx', u'offset _aNotEnoughMemory'])
        self.assertEqual(lex.parse_args(text='dx, offset _chrin'),[u'dx', u'offset _chrin'])
        self.assertEqual(lex.parse_args(text='dx, offset _eModuleNotFound ; "Module not found\\r\\n"'),[u'dx', u'offset _eModuleNotFound'])
        self.assertEqual(lex.parse_args(text='dx,-1'),[u'dx', u'-1'])
        self.assertEqual(lex.parse_args(text='dx,0'),[u'dx', u'0'])
        self.assertEqual(lex.parse_args(text='dx,1'),[u'dx', u'1'])
        self.assertEqual(lex.parse_args(text='dx,11'),[u'dx', u'11'])
        self.assertEqual(lex.parse_args(text='dx,3c8h'),[u'dx', u'3c8h'])
        self.assertEqual(lex.parse_args(text='dx,3c9h'),[u'dx', u'3c9h'])
        self.assertEqual(lex.parse_args(text='dx,5'),[u'dx', u'5'])
        self.assertEqual(lex.parse_args(text='dx,[edi+1]'),[u'dx', u'[edi+1]'])
        self.assertEqual(lex.parse_args(text='dx,al'),[u'dx', u'al'])
        self.assertEqual(lex.parse_args(text='dx,ax'),[u'dx', u'ax'])
        self.assertEqual(lex.parse_args(text='dx,cx'),[u'dx', u'cx'])
        self.assertEqual(lex.parse_args(text='eax ; int'),[u'eax'])
        self.assertEqual(lex.parse_args(text='eax ; unsigned int'),[u'eax'])
        self.assertEqual(lex.parse_args(text='eax ebp ebx'),[u'eax ebp ebx'])
        self.assertEqual(lex.parse_args(text='eax'),[u'eax'])
        self.assertEqual(lex.parse_args(text='eax, 0'),[u'eax', u'0'])
        self.assertEqual(lex.parse_args(text='eax, 0FFFF7FFFh'),[u'eax', u'0FFFF7FFFh'])
        self.assertEqual(lex.parse_args(text='eax, 0ffffffffh'),[u'eax', u'0ffffffffh'])
        self.assertEqual(lex.parse_args(text='eax, 1'),[u'eax', u'1'])
        self.assertEqual(lex.parse_args(text='eax, 12340407h'),[u'eax', u'12340407h'])
        self.assertEqual(lex.parse_args(text='eax, 12340547h'),[u'eax', u'12340547h'])
        self.assertEqual(lex.parse_args(text='eax, 12340559h'),[u'eax', u'12340559h'])
        self.assertEqual(lex.parse_args(text='eax, 12340560h'),[u'eax', u'12340560h'])
        self.assertEqual(lex.parse_args(text='eax, 1234059Fh'),[u'eax', u'1234059Fh'])
        self.assertEqual(lex.parse_args(text='eax, 123405FAh'),[u'eax', u'123405FAh'])
        self.assertEqual(lex.parse_args(text='eax, 12345678h'),[u'eax', u'12345678h'])
        self.assertEqual(lex.parse_args(text='eax, 7FFFFFFFh'),[u'eax', u'7FFFFFFFh'])
        self.assertEqual(lex.parse_args(text='eax, B'),[u'eax', u'B'])
        self.assertEqual(lex.parse_args(text='eax, CC'),[u'eax', u'CC'])
        self.assertEqual(lex.parse_args(text='eax, DDD'),[u'eax', u'DDD'])
        self.assertEqual(lex.parse_args(text='eax, [eax+4000h]'),[u'eax', u'[eax+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [eax+40h]'),[u'eax', u'[eax+40h]'])
        self.assertEqual(lex.parse_args(text='eax, [eax+ecx+40h]'),[u'eax', u'[eax+ecx+40h]'])
        self.assertEqual(lex.parse_args(text='eax, [eax+ecx]'),[u'eax', u'[eax+ecx]'])
        self.assertEqual(lex.parse_args(text='eax, [eax]'),[u'eax', u'[eax]'])
        self.assertEqual(lex.parse_args(text='eax, [ebx+4000h]'),[u'eax', u'[ebx+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [ebx+40h]'),[u'eax', u'[ebx+40h]'])
        self.assertEqual(lex.parse_args(text='eax, [ebx+edx+4000h]'),[u'eax', u'[ebx+edx+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [ebx+edx]'),[u'eax', u'[ebx+edx]'])
        self.assertEqual(lex.parse_args(text='eax, [ebx]'),[u'eax', u'[ebx]'])
        self.assertEqual(lex.parse_args(text='eax, [ecx+4000h]'),[u'eax', u'[ecx+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [ecx+40h]'),[u'eax', u'[ecx+40h]'])
        self.assertEqual(lex.parse_args(text='eax, [ecx+ecx*2+4000h]'),[u'eax', u'[ecx+ecx*2+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [ecx+ecx*2-0Ah]'),[u'eax', u'[ecx+ecx*2-0Ah]'])
        self.assertEqual(lex.parse_args(text='eax, [ecx+ecx*2]'),[u'eax', u'[ecx+ecx*2]'])
        self.assertEqual(lex.parse_args(text='eax, [ecx+ecx]'),[u'eax', u'[ecx+ecx]'])
        self.assertEqual(lex.parse_args(text='eax, [ecx]'),[u'eax', u'[ecx]'])
        self.assertEqual(lex.parse_args(text='eax, [edi+4000h]'),[u'eax', u'[edi+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [edi+40h]'),[u'eax', u'[edi+40h]'])
        self.assertEqual(lex.parse_args(text='eax, [edi+ecx]'),[u'eax', u'[edi+ecx]'])
        self.assertEqual(lex.parse_args(text='eax, [edi]'),[u'eax', u'[edi]'])
        self.assertEqual(lex.parse_args(text='eax, [edx+4000h]'),[u'eax', u'[edx+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [edx+40h]'),[u'eax', u'[edx+40h]'])
        self.assertEqual(lex.parse_args(text='eax, [edx+ecx*4+4000h]'),[u'eax', u'[edx+ecx*4+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [edx+ecx*4-0Ah]'),[u'eax', u'[edx+ecx*4-0Ah]'])
        self.assertEqual(lex.parse_args(text='eax, [edx+ecx*4]'),[u'eax', u'[edx+ecx*4]'])
        self.assertEqual(lex.parse_args(text='eax, [edx+ecx]'),[u'eax', u'[edx+ecx]'])
        self.assertEqual(lex.parse_args(text='eax, [edx]'),[u'eax', u'[edx]'])
        self.assertEqual(lex.parse_args(text='eax, [esi+4000h]'),[u'eax', u'[esi+4000h]'])
        self.assertEqual(lex.parse_args(text='eax, [esi+40h]'),[u'eax', u'[esi+40h]'])
        self.assertEqual(lex.parse_args(text='eax, [esi+ecx*8-0Ah]'),[u'eax', u'[esi+ecx*8-0Ah]'])
        self.assertEqual(lex.parse_args(text='eax, [esi+ecx*8]'),[u'eax', u'[esi+ecx*8]'])
        self.assertEqual(lex.parse_args(text='eax, [esi+ecx]'),[u'eax', u'[esi+ecx]'])
        self.assertEqual(lex.parse_args(text='eax, [esi]'),[u'eax', u'[esi]'])
        self.assertEqual(lex.parse_args(text='eax, ds:0[eax*2]'),[u'eax', u'ds:0[eax*2]'])
        self.assertEqual(lex.parse_args(text='eax, ds:0[ebx*4]'),[u'eax', u'ds:0[ebx*4]'])
        self.assertEqual(lex.parse_args(text='eax, ds:0[ecx*8]'),[u'eax', u'ds:0[ecx*8]'])
        self.assertEqual(lex.parse_args(text='eax, ds:40h[eax*2]'),[u'eax', u'ds:40h[eax*2]'])
        self.assertEqual(lex.parse_args(text='eax, ds:40h[ebx*4]'),[u'eax', u'ds:40h[ebx*4]'])
        self.assertEqual(lex.parse_args(text='eax, ds:40h[ecx*8]'),[u'eax', u'ds:40h[ecx*8]'])
        self.assertEqual(lex.parse_args(text='eax, dword ptr [ebp+var_20]'),[u'eax', u'dword ptr [ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='eax, eax'),[u'eax', u'eax'])
        self.assertEqual(lex.parse_args(text='eax, ebx'),[u'eax', u'ebx'])
        self.assertEqual(lex.parse_args(text='eax, ecx, 2Dh'),[u'eax', u'ecx', u'2Dh'])
        self.assertEqual(lex.parse_args(text='eax, edi'),[u'eax', u'edi'])
        self.assertEqual(lex.parse_args(text='eax, edi, 8000h'),[u'eax', u'edi', u'8000h'])
        self.assertEqual(lex.parse_args(text='eax, edx'),[u'eax', u'edx'])
        self.assertEqual(lex.parse_args(text='eax, edx, -2Dh'),[u'eax', u'edx', u'-2Dh'])
        self.assertEqual(lex.parse_args(text='eax, edx, 8'),[u'eax', u'edx', u'8'])
        self.assertEqual(lex.parse_args(text='eax, esi'),[u'eax', u'esi'])
        self.assertEqual(lex.parse_args(text='eax, flags'),[u'eax', u'flags'])
        self.assertEqual(lex.parse_args(text='eax, large ds:4000h'),[u'eax', u'large ds:4000h'])
        self.assertEqual(lex.parse_args(text='eax, res'),[u'eax', u'res'])
        self.assertEqual(lex.parse_args(text='eax, s0_0'),[u'eax', u's0_0'])
        self.assertEqual(lex.parse_args(text='eax, s1_0'),[u'eax', u's1_0'])
        self.assertEqual(lex.parse_args(text='eax,-1'),[u'eax', u'-1'])
        self.assertEqual(lex.parse_args(text='eax,-1-(-2+3)'),[u'eax', u'-1-(-2+3)'])
        self.assertEqual(lex.parse_args(text='eax,-13'),[u'eax', u'-13'])
        self.assertEqual(lex.parse_args(text='eax,-2'),[u'eax', u'-2'])
        self.assertEqual(lex.parse_args(text='eax,-4'),[u'eax', u'-4'])
        self.assertEqual(lex.parse_args(text='eax,-5'),[u'eax', u'-5'])
        self.assertEqual(lex.parse_args(text='eax,-8'),[u'eax', u'-8'])
        self.assertEqual(lex.parse_args(text='eax,0'),[u'eax', u'0'])
        self.assertEqual(lex.parse_args(text='eax,000f3h'),[u'eax', u'000f3h'])
        self.assertEqual(lex.parse_args(text='eax,0100b'),[u'eax', u'0100b'])
        self.assertEqual(lex.parse_args(text='eax,0101010101010101b'),[u'eax', u'0101010101010101b'])
        self.assertEqual(lex.parse_args(text='eax,0101b'),[u'eax', u'0101b'])
        self.assertEqual(lex.parse_args(text='eax,011111111111111111111111111111111b'),[u'eax', u'011111111111111111111111111111111b'])
        self.assertEqual(lex.parse_args(text='eax,012345678h'),[u'eax', u'012345678h'])
        self.assertEqual(lex.parse_args(text='eax,077123456h'),[u'eax', u'077123456h'])
        self.assertEqual(lex.parse_args(text='eax,077aaFF00h'),[u'eax', u'077aaFF00h'])
        self.assertEqual(lex.parse_args(text='eax,0ffff0003h'),[u'eax', u'0ffff0003h'])
        self.assertEqual(lex.parse_args(text='eax,0ffff00f3h'),[u'eax', u'0ffff00f3h'])
        self.assertEqual(lex.parse_args(text='eax,0ffffff03h'),[u'eax', u'0ffffff03h'])
        self.assertEqual(lex.parse_args(text='eax,0fffffff3h'),[u'eax', u'0fffffff3h'])
        self.assertEqual(lex.parse_args(text='eax,1'),[u'eax', u'1'])
        self.assertEqual(lex.parse_args(text='eax,1024*1024'),[u'eax', u'1024*1024'])
        self.assertEqual(lex.parse_args(text='eax,10B'),[u'eax', u'10B'])
        self.assertEqual(lex.parse_args(text='eax,133'),[u'eax', u'133'])
        self.assertEqual(lex.parse_args(text='eax,16'),[u'eax', u'16'])
        self.assertEqual(lex.parse_args(text='eax,2'),[u'eax', u'2'])
        self.assertEqual(lex.parse_args(text='eax,256'),[u'eax', u'256'])
        self.assertEqual(lex.parse_args(text='eax,256+3+65536'),[u'eax', u'256+3+65536'])
        self.assertEqual(lex.parse_args(text='eax,3'),[u'eax', u'3'])
        self.assertEqual(lex.parse_args(text='eax,4'),[u'eax', u'4'])
        self.assertEqual(lex.parse_args(text='eax,5'),[u'eax', u'5'])
        self.assertEqual(lex.parse_args(text='eax,511'),[u'eax', u'511'])
        self.assertEqual(lex.parse_args(text='eax,6'),[u'eax', u'6'])
        self.assertEqual(lex.parse_args(text='eax,eax'),[u'eax', u'eax'])
        self.assertEqual(lex.parse_args(text='eax,ebx'),[u'eax', u'ebx'])
        self.assertEqual(lex.parse_args(text='eax,enddata'),[u'eax', u'enddata'])
        self.assertEqual(lex.parse_args(text='eax,taille_moire ;::!300000h-1 ;182400h-1 ;1582080 ;0300000h-1 ;2mega 182400h-1'),[u'eax', u'taille_moire'])
        self.assertEqual(lex.parse_args(text='eax,teST2'),[u'eax', u'teST2'])
        self.assertEqual(lex.parse_args(text='ebp'),[u'ebp'])
        self.assertEqual(lex.parse_args(text='ebp, esp'),[u'ebp', u'esp'])
        self.assertEqual(lex.parse_args(text='ebp,10'),[u'ebp', u'10'])
        self.assertEqual(lex.parse_args(text='ebp,11'),[u'ebp', u'11'])
        self.assertEqual(lex.parse_args(text='ebp,12'),[u'ebp', u'12'])
        self.assertEqual(lex.parse_args(text='ebp,13'),[u'ebp', u'13'])
        self.assertEqual(lex.parse_args(text='ebp,14'),[u'ebp', u'14'])
        self.assertEqual(lex.parse_args(text='ebp,15'),[u'ebp', u'15'])
        self.assertEqual(lex.parse_args(text='ebp,16'),[u'ebp', u'16'])
        self.assertEqual(lex.parse_args(text='ebp,17'),[u'ebp', u'17'])
        self.assertEqual(lex.parse_args(text='ebp,18'),[u'ebp', u'18'])
        self.assertEqual(lex.parse_args(text='ebp,19'),[u'ebp', u'19'])
        self.assertEqual(lex.parse_args(text='ebp,2'),[u'ebp', u'2'])
        self.assertEqual(lex.parse_args(text='ebp,20'),[u'ebp', u'20'])
        self.assertEqual(lex.parse_args(text='ebp,21'),[u'ebp', u'21'])
        self.assertEqual(lex.parse_args(text='ebp,22'),[u'ebp', u'22'])
        self.assertEqual(lex.parse_args(text='ebp,23'),[u'ebp', u'23'])
        self.assertEqual(lex.parse_args(text='ebp,24'),[u'ebp', u'24'])
        self.assertEqual(lex.parse_args(text='ebp,25'),[u'ebp', u'25'])
        self.assertEqual(lex.parse_args(text='ebp,26'),[u'ebp', u'26'])
        self.assertEqual(lex.parse_args(text='ebp,27'),[u'ebp', u'27'])
        self.assertEqual(lex.parse_args(text='ebp,28'),[u'ebp', u'28'])
        self.assertEqual(lex.parse_args(text='ebp,29'),[u'ebp', u'29'])
        self.assertEqual(lex.parse_args(text='ebp,3'),[u'ebp', u'3'])
        self.assertEqual(lex.parse_args(text='ebp,3*4'),[u'ebp', u'3*4'])
        self.assertEqual(lex.parse_args(text='ebp,30'),[u'ebp', u'30'])
        self.assertEqual(lex.parse_args(text='ebp,31'),[u'ebp', u'31'])
        self.assertEqual(lex.parse_args(text='ebp,32'),[u'ebp', u'32'])
        self.assertEqual(lex.parse_args(text='ebp,4'),[u'ebp', u'4'])
        self.assertEqual(lex.parse_args(text='ebp,5'),[u'ebp', u'5'])
        self.assertEqual(lex.parse_args(text='ebp,6'),[u'ebp', u'6'])
        self.assertEqual(lex.parse_args(text='ebp,7'),[u'ebp', u'7'])
        self.assertEqual(lex.parse_args(text='ebp,8'),[u'ebp', u'8'])
        self.assertEqual(lex.parse_args(text='ebp,9'),[u'ebp', u'9'])
        self.assertEqual(lex.parse_args(text='ebp,ebp'),[u'ebp', u'ebp'])
        self.assertEqual(lex.parse_args(text='ebx ; int ; s1'),[u'ebx'])
        self.assertEqual(lex.parse_args(text='ebx ; int'),[u'ebx'])
        self.assertEqual(lex.parse_args(text='ebx ebp eax'),[u'ebx ebp eax'])
        self.assertEqual(lex.parse_args(text='ebx'),[u'ebx'])
        self.assertEqual(lex.parse_args(text='ebx, (offset str_buffer+800h)'),[u'ebx', u'(offset str_buffer+800h)'])
        self.assertEqual(lex.parse_args(text='ebx, 0FFFFFFFFh'),[u'ebx', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='ebx, 1'),[u'ebx', u'1'])
        self.assertEqual(lex.parse_args(text='ebx, 1234040Ah'),[u'ebx', u'1234040Ah'])
        self.assertEqual(lex.parse_args(text='ebx, 12340506h'),[u'ebx', u'12340506h'])
        self.assertEqual(lex.parse_args(text='ebx, 12345678h'),[u'ebx', u'12345678h'])
        self.assertEqual(lex.parse_args(text='ebx, 2'),[u'ebx', u'2'])
        self.assertEqual(lex.parse_args(text='ebx, 4'),[u'ebx', u'4'])
        self.assertEqual(lex.parse_args(text='ebx, 8234A6F8h'),[u'ebx', u'8234A6F8h'])
        self.assertEqual(lex.parse_args(text='ebx, [ebp+iflags]'),[u'ebx', u'[ebp+iflags]'])
        self.assertEqual(lex.parse_args(text='ebx, [ebp+op0h]'),[u'ebx', u'[ebp+op0h]'])
        self.assertEqual(lex.parse_args(text='ebx, [ebp+s0]'),[u'ebx', u'[ebp+s0]'])
        self.assertEqual(lex.parse_args(text='ebx, [ebp+s2]'),[u'ebx', u'[ebp+s2]'])
        self.assertEqual(lex.parse_args(text='ebx, [ebp+table]'),[u'ebx', u'[ebp+table]'])
        self.assertEqual(lex.parse_args(text='ebx, [ebp+var_4]'),[u'ebx', u'[ebp+var_4]'])
        self.assertEqual(lex.parse_args(text='ebx, [esi+ecx*8+4000h]'),[u'ebx', u'[esi+ecx*8+4000h]'])
        self.assertEqual(lex.parse_args(text='ebx, dword ptr [ebp+var_20+4]'),[u'ebx', u'dword ptr [ebp+var_20+4]'])
        self.assertEqual(lex.parse_args(text='ebx, ebx'),[u'ebx', u'ebx'])
        self.assertEqual(lex.parse_args(text='ebx, edi'),[u'ebx', u'edi'])
        self.assertEqual(lex.parse_args(text='ebx, esi'),[u'ebx', u'esi'])
        self.assertEqual(lex.parse_args(text='ebx, esi, 7FFFh'),[u'ebx', u'esi', u'7FFFh'])
        self.assertEqual(lex.parse_args(text='ebx, i'),[u'ebx', u'i'])
        self.assertEqual(lex.parse_args(text='ebx, offset _test_btc'),[u'ebx', u'offset _test_btc'])
        self.assertEqual(lex.parse_args(text='ebx, offset unk_40F064'),[u'ebx', u'offset unk_40F064'])
        self.assertEqual(lex.parse_args(text='ebx,-1'),[u'ebx', u'-1'])
        self.assertEqual(lex.parse_args(text='ebx,0'),[u'ebx', u'0'])
        self.assertEqual(lex.parse_args(text='ebx,00fffh'),[u'ebx', u'00fffh'])
        self.assertEqual(lex.parse_args(text='ebx,010B'),[u'ebx', u'010B'])
        self.assertEqual(lex.parse_args(text='ebx,01B'),[u'ebx', u'01B'])
        self.assertEqual(lex.parse_args(text='ebx,0FFFFFFFFh'),[u'ebx', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='ebx,0a000h'),[u'ebx', u'0a000h'])
        self.assertEqual(lex.parse_args(text='ebx,0aabbccddh'),[u'ebx', u'0aabbccddh'])
        self.assertEqual(lex.parse_args(text='ebx,0f222h'),[u'ebx', u'0f222h'])
        self.assertEqual(lex.parse_args(text='ebx,0ffff01ffh'),[u'ebx', u'0ffff01ffh'])
        self.assertEqual(lex.parse_args(text='ebx,0ffffff00h'),[u'ebx', u'0ffffff00h'])
        self.assertEqual(lex.parse_args(text='ebx,0ffffffffh'),[u'ebx', u'0ffffffffh'])
        self.assertEqual(lex.parse_args(text='ebx,1'),[u'ebx', u'1'])
        self.assertEqual(lex.parse_args(text='ebx,100h'),[u'ebx', u'100h'])
        self.assertEqual(lex.parse_args(text='ebx,12345'),[u'ebx', u'12345'])
        self.assertEqual(lex.parse_args(text='ebx,2'),[u'ebx', u'2'])
        self.assertEqual(lex.parse_args(text='ebx,255'),[u'ebx', u'255'])
        self.assertEqual(lex.parse_args(text='ebx,3'),[u'ebx', u'3'])
        self.assertEqual(lex.parse_args(text='ebx,31'),[u'ebx', u'31'])
        self.assertEqual(lex.parse_args(text='ebx,5'),[u'ebx', u'5'])
        self.assertEqual(lex.parse_args(text='ebx,TWO'),[u'ebx', u'TWO'])
        self.assertEqual(lex.parse_args(text='ebx,[g]'),[u'ebx', u'[g]'])
        self.assertEqual(lex.parse_args(text='ebx,[load_handle]'),[u'ebx', u'[load_handle]'])
        self.assertEqual(lex.parse_args(text='ebx,beginningdata'),[u'ebx', u'beginningdata'])
        self.assertEqual(lex.parse_args(text='ebx,eax'),[u'ebx', u'eax'])
        self.assertEqual(lex.parse_args(text='ebx,ebx'),[u'ebx', u'ebx'])
        self.assertEqual(lex.parse_args(text='ebx,g'),[u'ebx', u'g'])
        self.assertEqual(lex.parse_args(text='ecx ; int'),[u'ecx'])
        self.assertEqual(lex.parse_args(text='ecx'),[u'ecx'])
        self.assertEqual(lex.parse_args(text='ecx, 1'),[u'ecx', u'1'])
        self.assertEqual(lex.parse_args(text='ecx, 10h'),[u'ecx', u'10h'])
        self.assertEqual(lex.parse_args(text='ecx, 11h'),[u'ecx', u'11h'])
        self.assertEqual(lex.parse_args(text='ecx, 1234h'),[u'ecx', u'1234h'])
        self.assertEqual(lex.parse_args(text='ecx, 4'),[u'ecx', u'4'])
        self.assertEqual(lex.parse_args(text='ecx, 40h'),[u'ecx', u'40h'])
        self.assertEqual(lex.parse_args(text='ecx, 65324h'),[u'ecx', u'65324h'])
        self.assertEqual(lex.parse_args(text='ecx, [ebp+ecx_0]'),[u'ecx', u'[ebp+ecx_0]'])
        self.assertEqual(lex.parse_args(text='ecx, [ebp+edx_0]'),[u'ecx', u'[ebp+edx_0]'])
        self.assertEqual(lex.parse_args(text='ecx, [ebp+i*4+ecx_vals]'),[u'ecx', u'[ebp+i*4+ecx_vals]'])
        self.assertEqual(lex.parse_args(text='ecx, [ebp+s0]'),[u'ecx', u'[ebp+s0]'])
        self.assertEqual(lex.parse_args(text='ecx, [ebp+s1]'),[u'ecx', u'[ebp+s1]'])
        self.assertEqual(lex.parse_args(text='ecx, [ebp+var_20]'),[u'ecx', u'[ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='ecx, dword ptr [ebp+var_20+4]'),[u'ecx', u'dword ptr [ebp+var_20+4]'])
        self.assertEqual(lex.parse_args(text='ecx, dword ptr [ebp+var_20]'),[u'ecx', u'dword ptr [ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='ecx, ecx'),[u'ecx', u'ecx'])
        self.assertEqual(lex.parse_args(text='ecx, edi'),[u'ecx', u'edi'])
        self.assertEqual(lex.parse_args(text='ecx, edx'),[u'ecx', u'edx'])
        self.assertEqual(lex.parse_args(text='ecx, res'),[u'ecx', u'res'])
        self.assertEqual(lex.parse_args(text='ecx,-1'),[u'ecx', u'-1'])
        self.assertEqual(lex.parse_args(text='ecx,-5'),[u'ecx', u'-5'])
        self.assertEqual(lex.parse_args(text='ecx,000ff00ffh'),[u'ecx', u'000ff00ffh'])
        self.assertEqual(lex.parse_args(text='ecx,0a0000h'),[u'ecx', u'0a0000h'])
        self.assertEqual(lex.parse_args(text='ecx,0af222h'),[u'ecx', u'0af222h'])
        self.assertEqual(lex.parse_args(text='ecx,0df01h'),[u'ecx', u'0df01h'])
        self.assertEqual(lex.parse_args(text='ecx,0dff1h'),[u'ecx', u'0dff1h'])
        self.assertEqual(lex.parse_args(text='ecx,0f0ffh'),[u'ecx', u'0f0ffh'])
        self.assertEqual(lex.parse_args(text='ecx,0ffffffffh'),[u'ecx', u'0ffffffffh'])
        self.assertEqual(lex.parse_args(text='ecx,0ffffh'),[u'ecx', u'0ffffh'])
        self.assertEqual(lex.parse_args(text='ecx,10'),[u'ecx', u'10'])
        self.assertEqual(lex.parse_args(text='ecx,16'),[u'ecx', u'16'])
        self.assertEqual(lex.parse_args(text='ecx,2'),[u'ecx', u'2'])
        self.assertEqual(lex.parse_args(text='ecx,3'),[u'ecx', u'3'])
        self.assertEqual(lex.parse_args(text='ecx,320*200/4'),[u'ecx', u'320*200/4'])
        self.assertEqual(lex.parse_args(text='ecx,5'),[u'ecx', u'5'])
        self.assertEqual(lex.parse_args(text='ecx,60'),[u'ecx', u'60'])
        self.assertEqual(lex.parse_args(text='ecx,bx'),[u'ecx', u'bx'])
        self.assertEqual(lex.parse_args(text='ecx,cx'),[u'ecx', u'cx'])
        self.assertEqual(lex.parse_args(text='ecx,ecx'),[u'ecx', u'ecx'])
        self.assertEqual(lex.parse_args(text='ecx,t'),[u'ecx', u't'])
        self.assertEqual(lex.parse_args(text='edi ; increase target address'),[u'edi'])
        self.assertEqual(lex.parse_args(text='edi ; int'),[u'edi'])
        self.assertEqual(lex.parse_args(text='edi'),[u'edi'])
        self.assertEqual(lex.parse_args(text='edi, (offset str_buffer+810h)'),[u'edi', u'(offset str_buffer+810h)'])
        self.assertEqual(lex.parse_args(text='edi, 0FBCA7654h'),[u'edi', u'0FBCA7654h'])
        self.assertEqual(lex.parse_args(text='edi, 0FFFFFFF7h'),[u'edi', u'0FFFFFFF7h'])
        self.assertEqual(lex.parse_args(text='edi, 1'),[u'edi', u'1'])
        self.assertEqual(lex.parse_args(text='edi, 12340128h'),[u'edi', u'12340128h'])
        self.assertEqual(lex.parse_args(text='edi, 12340205h'),[u'edi', u'12340205h'])
        self.assertEqual(lex.parse_args(text='edi, 123405A0h'),[u'edi', u'123405A0h'])
        self.assertEqual(lex.parse_args(text='edi, 12345h'),[u'edi', u'12345h'])
        self.assertEqual(lex.parse_args(text='edi, 20h'),[u'edi', u'20h'])
        self.assertEqual(lex.parse_args(text='edi, 80000000h'),[u'edi', u'80000000h'])
        self.assertEqual(lex.parse_args(text='edi, [ebp+ecx_vals]'),[u'edi', u'[ebp+ecx_vals]'])
        self.assertEqual(lex.parse_args(text='edi, [ebp+iflags]'),[u'edi', u'[ebp+iflags]'])
        self.assertEqual(lex.parse_args(text='edi, [ebp+op0]'),[u'edi', u'[ebp+op0]'])
        self.assertEqual(lex.parse_args(text='edi, [ebp+s1]'),[u'edi', u'[ebp+s1]'])
        self.assertEqual(lex.parse_args(text='edi, [ebp+s2]'),[u'edi', u'[ebp+s2]'])
        self.assertEqual(lex.parse_args(text='edi, [i+2]'),[u'edi', u'[i+2]'])
        self.assertEqual(lex.parse_args(text='edi, [i+3]'),[u'edi', u'[i+3]'])
        self.assertEqual(lex.parse_args(text='edi, [i+4]'),[u'edi', u'[i+4]'])
        self.assertEqual(lex.parse_args(text='edi, [i+5]'),[u'edi', u'[i+5]'])
        self.assertEqual(lex.parse_args(text='edi, [i-10h]'),[u'edi', u'[i-10h]'])
        self.assertEqual(lex.parse_args(text='edi, ebx'),[u'edi', u'ebx'])
        self.assertEqual(lex.parse_args(text='edi, edi'),[u'edi', u'edi'])
        self.assertEqual(lex.parse_args(text='edi,0'),[u'edi', u'0'])
        self.assertEqual(lex.parse_args(text='edi,1'),[u'edi', u'1'])
        self.assertEqual(lex.parse_args(text='edi,14*320'),[u'edi', u'14*320'])
        self.assertEqual(lex.parse_args(text='edi,8'),[u'edi', u'8'])
        self.assertEqual(lex.parse_args(text='edi,OFFSET AsCii ; get the offset address'),[u'edi', u'OFFSET AsCii'])
        self.assertEqual(lex.parse_args(text='edi,buffer'),[u'edi', u'buffer'])
        self.assertEqual(lex.parse_args(text='edi,edi'),[u'edi', u'edi'])
        self.assertEqual(lex.parse_args(text='edi,esi'),[u'edi', u'esi'])
        self.assertEqual(lex.parse_args(text='edi,f'),[u'edi', u'f'])
        self.assertEqual(lex.parse_args(text='edi,offset str2'),[u'edi', u'offset str2'])
        self.assertEqual(lex.parse_args(text='edi,offset str3'),[u'edi', u'offset str3'])
        self.assertEqual(lex.parse_args(text='edi,offset var1'),[u'edi', u'offset var1'])
        self.assertEqual(lex.parse_args(text='edi,offset var2'),[u'edi', u'offset var2'])
        self.assertEqual(lex.parse_args(text='edi,offset var4'),[u'edi', u'offset var4'])
        self.assertEqual(lex.parse_args(text='edi,offset var4+1'),[u'edi', u'offset var4+1'])
        self.assertEqual(lex.parse_args(text='edi,offset var4+4'),[u'edi', u'offset var4+4'])
        self.assertEqual(lex.parse_args(text='edi,testOVerlap'),[u'edi', u'testOVerlap'])
        self.assertEqual(lex.parse_args(text='edi,var1'),[u'edi', u'var1'])
        self.assertEqual(lex.parse_args(text='edi_0'),[u'edi_0'])
        self.assertEqual(lex.parse_args(text='edi_0, (offset str_buffer+810h)'),[u'edi_0', u'(offset str_buffer+810h)'])
        self.assertEqual(lex.parse_args(text='edx ; int'),[u'edx'])
        self.assertEqual(lex.parse_args(text='edx ; unsigned int'),[u'edx'])
        self.assertEqual(lex.parse_args(text='edx'),[u'edx'])
        self.assertEqual(lex.parse_args(text='edx, 1'),[u'edx', u'1'])
        self.assertEqual(lex.parse_args(text='edx, 10h'),[u'edx', u'10h'])
        self.assertEqual(lex.parse_args(text='edx, 11h'),[u'edx', u'11h'])
        self.assertEqual(lex.parse_args(text='edx, 12340507h'),[u'edx', u'12340507h'])
        self.assertEqual(lex.parse_args(text='edx, 12345678h'),[u'edx', u'12345678h'])
        self.assertEqual(lex.parse_args(text='edx, 17h'),[u'edx', u'17h'])
        self.assertEqual(lex.parse_args(text='edx, 340128h'),[u'edx', u'340128h'])
        self.assertEqual(lex.parse_args(text='edx, 8'),[u'edx', u'8'])
        self.assertEqual(lex.parse_args(text='edx, [ebp+s1]'),[u'edx', u'[ebp+s1]'])
        self.assertEqual(lex.parse_args(text='edx, [ebp+var_1C]'),[u'edx', u'[ebp+var_1C]'])
        self.assertEqual(lex.parse_args(text='edx, [i+56h]'),[u'edx', u'[i+56h]'])
        self.assertEqual(lex.parse_args(text='edx, cl'),[u'edx', u'cl'])
        self.assertEqual(lex.parse_args(text='edx, dword ptr [ebp+var_20]'),[u'edx', u'dword ptr [ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='edx, eax'),[u'edx', u'eax'])
        self.assertEqual(lex.parse_args(text='edx, ebx'),[u'edx', u'ebx'])
        self.assertEqual(lex.parse_args(text='edx, ebx, cl'),[u'edx', u'ebx', u'cl'])
        self.assertEqual(lex.parse_args(text='edx, ecx'),[u'edx', u'ecx'])
        self.assertEqual(lex.parse_args(text='edx, edi'),[u'edx', u'edi'])
        self.assertEqual(lex.parse_args(text='edx, edx'),[u'edx', u'edx'])
        self.assertEqual(lex.parse_args(text='edx, esi'),[u'edx', u'esi'])
        self.assertEqual(lex.parse_args(text='edx, res'),[u'edx', u'res'])
        self.assertEqual(lex.parse_args(text='edx, resh'),[u'edx', u'resh'])
        self.assertEqual(lex.parse_args(text='edx,-2'),[u'edx', u'-2'])
        self.assertEqual(lex.parse_args(text='edx,0'),[u'edx', u'0'])
        self.assertEqual(lex.parse_args(text='edx,0abcdef77h'),[u'edx', u'0abcdef77h'])
        self.assertEqual(lex.parse_args(text='edx,0ffffh'),[u'edx', u'0ffffh'])
        self.assertEqual(lex.parse_args(text='edx,1'),[u'edx', u'1'])
        self.assertEqual(lex.parse_args(text='edx,10'),[u'edx', u'10'])
        self.assertEqual(lex.parse_args(text='edx,2'),[u'edx', u'2'])
        self.assertEqual(lex.parse_args(text='edx,4'),[u'edx', u'4'])
        self.assertEqual(lex.parse_args(text='edx,OFFSET ASCiI ; DOS 1+ WRITE STRING TO STANDARD OUTPUT'),[u'edx', u'OFFSET ASCiI'])
        self.assertEqual(lex.parse_args(text='edx,edi'),[u'edx', u'edi'])
        self.assertEqual(lex.parse_args(text='edx,edx'),[u'edx', u'edx'])
        self.assertEqual(lex.parse_args(text='edx,fileName'),[u'edx', u'fileName'])
        self.assertEqual(lex.parse_args(text='edx,offset _msg ; DS:EDX -> $ Terminated String'),[u'edx', u'offset _msg'])
        self.assertEqual(lex.parse_args(text='edx_0_0, dword ptr [ebp+var_20]'),[u'edx_0_0', u'dword ptr [ebp+var_20]'])
        self.assertEqual(lex.parse_args(text='eflags, 40h'),[u'eflags', u'40h'])
        self.assertEqual(lex.parse_args(text='eflags, 8D5h'),[u'eflags', u'8D5h'])
        self.assertEqual(lex.parse_args(text='es ds'),[u'es ds'])
        self.assertEqual(lex.parse_args(text='es'),[u'es'])
        self.assertEqual(lex.parse_args(text='es,ax'),[u'es', u'ax'])
        self.assertEqual(lex.parse_args(text='esi ; int'),[u'esi'])
        self.assertEqual(lex.parse_args(text='esi'),[u'esi'])
        self.assertEqual(lex.parse_args(text='esi, 0FFFEFDFCh'),[u'esi', u'0FFFEFDFCh'])
        self.assertEqual(lex.parse_args(text='esi, 1000h'),[u'esi', u'1000h'])
        self.assertEqual(lex.parse_args(text='esi, 10h'),[u'esi', u'10h'])
        self.assertEqual(lex.parse_args(text='esi, 12340306h'),[u'esi', u'12340306h'])
        self.assertEqual(lex.parse_args(text='esi, 12340503h'),[u'esi', u'12340503h'])
        self.assertEqual(lex.parse_args(text='esi, 12345678h'),[u'esi', u'12345678h'])
        self.assertEqual(lex.parse_args(text='esi, 6789ABCDh'),[u'esi', u'6789ABCDh'])
        self.assertEqual(lex.parse_args(text='esi, 8345A1F2h'),[u'esi', u'8345A1F2h'])
        self.assertEqual(lex.parse_args(text='esi, [ebp+iflags]'),[u'esi', u'[ebp+iflags]'])
        self.assertEqual(lex.parse_args(text='esi, [ebp+op0]'),[u'esi', u'[ebp+op0]'])
        self.assertEqual(lex.parse_args(text='esi, [ebp+op0h]'),[u'esi', u'[ebp+op0h]'])
        self.assertEqual(lex.parse_args(text='esi, [ebp+s0]'),[u'esi', u'[ebp+s0]'])
        self.assertEqual(lex.parse_args(text='esi, [ebp+s1]'),[u'esi', u'[ebp+s1]'])
        self.assertEqual(lex.parse_args(text='esi, [i+1]'),[u'esi', u'[i+1]'])
        self.assertEqual(lex.parse_args(text='esi, ebx'),[u'esi', u'ebx'])
        self.assertEqual(lex.parse_args(text='esi, edi'),[u'esi', u'edi'])
        self.assertEqual(lex.parse_args(text='esi, esi'),[u'esi', u'esi'])
        self.assertEqual(lex.parse_args(text='esi, esi_0'),[u'esi', u'esi_0'])
        self.assertEqual(lex.parse_args(text='esi, offset unk_40E008'),[u'esi', u'offset unk_40E008'])
        self.assertEqual(lex.parse_args(text='esi,0'),[u'esi', u'0'])
        self.assertEqual(lex.parse_args(text='esi,2'),[u'esi', u'2'])
        self.assertEqual(lex.parse_args(text='esi,6'),[u'esi', u'6'])
        self.assertEqual(lex.parse_args(text='esi,b'),[u'esi', u'b'])
        self.assertEqual(lex.parse_args(text='esi,esi'),[u'esi', u'esi'])
        self.assertEqual(lex.parse_args(text='esi,f'),[u'esi', u'f'])
        self.assertEqual(lex.parse_args(text='esi,offset pal_jeu'),[u'esi', u'offset pal_jeu'])
        self.assertEqual(lex.parse_args(text='esi,offset str1'),[u'esi', u'offset str1'])
        self.assertEqual(lex.parse_args(text='esi,offset testOVerlap'),[u'esi', u'offset testOVerlap'])
        self.assertEqual(lex.parse_args(text='esi,offset var1'),[u'esi', u'offset var1'])
        self.assertEqual(lex.parse_args(text='esi,offset var1+1'),[u'esi', u'offset var1+1'])
        self.assertEqual(lex.parse_args(text='esi,offset var2'),[u'esi', u'offset var2'])
        self.assertEqual(lex.parse_args(text='esi,offset var3'),[u'esi', u'offset var3'])
        self.assertEqual(lex.parse_args(text='esi,offset var3+4'),[u'esi', u'offset var3+4'])
        self.assertEqual(lex.parse_args(text='esi,var2'),[u'esi', u'var2'])
        self.assertEqual(lex.parse_args(text='esi,var5'),[u'esi', u'var5'])
        self.assertEqual(lex.parse_args(text='esi_0'),[u'esi_0'])
        self.assertEqual(lex.parse_args(text='esi_0, ebx'),[u'esi_0', u'ebx'])
        self.assertEqual(lex.parse_args(text='esp, 0FFFFFFF0h'),[u'esp', u'0FFFFFFF0h'])
        self.assertEqual(lex.parse_args(text='esp, 10h'),[u'esp', u'10h'])
        self.assertEqual(lex.parse_args(text='esp, 114h'),[u'esp', u'114h'])
        self.assertEqual(lex.parse_args(text='esp, 14h'),[u'esp', u'14h'])
        self.assertEqual(lex.parse_args(text='esp, 18h'),[u'esp', u'18h'])
        self.assertEqual(lex.parse_args(text='esp, 1Ch'),[u'esp', u'1Ch'])
        self.assertEqual(lex.parse_args(text='esp, 2'),[u'esp', u'2'])
        self.assertEqual(lex.parse_args(text='esp, 20h'),[u'esp', u'20h'])
        self.assertEqual(lex.parse_args(text='esp, 24h'),[u'esp', u'24h'])
        self.assertEqual(lex.parse_args(text='esp, 2Ch'),[u'esp', u'2Ch'])
        self.assertEqual(lex.parse_args(text='esp, 3Ch'),[u'esp', u'3Ch'])
        self.assertEqual(lex.parse_args(text='esp, 4Ch'),[u'esp', u'4Ch'])
        self.assertEqual(lex.parse_args(text='exec_adc'),[u'exec_adc'])
        self.assertEqual(lex.parse_args(text='exec_adcb'),[u'exec_adcb'])
        self.assertEqual(lex.parse_args(text='exec_adcl'),[u'exec_adcl'])
        self.assertEqual(lex.parse_args(text='exec_adcw'),[u'exec_adcw'])
        self.assertEqual(lex.parse_args(text='exec_add'),[u'exec_add'])
        self.assertEqual(lex.parse_args(text='exec_addb'),[u'exec_addb'])
        self.assertEqual(lex.parse_args(text='exec_addl'),[u'exec_addl'])
        self.assertEqual(lex.parse_args(text='exec_addw'),[u'exec_addw'])
        self.assertEqual(lex.parse_args(text='exec_and'),[u'exec_and'])
        self.assertEqual(lex.parse_args(text='exec_andb'),[u'exec_andb'])
        self.assertEqual(lex.parse_args(text='exec_andl'),[u'exec_andl'])
        self.assertEqual(lex.parse_args(text='exec_andw'),[u'exec_andw'])
        self.assertEqual(lex.parse_args(text='exec_bt'),[u'exec_bt'])
        self.assertEqual(lex.parse_args(text='exec_btc'),[u'exec_btc'])
        self.assertEqual(lex.parse_args(text='exec_btcl'),[u'exec_btcl'])
        self.assertEqual(lex.parse_args(text='exec_btcw'),[u'exec_btcw'])
        self.assertEqual(lex.parse_args(text='exec_btl'),[u'exec_btl'])
        self.assertEqual(lex.parse_args(text='exec_btr'),[u'exec_btr'])
        self.assertEqual(lex.parse_args(text='exec_btrl'),[u'exec_btrl'])
        self.assertEqual(lex.parse_args(text='exec_btrw'),[u'exec_btrw'])
        self.assertEqual(lex.parse_args(text='exec_bts'),[u'exec_bts'])
        self.assertEqual(lex.parse_args(text='exec_btsl'),[u'exec_btsl'])
        self.assertEqual(lex.parse_args(text='exec_btsw'),[u'exec_btsw'])
        self.assertEqual(lex.parse_args(text='exec_btw'),[u'exec_btw'])
        self.assertEqual(lex.parse_args(text='exec_cmp'),[u'exec_cmp'])
        self.assertEqual(lex.parse_args(text='exec_cmpb'),[u'exec_cmpb'])
        self.assertEqual(lex.parse_args(text='exec_cmpl'),[u'exec_cmpl'])
        self.assertEqual(lex.parse_args(text='exec_cmpw'),[u'exec_cmpw'])
        self.assertEqual(lex.parse_args(text='exec_dec'),[u'exec_dec'])
        self.assertEqual(lex.parse_args(text='exec_decb'),[u'exec_decb'])
        self.assertEqual(lex.parse_args(text='exec_decl'),[u'exec_decl'])
        self.assertEqual(lex.parse_args(text='exec_decw'),[u'exec_decw'])
        self.assertEqual(lex.parse_args(text='exec_inc'),[u'exec_inc'])
        self.assertEqual(lex.parse_args(text='exec_incb'),[u'exec_incb'])
        self.assertEqual(lex.parse_args(text='exec_incl'),[u'exec_incl'])
        self.assertEqual(lex.parse_args(text='exec_incw'),[u'exec_incw'])
        self.assertEqual(lex.parse_args(text='exec_neg'),[u'exec_neg'])
        self.assertEqual(lex.parse_args(text='exec_negb'),[u'exec_negb'])
        self.assertEqual(lex.parse_args(text='exec_negl'),[u'exec_negl'])
        self.assertEqual(lex.parse_args(text='exec_negw'),[u'exec_negw'])
        self.assertEqual(lex.parse_args(text='exec_not'),[u'exec_not'])
        self.assertEqual(lex.parse_args(text='exec_notb'),[u'exec_notb'])
        self.assertEqual(lex.parse_args(text='exec_notl'),[u'exec_notl'])
        self.assertEqual(lex.parse_args(text='exec_notw'),[u'exec_notw'])
        self.assertEqual(lex.parse_args(text='exec_or'),[u'exec_or'])
        self.assertEqual(lex.parse_args(text='exec_orb'),[u'exec_orb'])
        self.assertEqual(lex.parse_args(text='exec_orl'),[u'exec_orl'])
        self.assertEqual(lex.parse_args(text='exec_orw'),[u'exec_orw'])
        self.assertEqual(lex.parse_args(text='exec_rcl'),[u'exec_rcl'])
        self.assertEqual(lex.parse_args(text='exec_rclb'),[u'exec_rclb'])
        self.assertEqual(lex.parse_args(text='exec_rcll'),[u'exec_rcll'])
        self.assertEqual(lex.parse_args(text='exec_rclw'),[u'exec_rclw'])
        self.assertEqual(lex.parse_args(text='exec_rcr'),[u'exec_rcr'])
        self.assertEqual(lex.parse_args(text='exec_rcrb'),[u'exec_rcrb'])
        self.assertEqual(lex.parse_args(text='exec_rcrl'),[u'exec_rcrl'])
        self.assertEqual(lex.parse_args(text='exec_rcrw'),[u'exec_rcrw'])
        self.assertEqual(lex.parse_args(text='exec_rol'),[u'exec_rol'])
        self.assertEqual(lex.parse_args(text='exec_rolb'),[u'exec_rolb'])
        self.assertEqual(lex.parse_args(text='exec_roll'),[u'exec_roll'])
        self.assertEqual(lex.parse_args(text='exec_rolw'),[u'exec_rolw'])
        self.assertEqual(lex.parse_args(text='exec_ror'),[u'exec_ror'])
        self.assertEqual(lex.parse_args(text='exec_rorb'),[u'exec_rorb'])
        self.assertEqual(lex.parse_args(text='exec_rorl'),[u'exec_rorl'])
        self.assertEqual(lex.parse_args(text='exec_rorw'),[u'exec_rorw'])
        self.assertEqual(lex.parse_args(text='exec_sar'),[u'exec_sar'])
        self.assertEqual(lex.parse_args(text='exec_sarb'),[u'exec_sarb'])
        self.assertEqual(lex.parse_args(text='exec_sarl'),[u'exec_sarl'])
        self.assertEqual(lex.parse_args(text='exec_sarw'),[u'exec_sarw'])
        self.assertEqual(lex.parse_args(text='exec_sbb'),[u'exec_sbb'])
        self.assertEqual(lex.parse_args(text='exec_sbbb'),[u'exec_sbbb'])
        self.assertEqual(lex.parse_args(text='exec_sbbl'),[u'exec_sbbl'])
        self.assertEqual(lex.parse_args(text='exec_sbbw'),[u'exec_sbbw'])
        self.assertEqual(lex.parse_args(text='exec_shl'),[u'exec_shl'])
        self.assertEqual(lex.parse_args(text='exec_shlb'),[u'exec_shlb'])
        self.assertEqual(lex.parse_args(text='exec_shld'),[u'exec_shld'])
        self.assertEqual(lex.parse_args(text='exec_shldl'),[u'exec_shldl'])
        self.assertEqual(lex.parse_args(text='exec_shldw'),[u'exec_shldw'])
        self.assertEqual(lex.parse_args(text='exec_shll'),[u'exec_shll'])
        self.assertEqual(lex.parse_args(text='exec_shlw'),[u'exec_shlw'])
        self.assertEqual(lex.parse_args(text='exec_shr'),[u'exec_shr'])
        self.assertEqual(lex.parse_args(text='exec_shrb'),[u'exec_shrb'])
        self.assertEqual(lex.parse_args(text='exec_shrd'),[u'exec_shrd'])
        self.assertEqual(lex.parse_args(text='exec_shrdl'),[u'exec_shrdl'])
        self.assertEqual(lex.parse_args(text='exec_shrdw'),[u'exec_shrdw'])
        self.assertEqual(lex.parse_args(text='exec_shrl'),[u'exec_shrl'])
        self.assertEqual(lex.parse_args(text='exec_shrw'),[u'exec_shrw'])
        self.assertEqual(lex.parse_args(text='exec_sub'),[u'exec_sub'])
        self.assertEqual(lex.parse_args(text='exec_subb'),[u'exec_subb'])
        self.assertEqual(lex.parse_args(text='exec_subl'),[u'exec_subl'])
        self.assertEqual(lex.parse_args(text='exec_subw'),[u'exec_subw'])
        self.assertEqual(lex.parse_args(text='exec_xor'),[u'exec_xor'])
        self.assertEqual(lex.parse_args(text='exec_xorb'),[u'exec_xorb'])
        self.assertEqual(lex.parse_args(text='exec_xorl'),[u'exec_xorl'])
        self.assertEqual(lex.parse_args(text='exec_xorw'),[u'exec_xorw'])
        self.assertEqual(lex.parse_args(text='exitLabel'),[u'exitLabel'])
        self.assertEqual(lex.parse_args(text='failure ; // because unsigned comparaison'),[u'failure'])
        self.assertEqual(lex.parse_args(text='failure ; http://blog.rewolf.pl/blog/?p=177'),[u'failure'])
        self.assertEqual(lex.parse_args(text='failure'),[u'failure'])
        self.assertEqual(lex.parse_args(text='finTest'),[u'finTest'])
        self.assertEqual(lex.parse_args(text='flags, 0D5h'),[u'flags', u'0D5h'])
        self.assertEqual(lex.parse_args(text='flags, 1'),[u'flags', u'1'])
        self.assertEqual(lex.parse_args(text='flags, 11h'),[u'flags', u'11h'])
        self.assertEqual(lex.parse_args(text='flags, 801h'),[u'flags', u'801h'])
        self.assertEqual(lex.parse_args(text='flags, 8C5h'),[u'flags', u'8C5h'])
        self.assertEqual(lex.parse_args(text='flags, 8D5h'),[u'flags', u'8D5h'])
        self.assertEqual(lex.parse_args(text='fs cx'),[u'fs cx'])
        self.assertEqual(lex.parse_args(text='fs, ax'),[u'fs', u'ax'])
        self.assertEqual(lex.parse_args(text='fs,ax'),[u'fs', u'ax'])
        self.assertEqual(lex.parse_args(text='i'),[u'i'])
        self.assertEqual(lex.parse_args(text='i, 1000h'),[u'i', u'1000h'])
        self.assertEqual(lex.parse_args(text='i, 100h'),[u'i', u'100h'])
        self.assertEqual(lex.parse_args(text='i, 10h'),[u'i', u'10h'])
        self.assertEqual(lex.parse_args(text='i, 12345678h'),[u'i', u'12345678h'])
        self.assertEqual(lex.parse_args(text='i, 20h'),[u'i', u'20h'])
        self.assertEqual(lex.parse_args(text='i, 4'),[u'i', u'4'])
        self.assertEqual(lex.parse_args(text='i, esi'),[u'i', u'esi'])
        self.assertEqual(lex.parse_args(text='i, i'),[u'i', u'i'])
        self.assertEqual(lex.parse_args(text='incebx'),[u'incebx'])
        self.assertEqual(lex.parse_args(text='load_raw'),[u'load_raw'])
        self.assertEqual(lex.parse_args(text='loc_101B7'),[u'loc_101B7'])
        self.assertEqual(lex.parse_args(text='loc_4081F6'),[u'loc_4081F6'])
        self.assertEqual(lex.parse_args(text='loc_408229'),[u'loc_408229'])
        self.assertEqual(lex.parse_args(text='loc_408464'),[u'loc_408464'])
        self.assertEqual(lex.parse_args(text='loc_408496'),[u'loc_408496'])
        self.assertEqual(lex.parse_args(text='loc_4084DF'),[u'loc_4084DF'])
        self.assertEqual(lex.parse_args(text='loc_408511'),[u'loc_408511'])
        self.assertEqual(lex.parse_args(text='loc_40855A'),[u'loc_40855A'])
        self.assertEqual(lex.parse_args(text='loc_40858C'),[u'loc_40858C'])
        self.assertEqual(lex.parse_args(text='loc_409652'),[u'loc_409652'])
        self.assertEqual(lex.parse_args(text='near ptr _clean_11C43'),[u'near ptr _clean_11C43'])
        self.assertEqual(lex.parse_args(text='near ptr _memfree_125DA'),[u'near ptr _memfree_125DA'])
        self.assertEqual(lex.parse_args(text='near ptr _snd_offx'),[u'near ptr _snd_offx'])
        self.assertEqual(lex.parse_args(text='near ptr sub_12B18'),[u'near ptr sub_12B18'])
        self.assertEqual(lex.parse_args(text='near ptr sub_12B83'),[u'near ptr sub_12B83'])
        self.assertEqual(lex.parse_args(text='next'),[u'next'])
        self.assertEqual(lex.parse_args(text='noerror'),[u'noerror'])
        self.assertEqual(lex.parse_args(text='offset failure'),[u'offset failure'])
        self.assertEqual(lex.parse_args(text='offset test_adc'),[u'offset test_adc'])
        self.assertEqual(lex.parse_args(text='offset test_add'),[u'offset test_add'])
        self.assertEqual(lex.parse_args(text='offset test_and'),[u'offset test_and'])
        self.assertEqual(lex.parse_args(text='offset test_bt'),[u'offset test_bt'])
        self.assertEqual(lex.parse_args(text='offset test_btc      ; DATA XREF: main+7\xe2\x86\x91o'),[u'offset test_btc'])
        self.assertEqual(lex.parse_args(text='offset test_btr'),[u'offset test_btr'])
        self.assertEqual(lex.parse_args(text='offset test_bts'),[u'offset test_bts'])
        self.assertEqual(lex.parse_args(text='offset test_cmp'),[u'offset test_cmp'])
        self.assertEqual(lex.parse_args(text='offset test_dec'),[u'offset test_dec'])
        self.assertEqual(lex.parse_args(text='offset test_inc'),[u'offset test_inc'])
        self.assertEqual(lex.parse_args(text='offset test_neg'),[u'offset test_neg'])
        self.assertEqual(lex.parse_args(text='offset test_not'),[u'offset test_not'])
        self.assertEqual(lex.parse_args(text='offset test_or'),[u'offset test_or'])
        self.assertEqual(lex.parse_args(text='offset test_rcl'),[u'offset test_rcl'])
        self.assertEqual(lex.parse_args(text='offset test_rcr'),[u'offset test_rcr'])
        self.assertEqual(lex.parse_args(text='offset test_rol'),[u'offset test_rol'])
        self.assertEqual(lex.parse_args(text='offset test_ror'),[u'offset test_ror'])
        self.assertEqual(lex.parse_args(text='offset test_sar'),[u'offset test_sar'])
        self.assertEqual(lex.parse_args(text='offset test_sbb'),[u'offset test_sbb'])
        self.assertEqual(lex.parse_args(text='offset test_shl'),[u'offset test_shl'])
        self.assertEqual(lex.parse_args(text='offset test_shld'),[u'offset test_shld'])
        self.assertEqual(lex.parse_args(text='offset test_shr'),[u'offset test_shr'])
        self.assertEqual(lex.parse_args(text='offset test_shrd'),[u'offset test_shrd'])
        self.assertEqual(lex.parse_args(text='offset test_sub'),[u'offset test_sub'])
        self.assertEqual(lex.parse_args(text='offset test_xor'),[u'offset test_xor'])
        self.assertEqual(lex.parse_args(text='offset var5'),[u'offset var5'])
        self.assertEqual(lex.parse_args(text='ok'),[u'ok'])
        self.assertEqual(lex.parse_args(text='op0, 32432434h'),[u'op0', u'32432434h'])
        self.assertEqual(lex.parse_args(text='printeax'),[u'printeax'])
        self.assertEqual(lex.parse_args(text='printf'),[u'printf'])
        self.assertEqual(lex.parse_args(text='qword ptr -20h'),[u'qword ptr -20h'])
        self.assertEqual(lex.parse_args(text='res'),[u'res'])
        self.assertEqual(lex.parse_args(text='res, 0FFFFFFFFh'),[u'res', u'0FFFFFFFFh'])
        self.assertEqual(lex.parse_args(text='res, res'),[u'res', u'res'])
        self.assertEqual(lex.parse_args(text='s0_0'),[u's0_0'])
        self.assertEqual(lex.parse_args(text='s1_0'),[u's1_0'])
        self.assertEqual(lex.parse_args(text='short P2'),[u'short P2'])
        self.assertEqual(lex.parse_args(text='short _lfreaderr'),[u'short _lfreaderr'])
        self.assertEqual(lex.parse_args(text='short loc_10045'),[u'short loc_10045'])
        self.assertEqual(lex.parse_args(text='short loc_10064'),[u'short loc_10064'])
        self.assertEqual(lex.parse_args(text='short loc_1008A'),[u'short loc_1008A'])
        self.assertEqual(lex.parse_args(text='short loc_40458F'),[u'short loc_40458F'])
        self.assertEqual(lex.parse_args(text='short loc_4045E7'),[u'short loc_4045E7'])
        self.assertEqual(lex.parse_args(text='short loc_40463E'),[u'short loc_40463E'])
        self.assertEqual(lex.parse_args(text='short loc_4046D6'),[u'short loc_4046D6'])
        self.assertEqual(lex.parse_args(text='short loc_4046F6'),[u'short loc_4046F6'])
        self.assertEqual(lex.parse_args(text='short loc_404716'),[u'short loc_404716'])
        self.assertEqual(lex.parse_args(text='short loc_404736'),[u'short loc_404736'])
        self.assertEqual(lex.parse_args(text='short loc_404756'),[u'short loc_404756'])
        self.assertEqual(lex.parse_args(text='short loc_404776'),[u'short loc_404776'])
        self.assertEqual(lex.parse_args(text='short loc_404796'),[u'short loc_404796'])
        self.assertEqual(lex.parse_args(text='short loc_4047DD'),[u'short loc_4047DD'])
        self.assertEqual(lex.parse_args(text='short loc_404835'),[u'short loc_404835'])
        self.assertEqual(lex.parse_args(text='short loc_40488C'),[u'short loc_40488C'])
        self.assertEqual(lex.parse_args(text='short loc_404924'),[u'short loc_404924'])
        self.assertEqual(lex.parse_args(text='short loc_404944'),[u'short loc_404944'])
        self.assertEqual(lex.parse_args(text='short loc_404964'),[u'short loc_404964'])
        self.assertEqual(lex.parse_args(text='short loc_404984'),[u'short loc_404984'])
        self.assertEqual(lex.parse_args(text='short loc_4049A4'),[u'short loc_4049A4'])
        self.assertEqual(lex.parse_args(text='short loc_4049C4'),[u'short loc_4049C4'])
        self.assertEqual(lex.parse_args(text='short loc_4049E4'),[u'short loc_4049E4'])
        self.assertEqual(lex.parse_args(text='short loc_404A2B'),[u'short loc_404A2B'])
        self.assertEqual(lex.parse_args(text='short loc_404A83'),[u'short loc_404A83'])
        self.assertEqual(lex.parse_args(text='short loc_404ADA'),[u'short loc_404ADA'])
        self.assertEqual(lex.parse_args(text='short loc_404B72'),[u'short loc_404B72'])
        self.assertEqual(lex.parse_args(text='short loc_404B92'),[u'short loc_404B92'])
        self.assertEqual(lex.parse_args(text='short loc_404BB2'),[u'short loc_404BB2'])
        self.assertEqual(lex.parse_args(text='short loc_404BD2'),[u'short loc_404BD2'])
        self.assertEqual(lex.parse_args(text='short loc_404BF2'),[u'short loc_404BF2'])
        self.assertEqual(lex.parse_args(text='short loc_404C12'),[u'short loc_404C12'])
        self.assertEqual(lex.parse_args(text='short loc_404C32'),[u'short loc_404C32'])
        self.assertEqual(lex.parse_args(text='short loc_404C79'),[u'short loc_404C79'])
        self.assertEqual(lex.parse_args(text='short loc_404CD1'),[u'short loc_404CD1'])
        self.assertEqual(lex.parse_args(text='short loc_404D28'),[u'short loc_404D28'])
        self.assertEqual(lex.parse_args(text='short loc_404DC0'),[u'short loc_404DC0'])
        self.assertEqual(lex.parse_args(text='short loc_404DE0'),[u'short loc_404DE0'])
        self.assertEqual(lex.parse_args(text='short loc_404E00'),[u'short loc_404E00'])
        self.assertEqual(lex.parse_args(text='short loc_404E20'),[u'short loc_404E20'])
        self.assertEqual(lex.parse_args(text='short loc_404E40'),[u'short loc_404E40'])
        self.assertEqual(lex.parse_args(text='short loc_404E60'),[u'short loc_404E60'])
        self.assertEqual(lex.parse_args(text='short loc_404E80'),[u'short loc_404E80'])
        self.assertEqual(lex.parse_args(text='short loc_404EC7'),[u'short loc_404EC7'])
        self.assertEqual(lex.parse_args(text='short loc_404F1F'),[u'short loc_404F1F'])
        self.assertEqual(lex.parse_args(text='short loc_404F76'),[u'short loc_404F76'])
        self.assertEqual(lex.parse_args(text='short loc_40500E'),[u'short loc_40500E'])
        self.assertEqual(lex.parse_args(text='short loc_40502E'),[u'short loc_40502E'])
        self.assertEqual(lex.parse_args(text='short loc_40504E'),[u'short loc_40504E'])
        self.assertEqual(lex.parse_args(text='short loc_40506E'),[u'short loc_40506E'])
        self.assertEqual(lex.parse_args(text='short loc_40508E'),[u'short loc_40508E'])
        self.assertEqual(lex.parse_args(text='short loc_4050AE'),[u'short loc_4050AE'])
        self.assertEqual(lex.parse_args(text='short loc_4050CE'),[u'short loc_4050CE'])
        self.assertEqual(lex.parse_args(text='short loc_405115'),[u'short loc_405115'])
        self.assertEqual(lex.parse_args(text='short loc_40516D'),[u'short loc_40516D'])
        self.assertEqual(lex.parse_args(text='short loc_4051C4'),[u'short loc_4051C4'])
        self.assertEqual(lex.parse_args(text='short loc_4052A0'),[u'short loc_4052A0'])
        self.assertEqual(lex.parse_args(text='short loc_4052C0'),[u'short loc_4052C0'])
        self.assertEqual(lex.parse_args(text='short loc_4052E0'),[u'short loc_4052E0'])
        self.assertEqual(lex.parse_args(text='short loc_405300'),[u'short loc_405300'])
        self.assertEqual(lex.parse_args(text='short loc_405320'),[u'short loc_405320'])
        self.assertEqual(lex.parse_args(text='short loc_405340'),[u'short loc_405340'])
        self.assertEqual(lex.parse_args(text='short loc_405360'),[u'short loc_405360'])
        self.assertEqual(lex.parse_args(text='short loc_4053A7'),[u'short loc_4053A7'])
        self.assertEqual(lex.parse_args(text='short loc_4053FF'),[u'short loc_4053FF'])
        self.assertEqual(lex.parse_args(text='short loc_405456'),[u'short loc_405456'])
        self.assertEqual(lex.parse_args(text='short loc_405532'),[u'short loc_405532'])
        self.assertEqual(lex.parse_args(text='short loc_405552'),[u'short loc_405552'])
        self.assertEqual(lex.parse_args(text='short loc_405572'),[u'short loc_405572'])
        self.assertEqual(lex.parse_args(text='short loc_405592'),[u'short loc_405592'])
        self.assertEqual(lex.parse_args(text='short loc_4055B2'),[u'short loc_4055B2'])
        self.assertEqual(lex.parse_args(text='short loc_4055D2'),[u'short loc_4055D2'])
        self.assertEqual(lex.parse_args(text='short loc_4055F2'),[u'short loc_4055F2'])
        self.assertEqual(lex.parse_args(text='short loc_40563E'),[u'short loc_40563E'])
        self.assertEqual(lex.parse_args(text='short loc_4056A0'),[u'short loc_4056A0'])
        self.assertEqual(lex.parse_args(text='short loc_40572C'),[u'short loc_40572C'])
        self.assertEqual(lex.parse_args(text='short loc_40574C'),[u'short loc_40574C'])
        self.assertEqual(lex.parse_args(text='short loc_40576C'),[u'short loc_40576C'])
        self.assertEqual(lex.parse_args(text='short loc_40578C'),[u'short loc_40578C'])
        self.assertEqual(lex.parse_args(text='short loc_4057AC'),[u'short loc_4057AC'])
        self.assertEqual(lex.parse_args(text='short loc_4057CC'),[u'short loc_4057CC'])
        self.assertEqual(lex.parse_args(text='short loc_4057EC'),[u'short loc_4057EC'])
        self.assertEqual(lex.parse_args(text='short loc_405838'),[u'short loc_405838'])
        self.assertEqual(lex.parse_args(text='short loc_40589A'),[u'short loc_40589A'])
        self.assertEqual(lex.parse_args(text='short loc_405926'),[u'short loc_405926'])
        self.assertEqual(lex.parse_args(text='short loc_405946'),[u'short loc_405946'])
        self.assertEqual(lex.parse_args(text='short loc_405966'),[u'short loc_405966'])
        self.assertEqual(lex.parse_args(text='short loc_405986'),[u'short loc_405986'])
        self.assertEqual(lex.parse_args(text='short loc_4059A6'),[u'short loc_4059A6'])
        self.assertEqual(lex.parse_args(text='short loc_4059C6'),[u'short loc_4059C6'])
        self.assertEqual(lex.parse_args(text='short loc_4059E6'),[u'short loc_4059E6'])
        self.assertEqual(lex.parse_args(text='short loc_405A2E'),[u'short loc_405A2E'])
        self.assertEqual(lex.parse_args(text='short loc_405A85'),[u'short loc_405A85'])
        self.assertEqual(lex.parse_args(text='short loc_405B0A'),[u'short loc_405B0A'])
        self.assertEqual(lex.parse_args(text='short loc_405B2A'),[u'short loc_405B2A'])
        self.assertEqual(lex.parse_args(text='short loc_405B4A'),[u'short loc_405B4A'])
        self.assertEqual(lex.parse_args(text='short loc_405B6A'),[u'short loc_405B6A'])
        self.assertEqual(lex.parse_args(text='short loc_405B8A'),[u'short loc_405B8A'])
        self.assertEqual(lex.parse_args(text='short loc_405BAA'),[u'short loc_405BAA'])
        self.assertEqual(lex.parse_args(text='short loc_405BCA'),[u'short loc_405BCA'])
        self.assertEqual(lex.parse_args(text='short loc_405C12'),[u'short loc_405C12'])
        self.assertEqual(lex.parse_args(text='short loc_405C69'),[u'short loc_405C69'])
        self.assertEqual(lex.parse_args(text='short loc_405CEE'),[u'short loc_405CEE'])
        self.assertEqual(lex.parse_args(text='short loc_405D0E'),[u'short loc_405D0E'])
        self.assertEqual(lex.parse_args(text='short loc_405D2E'),[u'short loc_405D2E'])
        self.assertEqual(lex.parse_args(text='short loc_405D4E'),[u'short loc_405D4E'])
        self.assertEqual(lex.parse_args(text='short loc_405D6E'),[u'short loc_405D6E'])
        self.assertEqual(lex.parse_args(text='short loc_405D8E'),[u'short loc_405D8E'])
        self.assertEqual(lex.parse_args(text='short loc_405DAE'),[u'short loc_405DAE'])
        self.assertEqual(lex.parse_args(text='short loc_405DF6'),[u'short loc_405DF6'])
        self.assertEqual(lex.parse_args(text='short loc_405E4D'),[u'short loc_405E4D'])
        self.assertEqual(lex.parse_args(text='short loc_405ED2'),[u'short loc_405ED2'])
        self.assertEqual(lex.parse_args(text='short loc_405EF2'),[u'short loc_405EF2'])
        self.assertEqual(lex.parse_args(text='short loc_405F12'),[u'short loc_405F12'])
        self.assertEqual(lex.parse_args(text='short loc_405F32'),[u'short loc_405F32'])
        self.assertEqual(lex.parse_args(text='short loc_405F52'),[u'short loc_405F52'])
        self.assertEqual(lex.parse_args(text='short loc_405F72'),[u'short loc_405F72'])
        self.assertEqual(lex.parse_args(text='short loc_405F92'),[u'short loc_405F92'])
        self.assertEqual(lex.parse_args(text='short loc_405FDA'),[u'short loc_405FDA'])
        self.assertEqual(lex.parse_args(text='short loc_406031'),[u'short loc_406031'])
        self.assertEqual(lex.parse_args(text='short loc_4060B6'),[u'short loc_4060B6'])
        self.assertEqual(lex.parse_args(text='short loc_4060D6'),[u'short loc_4060D6'])
        self.assertEqual(lex.parse_args(text='short loc_4060F6'),[u'short loc_4060F6'])
        self.assertEqual(lex.parse_args(text='short loc_406116'),[u'short loc_406116'])
        self.assertEqual(lex.parse_args(text='short loc_406136'),[u'short loc_406136'])
        self.assertEqual(lex.parse_args(text='short loc_406156'),[u'short loc_406156'])
        self.assertEqual(lex.parse_args(text='short loc_406176'),[u'short loc_406176'])
        self.assertEqual(lex.parse_args(text='short loc_4068F5'),[u'short loc_4068F5'])
        self.assertEqual(lex.parse_args(text='short loc_40698C'),[u'short loc_40698C'])
        self.assertEqual(lex.parse_args(text='short loc_406A1F'),[u'short loc_406A1F'])
        self.assertEqual(lex.parse_args(text='short loc_406AAF'),[u'short loc_406AAF'])
        self.assertEqual(lex.parse_args(text='short loc_406B3F'),[u'short loc_406B3F'])
        self.assertEqual(lex.parse_args(text='short loc_406BCF'),[u'short loc_406BCF'])
        self.assertEqual(lex.parse_args(text='short loc_406C5A'),[u'short loc_406C5A'])
        self.assertEqual(lex.parse_args(text='short loc_406CF8'),[u'short loc_406CF8'])
        self.assertEqual(lex.parse_args(text='short loc_406D8E'),[u'short loc_406D8E'])
        self.assertEqual(lex.parse_args(text='short loc_406E24'),[u'short loc_406E24'])
        self.assertEqual(lex.parse_args(text='short loc_406EBA'),[u'short loc_406EBA'])
        self.assertEqual(lex.parse_args(text='short loc_406F50'),[u'short loc_406F50'])
        self.assertEqual(lex.parse_args(text='short loc_406FE6'),[u'short loc_406FE6'])
        self.assertEqual(lex.parse_args(text='short loc_40707C'),[u'short loc_40707C'])
        self.assertEqual(lex.parse_args(text='short loc_407112'),[u'short loc_407112'])
        self.assertEqual(lex.parse_args(text='short loc_4071A8'),[u'short loc_4071A8'])
        self.assertEqual(lex.parse_args(text='short loc_40723E'),[u'short loc_40723E'])
        self.assertEqual(lex.parse_args(text='short loc_4072D4'),[u'short loc_4072D4'])
        self.assertEqual(lex.parse_args(text='short loc_40736A'),[u'short loc_40736A'])
        self.assertEqual(lex.parse_args(text='short loc_407400'),[u'short loc_407400'])
        self.assertEqual(lex.parse_args(text='short loc_407496'),[u'short loc_407496'])
        self.assertEqual(lex.parse_args(text='short loc_40752C'),[u'short loc_40752C'])
        self.assertEqual(lex.parse_args(text='short loc_4075C2'),[u'short loc_4075C2'])
        self.assertEqual(lex.parse_args(text='short loc_407658'),[u'short loc_407658'])
        self.assertEqual(lex.parse_args(text='short loc_4076EE'),[u'short loc_4076EE'])
        self.assertEqual(lex.parse_args(text='short loc_407784'),[u'short loc_407784'])
        self.assertEqual(lex.parse_args(text='short loc_40781A'),[u'short loc_40781A'])
        self.assertEqual(lex.parse_args(text='short loc_4078B0'),[u'short loc_4078B0'])
        self.assertEqual(lex.parse_args(text='short loc_407E46'),[u'short loc_407E46'])
        self.assertEqual(lex.parse_args(text='short loc_407F72'),[u'short loc_407F72'])
        self.assertEqual(lex.parse_args(text='short loc_408008'),[u'short loc_408008'])
        self.assertEqual(lex.parse_args(text='short loc_40809E'),[u'short loc_40809E'])
        self.assertEqual(lex.parse_args(text='short loc_408139'),[u'short loc_408139'])
        self.assertEqual(lex.parse_args(text='short loc_4081D5'),[u'short loc_4081D5'])
        self.assertEqual(lex.parse_args(text='short loc_4083C9'),[u'short loc_4083C9'])
        self.assertEqual(lex.parse_args(text='short loc_4083E9'),[u'short loc_4083E9'])
        self.assertEqual(lex.parse_args(text='short loc_40841B'),[u'short loc_40841B'])
        self.assertEqual(lex.parse_args(text='short loc_408444'),[u'short loc_408444'])
        self.assertEqual(lex.parse_args(text='short loc_4084BF'),[u'short loc_4084BF'])
        self.assertEqual(lex.parse_args(text='short loc_40853A'),[u'short loc_40853A'])
        self.assertEqual(lex.parse_args(text='short loc_40B72A'),[u'short loc_40B72A'])
        self.assertEqual(lex.parse_args(text='short loc_40B7AD'),[u'short loc_40B7AD'])
        self.assertEqual(lex.parse_args(text='short loc_40D571'),[u'short loc_40D571'])
        self.assertEqual(lex.parse_args(text='short loc_40D581'),[u'short loc_40D581'])
        self.assertEqual(lex.parse_args(text='si, [bx+5]'),[u'si', u'[bx+5]'])
        self.assertEqual(lex.parse_args(text='si, offset _byte_27FE8'),[u'si', u'offset _byte_27FE8'])
        self.assertEqual(lex.parse_args(text='si, offset _byte_306DE'),[u'si', u'offset _byte_306DE'])
        self.assertEqual(lex.parse_args(text='si, offset _byte_308BE'),[u'si', u'offset _byte_308BE'])
        self.assertEqual(lex.parse_args(text='si, offset _dword_27BC8'),[u'si', u'offset _dword_27BC8'])
        self.assertEqual(lex.parse_args(text='small word ptr [esp]'),[u'small word ptr [esp]'])
        self.assertEqual(lex.parse_args(text='sp, _savesp_245D0'),[u'sp', u'_savesp_245D0'])
        self.assertEqual(lex.parse_args(text='test2'),[u'test2'])
        self.assertEqual(lex.parse_args(text='test_bcd'),[u'test_bcd'])
        self.assertEqual(lex.parse_args(text='test_bsx'),[u'test_bsx'])
        self.assertEqual(lex.parse_args(text='test_conv'),[u'test_conv'])
        self.assertEqual(lex.parse_args(text='test_divb'),[u'test_divb'])
        self.assertEqual(lex.parse_args(text='test_divl'),[u'test_divl'])
        self.assertEqual(lex.parse_args(text='test_divw'),[u'test_divw'])
        self.assertEqual(lex.parse_args(text='test_idivb'),[u'test_idivb'])
        self.assertEqual(lex.parse_args(text='test_idivl'),[u'test_idivl'])
        self.assertEqual(lex.parse_args(text='test_idivw'),[u'test_idivw'])
        self.assertEqual(lex.parse_args(text='test_imulb'),[u'test_imulb'])
        self.assertEqual(lex.parse_args(text='test_imull'),[u'test_imull'])
        self.assertEqual(lex.parse_args(text='test_imull2'),[u'test_imull2'])
        self.assertEqual(lex.parse_args(text='test_imulw'),[u'test_imulw'])
        self.assertEqual(lex.parse_args(text='test_imulw2'),[u'test_imulw2'])
        self.assertEqual(lex.parse_args(text='test_jcc'),[u'test_jcc'])
        self.assertEqual(lex.parse_args(text='test_lea'),[u'test_lea'])
        self.assertEqual(lex.parse_args(text='test_loop'),[u'test_loop'])
        self.assertEqual(lex.parse_args(text='test_misc'),[u'test_misc'])
        self.assertEqual(lex.parse_args(text='test_mul'),[u'test_mul'])
        self.assertEqual(lex.parse_args(text='test_mulb'),[u'test_mulb'])
        self.assertEqual(lex.parse_args(text='test_mull'),[u'test_mull'])
        self.assertEqual(lex.parse_args(text='test_mulw'),[u'test_mulw'])
        self.assertEqual(lex.parse_args(text='test_popcnt'),[u'test_popcnt'])
        self.assertEqual(lex.parse_args(text='test_string'),[u'test_string'])
        self.assertEqual(lex.parse_args(text='test_xchg'),[u'test_xchg'])
        self.assertEqual(lex.parse_args(text='toto'),[u'toto'])
        self.assertEqual(lex.parse_args(text='toto1'),[u'toto1'])
        self.assertEqual(lex.parse_args(text='toto2'),[u'toto2'])
        self.assertEqual(lex.parse_args(text='var1'),[u'var1'])
        self.assertEqual(lex.parse_args(text='var1,1'),[u'var1', u'1'])
        self.assertEqual(lex.parse_args(text='var1,2'),[u'var1', u'2'])
        self.assertEqual(lex.parse_args(text='var1,al'),[u'var1', u'al'])
        self.assertEqual(lex.parse_args(text='var1[1],2'),[u'var1[1]', u'2'])
        self.assertEqual(lex.parse_args(text='var1[bx+si],2'),[u'var1[bx+si]', u'2'])
        self.assertEqual(lex.parse_args(text='var1[bx],2'),[u'var1[bx]', u'2'])
        self.assertEqual(lex.parse_args(text='var2,2'),[u'var2', u'2'])
        self.assertEqual(lex.parse_args(text='var2,bx'),[u'var2', u'bx'])
        self.assertEqual(lex.parse_args(text='var3'),[u'var3'])
        self.assertEqual(lex.parse_args(text='var3+3*4,4000000'),[u'var3+3*4', u'4000000'])
        self.assertEqual(lex.parse_args(text='var3+ebp,4000000'),[u'var3+ebp', u'4000000'])
        self.assertEqual(lex.parse_args(text='var3,-12'),[u'var3', u'-12'])
        self.assertEqual(lex.parse_args(text='var3,-13'),[u'var3', u'-13'])
        self.assertEqual(lex.parse_args(text='var3,3'),[u'var3', u'3'])
        self.assertEqual(lex.parse_args(text='var3,ecx'),[u'var3', u'ecx'])
        self.assertEqual(lex.parse_args(text='word ptr [ebp+var_20], ax'),[u'word ptr [ebp+var_20]', u'ax'])
        self.assertEqual(lex.parse_args(text='word ptr [ebp+var_20], dx'),[u'word ptr [ebp+var_20]', u'dx'])
        self.assertEqual(lex.parse_args(text='word ptr [var5+2],25'),[u'word ptr [var5+2]', u'25'])
        self.assertEqual(lex.parse_args(text='word ptr [var5+2],50'),[u'word ptr [var5+2]', u'50'])
        self.assertEqual(lex.parse_args(text='word ptr var5,0'),[u'word ptr var5', u'0'])
        self.assertEqual(lex.parse_args(text=u'0'),[u'0'])
        self.assertEqual(lex.parse_args(text=u'0BC6058h'),[u'0BC6058h'])
        self.assertEqual(lex.parse_args(text=u'9ABCDEFh'),[u'9ABCDEFh'])
        self.assertEqual(lex.parse_args(text=u'[esp]'),[u'[esp]'])
        self.assertEqual(lex.parse_args(text=u'ax'),[u'ax'])
        self.assertEqual(lex.parse_args(text=u'bx'),[u'bx'])
        self.assertEqual(lex.parse_args(text=u'cs'),[u'cs'])
        self.assertEqual(lex.parse_args(text=u'cx'),[u'cx'])
        self.assertEqual(lex.parse_args(text=u'ds'),[u'ds'])
        self.assertEqual(lex.parse_args(text=u'dword'),[u'dword'])
        self.assertEqual(lex.parse_args(text=u'dx'),[u'dx'])
        self.assertEqual(lex.parse_args(text=u'eax'),[u'eax'])
        self.assertEqual(lex.parse_args(text=u'ebp'),[u'ebp'])
        self.assertEqual(lex.parse_args(text=u'ebx'),[u'ebx'])
        self.assertEqual(lex.parse_args(text=u'ecx'),[u'ecx'])
        self.assertEqual(lex.parse_args(text=u'edi'),[u'edi'])
        self.assertEqual(lex.parse_args(text=u'edi_0'),[u'edi_0'])
        self.assertEqual(lex.parse_args(text=u'edx'),[u'edx'])
        self.assertEqual(lex.parse_args(text=u'es'),[u'es'])
        self.assertEqual(lex.parse_args(text=u'esi'),[u'esi'])
        self.assertEqual(lex.parse_args(text=u'esi_0'),[u'esi_0'])
        self.assertEqual(lex.parse_args(text=u'fs'),[u'fs'])
        self.assertEqual(lex.parse_args(text=u'i'),[u'i'])
        self.assertEqual(lex.parse_args(text=u'ptr'),[u'ptr'])
        self.assertEqual(lex.parse_args(text=u'res'),[u'res'])
        self.assertEqual(lex.parse_args(text=u's0_0'),[u's0_0'])
        self.assertEqual(lex.parse_args(text=u'small'),[u'small'])
        self.assertEqual(lex.parse_args(text=u'word'),[u'word'])
        #self.assertEqual(lex.parse_args_new_data(text=u'2*2 dup (0,testEqu*2,2*2,3)'),[[['2', '*', '2'],'dup', '(', ['0', ['testEqu', '*', '2'], ['2', '*', '2'], '3'], ')']])

    def test_parse_line_data(self):
        lex_instance = Lex()

        self.assertEqual(lex_instance.parse_line_data(line="ASCII DB '00000000',0Dh,0Ah,'$' ; buffer for ASCII string"),(u'ascii', 'db', ["'00000000'", '0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a070295122642\tdb '07/02/95 12:26:42',0 ; DATA XREF: seg003:off_2462E\x19o"),(u'_a070295122642', 'db', ["'07/02/95 12:26:42'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_a100Assembler\tdb '100% assembler!'"),(u'_a100assembler', 'db', ["'100% assembler!'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a1024\t\tdb '1024',0"),(u'_a1024', 'db', ["'1024'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_a130295211558\tdb '13/02/95 21:15:58',0 ; DATA XREF: _read_module+BE\x18w"),(u'_a130295211558', 'db', ["'13/02/95 21:15:58'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_a1Thru0\t\tdb '1 Thru 0'"),(u'_a1thru0', 'db', ["'1 Thru 0'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a2284116_8\tdb '2:284/116.8'"),(u'_a2284116_8', 'db', ["'2:284/116.8'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a24bitInterpolation db ' 24bit Interpolation'"),(u'_a24bitinterpolation', 'db', ["' 24bit Interpolation'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a256\t\tdb '256',0              ; DATA XREF: _text_init2+1CE\x18o"),(u'_a256', 'db', ["'256'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_a512\t\tdb '512',0"),(u'_a512', 'db', ["'512'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_a768\t\tdb '768',0"),(u'_a768', 'db', ["'768'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aAdlibSoundcard\tdb 'Adlib SoundCard',0  ; DATA XREF: dseg:02BA\x18o"),(u'_aadlibsoundcard', 'db', ["'Adlib SoundCard'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aAdlibSoundcard_0 db 'Adlib SoundCard',0 ; DATA XREF: seg003:0D6A\x18o"),(u'_aadlibsoundcard_0', 'db', ["'Adlib SoundCard'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aAndWriteFollowingTe db\t' and write following text in your message:'"),(u'_aandwritefollowingte', 'db', ["' and write following text in your message:'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aAnd\t\tdb ' and '"),(u'_aand', 'db', ["' and '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aArpeggio\tdb 'Arpeggio       ',0  ; DATA XREF: seg001:loc_1AB0D\x18o"),(u'_aarpeggio', 'db', ["'Arpeggio       '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aAt\t\tdb ' at',0              ; DATA XREF: seg003:10BF\x19o seg003:1152\x19o ..."),(u'_aat', 'db', ["' at'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aAutoToneporta\tdb 'Auto TonePorta ',0"),(u'_aautotoneporta', 'db', ["'Auto TonePorta '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aBackspace\tdb 'BackSpace'"),(u'_abackspace', 'db', ["'BackSpace'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aBasePort\tdb ' base port ',0      ; DATA XREF: seg003:10C3\x19o seg003:1156\x19o ..."),(u'_abaseport', 'db', ["' base port '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aBmod2stm\tdb 'BMOD2STM'"),(u'_abmod2stm', 'db', ["'BMOD2STM'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aCd81\t\tdb 'CD81'"),(u'_acd81', 'db', ["'CD81'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aCh\t\tdb 'CH'"),(u'_ach', 'db', ["'CH'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aChannels\tdb 'Channels      :'"),(u'_achannels', 'db', ["'Channels      :'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aChn\t\tdb 'CHN'"),(u'_achn', 'db', ["'CHN'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aConfigFileNotF\tdb 'Config file not found. Run ISETUP first',0Dh,0Ah,'$'"),(u'_aconfigfilenotf', 'db', ["'Config file not found. Run ISETUP first'", '0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aCopyrightC1994\tdb 'Copyright (c) 1994,1995 by Stefan Danes and Ramon van Gorkom',0"),(u'_acopyrightc1994', 'db', ["'Copyright (c) 1994,1995 by Stefan Danes and Ramon van Gorkom'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aCouldNotFindT_0 db 'Could not find the Gravis UltraSound at the specified port addres'"),(u'_acouldnotfindt_0', 'db', ["'Could not find the Gravis UltraSound at the specified port addres'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aCouldNotFindThe db 'Could not find the ULTRASND environment string',0Dh,0Ah,0"),(u'_acouldnotfindthe', 'db', ["'Could not find the ULTRASND environment string'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aCovox\t\tdb 'Covox',0            ; DATA XREF: dseg:02B6\x18o"),(u'_acovox', 'db', ["'Covox'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aCovox_0\tdb 'Covox',0            ; DATA XREF: seg003:0D66\x18o"),(u'_acovox_0', 'db', ["'Covox'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aCtrlDel\tdb 'Ctrl Del'"),(u'_actrldel', 'db', ["'Ctrl Del'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aCurrentSoundcard db 0Dh,'Current Soundcard settings:',0Dh,0Ah ; DATA XREF: _start:loc_19057\x18o"),(u'_acurrentsoundcard', 'db', ['0Dh', "'Current Soundcard settings:'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="_aCurrentTrack\tdb 'Current Track :'"),(u'_acurrenttrack', 'db', ["'Current Track :'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aCursor_0\tdb 'Cursor ',1Bh,' '"),(u'_acursor_0', 'db', ["'Cursor '", '1Bh', "' '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aCursor_1\tdb 'Cursor '"),(u'_acursor_1', 'db', ["'Cursor '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDecIncAmplify_0 db '  Dec/Inc amplify'"),(u'_adecincamplify_0', 'db', ["'  Dec/Inc amplify'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDecIncVolume_0\tdb '  Dec/Inc volume'"),(u'_adecincvolume_0', 'db', ["'  Dec/Inc volume'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDel\t\tdb 'Del'"),(u'_adel', 'db', ["'Del'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDeleteAllFilesWhich db\t'Delete all files which are marked to delete'"),(u'_adeleteallfileswhich', 'db', ["'Delete all files which are marked to delete'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDeleteMarkedFil db 'Delete marked files? [Y/N]',0 ; DATA XREF: _start+635\x18o"),(u'_adeletemarkedfil', 'db', ["'Delete marked files? [Y/N]'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aDeletingFile\tdb 'Deleting file: '    ; DATA XREF: _start+69F\x18o"),(u'_adeletingfile', 'db', ["'Deleting file: '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDeviceNotIniti\tdb 'Device not initialised!',0 ; DATA XREF: sub_12D05+8\x18o"),(u'_adevicenotiniti', 'db', ["'Device not initialised!'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aDisableBpmOnOff db ' Disable BPM on/off'"),(u'_adisablebpmonoff', 'db', ["' Disable BPM on/off'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDma\t\tdb ', DMA '"),(u'_adma', 'db', ["', DMA '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDosShellTypeExitT_0 db\t'DOS Shell (Type EXIT to return)'"),(u'_adosshelltypeexitt_0', 'db', ["'DOS Shell (Type EXIT to return)'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDosShellTypeExitToR db\t'  DOS Shell (Type EXIT to return)'"),(u'_adosshelltypeexittor', 'db', ["'  DOS Shell (Type EXIT to return)'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aDramDma\tdb ', DRAM-DMA '"),(u'_adramdma', 'db', ["', DRAM-DMA '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aE_command\tdb 'E_Command      ',0"),(u'_ae_command', 'db', ["'E_Command      '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aE_g_\t\tdb 'E.G.'"),(u'_ae_g_', 'db', ["'E.G.'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aEndPattern\tdb '  End pattern'"),(u'_aendpattern', 'db', ["'  End pattern'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aEnd\t\tdb 'End'"),(u'_aend', 'db', ["'End'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aEnd_0\t\tdb 'End'"),(u'_aend_0', 'db', ["'End'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aEnter\t\tdb 'Enter'"),(u'_aenter', 'db', ["'Enter'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aErrorCouldNotFi db 'Error: Could not find IRQ/DMA!',0Dh,0Ah,0"),(u'_aerrorcouldnotfi', 'db', ["'Error: Could not find IRQ/DMA!'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aErrorCouldNot_0 db 'Error: Could not find IRQ!',0Dh,0Ah,0 ; DATA XREF: _sb_detect_irq+4C\x18o"),(u'_aerrorcouldnot_0', 'db', ["'Error: Could not find IRQ!'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aErrorCouldNot_1 db 'Error: Could not find DMA!',0Dh,0Ah,0 ; DATA XREF: _sb_detect_irq+D6\x18o"),(u'_aerrorcouldnot_1', 'db', ["'Error: Could not find DMA!'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aErrorSoundcardN db 'Error: Soundcard not found!',0Dh,0Ah,'$',0"),(u'_aerrorsoundcardn', 'db', ["'Error: Soundcard not found!'", '0Dh', '0Ah', "'$'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aEsc\t\tdb 'ESC'"),(u'_aesc', 'db', ["'ESC'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aExit\t\tdb 'EXIT'"),(u'_aexit', 'db', ["'EXIT'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aF10_0\t\tdb 'F-10'"),(u'_af10_0', 'db', ["'F-10'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFarFineTempo\tdb 'FAR Fine Tempo ',0"),(u'_afarfinetempo', 'db', ["'FAR Fine Tempo '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aFarTempo\tdb 'FAR Tempo      ',0"),(u'_afartempo', 'db', ["'FAR Tempo      '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aFar\t\tdb 'FAR\xfe'"),(u'_afar', 'db', ["'FAR\xfe'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFastErForward\tdb '  Fast(er) forward'"),(u'_afasterforward', 'db', ["'  Fast(er) forward'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFastErRewind\tdb '  Fast(er) rewind'"),(u'_afasterrewind', 'db', ["'  Fast(er) rewind'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFastfourierFrequenc db\t'  FastFourier Frequency Analysis'"),(u'_afastfourierfrequenc', 'db', ["'  FastFourier Frequency Analysis'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFidonet\tdb 'FidoNet  : '"),(u'_afidonet', 'db', ["'FidoNet  : '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFileSelectorHelp db 'File Selector Help'"),(u'_afileselectorhelp', 'db', ["'File Selector Help'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFile\t\tdb 'File'               ; DATA XREF: _start+689\x18w _start+6A8\x18o"),(u'_afile', 'db', ["'File'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFilename_0\tdb 'Filename      : '"),(u'_afilename_0', 'db', ["'Filename      : '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFilename_ext\tdb 'FileName.Ext'       ; DATA XREF: _read_module:loc_19E41\x18o"),(u'_afilename_ext', 'db', ["'FileName.Ext'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFinePanning\tdb 'Fine Panning   ',0"),(u'_afinepanning', 'db', ["'Fine Panning   '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aFinePortVolsl\tdb 'Fine Port+VolSl',0"),(u'_afineportvolsl', 'db', ["'Fine Port+VolSl'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aFlt4\t\tdb 'FLT4'"),(u'_aflt4', 'db', ["'FLT4'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aFlt8\t\tdb 'FLT8'"),(u'_aflt8', 'db', ["'FLT8'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aGeneralMidi\tdb 'General MIDI',0     ; DATA XREF: dseg:02BE\x18o"),(u'_ageneralmidi', 'db', ["'General MIDI'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aGeneralMidi_0\tdb 'General MIDI',0     ; DATA XREF: seg003:0D6E\x18o"),(u'_ageneralmidi_0', 'db', ["'General MIDI'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aGlissandoCtrl\tdb 'Glissando Ctrl ',0"),(u'_aglissandoctrl', 'db', ["'Glissando Ctrl '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aGraphicalScopesOneF db\t'  Graphical scopes, one for each channel'"),(u'_agraphicalscopesonef', 'db', ["'  Graphical scopes, one for each channel'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aGravisMaxCodec\tdb 'Gravis MAX Codec',0"),(u'_agravismaxcodec', 'db', ["'Gravis MAX Codec'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aGravisUltrasou\tdb 'Gravis UltraSound',0 ; DATA XREF: dseg:_table_sndcrdname\x18o"),(u'_agravisultrasou', 'db', ["'Gravis UltraSound'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aGravisUltrasoun db 'Gravis UltraSound',0 ; DATA XREF: seg003:_snd_cards_offs\x18o"),(u'_agravisultrasoun', 'db', ["'Gravis UltraSound'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aGray_0\t\tdb 'Gray - +'"),(u'_agray_0', 'db', ["'Gray - +'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aGsft\t\tdb 'GSFT'"),(u'_agsft', 'db', ["'GSFT'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aGuess___\tdb '  Guess...'"),(u'_aguess___', 'db', ["'  Guess...'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aHGf1Irq\tdb 'h, GF1-IRQ '"),(u'_ahgf1irq', 'db', ["'h, GF1-IRQ '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aHIrq\t\tdb 'h, IRQ '"),(u'_ahirq', 'db', ["'h, IRQ '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aHitBackspaceToRe db 'Hit backspace to return to playmode, F-1 for help, QuickRead='"),(u'_ahitbackspacetore', 'db', ["'Hit backspace to return to playmode, F-1 for help, QuickRead='"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aHome\t\tdb 'Home'"),(u'_ahome', 'db', ["'Home'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aHopeYouLikedUsingTh db\t'Hope you liked using the '"),(u'_ahopeyoulikedusingth', 'db', ["'Hope you liked using the '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aIfYouHaveBugReports db\t'If you have bug-reports, suggestions or comments send a message t'"),(u'_aifyouhavebugreports', 'db', ["'If you have bug-reports, suggestions or comments send a message t'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aIf\t\tdb 'if'"),(u'_aif', 'db', ["'if'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aIgnoreBpmChanges db ' Ignore BPM changes'"),(u'_aignorebpmchanges', 'db', ["' Ignore BPM changes'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaMailinglists db\t'Inertia Mailinglists'"),(u'_ainertiamailinglists', 'db', ["'Inertia Mailinglists'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaModule\tdb 'Inertia Module: ',0 ; DATA XREF: _useless_writeinr+29\x18o"),(u'_ainertiamodule', 'db', ["'Inertia Module: '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaModule_0 db 'Inertia Module: ',0 ; DATA XREF: _useless_writeinr+23\x18o"),(u'_ainertiamodule_0', 'db', ["'Inertia Module: '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaModule_1 db 'Inertia Module: '"),(u'_ainertiamodule_1', 'db', ["'Inertia Module: '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaPlayerV1_ db 'Inertia Player V1.22 written by Stefan Danes and Ramon van Gorkom'"),(u'_ainertiaplayerv1_', 'db', ["'Inertia Player V1.22 written by Stefan Danes and Ramon van Gorkom'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaPlayerV1_22A db\t'Inertia Player V1.22 Assembly ',27h,'94 CD Edition by Sound Solution'"),(u'_ainertiaplayerv1_22a', 'db', ["'Inertia Player V1.22 Assembly '", '27h', "'94 CD Edition by Sound Solution'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaPlayer\tdb 'Inertia Player'"),(u'_ainertiaplayer', 'db', ["'Inertia Player'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaPlayer_0 db 'Inertia Player',0"),(u'_ainertiaplayer_0', 'db', ["'Inertia Player'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aInertiaSample\tdb 'Inertia Sample: '   ; DATA XREF: _useless_writeinr_118+11\x18o"),(u'_ainertiasample', 'db', ["'Inertia Sample: '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInternet\tdb 'Internet : '"),(u'_ainternet', 'db', ["'Internet : '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aInvertLoop\tdb 'Invert Loop    ',0"),(u'_ainvertloop', 'db', ["'Invert Loop    '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aJanfebmaraprmayj db '   JanFebMarAprMayJunJulAugSepOctNovDec'"),(u'_ajanfebmaraprmayj', 'db', ["'   JanFebMarAprMayJunJulAugSepOctNovDec'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aJn\t\tdb 'JN'"),(u'_ajn', 'db', ["'JN'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aJumpToLoop\tdb 'Jump To Loop   ',0"),(u'_ajumptoloop', 'db', ["'Jump To Loop   '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aKb\t\tdb 'KB',0               ; DATA XREF: _text_init2+1D7\x18o"),(u'_akb', 'db', ["'KB'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aKhz\t\tdb 'kHz',0              ; DATA XREF: seg003:117B\x19o seg003:11AD\x19o ..."),(u'_akhz', 'db', ["'kHz'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aListFileNotFou\tdb 'List file not found.',0Dh,0Ah,'$' ; DATA XREF: _start+D07\x18o"),(u'_alistfilenotfou', 'db', ["'List file not found.'", '0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aListserver@oliver_s db\t'listserver@oliver.sun.ac.za'"),(u'_alistserverarboliver_s', 'db', ["'listserver@oliver.sun.ac.za'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aLoadingModule\tdb 'Loading module',0   ; DATA XREF: _start+41A\x18o"),(u'_aloadingmodule', 'db', ["'Loading module'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aLoopModuleWhenDone db ' Loop Module when done'"),(u'_aloopmodulewhendone', 'db', ["' Loop Module when done'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aLoopModule_0\tdb ' Loop module'"),(u'_aloopmodule_0', 'db', ["' Loop module'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aLoopPattern\tdb '  Loop pattern'"),(u'_alooppattern', 'db', ["'  Loop pattern'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMK\t\tdb 'M&K!'"),(u'_amk', 'db', ["'M&K!'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMK_0\t\tdb 'M!K!'"),(u'_amk_0', 'db', ["'M!K!'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aM_k_\t\tdb 'M.K.'"),(u'_am_k_', 'db', ["'M.K.'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMainVolume\tdb 'Main Volume   :'"),(u'_amainvolume', 'db', ["'Main Volume   :'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMarkFileToDelete db 'Mark file to delete'"),(u'_amarkfiletodelete', 'db', ["'Mark file to delete'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMarkedToDelete\tdb '<Marked to Delete>    ',0 ; DATA XREF: _filelist_198B8+10D\x18o"),(u'_amarkedtodelete', 'db', ["'<Marked to Delete>    '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aMas_utrack_v\tdb 'MAS_UTrack_V'"),(u'_amas_utrack_v', 'db', ["'MAS_UTrack_V'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMixedAt\tdb ', mixed at ',0      ; DATA XREF: seg003:1173\x19o seg003:11A5\x19o ..."),(u'_amixedat', 'db', ["', mixed at '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aModuleIsCorrupt db 'Module is corrupt!',0 ; DATA XREF: _start+439\x18o"),(u'_amoduleiscorrupt', 'db', ["'Module is corrupt!'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aModuleLoadErro\tdb 'Module load error.',0Dh,0Ah,'$' ; DATA XREF: _readallmoules+1B\x18o"),(u'_amoduleloaderro', 'db', ["'Module load error.'", '0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aModuleNotFound\tdb 'Module not found.',0Dh,0Ah,'$' ; DATA XREF: _find_mods+88\x18o"),(u'_amodulenotfound', 'db', ["'Module not found.'", '0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aModuleType_0\tdb 'Module Type   : '"),(u'_amoduletype_0', 'db', ["'Module Type   : '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMtm\t\tdb 'MTM'"),(u'_amtm', 'db', ["'MTM'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMuteChannel\tdb '  Mute channel'"),(u'_amutechannel', 'db', ["'  Mute channel'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aMute\t\tdb '<Mute>                ',0 ; DATA XREF: seg001:1949\x18o"),(u'_amute', 'db', ["'<Mute>                '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aName\t\tdb 'name'               ; DATA XREF: _start+692\x18w"),(u'_aname', 'db', ["'name'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aNotEnoughDramOn db 'Not enough DRAM on UltraSound',0Dh,0Ah,0"),(u'_anotenoughdramon', 'db', ["'Not enough DRAM on UltraSound'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aNotEnoughDram_0 db 'Not enough DRAM on your UltraSound to load all samples!',0"),(u'_anotenoughdram_0', 'db', ["'Not enough DRAM on your UltraSound to load all samples!'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aNotEnoughMemo_0 db 'Not enough memory available to load all samples!',0"),(u'_anotenoughmemo_0', 'db', ["'Not enough memory available to load all samples!'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aNotEnoughMemor\tdb 'Not enough memory.',0Dh,0Ah,'$' ; DATA XREF: _start+23D\x18o"),(u'_anotenoughmemor', 'db', ["'Not enough memory.'", '0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aNotEnoughMemory db 'Not enough Memory available',0Dh,0Ah,0"),(u'_anotenoughmemory', 'db', ["'Not enough Memory available'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aNoteCut\tdb 'Note Cut       ',0"),(u'_anotecut', 'db', ["'Note Cut       '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aNoteDelay\tdb 'Note Delay     ',0"),(u'_anotedelay', 'db', ["'Note Delay     '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aNtsc\t\tdb '(NTSC)',0           ; DATA XREF: _txt_draw_bottom+53\x18o"),(u'_antsc', 'db', ["'(NTSC)'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aOcta\t\tdb 'OCTA'"),(u'_aocta', 'db', ["'OCTA'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPal\t\tdb '(PAL) ',0           ; DATA XREF: _txt_draw_bottom+49\x18o"),(u'_apal', 'db', ["'(PAL) '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPatternBreak\tdb 'Pattern Break  ',0"),(u'_apatternbreak', 'db', ["'Pattern Break  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPatternDelay\tdb 'Pattern Delay  ',0"),(u'_apatterndelay', 'db', ["'Pattern Delay  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPause\t\tdb 'Pause'"),(u'_apause', 'db', ["'Pause'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPcHonker\tdb 'PC Honker',0        ; DATA XREF: dseg:02BC\x18o"),(u'_apchonker', 'db', ["'PC Honker'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPcHonker_0\tdb 'PC Honker',0        ; DATA XREF: seg003:0D6C\x18o"),(u'_apchonker_0', 'db', ["'PC Honker'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPgdn\t\tdb 'PgDn'"),(u'_apgdn', 'db', ["'PgDn'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPgup\t\tdb 'PgUp'"),(u'_apgup', 'db', ["'PgUp'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPlayer13029521\tdb 'Player: '"),(u'_aplayer13029521', 'db', ["'Player: '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPlayingInStereoFree db\t' Playing in Stereo, Free:'"),(u'_aplayinginstereofree', 'db', ["' Playing in Stereo, Free:'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPlaypausloop\tdb 'PlayPausLoop'       ; DATA XREF: _txt_draw_bottom+164\x18o"),(u'_aplaypausloop', 'db', ["'PlayPausLoop'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPortVolslide\tdb 'Port + VolSlide',0"),(u'_aportvolslide', 'db', ["'Port + VolSlide'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPortamentoDown\tdb 'Portamento Down',0"),(u'_aportamentodown', 'db', ["'Portamento Down'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPortamentoUp\tdb 'Portamento Up  ',0"),(u'_aportamentoup', 'db', ["'Portamento Up  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPositionJump\tdb 'Position Jump  ',0"),(u'_apositionjump', 'db', ["'Position Jump  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPressAnyKeyToReturn db\t'Press any key to return to the fileselector',0"),(u'_apressanykeytoreturn', 'db', ["'Press any key to return to the fileselector'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aPressF1ForHelpQu db '                 Press F-1 for help, QuickRead='"),(u'_apressf1forhelpqu', 'db', ["'                 Press F-1 for help, QuickRead='"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPress\t\tdb 'Press '"),(u'_apress', 'db', ["'Press '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aProAudioSpectr\tdb 'Pro Audio Spectrum 16',0 ; DATA XREF: dseg:02AC\x18o"),(u'_aproaudiospectr', 'db', ["'Pro Audio Spectrum 16'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aProAudioSpectrum db 'Pro Audio Spectrum 16',0 ; DATA XREF: seg003:0D5C\x18o"),(u'_aproaudiospectrum', 'db', ["'Pro Audio Spectrum 16'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aProtracker1_0Compat db\t'  ProTracker 1.0 compatibility on/off'"),(u'_aprotracker1_0compat', 'db', ["'  ProTracker 1.0 compatibility on/off'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aProtracker1_0_0 db ' ProTracker 1.0'"),(u'_aprotracker1_0_0', 'db', ["' ProTracker 1.0'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aPsm\t\tdb 'PSM\xfe'"),(u'_apsm', 'db', ["'PSM\xfe'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aQuitIplay\tdb 'Quit IPLAY'"),(u'_aquitiplay', 'db', ["'Quit IPLAY'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aRealtimeVuMeters db '  Realtime VU meters'"),(u'_arealtimevumeters', 'db', ["'  Realtime VU meters'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aRetrigVolume\tdb 'Retrig+Volume  ',0"),(u'_aretrigvolume', 'db', ["'Retrig+Volume  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aRetriggerNote\tdb 'Retrigger Note ',0"),(u'_aretriggernote', 'db', ["'Retrigger Note '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aReturnToPlaymodeOnl db\t'Return to playmode [Only if the music is playing]'"),(u'_areturntoplaymodeonl', 'db', ["'Return to playmode [Only if the music is playing]'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSamplename\tdb '# SampleName   '    ; DATA XREF: seg001:1B7C\x18o"),(u'_asamplename', 'db', ["'# SampleName   '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSamplesUsed\tdb 'Samples Used  :'"),(u'_asamplesused', 'db', ["'Samples Used  :'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aScream\t\tdb '!Scream!'"),(u'_ascream', 'db', ["'!Scream!'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aScrm\t\tdb 'SCRM'"),(u'_ascrm', 'db', ["'SCRM'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aScrolllock\tdb 'ScrollLock'"),(u'_ascrolllock', 'db', ["'ScrollLock'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSdanes@marvels_hack db\t'sdanes@marvels.hacktic.nl'"),(u'_asdanesarbmarvels_hack', 'db', ["'sdanes@marvels.hacktic.nl'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSendEmailTo\tdb 'Send email to '"),(u'_asendemailto', 'db', ["'Send email to '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetAmplify\tdb 'Set Amplify    ',0"),(u'_asetamplify', 'db', ["'Set Amplify    '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetFilter\tdb 'Set Filter     ',0  ; DATA XREF: seg001:1A9A\x18o"),(u'_asetfilter', 'db', ["'Set Filter     '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetFinetune\tdb 'Set FineTune   ',0"),(u'_asetfinetune', 'db', ["'Set FineTune   '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetLoopPoint\tdb 'Set Loop Point ',0  ; DATA XREF: seg001:1A8F\x18o"),(u'_asetlooppoint', 'db', ["'Set Loop Point '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetPanning\tdb 'Set Panning    ',0"),(u'_asetpanning', 'db', ["'Set Panning    '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetSampleOfs\tdb 'Set Sample Ofs ',0"),(u'_asetsampleofs', 'db', ["'Set Sample Ofs '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetSpeedBpm\tdb 'Set Speed/BPM  ',0"),(u'_asetspeedbpm', 'db', ["'Set Speed/BPM  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetSpeed\tdb 'Set Speed      ',0"),(u'_asetspeed', 'db', ["'Set Speed      '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSetStmSpeed\tdb 'Set STM Speed  ',0"),(u'_asetstmspeed', 'db', ["'Set STM Speed  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aShell130295211\tdb 'Shell: 13/02/95 21:15:58'"),(u'_ashell130295211', 'db', ["'Shell: 13/02/95 21:15:58'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aShellingToOperating db\t'Shelling to Operating System...'"),(u'_ashellingtooperating', 'db', ["'Shelling to Operating System...'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSizeVolModeC2T\tdb '~   Size Vol Mode  C-2 Tune LoopPos LoopEnd',0"),(u'_asizevolmodec2t', 'db', ["'~   Size Vol Mode  C-2 Tune LoopPos LoopEnd'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSoYouWantedSomeHelp db\t'So you wanted some help?'"),(u'_asoyouwantedsomehelp', 'db', ["'So you wanted some help?'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSomeFunctionsOf db 'Some functions of the UltraSound do not work!',0Dh,0Ah"),(u'_asomefunctionsof', 'db', ["'Some functions of the UltraSound do not work!'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSoundBlaster1616 db 'Sound Blaster 16/16ASP',0 ; DATA XREF: seg003:0D60\x18o"),(u'_asoundblaster1616', 'db', ["'Sound Blaster 16/16ASP'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSoundBlaster16\tdb 'Sound Blaster 16/16ASP',0 ; DATA XREF: dseg:02B0\x18o"),(u'_asoundblaster16', 'db', ["'Sound Blaster 16/16ASP'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSoundBlasterPr\tdb 'Sound Blaster Pro',0 ; DATA XREF: dseg:02B2\x18o"),(u'_asoundblasterpr', 'db', ["'Sound Blaster Pro'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSoundBlasterPro db 'Sound Blaster Pro',0 ; DATA XREF: seg003:0D62\x18o"),(u'_asoundblasterpro', 'db', ["'Sound Blaster Pro'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSoundBlaster\tdb 'Sound Blaster',0    ; DATA XREF: dseg:02B4\x18o"),(u'_asoundblaster', 'db', ["'Sound Blaster'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSoundBlaster_0\tdb 'Sound Blaster',0    ; DATA XREF: seg003:0D64\x18o"),(u'_asoundblaster_0', 'db', ["'Sound Blaster'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSpeed\t\tdb 'Speed'"),(u'_aspeed', 'db', ["'Speed'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aStereoOn1\tdb 'Stereo-On-1',0      ; DATA XREF: dseg:02B8\x18o"),(u'_astereoon1', 'db', ["'Stereo-On-1'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aStereoOn1_0\tdb 'Stereo-On-1',0      ; DATA XREF: seg003:0D68\x18o"),(u'_astereoon1_0', 'db', ["'Stereo-On-1'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aSubscribeInertiaLis db\t'subscribe inertia-list YourRealName'"),(u'_asubscribeinertialis', 'db', ["'subscribe inertia-list YourRealName'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aSubscribeInertiaTal db\t'subscribe inertia-talk YourRealName',0"),(u'_asubscribeinertiatal', 'db', ["'subscribe inertia-talk YourRealName'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aTab\t\tdb 'Tab'"),(u'_atab', 'db', ["'Tab'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aTab_0\t\tdb 'Tab'"),(u'_atab_0', 'db', ["'Tab'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aTdz\t\tdb 'TDZ'"),(u'_atdz', 'db', ["'TDZ'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aThe\t\tdb 'the '"),(u'_athe', 'db', ["'the '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aThisHelpScreenButIG db\t'This help screen, but I guess you already found it...'"),(u'_athishelpscreenbutig', 'db', ["'This help screen, but I guess you already found it...'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aThisProgramRequ db 'This program requires the soundcards device driver.',0Dh,0Ah,0"),(u'_athisprogramrequ', 'db', ["'This program requires the soundcards device driver.'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aToConnectToBinaryIn db\t'To connect to Binary Inertia releases: '"),(u'_atoconnecttobinaryin', 'db', ["'To connect to Binary Inertia releases: '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aToConnectToDiscussi db\t'To connect to Discussion Mailing list: '"),(u'_atoconnecttodiscussi', 'db', ["'To connect to Discussion Mailing list: '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aToMoveTheHighlighte db\t' to move the highlighted bar'"),(u'_atomovethehighlighte', 'db', ["' to move the highlighted bar'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aToPlayTheModuleOrSe db\t' to play the module or select the drive/directory'"),(u'_atoplaythemoduleorse', 'db', ["' to play the module or select the drive/directory'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aToReturnTo\tdb ' to return to '"),(u'_atoreturnto', 'db', ["' to return to '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aToSubscribeToOneOrB db\t' to subscribe to one or both of'"),(u'_atosubscribetooneorb', 'db', ["' to subscribe to one or both of'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aToggle24bitInterpol db\t' Toggle 24bit Interpolation'"),(u'_atoggle24bitinterpol', 'db', ["' Toggle 24bit Interpolation'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aTogglePalNtsc\tdb '  Toggle PAL/NTSC',0"),(u'_atogglepalntsc', 'db', ["'  Toggle PAL/NTSC'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aToggleQuickreadingO db\t'Toggle QuickReading of module name'"),(u'_atogglequickreadingo', 'db', ["'Toggle QuickReading of module name'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aTonePortamento\tdb 'Tone Portamento',0"),(u'_atoneportamento', 'db', ["'Tone Portamento'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aTrackPosition\tdb 'Track Position:'"),(u'_atrackposition', 'db', ["'Track Position:'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aTremoloControl\tdb 'Tremolo Control',0"),(u'_atremolocontrol', 'db', ["'Tremolo Control'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aTremolo\tdb 'Tremolo        ',0"),(u'_atremolo', 'db', ["'Tremolo        '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aTremor\t\tdb 'Tremor         ',0"),(u'_atremor', 'db', ["'Tremor         '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aTriller\tdb 'Triller        ',0"),(u'_atriller', 'db', ["'Triller        '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aType\t\tdb 'Type '"),(u'_atype', 'db', ["'Type '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aUnused256\tdb '\x7f Unused'"),(u'_aunused256', 'db', ["'\x7f Unused'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aUse\t\tdb 'Use '"),(u'_ause', 'db', ["'Use '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aVibrVolslide\tdb 'Vibr + VolSlide',0"),(u'_avibrvolslide', 'db', ["'Vibr + VolSlide'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aVibratoControl\tdb 'Vibrato Control',0"),(u'_avibratocontrol', 'db', ["'Vibrato Control'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aVibrato\tdb 'Vibrato        ',0"),(u'_avibrato', 'db', ["'Vibrato        '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aViewSampleNamesTwic db\t'  View sample names (twice for more)'"),(u'_aviewsamplenamestwic', 'db', ["'  View sample names (twice for more)'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aVolumeAmplify\tdb 'Volume Amplify:'"),(u'_avolumeamplify', 'db', ["'Volume Amplify:'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aVolumeChange\tdb 'Volume Change  ',0"),(u'_avolumechange', 'db', ["'Volume Change  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aVolumeSliding\tdb 'Volume Sliding ',0"),(u'_avolumesliding', 'db', ["'Volume Sliding '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aWhichIsWrittenIn db ' which is written in '"),(u'_awhichiswrittenin', 'db', ["' which is written in '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_aWindowsSoundSy\tdb 'Windows Sound System',0 ; DATA XREF: dseg:02AE\x18o"),(u'_awindowssoundsy', 'db', ["'Windows Sound System'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aWindowsSoundSyst db 'Windows Sound System',0 ; DATA XREF: seg003:0D5E\x18o"),(u'_awindowssoundsyst', 'db', ["'Windows Sound System'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_aXpressF4ForMor\tdb 'xPress F-4 for more'"),(u'_axpressf4formor', 'db', ["'xPress F-4 for more'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a_ext\t\tdb '.Ext'               ; DATA XREF: _start+69B\x18w"),(u'_a_ext', 'db', ["'.Ext'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a_m_k\t\tdb '.M.K'"),(u'_a_m_k', 'db', ["'.M.K'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_a_mod_nst_669_s\tdb '.MOD.NST.669.STM.S3M.MTM.PSM.WOW.INR.FAR.ULT.OKT.OCT',0,0,0,0"),(u'_a_mod_nst_669_s', 'db', ["'.MOD.NST.669.STM.S3M.MTM.PSM.WOW.INR.FAR.ULT.OKT.OCT'", '0', '0', '0', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_eModuleNotFound\tdb 'Module not found',0Dh,0Ah,0 ; DATA XREF: _moduleread+1C\x18o"),(u'_emodulenotfound', 'db', ["'Module not found'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_frameborder\tdb '      \xdb\xdb\xdb\xdb\xdb\xdb\xc9\xbb\xc8\xbc\xcd\xba\xda\xbf\xc0\xd9\xc4\xb3\xd6\xb7\xd3\xbd\xc4\xba\xd5\xb8\xd4\xbe\xcd\xb3',0 ; DATA XREF: _draw_frame+3D\x18o"),(u'_frameborder', 'db', ["'      \xdb\xdb\xdb\xdb\xdb\xdb\xc9\xbb\xc8\xbc\xcd\xba\xda\xbf\xc0\xd9\xc4\xb3\xd6\xb7\xd3\xbd\xc4\xba\xd5\xb8\xd4\xbe\xcd\xb3'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_module_type_txt\tdb '    '               ; DATA XREF: _read_module+6F\x18w"),(u'_module_type_txt', 'db', ["'    '"]))
        self.assertEqual(lex_instance.parse_line_data(line="_msg    db 'Hello World From Protected Mode!',10,13,'$'"),(u'_msg', 'db', ["'Hello World From Protected Mode!'", '10', '13', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_msg\t\tdb 'Searching directory for modules  ',0 ; DATA XREF: _start+2F7\x18o"),(u'_msg', 'db', ["'Searching directory for modules  '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_myendl\t\tdb 0Dh,0Ah,'$'          ; DATA XREF: _start-1D\x18o"),(u'_myendl', 'db', ['0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_notes\t\tdb '  C-C#D-D#E-F-F#G-G#A-A#B-' ; DATA XREF: seg001:1930\x18r"),(u'_notes', 'db', ["'  C-C#D-D#E-F-F#G-G#A-A#B-'"]))
        self.assertEqual(lex_instance.parse_line_data(line="_sIplay_cfg\tdb 'IPLAY.CFG',0     ; DATA XREF: _loadcfg\x18o"),(u'_siplay_cfg', 'db', ["'IPLAY.CFG'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="_slider\t\tdb '\xc4\\|/\xc4\\|/'           ; DATA XREF: _modules_search+7F\x18r"),(u'_slider', 'db', ["'\xc4\\\\|/\xc4\\\\|/'"]))
        self.assertEqual(lex_instance.parse_line_data(line="asc_1CC2D\tdb '                              ' ; DATA XREF: _read_module+A3\x18o"),(u'asc_1cc2d', 'db', ["'                              '"]))
        self.assertEqual(lex_instance.parse_line_data(line="asc_1D6E0\tdb '               ',0  ; DATA XREF: seg001:1A80\x18o"),(u'asc_1d6e0', 'db', ["'               '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="asc_1DA00\tdb '                      ',0 ; DATA XREF: _modules_search:loc_19BDD\x18o"),(u'asc_1da00', 'db', ["'                      '", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="asc_246B0\tdb '                                ' ; DATA XREF: _mod_1021E+22\x18o"),(u'asc_246b0', 'db', ["'                                '"]))
        self.assertEqual(lex_instance.parse_line_data(line="asc_25856\tdb '                                ',0Dh,0Ah,1Ah"),(u'asc_25856', 'db', ["'                                '", '0Dh', '0Ah', '1Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db ' '"),('', u'db', ["' '"]))
        self.assertEqual(lex_instance.parse_line_data(line="db ' /?  This help screen',0Dh,0Ah"),('', u'db', ["' /?  This help screen'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db ' /c  Disable GUS Channel Optimize [Always use 32 voices]',0Dh,0Ah"),('', u'db', ["' /c  Disable GUS Channel Optimize [Always use 32 voices]'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db ' /d  Disable module looping',0Dh,0Ah"),('', u'db', ["' /d  Disable module looping'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db ' /v  Desqview mode: Only use 80x25 textmode',0Dh,0Ah,'$'"),('', u'db', ["' /v  Desqview mode: Only use 80x25 textmode'", '0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db '(Press any key to continue)$'"),('', u'db', ["'(Press any key to continue)$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db ','"),('', u'db', ["','"]))
        self.assertEqual(lex_instance.parse_line_data(line="db '- +'"),('', u'db', ["'- +'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db ':'"),('', u'db', ["':'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db 'ABC',0"),('', u'db', ["'ABC'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="db 'Critical error: The player jumped to DOS, and should not be invok'"),('', u'db', ["'Critical error: The player jumped to DOS, and should not be invok'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db 'OKOKOKOK'"),('', u'db', ["'OKOKOKOK'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db 'OKOKOKOK',10,13"),('', u'db', ["'OKOKOKOK'", '10', '13']))
        self.assertEqual(lex_instance.parse_line_data(line="db 'Probably the AT-BUS Clock Speed is too high.',0Dh,0Ah"),('', u'db', ["'Probably the AT-BUS Clock Speed is too high.'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db 'Switches:',0Dh,0Ah"),('', u'db', ["'Switches:'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db 'Try changing the AT-BUS Clock in the CMOS Setup.',0Dh,0Ah,0"),('', u'db', ["'Try changing the AT-BUS Clock in the CMOS Setup.'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="db 'Usage: IPLAY [Switches] [FileName.Ext|@FileList.Ext]',0Dh,0Ah"),('', u'db', ["'Usage: IPLAY [Switches] [FileName.Ext|@FileList.Ext]'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db '[ ]'"),('', u'db', ["'[ ]'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db '[ ]',0"),('', u'db', ["'[ ]'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="db '\xc4asdkweorjwoerj3434',13,10,92"),('', u'db', ["'\xc4asdkweorjwoerj3434'", '13', '10', '92']))
        self.assertEqual(lex_instance.parse_line_data(line="db 'ed again.',0Dh,0Ah"),('', u'db', ["'ed again.'", '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line="db 'h'"),('', u'db', ["'h'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db 'o:'"),('', u'db', ["'o:'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db 's'"),('', u'db', ["'s'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db 's',0Dh,0Ah,0"),('', u'db', ["'s'", '0Dh', '0Ah', '0']))
        self.assertEqual(lex_instance.parse_line_data(line="db 0Ah,'$'"),('', u'db', ['0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="db 0Dh,0Ah,'$'"),('', u'db', ['0Dh', '0Ah', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="fileName db 'file1.txt',0"),(u'filename', 'db', ["'file1.txt'", '0']))
        self.assertEqual(lex_instance.parse_line_data(line="pas_de_mem  db 'NOT enought memory for VGA display, controls work for network games',13,10,'$'"),(u'pas_de_mem', 'db', ["'NOT enought memory for VGA display, controls work for network games'", '13', '10', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="pbs1        db 'probleme dans allocation de descriptor..',13,10,'$'"),(u'pbs1', 'db', ["'probleme dans allocation de descriptor..'", '13', '10', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="pbs2        db 'probleme dans dans definition de la taille du segment',13,10,'$'"),(u'pbs2', 'db', ["'probleme dans dans definition de la taille du segment'", '13', '10', "'$'"]))
        self.assertEqual(lex_instance.parse_line_data(line="str1 db 'abcde'"),(u'str1', 'db', ["'abcde'"]))
        self.assertEqual(lex_instance.parse_line_data(line="str2 db 'abcde'"),(u'str2', 'db', ["'abcde'"]))
        self.assertEqual(lex_instance.parse_line_data(line="str3 db 'cdeab'"),(u'str3', 'db', ["'cdeab'"]))
        self.assertEqual(lex_instance.parse_line_data(line="var5 db 'abcd'"),(u'var5', 'db', ["'abcd'"]))
        self.assertEqual(lex_instance.parse_line_data(line='_aCriticalErrorT\tdb 0Dh,0Ah\t\t; DATA XREF: _start+31\x18o'),(u'_acriticalerrort', 'db', ['0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='_aCursor\t\tdb 7Fh'),(u'_acursor', 'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aDecIncAmplify\tdb 7Eh'),(u'_adecincamplify', 'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aDecIncVolume\tdb 7Eh'),(u'_adecincvolume', 'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aDisableBpmOnOf\tdb 7Eh'),(u'_adisablebpmonof', 'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aDosShellTypeEx\tdb 7Eh'),(u'_adosshelltypeex', 'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aF10\t\tdb 7Fh'),(u'_af10', 'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aF11\t\tdb 7Fh'),(u'_af11', 'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aF12\t\tdb 7Fh'),(u'_af12', 'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aF9_1\t\tdb 7Fh'),(u'_af9_1', 'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aGray\t\tdb 7Fh'),(u'_agray', 'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aLoopModule\tdb 7Eh'),(u'_aloopmodule', 'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aProtracker1_0C\tdb 7Eh'),(u'_aprotracker1_0c', 'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_aToggle24bitInt\tdb 7Eh'),(u'_atoggle24bitint', 'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_amount_of_x\tdw 0\t\t\t; DATA XREF: _read_module+75\x18w'),(u'_amount_of_x', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_amplification\tdw 100\t\t\t; DATA XREF: _clean_11C43+83\x18w'),(u'_amplification', 'dw', ['100']))
        self.assertEqual(lex_instance.parse_line_data(line='_asmprintf_tbl\tdw offset _mysprintf_0_nop ; DATA XREF: _myasmsprintf+1C\x19r'),(u'_asmprintf_tbl', 'dw', ['offset _mysprintf_0_nop']))
        self.assertEqual(lex_instance.parse_line_data(line='_atop_title\tdw 152h\t\t\t; DATA XREF: _txt_draw_top_title+12\x18o'),(u'_atop_title', 'dw', ['152h']))
        self.assertEqual(lex_instance.parse_line_data(line='_base_port2\tdw 0\t\t\t; DATA XREF: _wss_init:loc_147C3\x18w'),(u'_base_port2', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_bit_mode\tdb 8\t\t\t; DATA XREF: sub_12DA8+55\x18w'),(u'_bit_mode', 'db', ['8']))
        self.assertEqual(lex_instance.parse_line_data(line='_bottom_menu\tdw 0Ah\t\t\t; DATA XREF: _text_init2+21F\x18o'),(u'_bottom_menu', 'dw', ['0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='_buffer_1DB6C\tdb 128 dup(0)\t\t; DATA XREF: _start+189\x18r _start+192\x18r ...'),(u'_buffer_1db6c', 'db', ['128 dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_buffer_1DBEC\tdb 0\t\t\t; DATA XREF: _find_mods+32\x18o'),(u'_buffer_1dbec', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_buffer_1DC6C\tdd 0\t\t\t; DATA XREF: _start+2C5\x18w _start+2D3\x18o ...'),(u'_buffer_1dc6c', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_buffer_1\tdb 200h\tdup(0)\t\t; DATA XREF: _start-30\x18o'),(u'_buffer_1', 'db', ['200h\tdup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_buffer_1seg\tdw 0\t\t\t; DATA XREF: _text_init2+18B\x18w'),(u'_buffer_1seg', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_buffer_2\tdb 2800h dup(0)\t\t; DATA XREF: _init_vga_waves+173\x18o'),(u'_buffer_2', 'db', ['2800h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_buffer_2seg\tdw 0\t\t\t; DATA XREF: seg001:loc_1A913\x18w'),(u'_buffer_2seg', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_11C29\tdb 0\t\t\t; DATA XREF: sub_11C0C:loc_11C14\x18r'),(u'_byte_11c29', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_13C54\tdb 0,9,12h,1Bh,24h,2Dh,36h,40h,40h,4Ah,53h,5Ch,65h,6Eh'),(u'_byte_13c54', 'db', ['0', '9', '12h', '1Bh', '24h', '2Dh', '36h', '40h', '40h', '4Ah', '53h', '5Ch', '65h', '6Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_14F70\tdb 0\t\t\t; DATA XREF: _configure_timer+12\x18w'),(u'_byte_14f70', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_14F71\tdb 0\t\t\t; DATA XREF: sub_12D35:loc_12D41\x18w'),(u'_byte_14f71', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_14F72\tdb 0\t\t\t; DATA XREF: sub_13CF6+D\x18w _text:4F51\x18r'),(u'_byte_14f72', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_14F73\tdb 0\t\t\t; DATA XREF: sub_13CF6+11\x18w'),(u'_byte_14f73', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1CCEB\tdb 78h\t\t\t; DATA XREF: _text_init2:loc_1A6C2\x18w'),(u'_byte_1cceb', 'db', ['78h']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1D616\tdb 20h\t\t\t; DATA XREF: _useless_197F2+D\x18w'),(u'_byte_1d616', 'db', ['20h']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1D66B\tdb 20h\t\t\t; DATA XREF: _useless_197F2+18\x18w'),(u'_byte_1d66b', 'db', ['20h']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DC0A\tdb 62h dup(0)\t\t; DATA XREF: _find_mods+6F\x18o'),(u'_byte_1dc0a', 'db', ['62h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DC7C\tdb 70h dup(0)\t\t; DATA XREF: _modules_search+1BA\x18o'),(u'_byte_1dc7c', 'db', ['70h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DCF7\tdb 0FFh\t\t\t; DATA XREF: _callsubx+1C\x18r _callsubx+55\x18w'),(u'_byte_1dcf7', 'db', ['0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DCF8\tdb 14h\t\t\t; DATA XREF: _start+DA\x18r\t_callsubx+20\x18r ...'),(u'_byte_1dcf8', 'db', ['14h']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DCFB\tdb 4Bh\t\t\t; DATA XREF: _callsubx+13\x18r'),(u'_byte_1dcfb', 'db', ['4Bh']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DD3F\tdb 45h dup(0)\t\t; DATA XREF: _dosexec:loc_1C209\x18o'),(u'_byte_1dd3f', 'db', ['45h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE70\tdb 0\t\t\t; DATA XREF: _start+168\x18w _start+268\x18w ...'),(u'_byte_1de70', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE71\tdb 0\t\t\t; DATA XREF: seg001:loc_1A934\x18w'),(u'_byte_1de71', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE72\tdb 0\t\t\t; DATA XREF: _keyb_screen_loop+5\x18w'),(u'_byte_1de72', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE73\tdb 0\t\t\t; DATA XREF: _read_module+79\x18w'),(u'_byte_1de73', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE74\tdb 0\t\t\t; DATA XREF: _keyb_screen_loop+9\x18w'),(u'_byte_1de74', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE75\tdb 0\t\t\t; DATA XREF: _keyb_screen_loop+C\x18w'),(u'_byte_1de75', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE76\tdb 0\t\t\t; DATA XREF: _keyb_screen_loop+10\x18w'),(u'_byte_1de76', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE78\tdb 0\t\t\t; DATA XREF: _read_module+8B\x18w'),(u'_byte_1de78', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE79\tdb 0\t\t\t; DATA XREF: _video_prp_mtr_positn+2\x18w'),(u'_byte_1de79', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE7A\tdb 0\t\t\t; DATA XREF: _video_prp_mtr_positn+7\x18w'),(u'_byte_1de7a', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE7B\tdb 0\t\t\t; DATA XREF: _read_module+96\x18w'),(u'_byte_1de7b', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE7C\tdb 0\t\t\t; DATA XREF: _start:loc_193BC\x18r'),(u'_byte_1de7c', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE7D\tdb 0\t\t\t; DATA XREF: _start+32F\x18w _start+34A\x18r ...'),(u'_byte_1de7d', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE7E\tdb 0\t\t\t; DATA XREF: _start+1B9\x18w _start+217\x18r ...'),(u'_byte_1de7e', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE7F\tdb 0\t\t\t; DATA XREF: _start+260\x18w _start+2F0\x18r ...'),(u'_byte_1de7f', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE81\tdb 0\t\t\t; DATA XREF: _spectr_1BBC1+20\x18r'),(u'_byte_1de81', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE82\tdb 0\t\t\t; DATA XREF: _start+E1\x18w'),(u'_byte_1de82', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE83\tdb 3\t\t\t; DATA XREF: _start+E7\x18w'),(u'_byte_1de83', 'db', ['3']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE84\tdb 0\t\t\t; DATA XREF: _read_module+65\x18w'),(u'_byte_1de84', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE85\tdb 0\t\t\t; DATA XREF: _keyb_screen_loop+2EB\x18w'),(u'_byte_1de85', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE86\tdb 0\t\t\t; DATA XREF: _start+D7\x18w\t_text_init2\x18r ...'),(u'_byte_1de86', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1DE90\tdb 0\t\t\t; DATA XREF: _start:loc_193C7\x18r'),(u'_byte_1de90', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1E0E0\tdb 7BBh\tdup(0)\t\t; DATA XREF: _f5_draw_spectr+29D\x18o'),(u'_byte_1e0e0', 'db', ['7BBh\tdup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_1E89B\tdb 1E44h dup(0)'),(u'_byte_1e89b', 'db', ['1E44h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_22EE4\tdb 1000h dup(0)\t\t; DATA XREF: _f5_draw_spectr+2A8\x18o'),(u'_byte_22ee4', 'db', ['1000h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_23EE5\tdb 63h dup(0)\t\t; DATA XREF: _f5_draw_spectr+5C0\x18o'),(u'_byte_23ee5', 'db', ['63h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_23F48\tdb 12Ch\tdup(0)\t\t; DATA XREF: _f5_draw_spectr+5E2\x18o'),(u'_byte_23f48', 'db', ['12Ch\tdup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_24075\tdb 63h dup(0)\t\t; DATA XREF: _f5_draw_spectr+5D2\x18o'),(u'_byte_24075', 'db', ['63h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_240D8\tdb 12Ch\tdup(0)\t\t; DATA XREF: _f5_draw_spectr+5EF\x18o'),(u'_byte_240d8', 'db', ['12Ch\tdup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_24204\tdb 200h\tdup(0)\t\t; DATA XREF: _f5_draw_spectr+1A\x18o'),(u'_byte_24204', 'db', ['200h\tdup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_24616\tdb 0\t\t\t; DATA XREF: sub_154F4+41\x18w'),(u'_byte_24616', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_24629\tdb 20h\t\t\t; DATA XREF: _someplaymode+64\x18r'),(u'_byte_24629', 'db', ['20h']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_2462B\tdb 0\t\t\t; DATA XREF: _gravis_init+38\x18w'),(u'_byte_2462b', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_257DA\tdb 10h\t\t\t; DATA XREF: _useless_writeinr+3F\x18w'),(u'_byte_257da', 'db', ['10h']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_257DB\tdb 0\t\t\t; DATA XREF: _useless_writeinr+47\x18w'),(u'_byte_257db', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_27FE8\tdb 0FFh\tdup( ?)\t\t; DATA XREF: _mod_n_t_module+55\x18o'),(u'_byte_27fe8', 'db', ['0FFh\tdup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_280E7\tdb ?\t\t\t; DATA XREF: _s3m_module+1F3\x18w'),(u'_byte_280e7', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_280E8\tdb 100h\tdup( ?)\t\t; DATA XREF: _e669_module+80\x18w'),(u'_byte_280e8', 'db', ['100h\tdup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_281E8\tdb 100h\tdup( ?)\t\t; DATA XREF: _e669_module+88\x18w'),(u'_byte_281e8', 'db', ['100h\tdup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_282E8\tdb 20h dup( ?)\t\t; DATA XREF: _clean_11C43+AE\x18o'),(u'_byte_282e8', 'db', ['20h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30522\tdb ?\t\t\t; DATA XREF: _mtm_module+58\x18r'),(u'_byte_30522', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30579\tdb 21h dup( ?)\t\t; DATA XREF: _e669_module:loc_1096F\x18r'),(u'_byte_30579', 'db', ['21h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_3059A\tdb 5Fh dup( ?)\t\t; DATA XREF: _psm_module+4B\x18o'),(u'_byte_3059a', 'db', ['5Fh dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_305F9\tdb 40h dup( ?)\t\t; DATA XREF: _e669_module+7C\x18r'),(u'_byte_305f9', 'db', ['40h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30639\tdb ?\t\t\t; DATA XREF: _ult_module+169\x18r'),(u'_byte_30639', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_3063A\tdb ?\t\t\t; DATA XREF: _ult_module+172\x18r'),(u'_byte_3063a', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30641\tdb 28h dup( ?)\t\t; DATA XREF: _ult_module+22C\x18r'),(u'_byte_30641', 'db', ['28h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30669\tdb ?\t\t\t; DATA XREF: _far_module+85\x18r'),(u'_byte_30669', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_3066A\tdb ?\t\t\t; DATA XREF: _far_module+95\x18r'),(u'_byte_3066a', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_3066B\tdb 0Eh dup( ?)\t\t; DATA XREF: _far_module+AA\x18o'),(u'_byte_3066b', 'db', ['0Eh dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30679\tdb 65h dup( ?)\t\t; DATA XREF: _e669_module+84\x18r'),(u'_byte_30679', 'db', ['65h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_306DE\tdb 1E0h\tdup( ?)\t\t; DATA XREF: _mod_n_t_module+15\x18o'),(u'_byte_306de', 'db', ['1E0h\tdup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_308BE\tdb 4Ah dup( ?)\t\t; DATA XREF: _mod_n_t_module+4F\x18o'),(u'_byte_308be', 'db', ['4Ah dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30908\tdb 38h dup( ?)\t\t; DATA XREF: _ult_module+203\x18o'),(u'_byte_30908', 'db', ['38h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30940\tdb ?\t\t\t; DATA XREF: _mod_n_t_module:_mod_chn_module\x18r'),(u'_byte_30940', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_30943\tdb  ?\t\t\t; DATA XREF: _mod_n_t_module:_mod_tdz_module\x18r'),(u'_byte_30943', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_3150A\tdb ?\t\t\t; DATA XREF: _psm_module+139\x18r'),(u'_byte_3150a', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_3150C\tdb 7FCh\tdup( ?)\t\t; DATA XREF: _psm_module+150\x18o'),(u'_byte_3150c', 'db', ['7FCh\tdup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_31D08\tdb 1800h dup( ?)\t; DATA XREF: _mod_read_10311+21\x18o'),(u'_byte_31d08', 'db', ['1800h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_33508\tdb 1008h dup( ?)\t; DATA XREF: _snd_off-3632\x18o'),(u'_byte_33508', 'db', ['1008h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_byte_34510\tdb 1000h dup(?)'),(u'_byte_34510', 'db', ['1000h dup(?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_cfg_buffer\tdb    4\t\t\t; DATA XREF: _loadcfg+C\x18o _loadcfg+1E\x18r'),(u'_cfg_buffer', 'db', ['4']))
        self.assertEqual(lex_instance.parse_line_data(line='_channels_25908\tdb 0A00h dup(0)\t\t; DATA XREF: _s3m_module+89\x18o'),(u'_channels_25908', 'db', ['0A00h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_chrin\t\tdd ?\t\t\t; DATA XREF: _moduleread:loc_10033\x18o'),(u'_chrin', 'dd', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_config_word\tdw 0\t\t\t; DATA XREF: _ems_init+8\x18r'),(u'_config_word', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_configword\tdw 218Bh\t\t; DATA XREF: _start+60\x18w\t_start+6C\x18w ...'),(u'_configword', 'dw', ['218Bh']))
        self.assertEqual(lex_instance.parse_line_data(line='_covox_txt\tdb    2\t\t\t; DATA XREF: seg003:0D7C\x18o seg003:0D7E\x18o'),(u'_covox_txt', 'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='_critsectpoint_off dw 0\t\t\t; DATA XREF: _start+150\x18w'),(u'_critsectpoint_off', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_critsectpoint_seg dw 0\t\t\t; DATA XREF: _start+154\x18w'),(u'_critsectpoint_seg', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_current_patterns dw 0\t\t\t; DATA XREF: _read_module+5F\x18w'),(u'_current_patterns', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dma_buf_pointer\tdd 0\t\t\t; DATA XREF: _mod_readfile_11F4E+9C\x18w'),(u'_dma_buf_pointer', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dma_channel2\tdb 0\t\t\t; DATA XREF: _wss_init:loc_147DC\x18w'),(u'_dma_channel2', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dma_channel\tdb 0\t\t\t; DATA XREF: _read_sndsettings+11\x18r'),(u'_dma_channel', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dma_channel_0\tdb 0\t\t\t; DATA XREF: _mod_readfile_11F4E+8E\x18r'),(u'_dma_channel_0', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dma_channel_1\tdb 0FFh\t\t\t; DATA XREF: _callsubx+B\x18r _callsubx+4D\x18w'),(u'_dma_channel_1', 'db', ['0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='_dma_chn_mask\tdb 0\t\t\t; DATA XREF: _sb16_init+4B\x18w'),(u'_dma_chn_mask', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dma_mode\tdb 0\t\t\t; DATA XREF: _proaud_set+3\x18w _wss_set+3\x18w\t...'),(u'_dma_mode', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dword_1DCEC\tdd 10524E49h\t\t; DATA XREF: _loadcfg+1A\x18r'),(u'_dword_1dcec', 'dd', ['10524E49h']))
        self.assertEqual(lex_instance.parse_line_data(line='_dword_1DE2C\tdd 0\t\t\t; DATA XREF: _text_init2+22A\x18w'),(u'_dword_1de2c', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_dword_27BC8\tdd ?\t\t\t; DATA XREF: _moduleread+8E\x18o'),(u'_dword_27bc8', 'dd', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_effoff_18F60\tdw offset _eff_nullsub\t; DATA XREF: sub_137D5+16\x18r'),(u'_effoff_18f60', 'dw', ['offset _eff_nullsub']))
        self.assertEqual(lex_instance.parse_line_data(line='_effoff_18FA2\tdw offset _eff_nullsub\t; DATA XREF: sub_13623+196\x18r'),(u'_effoff_18fa2', 'dw', ['offset _eff_nullsub']))
        self.assertEqual(lex_instance.parse_line_data(line='_effoff_18FE4\tdw offset _eff_nullsub\t; DATA XREF: chanl_2_eff_13813+E\x18r'),(u'_effoff_18fe4', 'dw', ['offset _eff_nullsub']))
        self.assertEqual(lex_instance.parse_line_data(line='_effoff_19026\tdw offset _eff_nullsub\t; DATA XREF: _eff_13BA3+A\x18r'),(u'_effoff_19026', 'dw', ['offset _eff_nullsub']))
        self.assertEqual(lex_instance.parse_line_data(line='_ems_enabled\tdb 0\t\t\t; DATA XREF: _ems_init\x18w\t_ems_init+78\x18w ...'),(u'_ems_enabled', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_ems_handle\tdw 0\t\t\t; DATA XREF: _ems_init+74\x18w'),(u'_ems_handle', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_ems_log_pagenum\tdw 0\t\t\t; DATA XREF: _ems_init+7D\x18w'),(u'_ems_log_pagenum', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_ems_pageframe\tdw 0\t\t\t; DATA XREF: _useless_11787+3E\x18r'),(u'_ems_pageframe', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_esseg_atstart\tdw 0\t\t\t; DATA XREF: _start+5\x18w _parse_cmdline+7\x18r ...'),(u'_esseg_atstart', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_f1_help_text\tdw 3F8h\t\t\t; DATA XREF: seg001:1CD8\x18o'),(u'_f1_help_text', 'dw', ['3F8h']))
        self.assertEqual(lex_instance.parse_line_data(line='_fhandle_1DE68\tdw 0\t\t\t; DATA XREF: _init_vga_waves+42\x18w'),(u'_fhandle_1de68', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_fhandle_module\tdw 0\t\t\t; DATA XREF: _moduleread+19\x18w'),(u'_fhandle_module', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_flag_playsetttings db 0\t\t\t; DATA XREF: _clean_11C43+68\x18r'),(u'_flag_playsetttings', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_flg_play_settings db 0\t\t\t; DATA XREF: _keyb_screen_loop+2F\x18w'),(u'_flg_play_settings', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_freq1\t\tdw 22050\t\t; DATA XREF: _volume_prepare_waves+48\x18r'),(u'_freq1', 'dw', ['22050']))
        self.assertEqual(lex_instance.parse_line_data(line='_freq2\t\tdw 0\t\t\t; DATA XREF: _read_sndsettings+2C\x18r'),(u'_freq2', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_freq_1DCF6\tdb 2Ch\t\t\t; DATA XREF: _callsubx+F\x18r _callsubx+51\x18w'),(u'_freq_1dcf6', 'db', ['2Ch']))
        self.assertEqual(lex_instance.parse_line_data(line='_freq_245DE\tdw 0\t\t\t; DATA XREF: _mod_1024A+40\x18r'),(u'_freq_245de', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_freq_246D7\tdb 0\t\t\t; DATA XREF: _read_sndsettings+15\x18r'),(u'_freq_246d7', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_gravis_port\tdw 0\t\t\t; DATA XREF: _volume_prep+61\x18r'),(u'_gravis_port', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_gravis_txt\tdb    1\t\t\t; DATA XREF: seg003:_sndcards_text_tbl\x18o'),(u'_gravis_txt', 'db', ['1']))
        self.assertEqual(lex_instance.parse_line_data(line='_hopeyoulike\tdw 3C6h\t\t\t; DATA XREF: _start+204\x18o'),(u'_hopeyoulike', 'dw', ['3C6h']))
        self.assertEqual(lex_instance.parse_line_data(line='_int1Avect\tdd 0\t\t\t; DATA XREF: _int1a_timer+12\x18r'),(u'_int1avect', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_int8addr\tdd 0\t\t\t; DATA XREF: sub_12DA8+6A\x18w'),(u'_int8addr', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_interrupt_mask\tdw 0\t\t\t; DATA XREF: _setsnd_handler+C\x18w'),(u'_interrupt_mask', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_intvectoffset\tdw 0\t\t\t; DATA XREF: _setsnd_handler+2D\x18w'),(u'_intvectoffset', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_irq_number2\tdb 0\t\t\t; DATA XREF: _wss_init:loc_147D0\x18w'),(u'_irq_number2', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_irq_number\tdb 0\t\t\t; DATA XREF: _read_sndsettings+D\x18r'),(u'_irq_number', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_irq_number_0\tdb 0\t\t\t; DATA XREF: _gravis_init+35\x18w'),(u'_irq_number_0', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_irq_number_1\tdb 0FFh\t\t\t; DATA XREF: _callsubx+7\x18r _callsubx+49\x18w'),(u'_irq_number_1', 'db', ['0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='_is_stereo\tdb 0\t\t\t; DATA XREF: sub_1265D+33\x18r'),(u'_is_stereo', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_key_code\tdw 0\t\t\t; DATA XREF: _start:loc_193FF\x18r'),(u'_key_code', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_keyb_switches\tdw 0\t\t\t; DATA XREF: _start+5D8\x18r'),(u'_keyb_switches', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_memflg_2469A\tdb 0\t\t\t; DATA XREF: _alloc_dma_buf+8\x18w'),(u'_memflg_2469a', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_messagepointer\tdd 0\t\t\t; DATA XREF: _start+228\x18r _start+23D\x18w ...'),(u'_messagepointer', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_midi_txt\tdb    2\t\t\t; DATA XREF: seg003:0D84\x18o'),(u'_midi_txt', 'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='_mod_channels_number\tdw 0\t\t\t; DATA XREF: _moduleread+81\x18r'),(u'_mod_channels_number', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_module_type_text dd 20202020h\t\t; DATA XREF: _mod_n_t_module\x18w'),(u'_module_type_text', 'dd', ['20202020h']))
        self.assertEqual(lex_instance.parse_line_data(line='_moduleflag_246D0 dw 0\t\t\t; DATA XREF: _mod_n_t_module+3D\x18w'),(u'_moduleflag_246d0', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_mouse_exist_flag db 0\t\t\t; DATA XREF: _mouse_init:loc_1C6EF\x18w'),(u'_mouse_exist_flag', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_mouse_visible\tdb 0Ah dup(0)\t\t; DATA XREF: _mouse_init\x18w'),(u'_mouse_visible', 'db', ['0Ah dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_mousecolumn\tdw 0\t\t\t; DATA XREF: _start+7A0\x18r _start+7BC\x18r ...'),(u'_mousecolumn', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_mouserow\tdw 0\t\t\t; DATA XREF: _start+7A3\x18r _start+7BF\x18r ...'),(u'_mouserow', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_multip_244CC\tdd 0\t\t\t; DATA XREF: _spectr_1B084+2F\x18w'),(u'_multip_244cc', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_multip_244D0\tdd 0\t\t\t; DATA XREF: _spectr_1B084+25\x18w'),(u'_multip_244d0', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_my_in\t\tdb ?\t\t\t; DATA XREF: __2stm_module+50\x18o'),(u'_my_in', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_my_seg_index\tdw 0\t\t\t; DATA XREF: _psm_module+136\x18r'),(u'_my_seg_index', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_my_size\t\tdw 0\t\t\t; DATA XREF: _volume_prep+9\x18w'),(u'_my_size', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_myin\t\tdd ?\t\t\t; DATA XREF: _mtm_module+22\x18o'),(u'_myin', 'dd', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_myin_0\t\tdb ?\t\t\t; DATA XREF: _ult_module+3A\x18o'),(u'_myin_0', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_myout\t\tdb 18C0h dup(?)\t\t; DATA XREF: _mod_1024A+3\x18o'),(u'_myout', 'db', ['18C0h dup(?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_myseg_24698\tdw 0\t\t\t; DATA XREF: _alloc_dma_buf+31\x18w'),(u'_myseg_24698', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_myseg_size\tdw 100h\tdup( ?)\t\t; DATA XREF: _useless_writeinr+117\x18r'),(u'_myseg_size', 'dw', ['100h\tdup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_mystr\t\tdb 42h dup(0)\t\t; DATA XREF: _start:loc_192E0\x18o'),(u'_mystr', 'db', ['42h dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='_offs_draw2\tdw offset loc_19050\t; DATA XREF: _keyb_screen_loop+486\x18r'),(u'_offs_draw2', 'dw', ['offset loc_19050']))
        self.assertEqual(lex_instance.parse_line_data(line='_offs_draw\tdw offset loc_19050\t; DATA XREF: _keyb_screen_loop+32\x18r'),(u'_offs_draw', 'dw', ['offset loc_19050']))
        self.assertEqual(lex_instance.parse_line_data(line='_offs_interpol2\tdw offset loc_16617\t; DATA XREF: sub_1609F+2AE\x18r'),(u'_offs_interpol2', 'dw', ['offset loc_16617']))
        self.assertEqual(lex_instance.parse_line_data(line='_offs_interpol\tdw offset loc_15B52\t; DATA XREF: sub_15577+311\x18r'),(u'_offs_interpol', 'dw', ['offset loc_15B52']))
        self.assertEqual(lex_instance.parse_line_data(line='_offs_noninterp2\tdw offset loc_161C0\t; DATA XREF: sub_1609F+28\x18r'),(u'_offs_noninterp2', 'dw', ['offset loc_161C0']))
        self.assertEqual(lex_instance.parse_line_data(line='_offs_noninterp\tdw offset loc_15698\t; DATA XREF: sub_15577+28\x18r'),(u'_offs_noninterp', 'dw', ['offset loc_15698']))
        self.assertEqual(lex_instance.parse_line_data(line='_oint24_1C1AC\tdd 0\t\t\t; DATA XREF: _start+115\x18w _start+1D4\x18r ...'),(u'_oint24_1c1ac', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_oint2f_1C1B4\tdd 0\t\t\t; DATA XREF: _start+124\x18w _start+1C8\x18r ...'),(u'_oint2f_1c1b4', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_oint8off_1DE14\tdw 0\t\t\t; DATA XREF: _start+F9\x18w'),(u'_oint8off_1de14', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_oint8seg_1DE16\tdw 0\t\t\t; DATA XREF: _start+FD\x18w'),(u'_oint8seg_1de16', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_oint9_1C1A4\tdd 0\t\t\t; DATA XREF: _start+106\x18w _start+1E0\x18r ...'),(u'_oint9_1c1a4', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_old_intprocoffset dw 0\t\t\t; DATA XREF: _setsnd_handler+3A\x18w'),(u'_old_intprocoffset', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_old_intprocseg\tdw 0\t\t\t; DATA XREF: _setsnd_handler+3E\x18w'),(u'_old_intprocseg', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_outp_freq\tdw 0\t\t\t; DATA XREF: _read_module+82\x18w'),(u'_outp_freq', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_palette_24404\tdb    0\t\t\t; DATA XREF: _init_vga_waves+17\x18o'),(u'_palette_24404', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_pc_timer_tbl\tdb 40h,40h,40h,40h,40h,40h,40h,40h,40h,40h,3Fh,3Fh,3Fh'),(u'_pc_timer_tbl', 'db', ['40h', '40h', '40h', '40h', '40h', '40h', '40h', '40h', '40h', '40h', '3Fh', '3Fh', '3Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_pcspeaker_txt\tdb    2\t\t\t; DATA XREF: seg003:0D80\x18o seg003:0D82\x18o'),(u'_pcspeaker_txt', 'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='_play_state\tdb 0\t\t\t; DATA XREF: _getset_playstate+B\x18w'),(u'_play_state', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_pointer_245B4\tdd 0\t\t\t; DATA XREF: sub_135CA+1C\x18r'),(u'_pointer_245b4', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_prev_scan_code\tdb 0\t\t\t; DATA XREF: _int9_keyb+19\x18r'),(u'_prev_scan_code', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_s3mtable_108D6\tdb 0FFh,10h,0Bh,0Dh,15h,12h,11h,13h,14h,1Bh,1Dh,17h,16h'),(u'_s3mtable_108d6', 'db', ['0FFh', '10h', '0Bh', '0Dh', '15h', '12h', '11h', '13h', '14h', '1Bh', '1Dh', '17h', '16h']))
        self.assertEqual(lex_instance.parse_line_data(line='_s3mtable_108F0\tdb 0,3,5,4,7,0FFh,0FFh,0FFh,8,0FFh,0FFh,6,0Ch,0Dh,0FFh'),(u'_s3mtable_108f0', 'db', ['0', '3', '5', '4', '7', '0FFh', '0FFh', '0FFh', '8', '0FFh', '0FFh', '6', '0Ch', '0Dh', '0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='_samples_outoffs_24600\tdw 0\t\t\t; DATA XREF: sub_12EBA+2C\x18w'),(u'_samples_outoffs_24600', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_savesp_245D0\tdw 0\t\t\t; DATA XREF: _moduleread+15\x18w'),(u'_savesp_245d0', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_sb16_txt\tdb    2\t\t\t; DATA XREF: seg003:0D72\x18o seg003:0D74\x18o ...'),(u'_sb16_txt', 'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='_sb_base_port\tdw 0\t\t\t; DATA XREF: _sb16_on+17\x18r _sb16_on+44\x18r ...'),(u'_sb_base_port', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_sb_int_counter\tdb 0\t\t\t; DATA XREF: _sb_test_interrupt\x18w'),(u'_sb_int_counter', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_sb_irq_number\tdb 0\t\t\t; DATA XREF: _sb16_init+1C\x18w'),(u'_sb_irq_number', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_sb_timeconst\tdb 0\t\t\t; DATA XREF: _sbpro_init+51\x18w _sb_set-D1\x18r ...'),(u'_sb_timeconst', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_segfsbx_1DE28\tdd 0\t\t\t; DATA XREF: _read_module+99\x18w'),(u'_segfsbx_1de28', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_segs_table\tdw 100h\tdup( ?)\t\t; DATA XREF: _useless_writeinr+13C\x18r'),(u'_segs_table', 'dw', ['100h\tdup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_snd_base_port\tdw 0\t\t\t; DATA XREF: _read_sndsettings+9\x18r'),(u'_snd_base_port', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_snd_base_port_0\tdw 0FFFFh\t\t; DATA XREF: _callsubx+3\x18r _callsubx+45\x18w'),(u'_snd_base_port_0', 'dw', ['0FFFFh']))
        self.assertEqual(lex_instance.parse_line_data(line='_snd_card_type\tdb 3\t\t\t; DATA XREF: _text_init2+18E\x18r'),(u'_snd_card_type', 'db', ['3']))
        self.assertEqual(lex_instance.parse_line_data(line='_snd_cards_offs\tdw offset _aGravisUltrasoun ; DATA XREF:\tseg003:114E\x19o'),(u'_snd_cards_offs', 'dw', ['offset _aGravisUltrasoun']))
        self.assertEqual(lex_instance.parse_line_data(line='_snd_init\tdb 0\t\t\t; DATA XREF: sub_12D05+B\x18r'),(u'_snd_init', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_snd_set_flag\tdb 0\t\t\t; DATA XREF: sub_12DA8+60\x18w _snd_on+7\x18r ...'),(u'_snd_set_flag', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_sndcard_type\tdb 0\t\t\t; DATA XREF: _mtm_module+2E\x18r'),(u'_sndcard_type', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_sndflags_24622\tdb 0\t\t\t; DATA XREF: _useless_11787+9\x18r'),(u'_sndflags_24622', 'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_sound_port\tdw 0\t\t\t; DATA XREF: _proaud_init+42\x18w'),(u'_sound_port', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_swapdata_off\tdw 0\t\t\t; DATA XREF: _start+161\x18w'),(u'_swapdata_off', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_swapdata_seg\tdw 0\t\t\t; DATA XREF: _start+165\x18w'),(u'_swapdata_seg', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_13EC3\tdb 140,50,25,15,10,7,6,4,3,3,2,2,2,2,1,1 ; DATA\tXREF: sub_13E9B+D\x18r'),(u'_table_13ec3', 'db', ['140', '50', '25', '15', '10', '7', '6', '4', '3', '3', '2', '2', '2', '2', '1', '1']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_14057\tdb 0FFh,80h,40h,2Ah,20h,19h,15h,12h,10h,0Eh,0Ch,0Bh,0Ah'),(u'_table_14057', 'db', ['0FFh', '80h', '40h', '2Ah', '20h', '19h', '15h', '12h', '10h', '0Eh', '0Ch', '0Bh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_246F6\tdw 8363,8422,8482,8543,8604,8667,8730,8794,7901,7954,8007'),(u'_table_246f6', 'dw', ['8363', '8422', '8482', '8543', '8604', '8667', '8730', '8794', '7901', '7954', '8007']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_24716\tdw 8000h,9000h,0A000h,0A952h,0B000h,0B521h,0B952h,0BCDEh'),(u'_table_24716', 'dw', ['8000h', '9000h', '0A000h', '0A952h', '0B000h', '0B521h', '0B952h', '0BCDEh']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_24898\tdb 1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh,1Eh'),(u'_table_24898', 'db', ['1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh', '1Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_25118\tdw 1712,1616,1524,1440,1356,1280,1208,1140,1076,1016,960,906,856,808,762,720,678,640,604,570,538,508,480,453'),(u'_table_25118', 'dw', ['1712', '1616', '1524', '1440', '1356', '1280', '1208', '1140', '1076', '1016', '960', '906', '856', '808', '762', '720', '678', '640', '604', '570', '538', '508', '480', '453']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_251C0\tdb  0,18h,31h,4Ah,61h,78h,8Dh,0A1h,0B4h,0C5h,0D4h,0E0h'),(u'_table_251c0', 'db', ['0', '18h', '31h', '4Ah', '61h', '78h', '8Dh', '0A1h', '0B4h', '0C5h', '0D4h', '0E0h']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_251E0\tdb  0,15h,20h,29h,30h,37h,3Dh,44h,49h,4Fh,54h,59h,5Eh'),(u'_table_251e0', 'db', ['0', '15h', '20h', '29h', '30h', '37h', '3Dh', '44h', '49h', '4Fh', '54h', '59h', '5Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_25221\tdb  0, 4, 8,0Ch,10h,14h,18h,1Ch,20h,24h,28h,2Ch,30h,34h'),(u'_table_25221', 'db', ['0', '4', '8', '0Ch', '10h', '14h', '18h', '1Ch', '20h', '24h', '28h', '2Ch', '30h', '34h']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_25261\tdb  0, 4, 8,0Ch,10h,14h,18h,1Ch,20h,24h,28h,2Ch,30h,34h'),(u'_table_25261', 'db', ['0', '4', '8', '0Ch', '10h', '14h', '18h', '1Ch', '20h', '24h', '28h', '2Ch', '30h', '34h']))
        self.assertEqual(lex_instance.parse_line_data(line='_table_sndcrdname dw offset _aGravisUltrasou ; DATA XREF:\t_text_init2+19D\x18r'),(u'_table_sndcrdname', 'dw', ['offset _aGravisUltrasou']))
        self.assertEqual(lex_instance.parse_line_data(line='_tabledword_24526 dd    0,65536,46340,25079,12785,6423,3215,1608, 804, 402'),(u'_tabledword_24526', 'dd', ['0', '65536', '46340', '25079', '12785', '6423', '3215', '1608', '804', '402']))
        self.assertEqual(lex_instance.parse_line_data(line='_tabledword_24562 dd -131072,-65536,-19196,-4989,-1260,-316, -79, -20,  -5'),(u'_tabledword_24562', 'dd', ['-131072', '-65536', '-19196', '-4989', '-1260', '-316', '-79', '-20', '-5']))
        self.assertEqual(lex_instance.parse_line_data(line='_timer_word_14F6E dw 0\t\t\t; DATA XREF: _set_timer\x18w _text:4F59\x18r'),(u'_timer_word_14f6e', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_vga_palette\tdb 0,0,0\t\t; DATA XREF: _init_vga_waves+1F\x18o'),(u'_vga_palette', 'db', ['0', '0', '0']))
        self.assertEqual(lex_instance.parse_line_data(line='_videomempointer\tdd 0\t\t\t; DATA XREF: _start:loc_1917D\x18w'),(u'_videomempointer', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_videopoint_shiftd dd 0\t\t\t; DATA XREF: _text_init2+5F\x18w'),(u'_videopoint_shiftd', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_vlm_byte_table\tdb 8200h dup( ?)\t; DATA XREF: _volume_prepare_waves+8A\x18o'),(u'_vlm_byte_table', 'db', ['8200h dup( ?)']))
        self.assertEqual(lex_instance.parse_line_data(line='_volume_1DE34\tdd 0\t\t\t; DATA XREF: _read_module+DA\x18w'),(u'_volume_1de34', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_volume_245FC\tdw 100h\t\t\t; DATA XREF: sub_1265D+5\x18r'),(u'_volume_245fc', 'dw', ['100h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_14913\tdw 536h\t\t\t; DATA XREF: _wss_set+14\x18w'),(u'_word_14913', 'dw', ['536h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_14BBB\tdw 22Fh\t\t\t; DATA XREF: _sb16_on+49\x18w _sb16_on+57\x18w'),(u'_word_14bbb', 'dw', ['22Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_14CEB\tdw 22Eh\t\t\t; DATA XREF: _sb_set-108\x18w'),(u'_word_14ceb', 'dw', ['22Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_14FC0\tdw 1000h\t\t; DATA XREF: _covox_init+33\x18w'),(u'_word_14fc0', 'dw', ['1000h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_14FC5\tdw 1234h\t\t; DATA XREF: _covox_init+37\x18w'),(u'_word_14fc5', 'dw', ['1234h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_14FC8\tdw 378h\t\t\t; DATA XREF: _covox_init+24\x18w'),(u'_word_14fc8', 'dw', ['378h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_1504D\tdw 37Ah\t\t\t; DATA XREF: _stereo_init+27\x18w'),(u'_word_1504d', 'dw', ['37Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_15056\tdw 1234h\t\t; DATA XREF: _stereo_init+3A\x18w'),(u'_word_15056', 'dw', ['1234h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_15126\tdw 1234h\t\t; DATA XREF: _adlib_init+75\x18w'),(u'_word_15126', 'dw', ['1234h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_1519B\tdw 1000h\t\t; DATA XREF: _pcspeaker_init+1E\x18w'),(u'_word_1519b', 'dw', ['1000h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_151A3\tdw 1234h\t\t; DATA XREF: _pcspeaker_init+22\x18w'),(u'_word_151a3', 'dw', ['1234h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_1D26D\tdw 3F2h\t\t\t; DATA XREF: _dosexec+19\x18o'),(u'_word_1d26d', 'dw', ['3F2h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_1D3B0\tdw 49Eh\t\t\t; DATA XREF: _start+723\x18o'),(u'_word_1d3b0', 'dw', ['49Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_1D614\tdw 2020h\t\t; DATA XREF: _useless_197F2+7\x18w'),(u'_word_1d614', 'dw', ['2020h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_1D669\tdw 2020h\t\t; DATA XREF: _useless_197F2+12\x18w'),(u'_word_1d669', 'dw', ['2020h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_1DE46\tdw 0\t\t\t; DATA XREF: _keyb_screen_loop+316\x18r'),(u'_word_1de46', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_246DE\tdw 6B00h,6500h,5F40h,5A00h,54C0h,5000h,4B80h,4740h,4340h'),(u'_word_246de', 'dw', ['6B00h', '6500h', '5F40h', '5A00h', '54C0h', '5000h', '4B80h', '4740h', '4340h']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_257A4\tdw 0\t\t\t; DATA XREF: _useless_writeinr+106\x18w'),(u'_word_257a4', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_257E6\tdw 4\t\t\t; DATA XREF: _useless_writeinr+53\x18w'),(u'_word_257e6', 'dw', ['4']))
        self.assertEqual(lex_instance.parse_line_data(line='_word_30515\tdw ?\t\t\t; DATA XREF: _ult_module+1A\x18r'),(u'_word_30515', 'dw', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='_wss_freq_table2\tdw  1,19D7h,0Fh,1F40h, 0,2580h,0Eh,2B11h, 3,3E80h, 2,49D4h'),(u'_wss_freq_table2', 'dw', ['1', '19D7h', '0Fh', '1F40h', '0', '2580h', '0Eh', '2B11h', '3', '3E80h', '2', '49D4h']))
        self.assertEqual(lex_instance.parse_line_data(line='_wss_freq_table\tdw 5513\t\t\t; DATA XREF: _wss_test+3E\x19r'),(u'_wss_freq_table', 'dw', ['5513']))
        self.assertEqual(lex_instance.parse_line_data(line='_x_storage\tdw  0, 0, 0, 0,\t0, 0, 0, 0, 0, 0, 0, 0,\t0, 0, 0, 0, 0'),(u'_x_storage', 'dw', ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']))
        self.assertEqual(lex_instance.parse_line_data(line='a db 0ffh,0dfh,0h'),(u'a', 'db', ['0ffh', '0dfh', '0h']))
        self.assertEqual(lex_instance.parse_line_data(line='a db 1'),(u'a', 'db', ['1']))
        self.assertEqual(lex_instance.parse_line_data(line='asc_1058C\tdb 0,18h,0Bh,0Dh,0Ah\t; DATA XREF: __2stm_module+171\x18r'),(u'asc_1058c', 'db', ['0', '18h', '0Bh', '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='asc_182C3\tdb 0,0,1,3,0,2,0,4,0,0,0,5,6,0,0,7 ; DATA XREF:\t_gravis_18216+5\x18r'),(u'asc_182c3', 'db', ['0', '0', '1', '3', '0', '2', '0', '4', '0', '0', '0', '5', '6', '0', '0', '7']))
        self.assertEqual(lex_instance.parse_line_data(line='asc_182D3\tdb 0,1,0,2,0,3,4,5\t; DATA XREF: _gravis_18216+19\x18r'),(u'asc_182d3', 'db', ['0', '1', '0', '2', '0', '3', '4', '5']))
        self.assertEqual(lex_instance.parse_line_data(line='audio_len\tdw 0\t\t\t; DATA XREF: _configure_timer+1B\x18w'),(u'audio_len', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='b db 2'),(u'b', 'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='b dw 2'),(u'b', 'dw', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='beginningdata db 4'),(u'beginningdata', 'db', ['4']))
        self.assertEqual(lex_instance.parse_line_data(line='buffer db 64000 dup(0)'),(u'buffer', 'db', ['64000 dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='cc db 3'),(u'cc', 'db', ['3']))
        self.assertEqual(lex_instance.parse_line_data(line='cc dd 3'),(u'cc', 'dd', ['3']))
        self.assertEqual(lex_instance.parse_line_data(line='d db 4'),(u'd', 'db', ['4']))
        self.assertEqual(lex_instance.parse_line_data(line='db    9'),('', u'db', ['9']))
        self.assertEqual(lex_instance.parse_line_data(line='db    ?\t;'),('', u'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='db  0Ah'),('', u'db', ['0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='db  20h'),('', u'db', ['20h']))
        self.assertEqual(lex_instance.parse_line_data(line='db  2Ch\t; ,'),('', u'db', ['2Ch']))
        self.assertEqual(lex_instance.parse_line_data(line='db  7Fh\t; \x7f'),('', u'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='db  80h\t; \x80'),('', u'db', ['80h']))
        self.assertEqual(lex_instance.parse_line_data(line='db  8Ah\t; \x8a'),('', u'db', ['8Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0'),('', u'db', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0,2Ah,2Ah'),('', u'db', ['0', '2Ah', '2Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='db 000,009,000,000,009,021,000,009,042,000,009,063,009,009,000,009'),('', u'db', ['000', '009', '000', '000', '009', '021', '000', '009', '042', '000', '009', '063', '009', '009', '000', '009']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0A0h,0A4h,0A8h,0ACh,0B0h,0B4h,0B8h,0BCh,0C0h,0C4h,0C8h'),('', u'db', ['0A0h', '0A4h', '0A8h', '0ACh', '0B0h', '0B4h', '0B8h', '0BCh', '0C0h', '0C4h', '0C8h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0A0h\t; \xa0'),('', u'db', ['0A0h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0A0h\t; \xa0\t\t; self modifying'),('', u'db', ['0A0h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0A1h'),('', u'db', ['0A1h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0A1h,0A5h,0AAh,0AEh,0B2h,0B6h,0BAh,0BEh,0C2h,0C6h,0CAh'),('', u'db', ['0A1h', '0A5h', '0AAh', '0AEh', '0B2h', '0B6h', '0BAh', '0BEh', '0C2h', '0C6h', '0CAh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0AAh\t; \xaa'),('', u'db', ['0AAh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0Ah'),('', u'db', ['0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0Ah,0Bh,1Bh'),('', u'db', ['0Ah', '0Bh', '1Bh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0B8h,0BBh,0BEh,0C1h,0C3h,0C6h,0C9h,0CCh,0CFh,0D1h,0D4h'),('', u'db', ['0B8h', '0BBh', '0BEh', '0C1h', '0C3h', '0C6h', '0C9h', '0CCh', '0CFh', '0D1h', '0D4h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0BAh'),('', u'db', ['0BAh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0BAh\t; \xba'),('', u'db', ['0BAh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0BAh\t; \xba\t\t; self moifying'),('', u'db', ['0BAh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0BBh\t; \xbb'),('', u'db', ['0BBh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0BC4h dup(?)'),('', u'db', ['0BC4h dup(?)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0Bh'),('', u'db', ['0Bh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0C1h\t; \xc1'),('', u'db', ['0C1h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0C5h,0B4h,0A1h,8Dh,78h,61h,4Ah,31h,18h'),('', u'db', ['0C5h', '0B4h', '0A1h', '8Dh', '78h', '61h', '4Ah', '31h', '18h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0CCh,0D0h,0D4h,0D8h,0DCh,0E0h,0E4h,0E8h,0ECh,0F0h,0F4h'),('', u'db', ['0CCh', '0D0h', '0D4h', '0D8h', '0DCh', '0E0h', '0E4h', '0E8h', '0ECh', '0F0h', '0F4h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0CEh,0D2h,0D6h,0DAh,0DEh,0E2h,0E6h,0EAh,0EEh,0F2h,0F6h'),('', u'db', ['0CEh', '0D2h', '0D6h', '0DAh', '0DEh', '0E2h', '0E6h', '0EAh', '0EEh', '0F2h', '0F6h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0Ch,0Bh,0Bh,0Bh,0Bh,0Ah,0Ah,0Ah,0Ah,0Ah,9,9,9,9,9,9'),('', u'db', ['0Ch', '0Bh', '0Bh', '0Bh', '0Bh', '0Ah', '0Ah', '0Ah', '0Ah', '0Ah', '9', '9', '9', '9', '9', '9']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0D7h,0DAh,0DDh,0DFh,0E2h,0E5h,0E7h,0EAh,0ECh,0EFh,0F1h'),('', u'db', ['0D7h', '0DAh', '0DDh', '0DFh', '0E2h', '0E5h', '0E7h', '0EAh', '0ECh', '0EFh', '0F1h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0Dh,0Ah'),('', u'db', ['0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0Dh,0Eh,21h'),('', u'db', ['0Dh', '0Eh', '21h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0EBh,0F4h,0FAh,0FDh,0FFh,0FDh,0FAh,0F4h,0EBh,0E0h,0D4h'),('', u'db', ['0EBh', '0F4h', '0FAh', '0FDh', '0FFh', '0FDh', '0FAh', '0F4h', '0EBh', '0E0h', '0D4h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0F4h,0F6h,0F9h,0FBh,0FEh,0FFh'),('', u'db', ['0F4h', '0F6h', '0F9h', '0FBh', '0FEh', '0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0F4h\t; \xf4'),('', u'db', ['0F4h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0F8h,0FFh, 0'),('', u'db', ['0F8h', '0FFh', '0']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0FAh,0FFh'),('', u'db', ['0FAh', '0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0FEh\t; \xfe'),('', u'db', ['0FEh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0FFh'),('', u'db', ['0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0FFh,0FFh,9,0FFh,1Ch,7,0Eh,0Fh,0FFh,0FFh,0FFh,8,0FFh'),('', u'db', ['0FFh', '0FFh', '9', '0FFh', '1Ch', '7', '0Eh', '0Fh', '0FFh', '0FFh', '0FFh', '8', '0FFh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 0Fh,0Fh,0Eh,0Eh,0Dh,0Dh,0Ch,0Ch,0Bh,0Bh,0Ah,0Ah,0Ah,9,9,8'),('', u'db', ['0Fh', '0Fh', '0Eh', '0Eh', '0Dh', '0Dh', '0Ch', '0Ch', '0Bh', '0Bh', '0Ah', '0Ah', '0Ah', '9', '9', '8']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1'),('', u'db', ['1']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1,1,1,1,1'),('', u'db', ['1', '1', '1', '1', '1']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1'),('', u'db', ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1,2,3,4'),('', u'db', ['1', '2', '3', '4']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1000h dup(?) ;IGNORE'),('', u'db', ['1000h dup(?)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1000h dup(?)'),('', u'db', ['1000h dup(?)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 10h,11h,2Ah'),('', u'db', ['10h', '11h', '2Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='db 11h,10h,10h,0Fh,0Fh,0Eh,0Eh,0Dh,0Dh,0Dh,0Ch,0Ch,0Ch'),('', u'db', ['11h', '10h', '10h', '0Fh', '0Fh', '0Eh', '0Eh', '0Dh', '0Dh', '0Dh', '0Ch', '0Ch', '0Ch']))
        self.assertEqual(lex_instance.parse_line_data(line='db 12'),('', u'db', ['12']))
        self.assertEqual(lex_instance.parse_line_data(line='db 13h,14h,31h'),('', u'db', ['13h', '14h', '31h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 141'),('', u'db', ['141']))
        self.assertEqual(lex_instance.parse_line_data(line='db 16'),('', u'db', ['16']))
        self.assertEqual(lex_instance.parse_line_data(line='db 17h,16h,16h,15h,15h,14h,14h,13h,13h,13h,12h,12h,11h,11h,10h,10h'),('', u'db', ['17h', '16h', '16h', '15h', '15h', '14h', '14h', '13h', '13h', '13h', '12h', '12h', '11h', '11h', '10h', '10h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 18h dup(?)'),('', u'db', ['18h dup(?)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1Ah,1Ah,19h,19h,19h,19h,19h,19h,19h,18h,18h,18h,18h,17h,17h,17h'),('', u'db', ['1Ah', '1Ah', '19h', '19h', '19h', '19h', '19h', '19h', '19h', '18h', '18h', '18h', '18h', '17h', '17h', '17h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1Eh'),('', u'db', ['1Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 1Fh dup(0)'),('', u'db', ['1Fh dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 2'),('', u'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='db 2, 1, 3, 2, 4, 3, 5'),('', u'db', ['2', '1', '3', '2', '4', '3', '5']))
        self.assertEqual(lex_instance.parse_line_data(line='db 2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1'),('', u'db', ['2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']))
        self.assertEqual(lex_instance.parse_line_data(line='db 2,1,3,4,7,0'),('', u'db', ['2', '1', '3', '4', '7', '0']))
        self.assertEqual(lex_instance.parse_line_data(line='db 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2'),('', u'db', ['2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2']))
        self.assertEqual(lex_instance.parse_line_data(line='db 2,2,6'),('', u'db', ['2', '2', '6']))
        self.assertEqual(lex_instance.parse_line_data(line='db 2Bh,2Ah,29h,28h,27h,26h,25h,24h,23h,22h,21h,20h,1Fh'),('', u'db', ['2Bh', '2Ah', '29h', '28h', '27h', '26h', '25h', '24h', '23h', '22h', '21h', '20h', '1Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2'),('', u'db', ['3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '2', '2', '2']))
        self.assertEqual(lex_instance.parse_line_data(line='db 34h,33h,33h,32h,32h,31h,31h,30h,30h,2Fh,2Eh,2Dh,2Ch'),('', u'db', ['34h', '33h', '33h', '32h', '32h', '31h', '31h', '30h', '30h', '2Fh', '2Eh', '2Dh', '2Ch']))
        self.assertEqual(lex_instance.parse_line_data(line='db 37h,37h,37h,36h,36h,36h,36h,35h,35h,35h,35h,34h,34h'),('', u'db', ['37h', '37h', '37h', '36h', '36h', '36h', '36h', '35h', '35h', '35h', '35h', '34h', '34h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 38h,3Ch,40h,44h,48h,4Ch,50h,54h,58h,5Ch,60h,64h,68h'),('', u'db', ['38h', '3Ch', '40h', '44h', '48h', '4Ch', '50h', '54h', '58h', '5Ch', '60h', '64h', '68h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 38h,3Ch,40h,44h,48h,4Ch,50h,55h,59h,5Dh,61h,65h,69h'),('', u'db', ['38h', '3Ch', '40h', '44h', '48h', '4Ch', '50h', '55h', '59h', '5Dh', '61h', '65h', '69h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 39h,39h,39h,38h,38h,38h,38h,38h,38h,38h,38h,37h,37h'),('', u'db', ['39h', '39h', '39h', '38h', '38h', '38h', '38h', '38h', '38h', '38h', '38h', '37h', '37h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 3Ah,3Ah,3Ah,3Ah,3Ah,3Ah,39h,39h,39h,39h,39h,39h,39h'),('', u'db', ['3Ah', '3Ah', '3Ah', '3Ah', '3Ah', '3Ah', '39h', '39h', '39h', '39h', '39h', '39h', '39h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 3Bh,3Bh,3Bh,3Bh,3Bh,3Bh,3Bh,3Bh,3Bh,3Ah,3Ah,3Ah,3Ah'),('', u'db', ['3Bh', '3Bh', '3Bh', '3Bh', '3Bh', '3Bh', '3Bh', '3Bh', '3Bh', '3Ah', '3Ah', '3Ah', '3Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='db 3Dh,3Dh,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,3Bh'),('', u'db', ['3Dh', '3Dh', '3Ch', '3Ch', '3Ch', '3Ch', '3Ch', '3Ch', '3Ch', '3Ch', '3Ch', '3Ch', '3Bh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 3Eh,3Eh,3Eh,3Eh,3Eh,3Eh,3Dh,3Dh,3Dh,3Dh,3Dh,3Dh,3Dh'),('', u'db', ['3Eh', '3Eh', '3Eh', '3Eh', '3Eh', '3Eh', '3Dh', '3Dh', '3Dh', '3Dh', '3Dh', '3Dh', '3Dh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 3Fh,3Fh,3Fh,3Fh,3Fh,3Fh,3Fh,3Fh,3Fh,3Eh,3Eh,3Eh,3Eh'),('', u'db', ['3Fh', '3Fh', '3Fh', '3Fh', '3Fh', '3Fh', '3Fh', '3Fh', '3Fh', '3Eh', '3Eh', '3Eh', '3Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 4 dup (5)'),('', u'db', ['4 dup (5)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 4 dup(0)'),('', u'db', ['4 dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 4'),('', u'db', ['4']))
        self.assertEqual(lex_instance.parse_line_data(line='db 4,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1'),('', u'db', ['4', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '2', '2', '2', '2', '2', '2', '2', '2', '2', '1', '1', '1', '1', '1', '1']))
        self.assertEqual(lex_instance.parse_line_data(line='db 4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3'),('', u'db', ['4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '3', '3', '3', '3', '3']))
        self.assertEqual(lex_instance.parse_line_data(line='db 4,5,0Dh'),('', u'db', ['4', '5', '0Dh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 5 dup(0)'),('', u'db', ['5 dup(0)']))
        self.assertEqual(lex_instance.parse_line_data(line='db 5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4'),('', u'db', ['5', '5', '5', '5', '5', '5', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4']))
        self.assertEqual(lex_instance.parse_line_data(line='db 6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4'),('', u'db', ['6', '6', '6', '6', '6', '6', '6', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '4', '4', '4', '4', '4', '4', '4', '4', '4']))
        self.assertEqual(lex_instance.parse_line_data(line='db 62h,67h,6Bh,6Fh,73h,77h,7Ch,7Fh,83h,86h,8Ah,8Eh,91h'),('', u'db', ['62h', '67h', '6Bh', '6Fh', '73h', '77h', '7Ch', '7Fh', '83h', '86h', '8Ah', '8Eh', '91h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 6Ch,70h,74h,78h,7Ch,80h,84h,88h,8Ch,90h,94h,98h,9Ch'),('', u'db', ['6Ch', '70h', '74h', '78h', '7Ch', '80h', '84h', '88h', '8Ch', '90h', '94h', '98h', '9Ch']))
        self.assertEqual(lex_instance.parse_line_data(line='db 6Dh,71h,75h,79h,7Dh,81h,85h,89h,8Dh,91h,95h,99h,9Dh'),('', u'db', ['6Dh', '71h', '75h', '79h', '7Dh', '81h', '85h', '89h', '8Dh', '91h', '95h', '99h', '9Dh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 7,8,15h'),('', u'db', ['7', '8', '15h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 77h,80h'),('', u'db', ['77h', '80h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 78h'),('', u'db', ['78h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 7Eh'),('', u'db', ['7Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 7Fh'),('', u'db', ['7Fh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 8,8,8,7,7,7,7,6,6,6,6,6,6,5,5,5'),('', u'db', ['8', '8', '8', '7', '7', '7', '7', '6', '6', '6', '6', '6', '6', '5', '5', '5']))
        self.assertEqual(lex_instance.parse_line_data(line='db 80h'),('', u'db', ['80h']))
        self.assertEqual(lex_instance.parse_line_data(line='db 87h,\t0DBh'),('', u'db', ['87h', '0DBh']))
        self.assertEqual(lex_instance.parse_line_data(line='db 9,9,8'),('', u'db', ['9', '9', '8']))
        self.assertEqual(lex_instance.parse_line_data(line='db 9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,6,6,6,6'),('', u'db', ['9', '9', '9', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '7', '7', '7', '7', '7', '7', '7', '6', '6', '6', '6']))
        self.assertEqual(lex_instance.parse_line_data(line='db 95h,98h,9Bh,9Fh,0A2h,0A5h,0A9h,0ABh,0AFh,0B3h,0B5h'),('', u'db', ['95h', '98h', '9Bh', '9Fh', '0A2h', '0A5h', '0A9h', '0ABh', '0AFh', '0B3h', '0B5h']))
        self.assertEqual(lex_instance.parse_line_data(line='db \'Close this DOS session first with the "EXIT" command.\',0Dh,0Ah'),('', u'db', ['\'Close this DOS session first with the "EXIT" command.\'', '0Dh', '0Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='dd   -2,  -1,  -1,  -1,\t -1,   0'),('', u'dd', ['-2', '-1', '-1', '-1', '-1', '0']))
        self.assertEqual(lex_instance.parse_line_data(line='dd  201, 100,  50,  25,\t 12'),('', u'dd', ['201', '100', '50', '25', '12']))
        self.assertEqual(lex_instance.parse_line_data(line='dd 111,1'),('', u'dd', ['111', '1']))
        self.assertEqual(lex_instance.parse_line_data(line='dd offset var5'),('', u'dd', ['offset var5']))
        self.assertEqual(lex_instance.parse_line_data(line='dd unk_24453'),('', u'dd', ['unk_24453']))
        self.assertEqual(lex_instance.parse_line_data(line='dd unk_24456'),('', u'dd', ['unk_24456']))
        self.assertEqual(lex_instance.parse_line_data(line='doublequote db \'ab\'\'cd\',"e"'),(u'doublequote', 'db', ["'ab''cd'", '"e"']))
        self.assertEqual(lex_instance.parse_line_data(line='dw  0, 0, 0, 0,\t0, 0, 0, 0, 0, 0, 0, 0,\t0, 0, 0, 0'),('', u'dw', ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']))
        self.assertEqual(lex_instance.parse_line_data(line='dw  5,5622h, 7,6B25h, 4,7D00h, 6,8133h,0Dh,93A8h, 9,0AC44h'),('', u'dw', ['5', '5622h', '7', '6B25h', '4', '7D00h', '6', '8133h', '0Dh', '93A8h', '9', '0AC44h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0A06h'),('', u'dw', ['0A06h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0A12h'),('', u'dw', ['0A12h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0A26h'),('', u'dw', ['0A26h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0AAh'),('', u'dw', ['0AAh']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0AB2h'),('', u'dw', ['0AB2h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0AC6h'),('', u'dw', ['0AC6h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0AE0h,0A40h,9B0h,920h,8A0h,820h,7B0h,740h,6D0h,670h'),('', u'dw', ['0AE0h', '0A40h', '9B0h', '920h', '8A0h', '820h', '7B0h', '740h', '6D0h', '670h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0B10h,0A70h,9E0h,950h,8D0h,850h,7D0h,760h,700h,690h'),('', u'dw', ['0B10h', '0A70h', '9E0h', '950h', '8D0h', '850h', '7D0h', '760h', '700h', '690h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0B52h'),('', u'dw', ['0B52h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0B66h'),('', u'dw', ['0B66h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0B70h,0AC0h,0A30h,9A0h,910h,890h,810h,7A0h,730h,6C0h'),('', u'dw', ['0B70h', '0AC0h', '0A30h', '9A0h', '910h', '890h', '810h', '7A0h', '730h', '6C0h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0BB0h,0B00h,0A60h,9D0h,940h,8C0h,840h,7D0h,760h,6F0h'),('', u'dw', ['0BB0h', '0B00h', '0A60h', '9D0h', '940h', '8C0h', '840h', '7D0h', '760h', '6F0h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0BE0h,0B40h,0AA0h,0A00h,970h,8F0h,870h,7F0h,780h,710h'),('', u'dw', ['0BE0h', '0B40h', '0AA0h', '0A00h', '970h', '8F0h', '870h', '7F0h', '780h', '710h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0BF2h'),('', u'dw', ['0BF2h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0Bh,0BB80h,0Ch'),('', u'dw', ['0Bh', '0BB80h', '0Ch']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0C000h,0C200h,0C400h,0C600h,0C800h,0CA00h,0CC00h,0CE00h'),('', u'dw', ['0C000h', '0C200h', '0C400h', '0C600h', '0C800h', '0CA00h', '0CC00h', '0CE00h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0C000h,0C2B5h,0C521h,0C752h,0C952h,0CB29h,0CCDEh,0CE74h'),('', u'dw', ['0C000h', '0C2B5h', '0C521h', '0C752h', '0C952h', '0CB29h', '0CCDEh', '0CE74h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0C06h'),('', u'dw', ['0C06h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0C92h'),('', u'dw', ['0C92h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0CA6h'),('', u'dw', ['0CA6h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 0CD0h,0C10h,0B70h,0AC0h,0A30h,9A0h,910h,890h,810h,7A0h'),('', u'dw', ['0CD0h', '0C10h', '0B70h', '0AC0h', '0A30h', '9A0h', '910h', '890h', '810h', '7A0h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 107,101,95,90,85,80,75,71,67,63,60,56,53,50,47,45,42,40,37,35,33,31,30,28'),('', u'dw', ['107', '101', '95', '90', '85', '80', '75', '71', '67', '63', '60', '56', '53', '50', '47', '45', '42', '40', '37', '35', '33', '31', '30', '28']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 10A0h,0FB0h,0ED0h,0DF0h,0D30h,0C70h,0BC0h,0B10h,0A70h'),('', u'dw', ['10A0h', '0FB0h', '0ED0h', '0DF0h', '0D30h', '0C70h', '0BC0h', '0B10h', '0A70h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 14Ah'),('', u'dw', ['14Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 223,22'),('', u'dw', ['223', '22']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 238h'),('', u'dw', ['238h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 26,25,23,22,21,20,18,17,16,15,15,14'),('', u'dw', ['26', '25', '23', '22', '21', '20', '18', '17', '16', '15', '15', '14']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 2620h,23F0h,21F0h,2010h,1E40h,1C90h,1AF0h,1970h,1800h'),('', u'dw', ['2620h', '23F0h', '21F0h', '2010h', '1E40h', '1C90h', '1AF0h', '1970h', '1800h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 26Eh'),('', u'dw', ['26Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 3F80h,3C00h,38A0h'),('', u'dw', ['3F80h', '3C00h', '38A0h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 418h'),('', u'dw', ['418h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 428,404,381,360,339,320,302,285,269,254,240,226,214,202,190,180,170,160,151,143,135,127,120,113'),('', u'dw', ['428', '404', '381', '360', '339', '320', '302', '285', '269', '254', '240', '226', '214', '202', '190', '180', '170', '160', '151', '143', '135', '127', '120', '113']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 42E0h,3F20h,3BA0h,3840h,3520h,3220h,2F50h,2CB0h,2A30h'),('', u'dw', ['42E0h', '3F20h', '3BA0h', '3840h', '3520h', '3220h', '2F50h', '2CB0h', '2A30h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 430h,3F0h,3C0h,380h,6A40h,6440h,5EA0h,5960h,5440h,4FA0h'),('', u'dw', ['430h', '3F0h', '3C0h', '380h', '6A40h', '6440h', '5EA0h', '5960h', '5440h', '4FA0h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 440h,400h,3C0h,390h'),('', u'dw', ['440h', '400h', '3C0h', '390h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 44Eh'),('', u'dw', ['44Eh']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 450h,410h,3D0h,3A0h,6D60h,6740h,6160h,5C00h,56C0h,51E0h'),('', u'dw', ['450h', '410h', '3D0h', '3A0h', '6D60h', '6740h', '6160h', '5C00h', '56C0h', '51E0h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 468h'),('', u'dw', ['468h']))
        self.assertEqual(lex_instance.parse_line_data(line='dw 46Ah'),('', u'dw', ['46Ah']))
        self.assertEqual(lex_instance.parse_line_data(line='dw @df@@@@8'),('', u'dw', ['@df@@@@8']))
        self.assertEqual(lex_instance.parse_line_data(line='dw @df@@@@9'),('', u'dw', ['@df@@@@9']))
        self.assertEqual(lex_instance.parse_line_data(line='dw offset __2stm_module\t; 2STM'),('', u'dw', ['offset __2stm_module']))
        self.assertEqual(lex_instance.parse_line_data(line='dw offset loc_155A8'),('', u'dw', ['offset loc_155A8']))
        self.assertEqual(lex_instance.parse_line_data(line='e db 5'),(u'e', 'db', ['5']))
        self.assertEqual(lex_instance.parse_line_data(line='enddata db 4'),(u'enddata', 'db', ['4']))
        self.assertEqual(lex_instance.parse_line_data(line='f db 6'),(u'f', 'db', ['6']))
        self.assertEqual(lex_instance.parse_line_data(line='g dd 12345'),(u'g', 'dd', ['12345']))
        self.assertEqual(lex_instance.parse_line_data(line='h db -1'),(u'h', 'db', ['-1']))
        self.assertEqual(lex_instance.parse_line_data(line='h2 db 1'),(u'h2', 'db', ['1']))
        self.assertEqual(lex_instance.parse_line_data(line='load_handle dd 0'),(u'load_handle', 'dd', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='myoffs\t\tdw offset label2'),(u'myoffs', 'dw', ['offset label2']))
        self.assertEqual(lex_instance.parse_line_data(line='off_18E00\tdw offset loc_16A89\t; DATA XREF: sub_1609F:loc_16963\x18r'),(u'off_18e00', 'dw', ['offset loc_16A89']))
        self.assertEqual(lex_instance.parse_line_data(line='off_25326\tdw offset _inr_module\t; DATA XREF: _moduleread:loc_10040\x18o'),(u'off_25326', 'dw', ['offset _inr_module']))
        self.assertEqual(lex_instance.parse_line_data(line='pal_jeu db 000,000,000,000,000,021,000,000,042,000,000,063,009,000,000,009'),(u'pal_jeu', 'db', ['000', '000', '000', '000', '000', '021', '000', '000', '042', '000', '000', '063', '009', '000', '000', '009']))
        self.assertEqual(lex_instance.parse_line_data(line='table   dw 0'),(u'table', 'dw', ['0']))
        self.assertEqual(lex_instance.parse_line_data(line='testOVerlap db 1,2,3,4,5,6,7,8,9,10,11,12,13,14'),(u'testoverlap', 'db', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']))
        self.assertEqual(lex_instance.parse_line_data(line='unk_1D516\tdb    2'),(u'unk_1d516', 'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='unk_258A6\tdb  49h\t; I\t\t; DATA XREF: _useless_writeinr_118+E\x18o'),(u'unk_258a6', 'db', ['49h']))
        self.assertEqual(lex_instance.parse_line_data(line='unk_30941\tdb    ?\t;\t\t; DATA XREF: _mod_n_t_module+AC\x18r'),(u'unk_30941', 'db', ['?']))
        self.assertEqual(lex_instance.parse_line_data(line='var db 4 dup (5)'),(u'var', 'db', ['4 dup (5)']))
        self.assertEqual(lex_instance.parse_line_data(line='var0 db 10 dup (?)'),(u'var0', 'db', ['10 dup (?)']))
        self.assertEqual(lex_instance.parse_line_data(line='var1 db 1'),(u'var1', 'db', ['1']))
        self.assertEqual(lex_instance.parse_line_data(line='var1 db 1,2,3'),(u'var1', 'db', ['1', '2', '3']))
        self.assertEqual(lex_instance.parse_line_data(line='var1 db 2'),(u'var1', 'db', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='var1 db 2,5,6'),(u'var1', 'db', ['2', '5', '6']))
        self.assertEqual(lex_instance.parse_line_data(line='var1 db 6'),(u'var1', 'db', ['6']))
        self.assertEqual(lex_instance.parse_line_data(line='var2 db 1,2,4'),(u'var2', 'db', ['1', '2', '4']))
        self.assertEqual(lex_instance.parse_line_data(line='var2 db 5 dup (0)'),(u'var2', 'db', ['5 dup (0)']))
        self.assertEqual(lex_instance.parse_line_data(line='var2 dw 11'),(u'var2', 'dw', ['11']))
        self.assertEqual(lex_instance.parse_line_data(line='var2 dw 2'),(u'var2', 'dw', ['2']))
        self.assertEqual(lex_instance.parse_line_data(line='var2 dw 4,6,9'),(u'var2', 'dw', ['4', '6', '9']))
        self.assertEqual(lex_instance.parse_line_data(line='var3 db 5*5 dup (0,testEqu*2,2*2,3)'),(u'var3', 'db', ['5*5 dup (0', 'testEqu*2', '2*2', '3)']))
        self.assertEqual(lex_instance.parse_line_data(line='var3 dd 11,-11,2,4'),(u'var3', 'dd', ['11', '-11', '2', '4']))
        self.assertEqual(lex_instance.parse_line_data(line='var3 dd 11,-11,2,4000000'),(u'var3', 'dd', ['11', '-11', '2', '4000000']))
        self.assertEqual(lex_instance.parse_line_data(line='var3 dd 3'),(u'var3', 'dd', ['3']))
        self.assertEqual(lex_instance.parse_line_data(line='var3 dd 34'),(u'var3', 'dd', ['34']))
        self.assertEqual(lex_instance.parse_line_data(line='var3 dd test2'),(u'var3', 'dd', ['test2']))
        self.assertEqual(lex_instance.parse_line_data(line='var4 db 100 dup (1)'),(u'var4', 'db', ['100 dup (1)']))
        self.assertEqual(lex_instance.parse_line_data(line='var4 db 131'),(u'var4', 'db', ['131']))
        self.assertEqual(lex_instance.parse_line_data(line='var5 dd 10 dup (?)'),(u'var5', 'dd', ['10 dup (?)']))
        self.assertEqual(lex_instance.parse_line_data(line='var5 dw 2,5,0'),(u'var5', 'dw', ['2', '5', '0']))
        self.assertEqual(lex_instance.parse_line_data(line='var6 dd 9,8,7,1'),(u'var6', 'dd', ['9', '8', '7', '1']))
        self.assertEqual(lex_instance.parse_line_data(line='var7 db 5*5 dup (0,testEqu*2,2*2,3)'),(u'var7', 'db', ['5*5 dup (0', 'testEqu*2', '2*2', '3)']))
        
if __name__ == "__main__":
    unittest.main()
