grammar amasm61;
startrule: module;
module: directivelist?  enddir;
linereminder: comment? EOL;
assdir: label '=' immexpr linereminder;
addop: PLUS | MINUS;
aexpr: term '&&' aexpr | term;
altid: label;
arbitrarytext: charlist;
asminstruction: mnemonic  exprlist? ;
assumedir: ASSUME assumelist linereminder| ASSUMENOTHING linereminder;
assumelist : assumeregister| assumeregister ',' assumelist;
assumereg: register ':' assumeval;
assumeregister: assumesegreg| assumereg;
assumesegreg: segmentregister ':' assumesegval;
assumesegval: NOTHING | ERROR | frameexpr;
assumeval: NOTHING | ERROR | qualifiedtype;
bcdconst: sign?  decnumber;
binaryop: '=='| '!='| '>='| '<='| '>'| '<'| '&' ;
eqconstexpr: '=' constexpr;
bitdef: bitfieldid ':' bitfieldsize eqconstexpr?;
bitdeflist: bitdef| bitdef ',' linereminder? bitdeflist;
bitfieldid : label ;
bitfieldsize: constexpr;
ifcexpr: U_IF cexpr;
blockstatements: U_CONTINUE ifcexpr? | U_BREAK ifcexpr? | directivelist;
boool: TRUE | FALSE ;
byteregister: AL | AH | BL | BH | CL | CH | DL | DH ;
cexpr: aexpr ':' cexpr | aexpr;
charlist: CHARACTER_+;
classname: string;
commdecl: nearfar?   langtype?  label ':' commtype eqconstexpr?;
commdir: COMM commlist linereminder;
commentdir: COMMENT DELIMITER (text linereminder)* text DELIMITER text linereminder;
commlist: commdecl| commdecl ',' commlist;
commtype: atype | constexpr;
constant: digits  radixoverride? ;
constexpr: expr;
contextdir: PUSHCONTEXT contextitemlist linereminder| POPCONTEXT contextitemlist linereminder;
contextitem: ASSUMES | RADIX | LISTING | CPU | ALL ;
contextitemlist: contextitem| contextitem ',' contextitemlist;
controlblock: whileblock| repeatblock;
controldir: controlif| controlblock;
controlelseif: U_ELSEIF cexpr linereminder directivelist controlelseif? ;
elsedirectivelist: U_ELSE linereminder directivelist;
controlif: U_IF cexpr linereminder directivelist controlelseif? elsedirectivelist? U_ENDIF linereminder;
coprocessor: U_8087 | U_287 | U_387 | U_NO87 ;
crefdir: crefoption linereminder;
crefoption: U_CREF | U_XCREF idlist? | U_NOCREF idlist? ;
cxzexpr: '!' expr| expr  '==' expr| expr  '!=' expr | expr;
datadecl: DB | DW | DD | DF | DQ | DT | datatype | typeid;
datadir: label?  dataitem linereminder;
dataitem: datadecl scalarinstlist| structtag structinstlist| typeid structinstlist| uniontag structinstlist| recordtag recordinstlist;
datatype: BYTE | SBYTE | WORD | SWORD | DWORD | SDWORD | FWORD | QWORD | TBYTE | REAL4 | REAL8 | REAL10;
decnumber: '[0-9]'+;
digits: decdigit+| digits hexdigit;
directive: generaldir| segmentdef | linereminder;
directivelist: directive+;
distance: nearfar| NEAR16 | NEAR32 | FAR16 | FAR32;
e01: e02 e01a;
e01a: orop e02 e01a |  ;
e02: e03 e02a;
e02a: AND e03 e02a |  ;
e03: NOT e04| e04;
e04: e05 e04a;
e04a: relop e05 e04a |  ;
e05: e06 e05a;
e05a: addop e06 e05a |  ;

e06: e08 e06a;
e06a:  mulop e08 e06a | shiftop e08 e06a | ;

e08: HIGH e09| LOW e09| HIGHWORD e09| LOWWORD e09| e09;

e09: OFFSET e10| SEG e10| LROFFSET e10| TYPE e10| THIS e10| e10 e09a;
e09a: PTR e10 e09a | ':' e10 e09a | ;

e10: e11 e10a;
e10a: U_DOT e11 e10a | ;

expr: SHORT e05| U_TYPE e01| OPATTR e01| e01;
e11: '( expr )' | WIDTH label| MASK label| SIZE sizearg| SIZEOF sizearg| LENGTH label| LENGTHOF label | recordconst| string| constant| atype| label| '$'| segmentregister| register| ST | ST '( expr )';
echodir: ECHO arbitrarytext linereminder | U_OUT arbitrarytext linereminder;
elseifblock: elseifstatement linereminder directivelist elseifblock? ;
elseifstatement: ELSEIF constexpr| ELSEIFE constexpr| ELSEIFB textitem| ELSEIFNB textitem | ELSEIFDEF label| ELSEIFNDEF label| ELSEIFDIF textitem ',' textitem| ELSEIFDIFI textitem ',' textitem| ELSEIFIDN textitem ',' textitem| ELSEIFIDNI textitem ',' textitem| ELSEIF1 | ELSEIF2 ;
enddir: END immexpr?  linereminder?;
endpdir: procid ENDP linereminder;
endsdir: label ENDS linereminder;
equdir: textmacroid EQU equtype linereminder;
equtype: immexpr| textliteral;
errordir: erroropt linereminder;
erroropt: U_ERR textitem? | U_ERRE constexpr opttext? | U_ERRNZ constexpr opttext? | U_ERRB textitem opttext? | U_ERRNB textitem opttext? | U_ERRDEF label  opttext? | U_ERRNDEF label opttext? | U_ERRDIF textitem ',' textitem  opttext? | U_ERRDIFI textitem ',' textitem  opttext? | U_ERRIDN textitem ',' textitem  opttext? | U_ERRIDNI textitem ',' textitem  opttext? | U_ERR1 textitem? | U_ERR2 textitem?  ;
exitdir: U_EXIT expr?  linereminder;
exitmdir: EXITM | EXITM textitem;
exponent: 'E'  sign?  decnumber;
exprlist: expr | expr  ','  exprlist;
altidq: '( altid )';
externdef: langtype?  label altidq? ':' externtype;
externdir: externkey externlist linereminder;
externkey: EXTRN | EXTERN | EXTERNDEF ;
externlist: externdef| externdef  ',' linereminder?  externlist;
externtype: ABS | qualifiedtype;
fieldalign: constexpr;
fieldinit: initvalue | structinstance;
fieldinitlist: fieldinit ','  linereminder?  fieldinitlist | fieldinit;
filechar: DELIMITER;
filecharlist: filechar+;
filespec: filecharlist| textliteral;
flagname: ZERO_ | CARRY_ | OVERFLOW_ | SIGN_ | PARITY_;
floatnumber : sign?  decnumber U_DOT decnumber?   exponent? | digits 'R'| digits 'r';
forcdir: FORC | IRPC ;
fordir: FOR | IRP ;
dotdotforparmtype: ':' forparmtype;
forparm: label dotdotforparmtype?;
forparmtype: REQ | '=' textliteral;
frameexpr: SEG label | DGROUP ':' label| segmentregister ':' label| label;
generaldir: modeldir | segorderdir | namedir| includelibdir | commentdir| groupdir | assumedir| structdir | recorddir | typedefdir| externdir | publicdir | commdir | prototypedir| equdir | assdir | textdir| contextdir | optiondir | processordir| radixdir | titledir | pagedir | listdir | crefdir | echodir| ifdir | errordir | includedir | macrodir | macrocall | macrorepeat | purgedir| macrowhile | macrofor | macroforc| aliasdir;
aliasdir: ALIAS;
gpregister: AX | EAX | BX | EBX | CX | ECX | DX | EDX| BP | EBP | SP | ESP | DI | EDI | SI | ESI;
groupdir : groupid GROUP segidlist;
groupid: label;
idlist: label ',' idlist | label;
ifdir: ifstatement linereminder directivelist elseifblock? elsedirectivelist? ENDIF linereminder;
ifstatement: IF constexpr| IFE constexpr| IFB textitem| IFNB textitem| IFDEF label| IFNDEF label| IFDIF textitem ',' textitem| IFDIFI textitem ',' textitem| IFIDN textitem ',' textitem| IFIDNI textitem ',' textitem| IF1 | IF2 ;
immexpr: expr;
includedir: INCLUDE filespec linereminder;
includelibdir: INCLUDELIB filespec linereminder;
initvalue: immexpr| string| '?'| constexpr  DUP '( scalarinstlist )'| floatnumber| bcdconst;
insegdir: labeldef?  insegmentdir;
insegdirlist: insegdir+;
insegmentdir: instruction| datadir| controldir| startupdir| exitdir| offsetdir| labeldir| procdir  localdirlist?   insegdirlist?  endpdir| invokedir| generaldir ;
instrprefix: REP | REPE | REPZ | REPNE | REPNZ | LOCK ;
instruction: instrprefix?  asminstruction;
invokearg: register '::' register| ADDR expr | expr;
commainvokelist: ',' linereminder? invokelist;
invokedir: INVOKE expr commainvokelist? linereminder;
invokelist: invokearg  ',' linereminder?  invokelist | invokearg;
labeldef: label ':' | label '::' | MONKEY;
labeldir: label LABEL qualifiedtype linereminder;
langtype: C | PASCAL | FORTRAN | BASIC | SYSCALL | STDCALL ;
listdir: listoption linereminder;
listoption: U_LIST | U_NOLIST | U_XLIST | U_LISTALL | U_LISTIF | U_LFCOND | U_NOLISTIF | U_SFCOND | U_TFCOND | U_LISTMACROALL | U_LALL | U_NOLISTMACRO | U_SALL | U_LISTMACRO | U_XALL ;
localdef: LOCAL idlist linereminder;
localdir: LOCAL parmlist linereminder;
localdirlist: localdir+;
locallist: localdef+;
macroarg: '%' constexpr| '%' textmacroid| '%' macrofuncid '(' macroarglist ')'| string| '<' arbitrarytext '>' | arbitrarytext;
macroarglist: macroarg  ',' macroarglist | macroarg;
macrobody: locallist? macrostmtlist;
macrocall: label  '(' macroarglist ')' | label macroarglist linereminder;
macrodir: label MACRO macroparmlist?  linereminder macrobody ENDM linereminder;
macrofor: fordir forparm  ',' '<' macroarglist '>' linereminder macrobody ENDM linereminder;
macroforc: forcdir label  ',' textliteral linereminder macrobody ENDM linereminder;
macrofuncid: label;
macroid: macroprocid| macrofuncid;
macroidlist: macroid  ','  macroidlist | macroid;
macrolabel: label;
dotdotparmtype: ':' parmtype;
macroparm: label dotdotparmtype?;
macroparmlist: macroparm  ',' linereminder?  macroparmlist | macroparm;
macroprocid: label;
macrorepeat: repeatdir constexpr linereminder macrobody ENDM linereminder;
macrostmt: directive| exitmdir| ':' macrolabel| GOTO macrolabel;
macrostmtlist: macrostmt macrostmtlist linereminder | macrostmt linereminder;
macrowhile: WHILE constexpr linereminder macrobody ENDM linereminder;
maptype: ALL | NONE | NOTPUBLIC ;
memoption: TINY | SMALL | MEDIUM | COMPACT | LARGE | HUGE | FLAT ;
mnemonic: AAA| AAD| AAM| AAS| ADC| ADD| AND| CALL| CBW| CLC| CLD| CLI| CMC| CMP| CMPS| CMPSB| CMPSW| CWD| DAA| DAS| DEC| DIV| ESC| HLT| IDIV| IMUL| IN| INC| INT| INTO| IRET| JA| JAE| JB| JBE| JC| JCXZ| JE| JG| JGE| JL| JLE| JMP| JNA| JNAE| JNB| JNBE| JNC| JNE| JNG| JNGE| JNL| JNLE| JNO| JNP| JNS| JNZ| JO| JP| JPE| JPO| JS| JZ| LAHF| LDS| LEA| LES| LODS| LODSB| LODSW| LOOP| LOOPE| LOOPEW| LOOPNE| LOOPNEW| LOOPNZ| LOOPNZW| LOOPW| LOOPZ| LOOPZW| MOV| MOVS| MOVSB| MOVSW| MUL| NEG| NOP| NOT| OR| OUT| POP| POPF| PUSH| PUSHF| RCL| RCR| RET| RETF| RETN| ROL| ROR| SAHF| SAL| SAR| SBB| SCAS| SCASB| SCASW| SHL| SHR| STC| STD| STI| STOS| STOSB| STOSW| SUB| TEST| WAIT| XCHG| XLAT| XLATB| XOR| BOUND| ENTER| INS| INSB| INSW| LEAVE| OUTS| OUTSB| OUTSW| POPA| PUSHA| PUSHW| ARPL| LAR| LSL| SGDT| SIDT| SLDT| SMSW| STR| VERR| VERW| CLTS| LGDT| LIDT| LLDT| LMSW| LTR| BSF| BSR| BT| BTC| BTR| BTS| CDQ| CMPSD| CWDE| INSD| IRETD| IRETDF| IRETF| JECXZ| LFS| LGS| LODSD| LOOPD| LOOPED| LOOPNED| LOOPNZD| LOOPZD| LSS| MOVSD| MOVSX| MOVZX| OUTSD| POPAD| POPFD| PUSHAD| PUSHD| PUSHFD| SCASD| SETA| SETAE| SETB| SETBE| SETC| SETE| SETG| SETGE| SETL| SETLE| SETNA| SETNAE| SETNB| SETNBE| SETNC| SETNE| SETNG| SETNGE| SETNL| SETNLE| SETNO| SETNP| SETNS| SETNZ| SETO| SETP| SETPE| SETPO| SETS| SETZ| SHLD| SHRD| STOSD| BSWAP| CMPXCHG| INVD| INVLPG| WBINVD| XADD| F2XM1| FABS| FADD| FADDP| FBLD| FBSTP| FCHS| FCLEX| FCOM| FCOMP| FCOMPP| FDECSTP| FDISI| FDIV| FDIVP| FDIVR| FDIVRP| FENI| FFREE| FIADD| FICOM| FICOMP| FIDIV| FIDIVR| FILD| FIMUL| FINCSTP| FINIT| FIST| FISTP| FISUB| FISUBR| FLD| FLD1| FLDCW| FLDENV| FLDENVW| FLDL2E| FLDL2T| FLDLG2| FLDLN2| FLDPI| FLDZ| FMUL| FMULP| FNCLEX| FNDISI| FNENI| FNINIT| FNOP| FNSAVE| FNSAVEW| FNSTCW| FNSTENV| FNSTENVW| FNSTSW| FPATAN| FPREM| FPTAN| FRNDINT| FRSTOR| FRSTORW| FSAVE| FSAVEW| FSCALE| FSQRT| FST| FSTCW| FSTENV| FSTENVW| FSTP| FSTSW| FSUB| FSUBP| FSUBR| FSUBRP| FTST| FWAIT| FXAM| FXCH| FXTRACT| FYL2X| FYL2XP1| FSETPM| FCOS| FLDENVD| FNSAVED| FNSTENVD| FPREM1| FRSTORD| FSAVED| FSIN| FSINCOS| FSTENVD| FUCOM| FUCOMP| FUCOMPP;
commamodeloptlist: ',' modeloptlist;
modeldir: U_MODEL memoption commamodeloptlist? linereminder;
modelopt: langtype| stackoption ;
modeloptlist: modelopt| modelopt  ',' modeloptlist;
mulop: '*'| '/' | MOD ;
namedir: NAME label linereminder;
nearfar: NEAR | FAR ;
nestedstruct: structhdr  label?  linereminder structbody ENDS linereminder;
offsetdir: offsetdirtype linereminder;
offsetdirtype: EVEN | ORG immexpr| ALIGN constexpr? ;
offsettype: GROUP | SEGMENT | FLAT ;
oldrecordfieldlist: constexpr ',' oldrecordfieldlist | constexpr;
optiondir: OPTION optionlist linereminder;
readonly: READONLY;
optionitem: CASEMAP ':' maptype| DOTNAME | NODOTNAME | EMULATOR | NOEMULATOR | EPILOGUE ':' macroid| EXPR16 | EXPR32 | LANGUAGE ':' langtype| LJMP | NOLJMP | M510 | NOM510 | NOSIGNEXTEND | OFFSET ':' offsettype| OLDMACROS | NOOLDMACROS | OLDSTRUCTS | NOOLDSTRUCTS | PROC ':' ovisibility| PROLOGUE ':' macroid| readonly | NOREADONLY | SCOPED | NOSCOPED | SEGMENT ':' segsize| SETIF2 ':' boool;
optionlist: optionitem| optionitem  ',' linereminder?  optionlist;
opttext: ',' textitem;
orop: OR | XOR ;
ovisibility: PUBLIC | PRIVATE | EXPORT ;
pagedir: PAGE pageexpr? linereminder;
commapagewidth: ',' pagewidth;
pageexpr: '+'|  pagelength commapagewidth? | commapagewidth;
pagelength: constexpr;
pagewidth: constexpr;
dotdotqualifiedtype: ':' qualifiedtype;
parm: parmid  constexpr? dotdotqualifiedtype?;
parmid: label;
parmlist: parm  ',' linereminder? parmlist | parm;
parmtype: REQ | '=' textliteral| VARARG ;
poptions: distance?  langtype?  ovisibility? ;
primary: expr binaryop expr| flagname| expr;
brmacroarglist: '<' macroarglist '>';
procdir: procid PROC poptions  brmacroarglist?  usesregs?   procparmlist? ;
processor: U_8086 | U_186 | U_286 | U_286C | U_286P | U_386 | U_386C | U_386P | U_486 | U_486P | U_586 | U_586P | U_686 | U_686P | U_K3D | U_MMX | U_XMM;
processordir: processor linereminder | coprocessor linereminder;
procid: label;
commaparmlist: ','  linereminder?  parmlist;
commaparmidvararg: ','  linereminder?  parmid U_VARARG;
procparmlist: ',' commaparmlist? ',' commaparmidvararg?;
protoarg : label? ':' qualifiedtype ;
commaprotolist: ','  linereminder?  protolist;
commaidvararg: ','  linereminder?   label? U_VARARG;
protoarglist: ',' commaprotolist? ',' commaidvararg?;
protolist: protoarg| protoarg  ',' linereminder?  protolist;
protospec: typeid | distance?   langtype?   protoarglist?;
prototypedir: label PROTO protospec;
pubdef: langtype?  label;
publicdir: PUBLIC publist linereminder;
publist: pubdef  ',' linereminder?  publist | pubdef;
purgedir: PURGE macroidlist;
qualifiedtype: distance? PTR qualifiedtype? | atype;
qualifier: PROTO protospec | qualifiedtype;
quote: '\'' | '"';
radixdir: U_RADIX constexpr linereminder;
recordconst: recordtag '{' oldrecordfieldlist '}'| recordtag '<' oldrecordfieldlist '>';
recorddir: recordtag RECORD bitdeflist linereminder ;
recordfieldlist: constexpr  ','  linereminder? recordfieldlist | constexpr;
recordinstance: '{'  linereminder?  recordfieldlist  linereminder?  '}'| '<' oldrecordfieldlist '>'| constexpr DUP '(' recordinstance ')';
recordinstlist: recordinstance| recordinstance ','  linereminder?  recordinstlist;
recordtag: label;
register: specialregister| gpregister| byteregister;
reglist: register+;
relop: EQ | NE | LT | LE | GT | GE ;
repeatblock: U_REPEAT linereminder blockstatements linereminder untildir linereminder;
repeatdir: REPEAT | REPT ;
scalarinstlist: initvalue ','  linereminder? scalarinstlist | initvalue;
segalign: BYTE | WORD | DWORD | PARA | PAGE ;
segattrib: PUBLIC | STACK | COMMON | MEMORY | AT constexpr| PRIVATE ;
segdir: U_CODE segid? | U_DATA | U_DATA_| U_CONST | U_FARDATA segid? | U_FARDATA_ segid? | U_STACK constexpr?;
segid: label;
segidlist : segid  ',' segidlist | segid;
segmentdef: segmentdir  insegdirlist?  endsdir| simplesegdir  insegdirlist?   endsdir? ;
segmentdir: segid SEGMENT segoptionlist?  linereminder;
segmentregister: CS | DS | ES | FS | GS | SS;
segoption: segalign| segro| segattrib| segsize| classname;
segoptionlist: segoption+;
segorderdir: U_ALPHA | U_SEQ | U_DOSSEG | DOSSEG ;
segro: readonly;
segsize : USE16 | USE32 | FLAT;
shiftop: SHR | SHL ;
sign: '-' | '+';
simpleexpr: '(' cexpr ')'| primary;
simplesegdir: segdir linereminder;
sizearg: label| atype| e10;
specialregister: CR0 | CR2 | CR3 | DR0 | DR1 | DR2 | DR3 | DR6 | DR7| TR3 | TR4 | TR5 | TR6 | TR7;
stackoption: NEARSTACK | FARSTACK ;
startupdir: U_STARTUP linereminder;
stext: STRINGCHAR+;
string: quote  stext?  quote;
structbody: structitem structbody | structitem linereminder;
commanonuniq: ',' NONUNIQUE;
structdir: structtag structhdr  fieldalign?  commanonuniq? linereminder structbody structtag ENDS linereminder;
structhdr: STRUC | STRUCT | UNION ;
structinstance: '<'  fieldinitlist?  '>'| '{' linereminder?   fieldinitlist?   linereminder?  '}'| constexpr DUP '( structinstlist )';
structinstlist: structinstance| structinstance  ','  linereminder?  structinstlist;
structitem : datadir| generaldir| offsetdir| nestedstruct;
structtag: label;
term: '!' simpleexpr | simpleexpr;
text: '!' CHARACTER text| '!' CHARACTER| textliteral | CHARACTER+;
textdir: label textmacrodir linereminder;
textitem: textliteral| '%' constexpr| textmacroid;
textlen: constexpr;
textlist: textitem  ',' linereminder?  textlist | textitem;
textliteral: '<' text '>' linereminder;
commatextlen: ',' textlen;
textstartcomma: textstart  ',';
textmacrodir: CATSTR textlist? | TEXTEQU textlist? | SIZESTR textitem| SUBSTR textitem  ',' textstart commatextlen| INSTR textstartcomma? textitem  ',' textitem;
textmacroid: label;
textstart: constexpr;
titledir: titletype arbitrarytext linereminder;
titletype: TITLE | SUBTITLE | SUBTTL ;
atype: structtag| uniontag| recordtag| distance| datatype| typeid;
typedefdir: typeid TYPEDEF qualifier;
typeid: label;
uniontag: label;
untildir: U_UNTIL cexpr linereminder U_UNTILCXZ cxzexpr?  linereminder;
usesregs: USES reglist ;
whileblock: U_WHILE cexpr linereminder blockstatements linereminder U_ENDW ;
AAA: A A A ;
AAD: A A D ;
AAM: A A M ;
AAS: A A S ;
ABS: A B S ;
ADC: A D C ;
ADD: A D D ;
ADDR: A D D R ;
AH: A H ;
AL: A L ;
ALIAS: A L I A S;
ALIGN: A L I G N;
ALL: A L L ;
AND: A N D ;
ARPL: A R P L ;
ASSUMENOTHING: A S S U M E ' ' N O T H I N G;
ASSUME: A S S U M E;
ASSUMES: A S S U M E S;
AT: A T ;
AX: A X ;
BASIC: B A S I C;
BH: B H ;
BL: B L ;
BOUND: B O U N D;
BP: B P ;
BSF: B S F ;
BSR: B S R ;
BSWAP: B S W A P;
BT: B T ;
BTC: B T C ;
BTR: B T R ;
BTS: B T S ;
BX: B X ;
BYTE: B Y T E ;
CALL: C A L L ;
CARRY_: C A R R Y '?';
CASEMAP: C A S E M A P;
CATSTR: C A T S T R;
CBW: C B W ;
CDQ: C D Q ;
CH: C H ;
CL: C L ;
CLC: C L C ;
CLD: C L D ;
CLI: C L I ;
CLTS: C L T S ;
CMC: C M C ;
CMP: C M P ;
CMPS: C M P S ;
CMPSB: C M P S B;
CMPSD: C M P S D;
CMPSW: C M P S W;
CMPXCHG: C M P X C H G;
COMM: C O M M ;
COMMENT: C O M M E N T;
COMMON: C O M M O N;
COMPACT: C O M P A C T;
CPU: C P U ;
CR0: C R '0';
CR2: C R '2';
CR3: C R '3';
CS: C S ;
CWD: C W D ;
CWDE: C W D E ;
CX: C X ;
DAA: D A A ;
DAS: D A S ;
DB: D B ;
DD: D D ;
DEC: D E C ;
DF: D F ;
DGROUP: D G R O U P;
DH: D H ;
DI: D I ;
DIV: D I V ;
DL: D L ;
DOSSEG: D O S S E G;
DOTNAME: D O T N A M E;
DQ: D Q ;
DR0: D R '0';
DR1: D R '1';
DR2: D R '2';
DR3: D R '3';
DR6: D R '6';
DR7: D R '7';
DS: D S ;
DT: D T ;
DUP: D U P ;
DW: D W ;
DWORD: D W O R D;
DX: D X ;
EAX: E A X ;
EBP: E B P ;
EBX: E B X ;
ECHO: E C H O ;
ECX: E C X ;
EDI: E D I ;
EDX: E D X ;
ELSEIF1: E L S E I F '1';
ELSEIF2: E L S E I F '2';
ELSEIF: E L S E I F;
ELSEIFB: E L S E I F B;
ELSEIFDEF: E L S E I F D E F;
ELSEIFDIF: E L S E I F D I F;
ELSEIFDIFI: E L S E I F D I F I;
ELSEIFE: E L S E I F E;
ELSEIFIDN: E L S E I F I D N;
ELSEIFIDNI: E L S E I F I D N I;
ELSEIFNB: E L S E I F N B;
ELSEIFNDEF: E L S E I F N D E F;
EMULATOR: E M U L A T O R;
END: E N D ;
ENDIF: E N D I F;
ENDM: E N D M ;
ENDP: E N D P ;
ENDS: E N D S ;
ENTER: E N T E R;
EPILOGUE: E P I L O G U E;
EQ: E Q ;
EQU: E Q U ;
ERROR: E R R O R;
ES: E S ;
ESC: E S C ;
ESI: E S I ;
ESP: E S P ;
EVEN: E V E N ;
EXITM: E X I T M;
EXPORT: E X P O R T;
EXPR16: E X P R '16';
EXPR32: E X P R '32';
EXTERN: E X T E R N;
EXTERNDEF: E X T E R N D E F;
EXTRN: E X T R N;
F2XM1: F '2' X M '1';
FABS: F A B S ;
FADD: F A D D ;
FADDP: F A D D P;
FALSE: F A L S E;
FAR16: F A R '16';
FAR32: F A R '32';
FAR: F A R ;
FARSTACK: F A R S T A C K;
FBLD: F B L D ;
FBSTP: F B S T P;
FCHS: F C H S ;
FCLEX: F C L E X;
FCOM: F C O M ;
FCOMP: F C O M P;
FCOMPP: F C O M P P;
FCOS: F C O S ;
FDECSTP: F D E C S T P;
FDISI: F D I S I;
FDIV: F D I V ;
FDIVP: F D I V P;
FDIVR: F D I V R;
FDIVRP: F D I V R P;
FENI: F E N I ;
FFREE: F F R E E;
FIADD: F I A D D;
FICOM: F I C O M;
FICOMP: F I C O M P;
FIDIV: F I D I V;
FIDIVR: F I D I V R;
FILD: F I L D ;
FIMUL: F I M U L;
FINCSTP: F I N C S T P;
FINIT: F I N I T;
FIST: F I S T ;
FISTP: F I S T P;
FISUB: F I S U B;
FISUBR: F I S U B R;
FLAT: F L A T ;
FLD1: F L D '1';
FLD: F L D ;
FLDCW: F L D C W;
FLDENV: F L D E N V;
FLDENVD: F L D E N V D;
FLDENVW: F L D E N V W;
FLDL2E: F L D L '2' E;
FLDL2T: F L D L '2' T;
FLDLG2: F L D L G '2';
FLDLN2: F L D L N '2';
FLDPI: F L D P I;
FLDZ: F L D Z ;
FMUL: F M U L ;
FMULP: F M U L P;
FNCLEX: F N C L E X;
FNDISI: F N D I S I;
FNENI: F N E N I;
FNINIT: F N I N I T;
FNOP: F N O P ;
FNSAVE: F N S A V E;
FNSAVED: F N S A V E D;
FNSAVEW: F N S A V E W;
FNSTCW: F N S T C W;
FNSTENV: F N S T E N V;
FNSTENVD: F N S T E N V D;
FNSTENVW: F N S T E N V W;
FNSTSW: F N S T S W;
FOR: F O R ;
FORC: F O R C ;
FORTRAN: F O R T R A N;
FPATAN: F P A T A N;
FPREM1: F P R E M'1';
FPREM: F P R E M;
FPTAN: F P T A N;
FRNDINT: F R N D I N T;
FRSTOR: F R S T O R;
FRSTORD: F R S T O R D;
FRSTORW: F R S T O R W;
FS: F S ;
FSAVE: F S A V E;
FSAVED: F S A V E D;
FSAVEW: F S A V E W;
FSCALE: F S C A L E;
FSETPM: F S E T P M;
FSIN: F S I N ;
FSINCOS: F S I N C O S;
FSQRT: F S Q R T;
FST: F S T ;
FSTCW: F S T C W;
FSTENV: F S T E N V;
FSTENVD: F S T E N V D;
FSTENVW: F S T E N V W;
FSTP: F S T P ;
FSTSW: F S T S W;
FSUB: F S U B ;
FSUBP: F S U B P;
FSUBR: F S U B R;
FSUBRP: F S U B R P;
FTST: F T S T ;
FUCOM: F U C O M;
FUCOMP: F U C O M P;
FUCOMPP: F U C O M P P;
FWAIT: F W A I T;
FWORD: F W O R D;
FXAM: F X A M ;
FXCH: F X C H ;
FXTRACT: F X T R A C T;
FYL2X: F Y L '2' X ;
FYL2XP1: F Y L '2' X P '1';
GE: G E ;
GOTO: G O T O ;
GROUP: G R O U P;
GS: G S ;
GT: G T ;
HIGH: H I G H ;
HIGHWORD: H I G H W O R D;
HLT: H L T ;
HUGE: H U G E ;
IDIV: I D I V ;
IF1: I F '1';
IF2: I F '2';
IF: I F ;
IFB: I F B ;
IFDEF: I F D E F;
IFDIF: I F D I F;
IFDIFI: I F D I F I;
IFE: I F E ;
IFIDN: I F I D N;
IFIDNI: I F I D N I;
IFNB: I F N B ;
IFNDEF: I F N D E F;
IMUL: I M U L ;
IN: I N ;
INC: I N C ;
INCLUDE: I N C L U D E;
INCLUDELIB: I N C L U D E L I B;
INS: I N S ;
INSB: I N S B ;
INSD: I N S D ;
INSTR: I N S T R;
INSW: I N S W ;
INT: I N T ;
INTO: I N T O ;
INVD: I N V D ;
INVLPG: I N V L P G;
INVOKE: I N V O K E;
IRET: I R E T ;
IRETD: I R E T D;
IRETDF: I R E T D F;
IRETF: I R E T F;
IRP: I R P ;
IRPC: I R P C ;
JA: J A ;
JAE: J A E ;
JB: J B ;
JBE: J B E ;
JC: J C ;
JCXZ: J C X Z ;
JE: J E ;
JECXZ: J E C X Z;
JG: J G ;
JGE: J G E ;
JL: J L ;
JLE: J L E ;
JMP: J M P ;
JNA: J N A ;
JNAE: J N A E ;
JNB: J N B ;
JNBE: J N B E ;
JNC: J N C ;
JNE: J N E ;
JNG: J N G ;
JNGE: J N G E ;
JNL: J N L ;
JNLE: J N L E ;
JNO: J N O ;
JNP: J N P ;
JNS: J N S ;
JNZ: J N Z ;
JO: J O ;
JP: J P ;
JPE: J P E ;
JPO: J P O ;
JS: J S ;
JZ: J Z ;
LABEL: L A B E L;
LAHF: L A H F ;
LANGUAGE: L A N G U A G E;
LAR: L A R ;
LARGE: L A R G E;
LDS: L D S ;
LE: L E ;
LEA: L E A ;
LEAVE: L E A V E;
LENGTH: L E N G T H;
LENGTHOF: L E N G T H O F;
LES: L E S ;
LFS: L F S ;
LGDT: L G D T ;
LGS: L G S ;
LIDT: L I D T ;
LISTING: L I S T I N G;
LJMP: L J M P ;
LLDT: L L D T ;
LMSW: L M S W ;
LOCAL: L O C A L;
LOCK: L O C K ;
LODS: L O D S ;
LODSB: L O D S B;
LODSD: L O D S D;
LODSW: L O D S W;
LOOP: L O O P ;
LOOPD: L O O P D;
LOOPE: L O O P E;
LOOPED: L O O P E D;
LOOPEW: L O O P E W;
LOOPNE: L O O P N E;
LOOPNED: L O O P N E D;
LOOPNEW: L O O P N E W;
LOOPNZ: L O O P N Z;
LOOPNZD: L O O P N Z D;
LOOPNZW: L O O P N Z W;
LOOPW: L O O P W;
LOOPZ: L O O P Z;
LOOPZD: L O O P Z D;
LOOPZW: L O O P Z W;
LOW: L O W ;
LOWWORD: L O W W O R D;
LROFFSET: L R O F F S E T;
LSL: L S L ;
LSS: L S S ;
LT: L T ;
LTR: L T R ;
M510: M '510';
MACRO: M A C R O;
MASK: M A S K ;
MEDIUM: M E D I U M;
MEMORY: M E M O R Y;
MOD: M O D ;
MONKEY: '@@:';
MOV: M O V ;
MOVS: M O V S ;
MOVSB: M O V S B;
MOVSD: M O V S D;
MOVSW: M O V S W;
MOVSX: M O V S X;
MOVZX: M O V Z X;
MUL: M U L ;
NAME: N A M E ;
NE: N E ;
NEAR16: N E A R '16';
NEAR32: N E A R '32';
NEAR: N E A R ;
NEARSTACK: N E A R S T A C K;
NEG: N E G ;
NODOTNAME: N O D O T N A M E;
NOEMULATOR: N O E M U L A T O R;
NOLJMP: N O L J M P;
NOM510: N O M '510';
NONE: N O N E ;
NONUNIQUE: N O N U N I Q U E;
NOOLDMACROS: N O O L D M A C R O S;
NOOLDSTRUCTS: N O O L D S T R U C T S;
NOP: N O P ;
NOREADONLY: N O R E A D O N L Y;
NOSCOPED: N O S C O P E D;
NOSIGNEXTEND: N O S I G N E X T E N D;
NOT: N O T ;
NOTHING: N O T H I N G;
NOTPUBLIC: N O T P U B L I C;
OFFSET: O F F S E T;
OLDMACROS: O L D M A C R O S;
OLDSTRUCTS: O L D S T R U C T S;
OPATTR: O P A T T R;
OPTION: O P T I O N;
OR: O R ;
ORG: O R G ;
OUT: O U T ;
OUTS: O U T S ;
OUTSB: O U T S B;
OUTSD: O U T S D;
OUTSW: O U T S W;
OVERFLOW_: O V E R F L O W '?';
PAGE: P A G E ;
PARA: P A R A ;
PARITY_: P A R I T Y '?';
PASCAL: P A S C A L;
POP: P O P ;
POPA: P O P A ;
POPAD: P O P A D;
POPCONTEXT: P O P C O N T E X T;
POPF: P O P F ;
POPFD: P O P F D;
PRIVATE: P R I V A T E;
PROC: P R O C ;
PROLOGUE: P R O L O G U E;
PROTO: P R O T O;
PTR: P T R ;
PUBLIC: P U B L I C;
PURGE: P U R G E;
PUSH: P U S H ;
PUSHA: P U S H A;
PUSHAD: P U S H A D;
PUSHCONTEXT: P U S H C O N T E X T;
PUSHD: P U S H D;
PUSHF: P U S H F;
PUSHFD: P U S H F D;
PUSHW: P U S H W;
QWORD: Q W O R D;
RADIX: R A D I X;
RCL: R C L ;
RCR: R C R ;
READONLY: R E A D O N L Y;
REAL10: R E A L '10';
REAL4: R E A L '4';
REAL8: R E A L '8';
RECORD: R E C O R D;
REP: R E P ;
REPE: R E P E ;
REPEAT: R E P E A T;
REPNE: R E P N E;
REPNZ: R E P N Z;
REPT: R E P T ;
REPZ: R E P Z ;
REQ: R E Q ;
RET: R E T ;
RETF: R E T F ;
RETN: R E T N ;
ROL: R O L ;
ROR: R O R ;
SAHF: S A H F ;
SAL: S A L ;
SAR: S A R ;
SBB: S B B ;
SBYTE: S B Y T E;
SCAS: S C A S ;
SCASB: S C A S B;
SCASD: S C A S D;
SCASW: S C A S W;
SCOPED: S C O P E D;
SDWORD: S D W O R D;
SEG: S E G ;
SEGMENT: S E G M E N T;
SETA: S E T A ;
SETAE: S E T A E;
SETB: S E T B ;
SETBE: S E T B E;
SETC: S E T C ;
SETE: S E T E ;
SETG: S E T G ;
SETGE: S E T G E;
SETIF2: S E T I F '2';
SETL: S E T L ;
SETLE: S E T L E;
SETNA: S E T N A;
SETNAE: S E T N A E;
SETNB: S E T N B;
SETNBE: S E T N B E;
SETNC: S E T N C;
SETNE: S E T N E;
SETNG: S E T N G;
SETNGE: S E T N G E;
SETNL: S E T N L;
SETNLE: S E T N L E;
SETNO: S E T N O;
SETNP: S E T N P;
SETNS: S E T N S;
SETNZ: S E T N Z;
SETO: S E T O ;
SETP: S E T P ;
SETPE: S E T P E;
SETPO: S E T P O;
SETS: S E T S ;
SETZ: S E T Z ;
SGDT: S G D T ;
SHL: S H L ;
SHLD: S H L D ;
SHORT: S H O R T;
SHR: S H R ;
SHRD: S H R D ;
SI: S I ;
SIDT: S I D T ;
SIGN_: S I G N '?';
SIZE: S I Z E ;
SIZEOF: S I Z E O F;
SIZESTR: S I Z E S T R;
SLDT: S L D T ;
SMALL: S M A L L;
SMSW: S M S W ;
SP: S P ;
SS: S S ;
ST: S T ;
STACK: S T A C K;
STC: S T C ;
STD: S T D ;
STDCALL: S T D C A L L;
STI: S T I ;
STOS: S T O S ;
STOSB: S T O S B;
STOSD: S T O S D;
STOSW: S T O S W;
STR: S T R ;
STRUC: S T R U C;
STRUCT: S T R U C T;
SUB: S U B ;
SUBSTR: S U B S T R;
SUBTITLE: S U B T I T L E;
SUBTTL: S U B T T L;
SWORD: S W O R D;
SYSCALL: S Y S C A L L;
TBYTE: T B Y T E;
TEST: T E S T ;
TEXTEQU: T E X T E Q U;
THIS: T H I S ;
TINY: T I N Y ;
TITLE: T I T L E;
TR3: T R '3';
TR4: T R '4';
TR5: T R '5';
TR6: T R '6';
TR7: T R '7';
TRUE: T R U E ;
TYPE: T Y P E ;
TYPEDEF: T Y P E D E F;
UNION: U N I O N;
USE16: U S E '16';
USE32: U S E '32';
USES: U S E S ;
VARARG: V A R A R G;
VERR: V E R R ;
VERW: V E R W ;
WAIT: W A I T ;
WBINVD: W B I N V D;
WHILE: W H I L E;
WIDTH: W I D T H;
WORD: W O R D ;
XADD: X A D D ;
XCHG: X C H G ;
XLAT: X L A T ;
XLATB: X L A T B;
XOR: X O R ;
ZERO_: Z E R O '?';
U_186: '.186';
U_286: '.286';
U_286C: '.286' C ;
U_286P: '.286' P ;
U_287: '.287';
U_386: '.386';
U_386C: '.386' C ;
U_386P: '.386' P ;
U_387: '.387';
U_486: '.486';
U_486P: '.486' P ;
U_586: '.586';
U_586P: '.586' P ;
U_686: '.686';
U_686P: '.686' P ;
U_8086: '.8086';
U_8087: '.8087';
U_ALPHA: '.' A L P H A;
U_BREAK: '.' B R E A K;
U_CODE: '.' C O D E ;
U_CONST: '.' C O N S T;
U_CONTINUE: '.' C O N T I N U E;
U_CREF: '.' C R E F ;
U_DATA: '.' D A T A ;
U_DATA_: '.' D A T A '?';
U_DOSSEG: '.' D O S S E G;
U_ELSE: '.' E L S E ;
U_ELSEIF: '.' E L S E I F;
U_ENDIF: '.' E N D I F;
U_ENDW: '.' E N D W ;
U_ERR1: '.' E R R '1';
U_ERR2: '.' E R R '2';
U_ERR: '.' E R R ;
U_ERRB: '.' E R R B ;
U_ERRDEF: '.' E R R D E F;
U_ERRDIF: '.' E R R D I F;
U_ERRDIFI: '.' E R R D I F I;
U_ERRE: '.' E R R E ;
U_ERRIDN: '.' E R R I D N;
U_ERRIDNI: '.' E R R I D N I;
U_ERRNB: '.' E R R N B;
U_ERRNDEF: '.' E R R N D E F;
U_ERRNZ: '.' E R R N Z;
U_EXIT: '.' E X I T ;
U_FARDATA: '.' F A R D A T A;
U_FARDATA_: '.' F A R D A T A?;
U_IF: '.' I F ;
U_K3D: '.' K '3' D ;
U_LALL: '.' L A L L ;
U_LFCOND: '.' L F C O N D;
U_LIST: '.' L I S T ;
U_LISTALL: '.' L I S T A L L;
U_LISTIF: '.' L I S T I F;
U_LISTMACRO: '.' L I S T M A C R O;
U_LISTMACROALL: '.' L I S T M A C R O A L L;
U_MMX: '.' M M X ;
U_MODEL: '.' M O D E L;
U_NO87: '.' N O '87';
U_NOCREF: '.' N O C R E F;
U_NOLIST: '.' N O L I S T;
U_NOLISTIF: '.' N O L I S T I F;
U_NOLISTMACRO: '.' N O L I S T M A C R O;
U_OUT: '%' O U T ;
U_RADIX: '.' R A D I X;
U_REPEAT: '.' R E P E A T;
U_SALL: '.' S A L L ;
U_SEQ: '.' S E Q ;
U_SFCOND: '.' S F C O N D;
U_STACK: '.' S T A C K;
U_STARTUP: '.' S T A R T U P;
U_TFCOND: '.' T F C O N D;
U_TYPE: '.' T Y P E ;
U_UNTIL: '.' U N T I L;
U_UNTILCXZ: '.' U N T I L C X Z;
U_VARARG: ':' V A R A R G;
U_WHILE: '.' W H I L E;
U_XALL: '.' X A L L ;
U_XCREF: '.' X C R E F;
U_XLIST: '.' X L I S T;
U_XMM: '.' X M M ;
U_DOT: '.';
PLUS: '+';
MINUS: '-';
//CHARACTER: ~ ('\n' | '\r');
//CHARACTERS: CHARACTER+;
comment: ';' ~( '\n' | '\r' )* ; // CHARACTERS?
radixoverride: H | O | Q | T | Y;
decdigit: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
hexdigit: A | B | C | D | E | F;
letter : A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | '_';
label: letter+ | label decdigit;
EOL: [\r\n]+;
WS: [ \t] -> skip;
WHITESPACECHARACTER: WS;
//fragment ENDOFLINE: '\n';
ENDOFLINE: EOL;
STRINGCHAR: [']['] | '""' | [^'"];
DELIMITER: '~';
fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');