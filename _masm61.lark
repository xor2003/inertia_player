start: module
module: directivelist?  enddir
linereminder: comment | endofline
assdir: id "=" immexpr linereminder
addop: "+" | "-"
aexpr: term "&&" aexpr | term
altid: id
arbitrarytext: charlist
asminstruction: mnemonic  exprlist? 
assumedir: ASSUME assumelist linereminder| ASSUMENOTHING linereminder
assumelist : assumeregister| assumeregister "," assumelist
assumereg: register ":" assumeval
assumeregister: assumesegreg| assumereg
assumesegreg: segmentregister ":" assumesegval
assumesegval: NOTHING | ERROR | frameexpr
assumeval: NOTHING | ERROR | qualifiedtype
bcdconst: sign?  decnumber
binaryop: "=="| "!="| ">="| "<="| ">"| "<"| "&" 
eqconstexpr: "=" constexpr
bitdef: bitfieldid ":" bitfieldsize eqconstexpr?
bitdeflist: bitdef| bitdef "," linereminder? bitdeflist
bitfieldid : id 
bitfieldsize: constexpr
ifcexpr: U_IF cexpr
blockstatements: U_CONTINUE ifcexpr? | U_BREAK ifcexpr? | directivelist
bool: TRUE | FALSE 
byteregister: AL | AH | BL | BH | CL | CH | DL | DH 
cexpr: aexpr ":" cexpr | aexpr
charlist: character+
classname: string
commdecl: nearfar?   langtype?  id ":" commtype eqconstexpr?
commdir: COMM commlist linereminder
commentdir: COMMENT delimiter text text delimiter text linereminder
commlist: commdecl| commdecl "," commlist
commtype: type | constexpr
constant: digits  radixoverride? 
constexpr: expr
contextdir: PUSHCONTEXT contextitemlist linereminder| POPCONTEXT contextitemlist linereminder
contextitem: ASSUMES | RADIX | LISTING | CPU | ALL 
contextitemlist: contextitem| contextitem "," contextitemlist
controlblock: whileblock| repeatblock
controldir: controlif| controlblock
controlelseif: U_ELSEIF cexpr linereminder directivelist controlelseif? 
elsedirectivelist: U_ELSE linereminder directivelist
controlif: U_IF cexpr linereminder directivelist controlelseif? elsedirectivelist? U_ENDIF linereminder
coprocessor: U_8087 | U_287 | U_387 | U_NO87 
crefdir: crefoption linereminder
crefoption: U_CREF | U_XCREF idlist? | U_NOCREF idlist? 
cxzexpr: "!" expr| expr  "==" expr| expr  "!=" expr | expr
datadecl: DB | DW | DD | DF | DQ | DT | datatype | typeid
datadir: id?  dataitem linereminder
dataitem: datadecl scalarinstlist| structtag structinstlist| typeid structinstlist| uniontag structinstlist| recordtag recordinstlist
datatype: BYTE | SBYTE | WORD | SWORD | DWORD | SDWORD | FWORD | QWORD | TBYTE | REAL4 | REAL8 | REAL10
decnumber: decdigit+
digits: decdigit+| digits hexdigit
directive: generaldir| segmentdef
directivelist: directive+
distance: nearfar| NEAR16 | NEAR32 | FAR16 | FAR32
e01: e01 orop e02| e02
e02: e02 AND e03| e03
e03: NOT e04| e04
e04: e04 relop e05| e05
e05: e05 addop e06| e06
e06: e06 mulop e07| e06 shiftop e07| e07
e07: e07 addop e08| e08
e08: HIGH e09| LOW e09| HIGHWORD e09| LOWWORD e09| e09
e09: OFFSET e10| SEG e10| LROFFSET e10| TYPE e10| THIS e10| e09 PTR e10| e09 ":" e10| e10
e10: e10 U_DOT e11| e10 expr | e11
e11: "( expr )" | WIDTH id| MASK id| SIZE sizearg| SIZEOF sizearg| LENGTH id| LENGTHOF id | recordconst| string| constant| type| id| "$"| segmentregister| register| ST | ST "( expr )" | expr
echodir: ECHO arbitrarytext linereminder | "%OUT" arbitrarytext linereminder
elseifblock: elseifstatement linereminder directivelist elseifblock? 
elseifstatement: ELSEIF constexpr| ELSEIFE constexpr| ELSEIFB textitem| ELSEIFNB textitem | ELSEIFDEF id| ELSEIFNDEF id| ELSEIFDIF textitem "," textitem| ELSEIFDIFI textitem "," textitem| ELSEIFIDN textitem "," textitem| ELSEIFIDNI textitem "," textitem| "ELSEIF1" | "ELSEIF2" 
enddir: END immexpr?  linereminder
endpdir: procid ENDP linereminder
endsdir: id ENDS linereminder
equdir: textmacroid EQU equtype linereminder
equtype: immexpr| textliteral
errordir: erroropt linereminder
erroropt: U_ERR textitem? | U_ERRE constexpr opttext? | U_ERRNZ constexpr opttext? | U_ERRB textitem opttext? | U_ERRNB textitem opttext? | U_ERRDEF id  opttext? | U_ERRNDEF id opttext? | U_ERRDIF textitem "," textitem  opttext? | U_ERRDIFI textitem "," textitem  opttext? | U_ERRIDN textitem "," textitem  opttext? | U_ERRIDNI textitem "," textitem  opttext? | U_ERR1 textitem? | U_ERR2 textitem?  
exitdir: U_EXIT expr?  linereminder
exitmdir: EXITM | EXITM textitem
exponent: "E"  sign?  decnumber
expr: SHORT e05| U_TYPE e01| OPATTR e01| e01
exprlist: expr | expr  ","  exprlist
altidq: "( altid )"
externdef: langtype?  id altidq? ":" externtype
externdir: externkey externlist linereminder
externkey: EXTRN | EXTERN | EXTERNDEF 
externlist: externdef| externdef  "," linereminder?  externlist
externtype: ABS | qualifiedtype
fieldalign: constexpr
fieldinit: initvalue | structinstance
fieldinitlist: fieldinit ","  linereminder?  fieldinitlist | fieldinit
filechar: delimiter
filecharlist: filechar+
filespec: filecharlist| textliteral
flagname: ZERO_ | CARRY_ | OVERFLOW_ | SIGN_ | PARITY_
floatnumber : sign?  decnumber U_DOT decnumber?   exponent? | digits "R"| digits "r"
forcdir: FORC | IRPC 
fordir: FOR | IRP 
dotdotforparmtype: ":" forparmtype
forparm: id dotdotforparmtype?
forparmtype: REQ | "=" textliteral
frameexpr: SEG id | DGROUP ":" id| segmentregister ":" id| id
generaldir: modeldir | segorderdir | namedir| includelibdir | commentdir| groupdir | assumedir| structdir | recorddir | typedefdir| externdir | publicdir | commdir | prototypedir| equdir | assdir | textdir| contextdir | optiondir | processordir| radixdir | titledir | pagedir | listdir | crefdir | echodir| ifdir | errordir | includedir | macrodir | macrocall | macrorepeat | purgedir| macrowhile | macrofor | macroforc| aliasdir
aliasdir: ALIAS
gpregister: AX | EAX | BX | EBX | CX | ECX | DX | EDX| BP | EBP | SP | ESP | DI | EDI | SI | ESI
groupdir : groupid GROUP segidlist
groupid: id
idlist: id "," idlist | id
ifdir: ifstatement linereminder directivelist elseifblock? elsedirectivelist? ENDIF linereminder
ifstatement: IF constexpr| IFE constexpr| IFB textitem| IFNB textitem| IFDEF id| IFNDEF id| IFDIF textitem "," textitem| IFDIFI textitem "," textitem| IFIDN textitem "," textitem| IFIDNI textitem "," textitem| "IF1" | "IF2" 
immexpr: expr
includedir: INCLUDE filespec linereminder
includelibdir: INCLUDELIB filespec linereminder
initvalue: immexpr| string| "?"| constexpr  DUP "( scalarinstlist )"| floatnumber| bcdconst
insegdir: labeldef?  insegmentdir
insegdirlist: insegdir+
insegmentdir: instruction| datadir| controldir| startupdir| exitdir| offsetdir| labeldir| procdir  localdirlist?   insegdirlist?  endpdir| invokedir| generaldir 
instrprefix: REP | REPE | REPZ | REPNE | REPNZ | LOCK 
instruction: instrprefix?  asminstruction
invokearg: register "::" register| ADDR expr | expr
commainvokelist: "," linereminder? invokelist
invokedir: INVOKE expr commainvokelist? linereminder
invokelist: invokearg  "," linereminder?  invokelist | invokearg
labeldef: id ":" | id "::" | MONKEY
labeldir: id LABEL qualifiedtype linereminder
langtype: C | PASCAL | FORTRAN | BASIC | SYSCALL | STDCALL 
listdir: listoption linereminder
listoption: U_LIST | U_NOLIST | U_XLIST | U_LISTALL | U_LISTIF | U_LFCOND | U_NOLISTIF | U_SFCOND | U_TFCOND | U_LISTMACROALL | U_LALL | U_NOLISTMACRO | U_SALL | U_LISTMACRO | U_XALL 
localdef: LOCAL idlist linereminder
localdir: LOCAL parmlist linereminder
localdirlist: localdir+
locallist: localdef+
macroarg: "%" constexpr| "%" textmacroid| "%" macrofuncid "(" macroarglist ")"| string| "<" arbitrarytext ">" | arbitrarytext
macroarglist: macroarg  "," macroarglist | macroarg
macrobody: locallist? macrostmtlist
macrocall: id  "(" macroarglist ")" | id macroarglist linereminder
macrodir: id MACRO macroparmlist?  linereminder macrobody ENDM linereminder
macrofor: fordir forparm  "," "<" macroarglist ">" linereminder macrobody ENDM linereminder
macroforc: forcdir id  "," textliteral linereminder macrobody ENDM linereminder
macrofuncid: id
macroid: macroprocid| macrofuncid
macroidlist: macroid  ","  macroidlist | macroid
macrolabel: id
dotdotparmtype: ":" parmtype
macroparm: id dotdotparmtype?
macroparmlist: macroparm  "," linereminder?  macroparmlist | macroparm
macroprocid: id
macrorepeat: repeatdir constexpr linereminder macrobody ENDM linereminder
macrostmt: directive| exitmdir| ":" macrolabel| GOTO macrolabel
macrostmtlist: macrostmt macrostmtlist linereminder | macrostmt linereminder
macrowhile: WHILE constexpr linereminder macrobody ENDM linereminder
maptype: ALL | NONE | NOTPUBLIC 
memoption: TINY | SMALL | MEDIUM | COMPACT | LARGE | HUGE | FLAT 
mnemonic: AAA| AAD| AAM| AAS| ADC| ADD| AND| CALL| CBW| CLC| CLD| CLI| CMC| CMP| CMPS| CMPSB| CMPSW| CWD| DAA| DAS| DEC| DIV| ESC| HLT| IDIV| IMUL| IN| INC| INT| INTO| IRET| JA| JAE| JB| JBE| JC| JCXZ| JE| JG| JGE| JL| JLE| JMP| JNA| JNAE| JNB| JNBE| JNC| JNE| JNG| JNGE| JNL| JNLE| JNO| JNP| JNS| JNZ| JO| JP| JPE| JPO| JS| JZ| LAHF| LDS| LEA| LES| LODS| LODSB| LODSW| LOOP| LOOPE| LOOPEW| LOOPNE| LOOPNEW| LOOPNZ| LOOPNZW| LOOPW| LOOPZ| LOOPZW| MOV| MOVS| MOVSB| MOVSW| MUL| NEG| NOP| NOT| OR| OUT| POP| POPF| PUSH| PUSHF| RCL| RCR| RET| RETF| RETN| ROL| ROR| SAHF| SAL| SAR| SBB| SCAS| SCASB| SCASW| SHL| SHR| STC| STD| STI| STOS| STOSB| STOSW| SUB| TEST| WAIT| XCHG| XLAT| XLATB| XOR| BOUND| ENTER| INS| INSB| INSW| LEAVE| OUTS| OUTSB| OUTSW| POPA| PUSHA| PUSHW| ARPL| LAR| LSL| SGDT| SIDT| SLDT| SMSW| STR| VERR| VERW| CLTS| LGDT| LIDT| LLDT| LMSW| LTR| BSF| BSR| BT| BTC| BTR| BTS| CDQ| CMPSD| CWDE| INSD| IRETD| IRETDF| IRETF| JECXZ| LFS| LGS| LODSD| LOOPD| LOOPED| LOOPNED| LOOPNZD| LOOPZD| LSS| MOVSD| MOVSX| MOVZX| OUTSD| POPAD| POPFD| PUSHAD| PUSHD| PUSHFD| SCASD| SETA| SETAE| SETB| SETBE| SETC| SETE| SETG| SETGE| SETL| SETLE| SETNA| SETNAE| SETNB| SETNBE| SETNC| SETNE| SETNG| SETNGE| SETNL| SETNLE| SETNO| SETNP| SETNS| SETNZ| SETO| SETP| SETPE| SETPO| SETS| SETZ| SHLD| SHRD| STOSD| BSWAP| CMPXCHG| INVD| INVLPG| WBINVD| XADD| F2XM1| FABS| FADD| FADDP| FBLD| FBSTP| FCHS| FCLEX| FCOM| FCOMP| FCOMPP| FDECSTP| FDISI| FDIV| FDIVP| FDIVR| FDIVRP| FENI| FFREE| FIADD| FICOM| FICOMP| FIDIV| FIDIVR| FILD| FIMUL| FINCSTP| FINIT| FIST| FISTP| FISUB| FISUBR| FLD| FLD1| FLDCW| FLDENV| FLDENVW| FLDL2E| FLDL2T| FLDLG2| FLDLN2| FLDPI| FLDZ| FMUL| FMULP| FNCLEX| FNDISI| FNENI| FNINIT| FNOP| FNSAVE| FNSAVEW| FNSTCW| FNSTENV| FNSTENVW| FNSTSW| FPATAN| FPREM| FPTAN| FRNDINT| FRSTOR| FRSTORW| FSAVE| FSAVEW| FSCALE| FSQRT| FST| FSTCW| FSTENV| FSTENVW| FSTP| FSTSW| FSUB| FSUBP| FSUBR| FSUBRP| FTST| FWAIT| FXAM| FXCH| FXTRACT| FYL2X| FYL2XP1| FSETPM| FCOS| FLDENVD| FNSAVED| FNSTENVD| FPREM1| FRSTORD| FSAVED| FSIN| FSINCOS| FSTENVD| FUCOM| FUCOMP| FUCOMPP
commamodeloptlist: "," modeloptlist
modeldir: U_MODEL memoption commamodeloptlist? linereminder
modelopt: langtype| stackoption 
modeloptlist: modelopt| modelopt  "," modeloptlist
mulop: "*"| "/" | MOD 
namedir: NAME id linereminder
nearfar: NEAR | FAR 
nestedstruct: structhdr  id?  linereminder structbody ENDS linereminder
offsetdir: offsetdirtype linereminder
offsetdirtype: EVEN | ORG immexpr| ALIGN constexpr? 
offsettype: GROUP | SEGMENT | FLAT 
oldrecordfieldlist: constexpr "," oldrecordfieldlist | constexpr
optiondir: OPTION optionlist linereminder
readonly: READONLY
optionitem: CASEMAP ":" maptype| DOTNAME | NODOTNAME | EMULATOR | NOEMULATOR | EPILOGUE ":" macroid| "EXPR16" | "EXPR32" | LANGUAGE ":" langtype| LJMP | NOLJMP | "M510" | "NOM510" | NOSIGNEXTEND | OFFSET ":" offsettype| OLDMACROS | NOOLDMACROS | OLDSTRUCTS | NOOLDSTRUCTS | PROC ":" ovisibility| PROLOGUE ":" macroid| readonly | NOREADONLY | SCOPED | NOSCOPED | SEGMENT ":" segsize| "SETIF2 :" bool
optionlist: optionitem| optionitem  "," linereminder?  optionlist
opttext: "," textitem
orop: OR | XOR 
ovisibility: PUBLIC | PRIVATE | EXPORT 
pagedir: PAGE pageexpr?  linereminder
commapagewidth: "," pagewidth
pageexpr: "+"|  pagelength?  commapagewidth?
pagelength: constexpr
pagewidth: constexpr
dotdotqualifiedtype: ":" qualifiedtype
parm: parmid  constexpr? dotdotqualifiedtype?
parmid: id
parmlist: parm  "," linereminder? parmlist | parm
parmtype: REQ | "=" textliteral| VARARG 
poptions: distance?   langtype?   ovisibility? 
primary: expr binaryop expr| flagname| expr
brmacroarglist: "<" macroarglist ">"
procdir: procid PROC poptions?  brmacroarglist?  usesregs?   procparmlist? 
processor: U_8086 | U_186 | U_286 | U_286C | U_286P | U_386 | U_386C | U_386P | U_486 | U_486P | U_586 | U_586P | U_686 | U_686P | U_K3D | U_MMX | U_XMM
processordir: processor linereminder | coprocessor linereminder
procid: id
commaparmlist: ","  linereminder?  parmlist
commaparmidvararg: ","  linereminder?  parmid U_VARARG
procparmlist: "," commaparmlist? "," commaparmidvararg?
protoarg : id? ":" qualifiedtype 
commaprotolist: ","  linereminder?  protolist
commaidvararg: ","  linereminder?   id? U_VARARG
protoarglist: "," commaprotolist? "," commaidvararg?
protolist: protoarg| protoarg  "," linereminder?  protolist
protospec: typeid | distance?   langtype?   protoarglist?
prototypedir: id PROTO protospec
pubdef: langtype?  id
publicdir: PUBLIC publist linereminder
publist: pubdef  "," linereminder?  publist | pubdef
purgedir: PURGE macroidlist
qualifiedtype: distance? PTR qualifiedtype? | type
qualifier: PROTO protospec | qualifiedtype
quote: "\"" | "'"
radixdir: U_RADIX constexpr linereminder
recordconst: recordtag "{" oldrecordfieldlist "}"| recordtag "<" oldrecordfieldlist ">"
recorddir: recordtag RECORD bitdeflist linereminder 
recordfieldlist: constexpr  ","  linereminder? recordfieldlist | constexpr
recordinstance: "{"  linereminder?  recordfieldlist  linereminder?  "}"| "<" oldrecordfieldlist ">"| constexpr DUP "(" recordinstance ")"
recordinstlist: recordinstance| recordinstance ","  linereminder?  recordinstlist
recordtag: id
register: specialregister| gpregister| byteregister
reglist: register+
relop: EQ | NE | LT | LE | GT | GE 
repeatblock: U_REPEAT linereminder blockstatements linereminder untildir linereminder
repeatdir: REPEAT | REPT 
scalarinstlist: initvalue ","  linereminder? scalarinstlist | initvalue
segalign: BYTE | WORD | DWORD | PARA | PAGE 
segattrib: PUBLIC | STACK | COMMON | MEMORY | AT constexpr| PRIVATE 
segdir: U_CODE segid? | U_DATA | U_DATA_| U_CONST | U_FARDATA segid? | U_FARDATA_ segid? | U_STACK constexpr?
segid: id
segidlist : segid  "," segidlist | segid
segmentdef: segmentdir  insegdirlist?  endsdir| simplesegdir  insegdirlist?   endsdir? 
segmentdir: segid SEGMENT segoptionlist?  linereminder
segmentregister: CS | DS | ES | FS | GS | SS
segoption: segalign| segro| segattrib| segsize| classname
segoptionlist: segoption+
segorderdir: U_ALPHA | U_SEQ | U_DOSSEG | DOSSEG 
segro: readonly
segsize : USE16 | USE32 | FLAT
shiftop: SHR | SHL 
sign: "-" | "+"
simpleexpr: "(" cexpr ")"| primary
simplesegdir: segdir linereminder
sizearg: id| type| e10
specialregister: "CR0" | "CR2" | "CR3" | "DR0" | "DR1" | "DR2" | "DR3" | "DR6" | "DR7"| "TR3" | "TR4" | "TR5" | "TR6" | "TR7"
stackoption: NEARSTACK | FARSTACK 
startupdir: U_STARTUP linereminder
stext: stringchar+
string: quote  stext?  quote
structbody: structitem structbody | structitem linereminder
commanonuniq: "," NONUNIQUE
structdir: structtag structhdr  fieldalign?  commanonuniq? linereminder structbody structtag ENDS linereminder
structhdr: STRUC | STRUCT | UNION 
structinstance: "<"  fieldinitlist?  ">"| "{" linereminder?   fieldinitlist?   linereminder?  "}"| constexpr DUP "( structinstlist )"
structinstlist: structinstance| structinstance  ","  linereminder?  structinstlist
structitem : datadir| generaldir| offsetdir| nestedstruct
structtag: id
term: "!" simpleexpr | simpleexpr
text: "!" character text| "!" character| textliteral | character+
textdir: id textmacrodir linereminder
textitem: textliteral| "%" constexpr| textmacroid
textlen: constexpr
textlist: textitem  "," linereminder?  textlist | textitem
textliteral: "<" text ">" linereminder
commatextlen: "," textlen
textstartcomma: textstart  ","
textmacrodir: CATSTR textlist? | TEXTEQU textlist? | SIZESTR textitem| SUBSTR textitem  "," textstart commatextlen| INSTR textstartcomma? textitem  "," textitem
textmacroid: id
textstart: constexpr
titledir: titletype arbitrarytext linereminder
titletype: TITLE | SUBTITLE | SUBTTL 
type: structtag| uniontag| recordtag| distance| datatype| typeid
typedefdir: typeid TYPEDEF qualifier
typeid: id
uniontag: id
untildir: U_UNTIL cexpr linereminder U_UNTILCXZ cxzexpr?  linereminder
usesregs: USES reglist 
whileblock: U_WHILE cexpr linereminder blockstatements linereminder U_ENDW 
radixoverride: "H"i | "O"i | "Q"i | "T"i | "Y"i
decdigit: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
hexdigit: "A"i | "B"i | "C"i | "D"i | "E"i | "F"i
letter : "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "_"
id: letter+ | id decdigit
whitespacecharacter: WS
endofline: /[\r\n]+/
character: /[^\r\n]/
comment: ";" text linereminder
stringchar: /(\'\')|(\"\")|[^\'\"]/
delimiter: /[^\t\n\r\s\w]/
AAA: "AAA"i
AAD: "AAD"i
AAM: "AAM"i
AAS: "AAS"i
ABS: "ABS"i
ADC: "ADC"i
ADD: "ADD"i
ADDR: "ADDR"i
AH: "AH"i
AL: "AL"i
ALIAS: "ALIAS"i
ALIGN: "ALIGN"i
ALL: "ALL"i
AND: "AND"i
ARPL: "ARPL"i
ASSUMENOTHING: "ASSUME NOTHING"i
ASSUME: "ASSUME"i
ASSUMES: "ASSUMES"i
AT: "AT"i
AX: "AX"i
BASIC: "BASIC"i
BH: "BH"i
BL: "BL"i
BOUND: "BOUND"i
BP: "BP"i
BSF: "BSF"i
BSR: "BSR"i
BSWAP: "BSWAP"i
BT: "BT"i
BTC: "BTC"i
BTR: "BTR"i
BTS: "BTS"i
BX: "BX"i
BYTE: "BYTE"i
CALL: "CALL"i
CARRY_: "CARRY?"i
CASEMAP: "CASEMAP"i
CATSTR: "CATSTR"i
CBW: "CBW"i
CDQ: "CDQ"i
CH: "CH"i
CL: "CL"i
CLC: "CLC"i
CLD: "CLD"i
CLI: "CLI"i
CLTS: "CLTS"i
CMC: "CMC"i
CMP: "CMP"i
CMPS: "CMPS"i
CMPSB: "CMPSB"i
CMPSD: "CMPSD"i
CMPSW: "CMPSW"i
CMPXCHG: "CMPXCHG"i
COMM: "COMM"i
COMMENT: "COMMENT"i
COMMON: "COMMON"i
COMPACT: "COMPACT"i
CPU: "CPU"i
CR0: "CR0"i
CR2: "CR2"i
CR3: "CR3"i
CS: "CS"i
CWD: "CWD"i
CWDE: "CWDE"i
CX: "CX"i
DAA: "DAA"i
DAS: "DAS"i
DB: "DB"i
DD: "DD"i
DEC: "DEC"i
DF: "DF"i
DGROUP: "DGROUP"i
DH: "DH"i
DI: "DI"i
DIV: "DIV"i
DL: "DL"i
DOSSEG: "DOSSEG"i
DOTNAME: "DOTNAME"i
DQ: "DQ"i
DR0: "DR0"i
DR1: "DR1"i
DR2: "DR2"i
DR3: "DR3"i
DR6: "DR6"i
DR7: "DR7"i
DS: "DS"i
DT: "DT"i
DUP: "DUP"i
DW: "DW"i
DWORD: "DWORD"i
DX: "DX"i
EAX: "EAX"i
EBP: "EBP"i
EBX: "EBX"i
ECHO: "ECHO"i
ECX: "ECX"i
EDI: "EDI"i
EDX: "EDX"i
ELSEIF1: "ELSEIF1"i
ELSEIF2: "ELSEIF2"i
ELSEIF: "ELSEIF"i
ELSEIFB: "ELSEIFB"i
ELSEIFDEF: "ELSEIFDEF"i
ELSEIFDIF: "ELSEIFDIF"i
ELSEIFDIFI: "ELSEIFDIFI"i
ELSEIFE: "ELSEIFE"i
ELSEIFIDN: "ELSEIFIDN"i
ELSEIFIDNI: "ELSEIFIDNI"i
ELSEIFNB: "ELSEIFNB"i
ELSEIFNDEF: "ELSEIFNDEF"i
EMULATOR: "EMULATOR"i
END: "END"i
ENDIF: "ENDIF"i
ENDM: "ENDM"i
ENDP: "ENDP"i
ENDS: "ENDS"i
ENTER: "ENTER"i
EPILOGUE: "EPILOGUE"i
EQ: "EQ"i
EQU: "EQU"i
ERROR: "ERROR"i
ES: "ES"i
ESC: "ESC"i
ESI: "ESI"i
ESP: "ESP"i
EVEN: "EVEN"i
EXITM: "EXITM"i
EXPORT: "EXPORT"i
EXPR16: "EXPR16"i
EXPR32: "EXPR32"i
EXTERN: "EXTERN"i
EXTERNDEF: "EXTERNDEF"i
EXTRN: "EXTRN"i
F2XM1: "F2XM1"i
FABS: "FABS"i
FADD: "FADD"i
FADDP: "FADDP"i
FALSE: "FALSE"i
FAR16: "FAR16"i
FAR32: "FAR32"i
FAR: "FAR"i
FARSTACK: "FARSTACK"i
FBLD: "FBLD"i
FBSTP: "FBSTP"i
FCHS: "FCHS"i
FCLEX: "FCLEX"i
FCOM: "FCOM"i
FCOMP: "FCOMP"i
FCOMPP: "FCOMPP"i
FCOS: "FCOS"i
FDECSTP: "FDECSTP"i
FDISI: "FDISI"i
FDIV: "FDIV"i
FDIVP: "FDIVP"i
FDIVR: "FDIVR"i
FDIVRP: "FDIVRP"i
FENI: "FENI"i
FFREE: "FFREE"i
FIADD: "FIADD"i
FICOM: "FICOM"i
FICOMP: "FICOMP"i
FIDIV: "FIDIV"i
FIDIVR: "FIDIVR"i
FILD: "FILD"i
FIMUL: "FIMUL"i
FINCSTP: "FINCSTP"i
FINIT: "FINIT"i
FIST: "FIST"i
FISTP: "FISTP"i
FISUB: "FISUB"i
FISUBR: "FISUBR"i
FLAT: "FLAT"i
FLD1: "FLD1"i
FLD: "FLD"i
FLDCW: "FLDCW"i
FLDENV: "FLDENV"i
FLDENVD: "FLDENVD"i
FLDENVW: "FLDENVW"i
FLDL2E: "FLDL2E"i
FLDL2T: "FLDL2T"i
FLDLG2: "FLDLG2"i
FLDLN2: "FLDLN2"i
FLDPI: "FLDPI"i
FLDZ: "FLDZ"i
FMUL: "FMUL"i
FMULP: "FMULP"i
FNCLEX: "FNCLEX"i
FNDISI: "FNDISI"i
FNENI: "FNENI"i
FNINIT: "FNINIT"i
FNOP: "FNOP"i
FNSAVE: "FNSAVE"i
FNSAVED: "FNSAVED"i
FNSAVEW: "FNSAVEW"i
FNSTCW: "FNSTCW"i
FNSTENV: "FNSTENV"i
FNSTENVD: "FNSTENVD"i
FNSTENVW: "FNSTENVW"i
FNSTSW: "FNSTSW"i
FOR: "FOR"i
FORC: "FORC"i
FORTRAN: "FORTRAN"i
FPATAN: "FPATAN"i
FPREM1: "FPREM1"i
FPREM: "FPREM"i
FPTAN: "FPTAN"i
FRNDINT: "FRNDINT"i
FRSTOR: "FRSTOR"i
FRSTORD: "FRSTORD"i
FRSTORW: "FRSTORW"i
FS: "FS"i
FSAVE: "FSAVE"i
FSAVED: "FSAVED"i
FSAVEW: "FSAVEW"i
FSCALE: "FSCALE"i
FSETPM: "FSETPM"i
FSIN: "FSIN"i
FSINCOS: "FSINCOS"i
FSQRT: "FSQRT"i
FST: "FST"i
FSTCW: "FSTCW"i
FSTENV: "FSTENV"i
FSTENVD: "FSTENVD"i
FSTENVW: "FSTENVW"i
FSTP: "FSTP"i
FSTSW: "FSTSW"i
FSUB: "FSUB"i
FSUBP: "FSUBP"i
FSUBR: "FSUBR"i
FSUBRP: "FSUBRP"i
FTST: "FTST"i
FUCOM: "FUCOM"i
FUCOMP: "FUCOMP"i
FUCOMPP: "FUCOMPP"i
FWAIT: "FWAIT"i
FWORD: "FWORD"i
FXAM: "FXAM"i
FXCH: "FXCH"i
FXTRACT: "FXTRACT"i
FYL2X: "FYL2X"i
FYL2XP1: "FYL2XP1"i
GE: "GE"i
GOTO: "GOTO"i
GROUP: "GROUP"i
GS: "GS"i
GT: "GT"i
HIGH: "HIGH"i
HIGHWORD: "HIGHWORD"i
HLT: "HLT"i
HUGE: "HUGE"i
IDIV: "IDIV"i
IF1: "IF1"i
IF2: "IF2"i
IF: "IF"i
IFB: "IFB"i
IFDEF: "IFDEF"i
IFDIF: "IFDIF"i
IFDIFI: "IFDIFI"i
IFE: "IFE"i
IFIDN: "IFIDN"i
IFIDNI: "IFIDNI"i
IFNB: "IFNB"i
IFNDEF: "IFNDEF"i
IMUL: "IMUL"i
IN: "IN"i
INC: "INC"i
INCLUDE: "INCLUDE"i
INCLUDELIB: "INCLUDELIB"i
INS: "INS"i
INSB: "INSB"i
INSD: "INSD"i
INSTR: "INSTR"i
INSW: "INSW"i
INT: "INT"i
INTO: "INTO"i
INVD: "INVD"i
INVLPG: "INVLPG"i
INVOKE: "INVOKE"i
IRET: "IRET"i
IRETD: "IRETD"i
IRETDF: "IRETDF"i
IRETF: "IRETF"i
IRP: "IRP"i
IRPC: "IRPC"i
JA: "JA"i
JAE: "JAE"i
JB: "JB"i
JBE: "JBE"i
JC: "JC"i
JCXZ: "JCXZ"i
JE: "JE"i
JECXZ: "JECXZ"i
JG: "JG"i
JGE: "JGE"i
JL: "JL"i
JLE: "JLE"i
JMP: "JMP"i
JNA: "JNA"i
JNAE: "JNAE"i
JNB: "JNB"i
JNBE: "JNBE"i
JNC: "JNC"i
JNE: "JNE"i
JNG: "JNG"i
JNGE: "JNGE"i
JNL: "JNL"i
JNLE: "JNLE"i
JNO: "JNO"i
JNP: "JNP"i
JNS: "JNS"i
JNZ: "JNZ"i
JO: "JO"i
JP: "JP"i
JPE: "JPE"i
JPO: "JPO"i
JS: "JS"i
JZ: "JZ"i
LABEL: "LABEL"i
LAHF: "LAHF"i
LANGUAGE: "LANGUAGE"i
LAR: "LAR"i
LARGE: "LARGE"i
LDS: "LDS"i
LE: "LE"i
LEA: "LEA"i
LEAVE: "LEAVE"i
LENGTH: "LENGTH"i
LENGTHOF: "LENGTHOF"i
LES: "LES"i
LFS: "LFS"i
LGDT: "LGDT"i
LGS: "LGS"i
LIDT: "LIDT"i
LISTING: "LISTING"i
LJMP: "LJMP"i
LLDT: "LLDT"i
LMSW: "LMSW"i
LOCAL: "LOCAL"i
LOCK: "LOCK"i
LODS: "LODS"i
LODSB: "LODSB"i
LODSD: "LODSD"i
LODSW: "LODSW"i
LOOP: "LOOP"i
LOOPD: "LOOPD"i
LOOPE: "LOOPE"i
LOOPED: "LOOPED"i
LOOPEW: "LOOPEW"i
LOOPNE: "LOOPNE"i
LOOPNED: "LOOPNED"i
LOOPNEW: "LOOPNEW"i
LOOPNZ: "LOOPNZ"i
LOOPNZD: "LOOPNZD"i
LOOPNZW: "LOOPNZW"i
LOOPW: "LOOPW"i
LOOPZ: "LOOPZ"i
LOOPZD: "LOOPZD"i
LOOPZW: "LOOPZW"i
LOW: "LOW"i
LOWWORD: "LOWWORD"i
LROFFSET: "LROFFSET"i
LSL: "LSL"i
LSS: "LSS"i
LT: "LT"i
LTR: "LTR"i
M510: "M510"i
MACRO: "MACRO"i
MASK: "MASK"i
MEDIUM: "MEDIUM"i
MEMORY: "MEMORY"i
MOD: "MOD"i
MONKEY: "@@:"i
MOV: "MOV"i
MOVS: "MOVS"i
MOVSB: "MOVSB"i
MOVSD: "MOVSD"i
MOVSW: "MOVSW"i
MOVSX: "MOVSX"i
MOVZX: "MOVZX"i
MUL: "MUL"i
NAME: "NAME"i
NE: "NE"i
NEAR16: "NEAR16"i
NEAR32: "NEAR32"i
NEAR: "NEAR"i
NEARSTACK: "NEARSTACK"i
NEG: "NEG"i
NODOTNAME: "NODOTNAME"i
NOEMULATOR: "NOEMULATOR"i
NOLJMP: "NOLJMP"i
NOM510: "NOM510"i
NONE: "NONE"i
NONUNIQUE: "NONUNIQUE"i
NOOLDMACROS: "NOOLDMACROS"i
NOOLDSTRUCTS: "NOOLDSTRUCTS"i
NOP: "NOP"i
NOREADONLY: "NOREADONLY"i
NOSCOPED: "NOSCOPED"i
NOSIGNEXTEND: "NOSIGNEXTEND"i
NOT: "NOT"i
NOTHING: "NOTHING"i
NOTPUBLIC: "NOTPUBLIC"i
OFFSET: "OFFSET"i
OLDMACROS: "OLDMACROS"i
OLDSTRUCTS: "OLDSTRUCTS"i
OPATTR: "OPATTR"i
OPTION: "OPTION"i
OR: "OR"i
ORG: "ORG"i
OUT: "OUT"i
OUTS: "OUTS"i
OUTSB: "OUTSB"i
OUTSD: "OUTSD"i
OUTSW: "OUTSW"i
OVERFLOW_: "OVERFLOW?"i
PAGE: "PAGE"i
PARA: "PARA"i
PARITY_: "PARITY?"i
PASCAL: "PASCAL"i
POP: "POP"i
POPA: "POPA"i
POPAD: "POPAD"i
POPCONTEXT: "POPCONTEXT"i
POPF: "POPF"i
POPFD: "POPFD"i
PRIVATE: "PRIVATE"i
PROC: "PROC"i
PROLOGUE: "PROLOGUE"i
PROTO: "PROTO"i
PTR: "PTR"i
PUBLIC: "PUBLIC"i
PURGE: "PURGE"i
PUSH: "PUSH"i
PUSHA: "PUSHA"i
PUSHAD: "PUSHAD"i
PUSHCONTEXT: "PUSHCONTEXT"i
PUSHD: "PUSHD"i
PUSHF: "PUSHF"i
PUSHFD: "PUSHFD"i
PUSHW: "PUSHW"i
QWORD: "QWORD"i
RADIX: "RADIX"i
RCL: "RCL"i
RCR: "RCR"i
READONLY: "READONLY"i
REAL10: "REAL10"i
REAL4: "REAL4"i
REAL8: "REAL8"i
RECORD: "RECORD"i
REP: "REP"i
REPE: "REPE"i
REPEAT: "REPEAT"i
REPNE: "REPNE"i
REPNZ: "REPNZ"i
REPT: "REPT"i
REPZ: "REPZ"i
REQ: "REQ"i
RET: "RET"i
RETF: "RETF"i
RETN: "RETN"i
ROL: "ROL"i
ROR: "ROR"i
SAHF: "SAHF"i
SAL: "SAL"i
SAR: "SAR"i
SBB: "SBB"i
SBYTE: "SBYTE"i
SCAS: "SCAS"i
SCASB: "SCASB"i
SCASD: "SCASD"i
SCASW: "SCASW"i
SCOPED: "SCOPED"i
SDWORD: "SDWORD"i
SEG: "SEG"i
SEGMENT: "SEGMENT"i
SETA: "SETA"i
SETAE: "SETAE"i
SETB: "SETB"i
SETBE: "SETBE"i
SETC: "SETC"i
SETE: "SETE"i
SETG: "SETG"i
SETGE: "SETGE"i
SETIF2: "SETIF2"i
SETL: "SETL"i
SETLE: "SETLE"i
SETNA: "SETNA"i
SETNAE: "SETNAE"i
SETNB: "SETNB"i
SETNBE: "SETNBE"i
SETNC: "SETNC"i
SETNE: "SETNE"i
SETNG: "SETNG"i
SETNGE: "SETNGE"i
SETNL: "SETNL"i
SETNLE: "SETNLE"i
SETNO: "SETNO"i
SETNP: "SETNP"i
SETNS: "SETNS"i
SETNZ: "SETNZ"i
SETO: "SETO"i
SETP: "SETP"i
SETPE: "SETPE"i
SETPO: "SETPO"i
SETS: "SETS"i
SETZ: "SETZ"i
SGDT: "SGDT"i
SHL: "SHL"i
SHLD: "SHLD"i
SHORT: "SHORT"i
SHR: "SHR"i
SHRD: "SHRD"i
SI: "SI"i
SIDT: "SIDT"i
SIGN_: "SIGN?"i
SIZE: "SIZE"i
SIZEOF: "SIZEOF"i
SIZESTR: "SIZESTR"i
SLDT: "SLDT"i
SMALL: "SMALL"i
SMSW: "SMSW"i
SP: "SP"i
SS: "SS"i
ST: "ST"i
STACK: "STACK"i
STC: "STC"i
STD: "STD"i
STDCALL: "STDCALL"i
STI: "STI"i
STOS: "STOS"i
STOSB: "STOSB"i
STOSD: "STOSD"i
STOSW: "STOSW"i
STR: "STR"i
STRUC: "STRUC"i
STRUCT: "STRUCT"i
SUB: "SUB"i
SUBSTR: "SUBSTR"i
SUBTITLE: "SUBTITLE"i
SUBTTL: "SUBTTL"i
SWORD: "SWORD"i
SYSCALL: "SYSCALL"i
TBYTE: "TBYTE"i
TEST: "TEST"i
TEXTEQU: "TEXTEQU"i
THIS: "THIS"i
TINY: "TINY"i
TITLE: "TITLE"i
TR3: "TR3"i
TR4: "TR4"i
TR5: "TR5"i
TR6: "TR6"i
TR7: "TR7"i
TRUE: "TRUE"i
TYPE: "TYPE"i
TYPEDEF: "TYPEDEF"i
UNION: "UNION"i
USE16: "USE16"i
USE32: "USE32"i
USES: "USES"i
VARARG: "VARARG"i
VERR: "VERR"i
VERW: "VERW"i
WAIT: "WAIT"i
WBINVD: "WBINVD"i
WHILE: "WHILE"i
WIDTH: "WIDTH"i
WORD: "WORD"i
XADD: "XADD"i
XCHG: "XCHG"i
XLAT: "XLAT"i
XLATB: "XLATB"i
XOR: "XOR"i
ZERO_: "ZERO?"i
U_186: ".186"i
U_286: ".286"i
U_286C: ".286C"i
U_286P: ".286P"i
U_287: ".287"i
U_386: ".386"i
U_386C: ".386C"i
U_386P: ".386P"i
U_387: ".387"i
U_486: ".486"i
U_486P: ".486P"i
U_586: ".586"i
U_586P: ".586P"i
U_686: ".686"i
U_686P: ".686P"i
U_8086: ".8086"i
U_8087: ".8087"i
U_ALPHA: ".ALPHA"i
U_BREAK: ".BREAK"i
U_CODE: ".CODE"i
U_CONST: ".CONST"i
U_CONTINUE: ".CONTINUE"i
U_CREF: ".CREF"i
U_DATA: ".DATA"i
U_DATA_: ".DATA?"i
U_DOSSEG: ".DOSSEG"i
U_ELSE: ".ELSE"i
U_ELSEIF: ".ELSEIF"i
U_ENDIF: ".ENDIF"i
U_ENDW: ".ENDW"i
U_ERR1: ".ERR1"i
U_ERR2: ".ERR2"i
U_ERR: ".ERR"i
U_ERRB: ".ERRB"i
U_ERRDEF: ".ERRDEF"i
U_ERRDIF: ".ERRDIF"i
U_ERRDIFI: ".ERRDIFI"i
U_ERRE: ".ERRE"i
U_ERRIDN: ".ERRIDN"i
U_ERRIDNI: ".ERRIDNI"i
U_ERRNB: ".ERRNB"i
U_ERRNDEF: ".ERRNDEF"i
U_ERRNZ: ".ERRNZ"i
U_EXIT: ".EXIT"i
U_FARDATA: ".FARDATA"i
U_FARDATA_: ".FARDATA?"i
U_IF: ".IF"i
U_K3D: ".K3D"i
U_LALL: ".LALL"i
U_LFCOND: ".LFCOND"i
U_LIST: ".LIST"i
U_LISTALL: ".LISTALL"i
U_LISTIF: ".LISTIF"i
U_LISTMACRO: ".LISTMACRO"i
U_LISTMACROALL: ".LISTMACROALL"i
U_MMX: ".MMX"i
U_MODEL: ".MODEL"i
U_NO87: ".NO87"i
U_NOCREF: ".NOCREF"i
U_NOLIST: ".NOLIST"i
U_NOLISTIF: ".NOLISTIF"i
U_NOLISTMACRO: ".NOLISTMACRO"i
U_OUT: "%OUT"i
U_RADIX: ".RADIX"i
U_REPEAT: ".REPEAT"i
U_SALL: ".SALL"i
U_SEQ: ".SEQ"i
U_SFCOND: ".SFCOND"i
U_STACK: ".STACK"i
U_STARTUP: ".STARTUP"i
U_TFCOND: ".TFCOND"i
U_TYPE: ".TYPE"i
U_UNTIL: ".UNTIL"i
U_UNTILCXZ: ".UNTILCXZ"i
U_VARARG: ":VARARG"i
U_WHILE: ".WHILE"i
U_XALL: ".XALL"i
U_XCREF: ".XCREF"i
U_XLIST: ".XLIST"i
U_XMM: ".XMM"i
U_DOT: "."
C: "C"i
WS: /[\b\t\v\f\x1a\s]/
%ignore WS
