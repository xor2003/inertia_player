/* PLEASE DO NOT MODIFY THIS FILE. ALL CHANGES WILL BE LOST! LOOK FOR README FOR DETAILS */

/* 
 *
 */

#define _BITS 32
#define _PROTECTED_MODE 1

#include <curses.h>


#include "test-i386.h"
/*
extern "C"
{
dd iiprintf(dd);
}
*/
dd iiprintf(dd stackPointer);


int init(struct _STATE* _state)
{
X86_REGREF

_state->_indent=0;
ecx=0;
printf("Starting\n");
printf("Starting%d\n",1);
logDebug=fopen("test-i386.log","w");

/*
initscr();
resize_term(25, 80);
 cbreak(); // put keys directly to program
    noecho(); // do not echo
    keypad(stdscr, TRUE); // provide keypad buttons

    if (!has_colors())
    {
        printw("Unable to use colors");
    }
        start_color();

        realtocurs();
        curs_set(0);

        refresh();
*/
//  log_debug("~~~ heap_size=%d para=%d heap_ofs=%d", HEAP_SIZE, (HEAP_SIZE >> 4), seg_offset(heap) );
  /* We expect ram_top as Kbytes, so convert to paragraphs */
  mcb_init(seg_offset(heap), (HEAP_SIZE >> 4) - seg_offset(heap) - 1, MCB_LAST);

  R(MOV(ss, seg_offset(stack)));
#if _BITS == 32
  esp = ((dd)(db*)&m.stack[STACK_SIZE - 4]);
#else
  esp=0;
  sp = STACK_SIZE - 4;
  es=0;
 *(dw*)(raddr(0,0x408)) = 0x378; //LPT
#endif
R(MOV(cs, seg_offset(_text)));	// mov cs,_TEXT
R(MOV(ds, seg_offset(initcall)));	// mov cs,_TEXT
R(MOV(ss, seg_offset(initcall)));	// mov cs,_TEXT

        return(0);
}

void mainproc(_offsets _i, struct _STATE* _state){
X86_REGREF
__disp=_i;
if (__disp==kbegin) goto main;
else goto __dispatch_call;
 // Procedure exec_addl() start
__printf:
stackPointer = iiprintf(stackPointer);
	RET;
exec_addl:
#undef s0
#define s0 8	// 25 s0 = 8
#undef s1
#define s1 0x0C	// 26 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 27 iflags = 0x10
	R(PUSH(ebp));	// 30 push    ebp
	R(MOV(ebp, esp));	// 31 mov     ebp, esp
	R(PUSH(esi));	// 32 push    esi
	R(PUSH(ebx));	// 33 push    ebx
	R(SUB(esp, 0x20));	// 34 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 35 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 36 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 37 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 38 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 39 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 40 mov     edx, res
	R(MOV(eax, flags));	// 41 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 42 mov     [esp+14h], flags
	R(PUSH(eax));	// 43 push    eax
	R(POPF);	// 44 popf
	R(ADD(edx, ecx));	// 45 add     edx, ecx
	R(PUSHF);	// 46 pushf
	R(POP(eax));	// 47 pop     eax
#undef res
#define res edx	// 48 res = edx
#undef flags
#define flags eax	// 49 flags = eax
	R(AND(flags, 0x8D5));	// 50 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 51 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 52 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 53 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 54 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAddl)));	// 55 mov     dword ptr [esp+4], offset aAddl ; "addl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 56 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 57 call    printf
	R(ADD(esp, 0x20));	// 58 add     esp, 20h
	R(POP(ebx));	// 59 pop     ebx
	R(POP(esi));	// 60 pop     esi
	R(POP(ebp));	// 61 pop     ebp
	R(RETN);	// 62 retn
 // Procedure exec_addw() start
exec_addw:
#undef s0
#define s0 8	// 74 s0 = 8
#undef s1
#define s1 0x0C	// 75 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 76 iflags = 0x10
	R(PUSH(ebp));	// 79 push    ebp
	R(MOV(ebp, esp));	// 80 mov     ebp, esp
	R(PUSH(esi));	// 81 push    esi
	R(PUSH(ebx));	// 82 push    ebx
	R(SUB(esp, 0x20));	// 83 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 84 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 85 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 86 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 87 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 88 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 89 mov     edx, res
	R(MOV(eax, flags));	// 90 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 91 mov     [esp+14h], flags
	R(PUSH(eax));	// 92 push    eax
	R(POPF);	// 93 popf
	R(ADD(dx, cx));	// 94 add     dx, cx
	R(PUSHF);	// 95 pushf
	R(POP(eax));	// 96 pop     eax
#undef res
#define res edx	// 97 res = edx
#undef flags
#define flags eax	// 98 flags = eax
	R(AND(flags, 0x8D5));	// 99 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 100 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 101 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 102 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 103 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAddw)));	// 104 mov     dword ptr [esp+4], offset aAddw ; "addw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 105 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 106 call    printf
	R(ADD(esp, 0x20));	// 107 add     esp, 20h
	R(POP(ebx));	// 108 pop     ebx
	R(POP(esi));	// 109 pop     esi
	R(POP(ebp));	// 110 pop     ebp
	R(RETN);	// 111 retn
 // Procedure exec_addb() start
exec_addb:
#undef s0
#define s0 8	// 123 s0 = 8
#undef s1
#define s1 0x0C	// 124 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 125 iflags = 0x10
	R(PUSH(ebp));	// 128 push    ebp
	R(MOV(ebp, esp));	// 129 mov     ebp, esp
	R(PUSH(esi));	// 130 push    esi
	R(PUSH(ebx));	// 131 push    ebx
	R(SUB(esp, 0x20));	// 132 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 133 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 134 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 135 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 136 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 137 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 138 mov     edx, res
	R(MOV(eax, flags));	// 139 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 140 mov     [esp+14h], flags
	R(PUSH(eax));	// 141 push    eax
	R(POPF);	// 142 popf
	R(ADD(dl, cl));	// 143 add     dl, cl
	R(PUSHF);	// 144 pushf
	R(POP(eax));	// 145 pop     eax
#undef res
#define res edx	// 146 res = edx
#undef flags
#define flags eax	// 147 flags = eax
	R(AND(flags, 0x8D5));	// 148 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 149 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 150 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 151 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 152 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAddb)));	// 153 mov     dword ptr [esp+4], offset aAddb ; "addb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 154 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 155 call    printf
	R(ADD(esp, 0x20));	// 156 add     esp, 20h
	R(POP(ebx));	// 157 pop     ebx
	R(POP(esi));	// 158 pop     esi
	R(POP(ebp));	// 159 pop     ebp
	R(RETN);	// 160 retn
 // Procedure exec_add() start
exec_add:
#undef s0
#define s0 8	// 173 s0 = 8
#undef s1
#define s1 0x0C	// 174 s1 = 0x0C
	R(PUSH(ebp));	// 177 push    ebp
	R(MOV(ebp, esp));	// 178 mov     ebp, esp
	R(PUSH(esi));	// 179 push    esi
	R(PUSH(ebx));	// 180 push    ebx
	R(SUB(esp, 0x10));	// 181 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 182 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 183 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 184 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 185 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 186 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_addl));	// 187 call    exec_addl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 188 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 189 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 190 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_addw));	// 191 call    exec_addw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 192 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 193 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 194 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_addb));	// 195 call    exec_addb
	R(ADD(esp, 0x10));	// 196 add     esp, 10h
	R(POP(ebx));	// 197 pop     ebx
	R(POP(esi));	// 198 pop     esi
	R(POP(ebp));	// 199 pop     ebp
	R(RETN);	// 200 retn
 // Procedure test_add() start
test_add:
	R(PUSH(ebp));	// 212 push    ebp
	R(MOV(ebp, esp));	// 213 mov     ebp, esp
	R(SUB(esp, 0x18));	// 214 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 215 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 216 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_add));	// 217 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 218 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 219 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_add));	// 220 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 221 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 222 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_add));	// 223 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 224 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 225 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_add));	// 226 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 227 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 228 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_add));	// 229 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 230 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 231 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_add));	// 232 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 233 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 234 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_add));	// 235 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 236 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 237 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_add));	// 238 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 239 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 240 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_add));	// 241 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 242 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 243 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_add));	// 244 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 245 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 246 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_add));	// 247 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 248 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 249 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_add));	// 250 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 251 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 252 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_add));	// 253 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 254 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 255 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_add));	// 256 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 257 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 258 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_add));	// 259 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 260 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 261 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_add));	// 262 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 263 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 264 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_add));	// 265 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 266 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 267 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_add));	// 268 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 269 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 270 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_add));	// 271 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 272 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 273 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_add));	// 274 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 275 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 276 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_add));	// 277 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 278 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 279 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_add));	// 280 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 281 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 282 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_add));	// 283 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 284 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 285 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_add));	// 286 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 287 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 288 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_add));	// 289 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 290 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 291 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 292 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 293 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 294 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 295 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 296 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 297 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 298 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 299 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 300 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 301 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 302 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 303 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 304 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 305 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 306 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 307 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 308 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 309 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 310 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 311 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 312 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 313 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 314 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 315 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 316 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 317 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 318 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 319 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 320 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 321 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 322 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 323 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 324 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_add));	// 325 call    exec_add
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 326 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 327 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_add));	// 328 call    exec_add
	R(MOV(esp, ebp));
R(POP(ebp));	// 329 leave
	R(RETN);	// 330 retn
 // Procedure exec_subl() start
exec_subl:
#undef s0
#define s0 8	// 342 s0 = 8
#undef s1
#define s1 0x0C	// 343 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 344 iflags = 0x10
	R(PUSH(ebp));	// 347 push    ebp
	R(MOV(ebp, esp));	// 348 mov     ebp, esp
	R(PUSH(esi));	// 349 push    esi
	R(PUSH(ebx));	// 350 push    ebx
	R(SUB(esp, 0x20));	// 351 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 352 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 353 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 354 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 355 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 356 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 357 mov     edx, res
	R(MOV(eax, flags));	// 358 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 359 mov     [esp+14h], flags
	R(PUSH(eax));	// 360 push    eax
	R(POPF);	// 361 popf
	R(SUB(edx, ecx));	// 362 sub     edx, ecx
	R(PUSHF);	// 363 pushf
	R(POP(eax));	// 364 pop     eax
#undef res
#define res edx	// 365 res = edx
#undef flags
#define flags eax	// 366 flags = eax
	R(AND(flags, 0x8D5));	// 367 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 368 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 369 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 370 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 371 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSubl)));	// 372 mov     dword ptr [esp+4], offset aSubl ; "subl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 373 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 374 call    printf
	R(ADD(esp, 0x20));	// 375 add     esp, 20h
	R(POP(ebx));	// 376 pop     ebx
	R(POP(esi));	// 377 pop     esi
	R(POP(ebp));	// 378 pop     ebp
	R(RETN);	// 379 retn
 // Procedure exec_subw() start
exec_subw:
#undef s0
#define s0 8	// 391 s0 = 8
#undef s1
#define s1 0x0C	// 392 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 393 iflags = 0x10
	R(PUSH(ebp));	// 396 push    ebp
	R(MOV(ebp, esp));	// 397 mov     ebp, esp
	R(PUSH(esi));	// 398 push    esi
	R(PUSH(ebx));	// 399 push    ebx
	R(SUB(esp, 0x20));	// 400 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 401 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 402 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 403 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 404 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 405 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 406 mov     edx, res
	R(MOV(eax, flags));	// 407 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 408 mov     [esp+14h], flags
	R(PUSH(eax));	// 409 push    eax
	R(POPF);	// 410 popf
	R(SUB(dx, cx));	// 411 sub     dx, cx
	R(PUSHF);	// 412 pushf
	R(POP(eax));	// 413 pop     eax
#undef res
#define res edx	// 414 res = edx
#undef flags
#define flags eax	// 415 flags = eax
	R(AND(flags, 0x8D5));	// 416 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 417 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 418 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 419 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 420 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSubw)));	// 421 mov     dword ptr [esp+4], offset aSubw ; "subw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 422 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 423 call    printf
	R(ADD(esp, 0x20));	// 424 add     esp, 20h
	R(POP(ebx));	// 425 pop     ebx
	R(POP(esi));	// 426 pop     esi
	R(POP(ebp));	// 427 pop     ebp
	R(RETN);	// 428 retn
 // Procedure exec_subb() start
exec_subb:
#undef s0
#define s0 8	// 440 s0 = 8
#undef s1
#define s1 0x0C	// 441 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 442 iflags = 0x10
	R(PUSH(ebp));	// 445 push    ebp
	R(MOV(ebp, esp));	// 446 mov     ebp, esp
	R(PUSH(esi));	// 447 push    esi
	R(PUSH(ebx));	// 448 push    ebx
	R(SUB(esp, 0x20));	// 449 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 450 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 451 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 452 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 453 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 454 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 455 mov     edx, res
	R(MOV(eax, flags));	// 456 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 457 mov     [esp+14h], flags
	R(PUSH(eax));	// 458 push    eax
	R(POPF);	// 459 popf
	R(SUB(dl, cl));	// 460 sub     dl, cl
	R(PUSHF);	// 461 pushf
	R(POP(eax));	// 462 pop     eax
#undef res
#define res edx	// 463 res = edx
#undef flags
#define flags eax	// 464 flags = eax
	R(AND(flags, 0x8D5));	// 465 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 466 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 467 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 468 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 469 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSubb)));	// 470 mov     dword ptr [esp+4], offset aSubb ; "subb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 471 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 472 call    printf
	R(ADD(esp, 0x20));	// 473 add     esp, 20h
	R(POP(ebx));	// 474 pop     ebx
	R(POP(esi));	// 475 pop     esi
	R(POP(ebp));	// 476 pop     ebp
	R(RETN);	// 477 retn
 // Procedure exec_sub() start
exec_sub:
#undef s0
#define s0 8	// 490 s0 = 8
#undef s1
#define s1 0x0C	// 491 s1 = 0x0C
	R(PUSH(ebp));	// 494 push    ebp
	R(MOV(ebp, esp));	// 495 mov     ebp, esp
	R(PUSH(esi));	// 496 push    esi
	R(PUSH(ebx));	// 497 push    ebx
	R(SUB(esp, 0x10));	// 498 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 499 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 500 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 501 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 502 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 503 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_subl));	// 504 call    exec_subl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 505 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 506 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 507 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_subw));	// 508 call    exec_subw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 509 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 510 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 511 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_subb));	// 512 call    exec_subb
	R(ADD(esp, 0x10));	// 513 add     esp, 10h
	R(POP(ebx));	// 514 pop     ebx
	R(POP(esi));	// 515 pop     esi
	R(POP(ebp));	// 516 pop     ebp
	R(RETN);	// 517 retn
 // Procedure test_sub() start
test_sub:
	R(PUSH(ebp));	// 529 push    ebp
	R(MOV(ebp, esp));	// 530 mov     ebp, esp
	R(SUB(esp, 0x18));	// 531 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 532 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 533 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_sub));	// 534 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 535 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 536 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_sub));	// 537 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 538 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 539 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_sub));	// 540 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 541 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 542 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sub));	// 543 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 544 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 545 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sub));	// 546 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 547 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 548 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sub));	// 549 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 550 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 551 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sub));	// 552 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 553 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 554 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_sub));	// 555 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 556 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 557 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_sub));	// 558 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 559 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 560 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_sub));	// 561 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 562 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 563 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_sub));	// 564 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 565 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 566 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_sub));	// 567 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 568 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 569 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_sub));	// 570 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 571 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 572 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_sub));	// 573 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 574 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 575 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_sub));	// 576 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 577 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 578 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_sub));	// 579 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 580 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 581 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_sub));	// 582 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 583 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 584 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_sub));	// 585 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 586 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 587 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_sub));	// 588 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 589 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 590 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_sub));	// 591 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 592 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 593 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_sub));	// 594 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 595 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 596 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_sub));	// 597 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 598 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 599 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_sub));	// 600 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 601 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 602 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_sub));	// 603 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 604 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 605 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_sub));	// 606 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 607 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 608 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 609 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 610 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 611 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 612 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 613 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 614 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 615 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 616 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 617 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 618 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 619 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 620 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 621 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 622 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 623 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 624 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 625 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 626 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 627 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 628 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 629 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 630 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 631 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 632 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 633 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 634 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 635 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 636 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 637 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 638 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 639 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 640 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 641 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sub));	// 642 call    exec_sub
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 643 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 644 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_sub));	// 645 call    exec_sub
	R(MOV(esp, ebp));
R(POP(ebp));	// 646 leave
	R(RETN);	// 647 retn
 // Procedure exec_xorl() start
exec_xorl:
#undef s0
#define s0 8	// 659 s0 = 8
#undef s1
#define s1 0x0C	// 660 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 661 iflags = 0x10
	R(PUSH(ebp));	// 664 push    ebp
	R(MOV(ebp, esp));	// 665 mov     ebp, esp
	R(PUSH(esi));	// 666 push    esi
	R(PUSH(ebx));	// 667 push    ebx
	R(SUB(esp, 0x20));	// 668 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 669 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 670 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 671 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 672 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 673 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 674 mov     edx, res
	R(MOV(eax, flags));	// 675 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 676 mov     [esp+14h], flags
	R(PUSH(eax));	// 677 push    eax
	R(POPF);	// 678 popf
	R(XOR(edx, ecx));	// 679 xor     edx, ecx
	R(PUSHF);	// 680 pushf
	R(POP(eax));	// 681 pop     eax
#undef res
#define res edx	// 682 res = edx
#undef flags
#define flags eax	// 683 flags = eax
	R(AND(flags, 0x8D5));	// 684 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 685 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 686 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 687 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 688 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXorl)));	// 689 mov     dword ptr [esp+4], offset aXorl ; "xorl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 690 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 691 call    printf
	R(ADD(esp, 0x20));	// 692 add     esp, 20h
	R(POP(ebx));	// 693 pop     ebx
	R(POP(esi));	// 694 pop     esi
	R(POP(ebp));	// 695 pop     ebp
	R(RETN);	// 696 retn
 // Procedure exec_xorw() start
exec_xorw:
#undef s0
#define s0 8	// 708 s0 = 8
#undef s1
#define s1 0x0C	// 709 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 710 iflags = 0x10
	R(PUSH(ebp));	// 713 push    ebp
	R(MOV(ebp, esp));	// 714 mov     ebp, esp
	R(PUSH(esi));	// 715 push    esi
	R(PUSH(ebx));	// 716 push    ebx
	R(SUB(esp, 0x20));	// 717 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 718 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 719 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 720 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 721 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 722 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 723 mov     edx, res
	R(MOV(eax, flags));	// 724 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 725 mov     [esp+14h], flags
	R(PUSH(eax));	// 726 push    eax
	R(POPF);	// 727 popf
	R(XOR(dx, cx));	// 728 xor     dx, cx
	R(PUSHF);	// 729 pushf
	R(POP(eax));	// 730 pop     eax
#undef res
#define res edx	// 731 res = edx
#undef flags
#define flags eax	// 732 flags = eax
	R(AND(flags, 0x8D5));	// 733 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 734 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 735 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 736 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 737 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXorw)));	// 738 mov     dword ptr [esp+4], offset aXorw ; "xorw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 739 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 740 call    printf
	R(ADD(esp, 0x20));	// 741 add     esp, 20h
	R(POP(ebx));	// 742 pop     ebx
	R(POP(esi));	// 743 pop     esi
	R(POP(ebp));	// 744 pop     ebp
	R(RETN);	// 745 retn
 // Procedure exec_xorb() start
exec_xorb:
#undef s0
#define s0 8	// 757 s0 = 8
#undef s1
#define s1 0x0C	// 758 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 759 iflags = 0x10
	R(PUSH(ebp));	// 762 push    ebp
	R(MOV(ebp, esp));	// 763 mov     ebp, esp
	R(PUSH(esi));	// 764 push    esi
	R(PUSH(ebx));	// 765 push    ebx
	R(SUB(esp, 0x20));	// 766 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 767 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 768 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 769 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 770 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 771 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 772 mov     edx, res
	R(MOV(eax, flags));	// 773 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 774 mov     [esp+14h], flags
	R(PUSH(eax));	// 775 push    eax
	R(POPF);	// 776 popf
	R(XOR(dl, cl));	// 777 xor     dl, cl
	R(PUSHF);	// 778 pushf
	R(POP(eax));	// 779 pop     eax
#undef res
#define res edx	// 780 res = edx
#undef flags
#define flags eax	// 781 flags = eax
	R(AND(flags, 0x8D5));	// 782 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 783 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 784 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 785 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 786 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXorb)));	// 787 mov     dword ptr [esp+4], offset aXorb ; "xorb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 788 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 789 call    printf
	R(ADD(esp, 0x20));	// 790 add     esp, 20h
	R(POP(ebx));	// 791 pop     ebx
	R(POP(esi));	// 792 pop     esi
	R(POP(ebp));	// 793 pop     ebp
	R(RETN);	// 794 retn
 // Procedure exec_xor() start
exec_xor:
#undef s0
#define s0 8	// 807 s0 = 8
#undef s1
#define s1 0x0C	// 808 s1 = 0x0C
	R(PUSH(ebp));	// 811 push    ebp
	R(MOV(ebp, esp));	// 812 mov     ebp, esp
	R(PUSH(esi));	// 813 push    esi
	R(PUSH(ebx));	// 814 push    ebx
	R(SUB(esp, 0x10));	// 815 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 816 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 817 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 818 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 819 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 820 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_xorl));	// 821 call    exec_xorl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 822 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 823 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 824 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_xorw));	// 825 call    exec_xorw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 826 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 827 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 828 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_xorb));	// 829 call    exec_xorb
	R(ADD(esp, 0x10));	// 830 add     esp, 10h
	R(POP(ebx));	// 831 pop     ebx
	R(POP(esi));	// 832 pop     esi
	R(POP(ebp));	// 833 pop     ebp
	R(RETN);	// 834 retn
 // Procedure test_xor() start
test_xor:
	R(PUSH(ebp));	// 846 push    ebp
	R(MOV(ebp, esp));	// 847 mov     ebp, esp
	R(SUB(esp, 0x18));	// 848 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 849 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 850 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_xor));	// 851 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 852 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 853 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_xor));	// 854 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 855 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 856 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_xor));	// 857 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 858 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 859 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_xor));	// 860 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 861 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 862 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_xor));	// 863 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 864 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 865 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_xor));	// 866 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 867 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 868 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_xor));	// 869 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 870 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 871 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_xor));	// 872 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 873 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 874 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_xor));	// 875 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 876 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 877 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_xor));	// 878 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 879 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 880 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_xor));	// 881 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 882 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 883 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_xor));	// 884 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 885 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 886 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_xor));	// 887 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 888 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 889 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_xor));	// 890 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 891 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 892 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_xor));	// 893 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 894 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 895 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_xor));	// 896 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 897 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 898 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_xor));	// 899 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 900 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 901 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_xor));	// 902 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 903 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 904 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_xor));	// 905 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 906 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 907 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_xor));	// 908 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 909 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 910 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_xor));	// 911 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 912 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 913 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_xor));	// 914 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 915 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 916 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_xor));	// 917 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 918 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 919 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_xor));	// 920 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 921 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 922 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_xor));	// 923 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 924 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 925 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 926 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 927 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 928 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 929 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 930 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 931 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 932 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 933 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 934 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 935 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 936 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 937 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 938 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 939 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 940 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 941 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 942 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 943 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 944 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 945 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 946 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 947 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 948 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 949 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 950 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 951 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 952 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 953 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 954 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 955 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 956 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 957 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 958 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_xor));	// 959 call    exec_xor
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 960 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 961 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_xor));	// 962 call    exec_xor
	R(MOV(esp, ebp));
R(POP(ebp));	// 963 leave
	R(RETN);	// 964 retn
 // Procedure exec_andl() start
exec_andl:
#undef s0
#define s0 8	// 976 s0 = 8
#undef s1
#define s1 0x0C	// 977 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 978 iflags = 0x10
	R(PUSH(ebp));	// 981 push    ebp
	R(MOV(ebp, esp));	// 982 mov     ebp, esp
	R(PUSH(esi));	// 983 push    esi
	R(PUSH(ebx));	// 984 push    ebx
	R(SUB(esp, 0x20));	// 985 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 986 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 987 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 988 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 989 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 990 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 991 mov     edx, res
	R(MOV(eax, flags));	// 992 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 993 mov     [esp+14h], flags
	R(PUSH(eax));	// 994 push    eax
	R(POPF);	// 995 popf
	R(AND(edx, ecx));	// 996 and     edx, ecx
	R(PUSHF);	// 997 pushf
	R(POP(eax));	// 998 pop     eax
#undef res
#define res edx	// 999 res = edx
#undef flags
#define flags eax	// 1000 flags = eax
	R(AND(flags, 0x8D5));	// 1001 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1002 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1003 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1004 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1005 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAndl)));	// 1006 mov     dword ptr [esp+4], offset aAndl ; "andl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1007 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1008 call    printf
	R(ADD(esp, 0x20));	// 1009 add     esp, 20h
	R(POP(ebx));	// 1010 pop     ebx
	R(POP(esi));	// 1011 pop     esi
	R(POP(ebp));	// 1012 pop     ebp
	R(RETN);	// 1013 retn
 // Procedure exec_andw() start
exec_andw:
#undef s0
#define s0 8	// 1025 s0 = 8
#undef s1
#define s1 0x0C	// 1026 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1027 iflags = 0x10
	R(PUSH(ebp));	// 1030 push    ebp
	R(MOV(ebp, esp));	// 1031 mov     ebp, esp
	R(PUSH(esi));	// 1032 push    esi
	R(PUSH(ebx));	// 1033 push    ebx
	R(SUB(esp, 0x20));	// 1034 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1035 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1036 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1037 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1038 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1039 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1040 mov     edx, res
	R(MOV(eax, flags));	// 1041 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1042 mov     [esp+14h], flags
	R(PUSH(eax));	// 1043 push    eax
	R(POPF);	// 1044 popf
	R(AND(dx, cx));	// 1045 and     dx, cx
	R(PUSHF);	// 1046 pushf
	R(POP(eax));	// 1047 pop     eax
#undef res
#define res edx	// 1048 res = edx
#undef flags
#define flags eax	// 1049 flags = eax
	R(AND(flags, 0x8D5));	// 1050 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1051 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1052 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1053 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1054 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAndw)));	// 1055 mov     dword ptr [esp+4], offset aAndw ; "andw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1056 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1057 call    printf
	R(ADD(esp, 0x20));	// 1058 add     esp, 20h
	R(POP(ebx));	// 1059 pop     ebx
	R(POP(esi));	// 1060 pop     esi
	R(POP(ebp));	// 1061 pop     ebp
	R(RETN);	// 1062 retn
 // Procedure exec_andb() start
exec_andb:
#undef s0
#define s0 8	// 1074 s0 = 8
#undef s1
#define s1 0x0C	// 1075 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1076 iflags = 0x10
	R(PUSH(ebp));	// 1079 push    ebp
	R(MOV(ebp, esp));	// 1080 mov     ebp, esp
	R(PUSH(esi));	// 1081 push    esi
	R(PUSH(ebx));	// 1082 push    ebx
	R(SUB(esp, 0x20));	// 1083 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1084 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1085 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1086 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1087 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1088 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1089 mov     edx, res
	R(MOV(eax, flags));	// 1090 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1091 mov     [esp+14h], flags
	R(PUSH(eax));	// 1092 push    eax
	R(POPF);	// 1093 popf
	R(AND(dl, cl));	// 1094 and     dl, cl
	R(PUSHF);	// 1095 pushf
	R(POP(eax));	// 1096 pop     eax
#undef res
#define res edx	// 1097 res = edx
#undef flags
#define flags eax	// 1098 flags = eax
	R(AND(flags, 0x8D5));	// 1099 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1100 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1101 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1102 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1103 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAndb)));	// 1104 mov     dword ptr [esp+4], offset aAndb ; "andb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1105 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1106 call    printf
	R(ADD(esp, 0x20));	// 1107 add     esp, 20h
	R(POP(ebx));	// 1108 pop     ebx
	R(POP(esi));	// 1109 pop     esi
	R(POP(ebp));	// 1110 pop     ebp
	R(RETN);	// 1111 retn
 // Procedure exec_and() start
exec_and:
#undef s0
#define s0 8	// 1124 s0 = 8
#undef s1
#define s1 0x0C	// 1125 s1 = 0x0C
	R(PUSH(ebp));	// 1128 push    ebp
	R(MOV(ebp, esp));	// 1129 mov     ebp, esp
	R(PUSH(esi));	// 1130 push    esi
	R(PUSH(ebx));	// 1131 push    ebx
	R(SUB(esp, 0x10));	// 1132 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1133 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 1134 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1135 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1136 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1137 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_andl));	// 1138 call    exec_andl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1139 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1140 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1141 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_andw));	// 1142 call    exec_andw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1143 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1144 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1145 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_andb));	// 1146 call    exec_andb
	R(ADD(esp, 0x10));	// 1147 add     esp, 10h
	R(POP(ebx));	// 1148 pop     ebx
	R(POP(esi));	// 1149 pop     esi
	R(POP(ebp));	// 1150 pop     ebp
	R(RETN);	// 1151 retn
 // Procedure test_and() start
test_and:
	R(PUSH(ebp));	// 1163 push    ebp
	R(MOV(ebp, esp));	// 1164 mov     ebp, esp
	R(SUB(esp, 0x18));	// 1165 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 1166 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 1167 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_and));	// 1168 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 1169 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 1170 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_and));	// 1171 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 1172 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 1173 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_and));	// 1174 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1175 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1176 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_and));	// 1177 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1178 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1179 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_and));	// 1180 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1181 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1182 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_and));	// 1183 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 1184 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1185 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_and));	// 1186 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1187 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1188 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_and));	// 1189 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1190 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1191 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_and));	// 1192 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1193 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1194 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_and));	// 1195 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1196 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1197 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_and));	// 1198 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1199 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1200 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_and));	// 1201 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1202 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1203 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_and));	// 1204 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1205 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1206 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_and));	// 1207 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1208 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1209 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_and));	// 1210 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1211 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1212 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_and));	// 1213 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1214 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1215 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_and));	// 1216 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1217 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1218 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_and));	// 1219 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1220 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1221 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_and));	// 1222 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1223 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1224 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_and));	// 1225 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1226 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1227 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_and));	// 1228 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1229 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1230 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_and));	// 1231 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1232 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1233 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_and));	// 1234 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1235 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1236 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_and));	// 1237 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1238 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1239 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_and));	// 1240 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1241 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1242 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1243 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1244 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1245 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1246 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1247 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1248 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1249 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 1250 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1251 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1252 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 1253 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1254 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1255 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 1256 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1257 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1258 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 1259 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1260 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1261 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 1262 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1263 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1264 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 1265 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1266 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1267 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 1268 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1269 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1270 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 1271 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1272 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1273 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 1274 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1275 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_and));	// 1276 call    exec_and
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1277 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 1278 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_and));	// 1279 call    exec_and
	R(MOV(esp, ebp));
R(POP(ebp));	// 1280 leave
	R(RETN);	// 1281 retn
 // Procedure exec_orl() start
exec_orl:
#undef s0
#define s0 8	// 1293 s0 = 8
#undef s1
#define s1 0x0C	// 1294 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1295 iflags = 0x10
	R(PUSH(ebp));	// 1298 push    ebp
	R(MOV(ebp, esp));	// 1299 mov     ebp, esp
	R(PUSH(esi));	// 1300 push    esi
	R(PUSH(ebx));	// 1301 push    ebx
	R(SUB(esp, 0x20));	// 1302 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1303 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1304 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1305 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1306 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1307 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1308 mov     edx, res
	R(MOV(eax, flags));	// 1309 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1310 mov     [esp+14h], flags
	R(PUSH(eax));	// 1311 push    eax
	R(POPF);	// 1312 popf
	R(OR(edx, ecx));	// 1313 or      edx, ecx
	R(PUSHF);	// 1314 pushf
	R(POP(eax));	// 1315 pop     eax
#undef res
#define res edx	// 1316 res = edx
#undef flags
#define flags eax	// 1317 flags = eax
	R(AND(flags, 0x8D5));	// 1318 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1319 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1320 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1321 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1322 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aOrl)));	// 1323 mov     dword ptr [esp+4], offset aOrl ; "orl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1324 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1325 call    printf
	R(ADD(esp, 0x20));	// 1326 add     esp, 20h
	R(POP(ebx));	// 1327 pop     ebx
	R(POP(esi));	// 1328 pop     esi
	R(POP(ebp));	// 1329 pop     ebp
	R(RETN);	// 1330 retn
 // Procedure exec_orw() start
exec_orw:
#undef s0
#define s0 8	// 1342 s0 = 8
#undef s1
#define s1 0x0C	// 1343 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1344 iflags = 0x10
	R(PUSH(ebp));	// 1347 push    ebp
	R(MOV(ebp, esp));	// 1348 mov     ebp, esp
	R(PUSH(esi));	// 1349 push    esi
	R(PUSH(ebx));	// 1350 push    ebx
	R(SUB(esp, 0x20));	// 1351 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1352 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1353 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1354 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1355 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1356 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1357 mov     edx, res
	R(MOV(eax, flags));	// 1358 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1359 mov     [esp+14h], flags
	R(PUSH(eax));	// 1360 push    eax
	R(POPF);	// 1361 popf
	R(OR(dx, cx));	// 1362 or      dx, cx
	R(PUSHF);	// 1363 pushf
	R(POP(eax));	// 1364 pop     eax
#undef res
#define res edx	// 1365 res = edx
#undef flags
#define flags eax	// 1366 flags = eax
	R(AND(flags, 0x8D5));	// 1367 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1368 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1369 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1370 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1371 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aOrw)));	// 1372 mov     dword ptr [esp+4], offset aOrw ; "orw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1373 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1374 call    printf
	R(ADD(esp, 0x20));	// 1375 add     esp, 20h
	R(POP(ebx));	// 1376 pop     ebx
	R(POP(esi));	// 1377 pop     esi
	R(POP(ebp));	// 1378 pop     ebp
	R(RETN);	// 1379 retn
 // Procedure exec_orb() start
exec_orb:
#undef s0
#define s0 8	// 1391 s0 = 8
#undef s1
#define s1 0x0C	// 1392 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1393 iflags = 0x10
	R(PUSH(ebp));	// 1396 push    ebp
	R(MOV(ebp, esp));	// 1397 mov     ebp, esp
	R(PUSH(esi));	// 1398 push    esi
	R(PUSH(ebx));	// 1399 push    ebx
	R(SUB(esp, 0x20));	// 1400 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1401 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1402 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1403 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1404 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1405 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1406 mov     edx, res
	R(MOV(eax, flags));	// 1407 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1408 mov     [esp+14h], flags
	R(PUSH(eax));	// 1409 push    eax
	R(POPF);	// 1410 popf
	R(OR(dl, cl));	// 1411 or      dl, cl
	R(PUSHF);	// 1412 pushf
	R(POP(eax));	// 1413 pop     eax
#undef res
#define res edx	// 1414 res = edx
#undef flags
#define flags eax	// 1415 flags = eax
	R(AND(flags, 0x8D5));	// 1416 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1417 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1418 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1419 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1420 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aOrb)));	// 1421 mov     dword ptr [esp+4], offset aOrb ; "orb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1422 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1423 call    printf
	R(ADD(esp, 0x20));	// 1424 add     esp, 20h
	R(POP(ebx));	// 1425 pop     ebx
	R(POP(esi));	// 1426 pop     esi
	R(POP(ebp));	// 1427 pop     ebp
	R(RETN);	// 1428 retn
 // Procedure exec_or() start
exec_or:
#undef s0
#define s0 8	// 1441 s0 = 8
#undef s1
#define s1 0x0C	// 1442 s1 = 0x0C
	R(PUSH(ebp));	// 1445 push    ebp
	R(MOV(ebp, esp));	// 1446 mov     ebp, esp
	R(PUSH(esi));	// 1447 push    esi
	R(PUSH(ebx));	// 1448 push    ebx
	R(SUB(esp, 0x10));	// 1449 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1450 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 1451 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1452 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1453 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1454 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_orl));	// 1455 call    exec_orl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1456 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1457 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1458 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_orw));	// 1459 call    exec_orw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1460 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1461 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1462 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_orb));	// 1463 call    exec_orb
	R(ADD(esp, 0x10));	// 1464 add     esp, 10h
	R(POP(ebx));	// 1465 pop     ebx
	R(POP(esi));	// 1466 pop     esi
	R(POP(ebp));	// 1467 pop     ebp
	R(RETN);	// 1468 retn
 // Procedure test_or() start
test_or:
	R(PUSH(ebp));	// 1480 push    ebp
	R(MOV(ebp, esp));	// 1481 mov     ebp, esp
	R(SUB(esp, 0x18));	// 1482 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 1483 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 1484 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_or));	// 1485 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 1486 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 1487 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_or));	// 1488 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 1489 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 1490 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_or));	// 1491 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1492 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1493 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_or));	// 1494 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1495 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1496 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_or));	// 1497 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1498 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1499 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_or));	// 1500 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 1501 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1502 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_or));	// 1503 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1504 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1505 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_or));	// 1506 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1507 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1508 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_or));	// 1509 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1510 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1511 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_or));	// 1512 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1513 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1514 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_or));	// 1515 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1516 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1517 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_or));	// 1518 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1519 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1520 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_or));	// 1521 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1522 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1523 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_or));	// 1524 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1525 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1526 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_or));	// 1527 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1528 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1529 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_or));	// 1530 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1531 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1532 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_or));	// 1533 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1534 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1535 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_or));	// 1536 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1537 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1538 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_or));	// 1539 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1540 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1541 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_or));	// 1542 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1543 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1544 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_or));	// 1545 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1546 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1547 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_or));	// 1548 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1549 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1550 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_or));	// 1551 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1552 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1553 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_or));	// 1554 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1555 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1556 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_or));	// 1557 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1558 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1559 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1560 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1561 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1562 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1563 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1564 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1565 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1566 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 1567 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1568 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1569 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 1570 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1571 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1572 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 1573 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1574 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1575 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 1576 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1577 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1578 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 1579 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1580 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1581 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 1582 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1583 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1584 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 1585 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1586 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1587 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 1588 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1589 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1590 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 1591 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1592 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_or));	// 1593 call    exec_or
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1594 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 1595 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_or));	// 1596 call    exec_or
	R(MOV(esp, ebp));
R(POP(ebp));	// 1597 leave
	R(RETN);	// 1598 retn
 // Procedure exec_cmpl() start
exec_cmpl:
#undef s0
#define s0 8	// 1610 s0 = 8
#undef s1
#define s1 0x0C	// 1611 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1612 iflags = 0x10
	R(PUSH(ebp));	// 1615 push    ebp
	R(MOV(ebp, esp));	// 1616 mov     ebp, esp
	R(PUSH(esi));	// 1617 push    esi
	R(PUSH(ebx));	// 1618 push    ebx
	R(SUB(esp, 0x20));	// 1619 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1620 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1621 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1622 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1623 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1624 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1625 mov     edx, res
	R(MOV(eax, flags));	// 1626 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1627 mov     [esp+14h], flags
	R(PUSH(eax));	// 1628 push    eax
	R(POPF);	// 1629 popf
	R(CMP(edx, ecx));	// 1630 cmp     edx, ecx
	R(PUSHF);	// 1631 pushf
	R(POP(eax));	// 1632 pop     eax
#undef res
#define res edx	// 1633 res = edx
#undef flags
#define flags eax	// 1634 flags = eax
	R(AND(flags, 0x8D5));	// 1635 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1636 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1637 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1638 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1639 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpl)));	// 1640 mov     dword ptr [esp+4], offset aCmpl ; "cmpl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1641 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1642 call    printf
	R(ADD(esp, 0x20));	// 1643 add     esp, 20h
	R(POP(ebx));	// 1644 pop     ebx
	R(POP(esi));	// 1645 pop     esi
	R(POP(ebp));	// 1646 pop     ebp
	R(RETN);	// 1647 retn
 // Procedure exec_cmpw() start
exec_cmpw:
#undef s0
#define s0 8	// 1659 s0 = 8
#undef s1
#define s1 0x0C	// 1660 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1661 iflags = 0x10
	R(PUSH(ebp));	// 1664 push    ebp
	R(MOV(ebp, esp));	// 1665 mov     ebp, esp
	R(PUSH(esi));	// 1666 push    esi
	R(PUSH(ebx));	// 1667 push    ebx
	R(SUB(esp, 0x20));	// 1668 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1669 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1670 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1671 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1672 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1673 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1674 mov     edx, res
	R(MOV(eax, flags));	// 1675 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1676 mov     [esp+14h], flags
	R(PUSH(eax));	// 1677 push    eax
	R(POPF);	// 1678 popf
	R(CMP(dx, cx));	// 1679 cmp     dx, cx
	R(PUSHF);	// 1680 pushf
	R(POP(eax));	// 1681 pop     eax
#undef res
#define res edx	// 1682 res = edx
#undef flags
#define flags eax	// 1683 flags = eax
	R(AND(flags, 0x8D5));	// 1684 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1685 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1686 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1687 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1688 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpw)));	// 1689 mov     dword ptr [esp+4], offset aCmpw ; "cmpw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1690 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1691 call    printf
	R(ADD(esp, 0x20));	// 1692 add     esp, 20h
	R(POP(ebx));	// 1693 pop     ebx
	R(POP(esi));	// 1694 pop     esi
	R(POP(ebp));	// 1695 pop     ebp
	R(RETN);	// 1696 retn
 // Procedure exec_cmpb() start
exec_cmpb:
#undef s0
#define s0 8	// 1708 s0 = 8
#undef s1
#define s1 0x0C	// 1709 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1710 iflags = 0x10
	R(PUSH(ebp));	// 1713 push    ebp
	R(MOV(ebp, esp));	// 1714 mov     ebp, esp
	R(PUSH(esi));	// 1715 push    esi
	R(PUSH(ebx));	// 1716 push    ebx
	R(SUB(esp, 0x20));	// 1717 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1718 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1719 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1720 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1721 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1722 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1723 mov     edx, res
	R(MOV(eax, flags));	// 1724 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1725 mov     [esp+14h], flags
	R(PUSH(eax));	// 1726 push    eax
	R(POPF);	// 1727 popf
	R(CMP(dl, cl));	// 1728 cmp     dl, cl
	R(PUSHF);	// 1729 pushf
	R(POP(eax));	// 1730 pop     eax
#undef res
#define res edx	// 1731 res = edx
#undef flags
#define flags eax	// 1732 flags = eax
	R(AND(flags, 0x8D5));	// 1733 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1734 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1735 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1736 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1737 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpb)));	// 1738 mov     dword ptr [esp+4], offset aCmpb ; "cmpb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1739 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1740 call    printf
	R(ADD(esp, 0x20));	// 1741 add     esp, 20h
	R(POP(ebx));	// 1742 pop     ebx
	R(POP(esi));	// 1743 pop     esi
	R(POP(ebp));	// 1744 pop     ebp
	R(RETN);	// 1745 retn
 // Procedure exec_cmp() start
exec_cmp:
#undef s0
#define s0 8	// 1758 s0 = 8
#undef s1
#define s1 0x0C	// 1759 s1 = 0x0C
	R(PUSH(ebp));	// 1762 push    ebp
	R(MOV(ebp, esp));	// 1763 mov     ebp, esp
	R(PUSH(esi));	// 1764 push    esi
	R(PUSH(ebx));	// 1765 push    ebx
	R(SUB(esp, 0x10));	// 1766 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1767 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 1768 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1769 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1770 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1771 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_cmpl));	// 1772 call    exec_cmpl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1773 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1774 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1775 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_cmpw));	// 1776 call    exec_cmpw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 1777 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 1778 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 1779 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_cmpb));	// 1780 call    exec_cmpb
	R(ADD(esp, 0x10));	// 1781 add     esp, 10h
	R(POP(ebx));	// 1782 pop     ebx
	R(POP(esi));	// 1783 pop     esi
	R(POP(ebp));	// 1784 pop     ebp
	R(RETN);	// 1785 retn
 // Procedure test_cmp() start
test_cmp:
	R(PUSH(ebp));	// 1797 push    ebp
	R(MOV(ebp, esp));	// 1798 mov     ebp, esp
	R(SUB(esp, 0x18));	// 1799 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 1800 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 1801 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_cmp));	// 1802 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 1803 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 1804 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_cmp));	// 1805 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 1806 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 1807 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_cmp));	// 1808 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1809 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1810 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_cmp));	// 1811 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1812 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1813 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_cmp));	// 1814 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1815 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1816 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_cmp));	// 1817 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 1818 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 1819 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_cmp));	// 1820 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1821 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1822 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_cmp));	// 1823 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1824 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1825 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_cmp));	// 1826 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1827 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 1828 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_cmp));	// 1829 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1830 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1831 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_cmp));	// 1832 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1833 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1834 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_cmp));	// 1835 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1836 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 1837 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_cmp));	// 1838 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1839 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1840 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_cmp));	// 1841 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1842 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1843 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_cmp));	// 1844 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1845 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 1846 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_cmp));	// 1847 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1848 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1849 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_cmp));	// 1850 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1851 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1852 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_cmp));	// 1853 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1854 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 1855 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_cmp));	// 1856 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1857 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1858 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_cmp));	// 1859 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1860 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1861 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_cmp));	// 1862 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1863 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 1864 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_cmp));	// 1865 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1866 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1867 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_cmp));	// 1868 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1869 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1870 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_cmp));	// 1871 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 1872 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 1873 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_cmp));	// 1874 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 1875 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1876 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1877 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 1878 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1879 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1880 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1881 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1882 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1883 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 1884 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1885 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1886 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 1887 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1888 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1889 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 1890 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1891 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1892 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 1893 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1894 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1895 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 1896 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1897 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1898 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 1899 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1900 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1901 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 1902 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1903 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1904 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 1905 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1906 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1907 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 1908 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 1909 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_cmp));	// 1910 call    exec_cmp
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 1911 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 1912 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_cmp));	// 1913 call    exec_cmp
	R(MOV(esp, ebp));
R(POP(ebp));	// 1914 leave
	R(RETN);	// 1915 retn
 // Procedure exec_adcl() start
exec_adcl:
#undef s0
#define s0 8	// 1928 s0 = 8
#undef s1
#define s1 0x0C	// 1929 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1930 iflags = 0x10
	R(PUSH(ebp));	// 1933 push    ebp
	R(MOV(ebp, esp));	// 1934 mov     ebp, esp
	R(PUSH(esi));	// 1935 push    esi
	R(PUSH(ebx));	// 1936 push    ebx
	R(SUB(esp, 0x20));	// 1937 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1938 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1939 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1940 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1941 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1942 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1943 mov     edx, res
	R(MOV(eax, flags));	// 1944 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1945 mov     [esp+14h], flags
	R(PUSH(eax));	// 1946 push    eax
	R(POPF);	// 1947 popf
	R(ADC(edx, ecx));	// 1948 adc     edx, ecx
	R(PUSHF);	// 1949 pushf
	R(POP(eax));	// 1950 pop     eax
#undef res
#define res edx	// 1951 res = edx
#undef flags
#define flags eax	// 1952 flags = eax
	R(AND(flags, 0x8D5));	// 1953 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 1954 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 1955 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 1956 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 1957 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAdcl)));	// 1958 mov     dword ptr [esp+4], offset aAdcl ; "adcl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 1959 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 1960 call    printf
	R(ADD(esp, 0x20));	// 1961 add     esp, 20h
	R(POP(ebx));	// 1962 pop     ebx
	R(POP(esi));	// 1963 pop     esi
	R(POP(ebp));	// 1964 pop     ebp
	R(RETN);	// 1965 retn
 // Procedure exec_adcw() start
exec_adcw:
#undef s0
#define s0 8	// 1978 s0 = 8
#undef s1
#define s1 0x0C	// 1979 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 1980 iflags = 0x10
	R(PUSH(ebp));	// 1983 push    ebp
	R(MOV(ebp, esp));	// 1984 mov     ebp, esp
	R(PUSH(esi));	// 1985 push    esi
	R(PUSH(ebx));	// 1986 push    ebx
	R(SUB(esp, 0x20));	// 1987 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 1988 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 1989 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 1990 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 1991 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 1992 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 1993 mov     edx, res
	R(MOV(eax, flags));	// 1994 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 1995 mov     [esp+14h], flags
	R(PUSH(eax));	// 1996 push    eax
	R(POPF);	// 1997 popf
	R(ADC(dx, cx));	// 1998 adc     dx, cx
	R(PUSHF);	// 1999 pushf
	R(POP(eax));	// 2000 pop     eax
#undef res
#define res edx	// 2001 res = edx
#undef flags
#define flags eax	// 2002 flags = eax
	R(AND(flags, 0x8D5));	// 2003 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 2004 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 2005 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 2006 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 2007 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAdcw)));	// 2008 mov     dword ptr [esp+4], offset aAdcw ; "adcw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 2009 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2010 call    printf
	R(ADD(esp, 0x20));	// 2011 add     esp, 20h
	R(POP(ebx));	// 2012 pop     ebx
	R(POP(esi));	// 2013 pop     esi
	R(POP(ebp));	// 2014 pop     ebp
	R(RETN);	// 2015 retn
 // Procedure exec_adcb() start
exec_adcb:
#undef s0
#define s0 8	// 2028 s0 = 8
#undef s1
#define s1 0x0C	// 2029 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2030 iflags = 0x10
	R(PUSH(ebp));	// 2033 push    ebp
	R(MOV(ebp, esp));	// 2034 mov     ebp, esp
	R(PUSH(esi));	// 2035 push    esi
	R(PUSH(ebx));	// 2036 push    ebx
	R(SUB(esp, 0x20));	// 2037 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 2038 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 2039 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 2040 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 2041 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 2042 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 2043 mov     edx, res
	R(MOV(eax, flags));	// 2044 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 2045 mov     [esp+14h], flags
	R(PUSH(eax));	// 2046 push    eax
	R(POPF);	// 2047 popf
	R(ADC(dl, cl));	// 2048 adc     dl, cl
	R(PUSHF);	// 2049 pushf
	R(POP(eax));	// 2050 pop     eax
#undef res
#define res edx	// 2051 res = edx
#undef flags
#define flags eax	// 2052 flags = eax
	R(AND(flags, 0x8D5));	// 2053 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 2054 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 2055 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 2056 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 2057 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAdcb)));	// 2058 mov     dword ptr [esp+4], offset aAdcb ; "adcb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 2059 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2060 call    printf
	R(ADD(esp, 0x20));	// 2061 add     esp, 20h
	R(POP(ebx));	// 2062 pop     ebx
	R(POP(esi));	// 2063 pop     esi
	R(POP(ebp));	// 2064 pop     ebp
	R(RETN);	// 2065 retn
 // Procedure exec_adc() start
exec_adc:
#undef s0
#define s0 8	// 2078 s0 = 8
#undef s1
#define s1 0x0C	// 2079 s1 = 0x0C
	R(PUSH(ebp));	// 2082 push    ebp
	R(MOV(ebp, esp));	// 2083 mov     ebp, esp
	R(PUSH(esi));	// 2084 push    esi
	R(PUSH(ebx));	// 2085 push    ebx
	R(SUB(esp, 0x10));	// 2086 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 2087 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 2088 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2089 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2090 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2091 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_adcl));	// 2092 call    exec_adcl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2093 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2094 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2095 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_adcw));	// 2096 call    exec_adcw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2097 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2098 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2099 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_adcb));	// 2100 call    exec_adcb
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2101 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2102 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2103 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_adcl));	// 2104 call    exec_adcl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2105 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2106 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2107 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_adcw));	// 2108 call    exec_adcw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2109 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2110 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2111 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_adcb));	// 2112 call    exec_adcb
	R(ADD(esp, 0x10));	// 2113 add     esp, 10h
	R(POP(ebx));	// 2114 pop     ebx
	R(POP(esi));	// 2115 pop     esi
	R(POP(ebp));	// 2116 pop     ebp
	R(RETN);	// 2117 retn
 // Procedure test_adc() start
test_adc:
	R(PUSH(ebp));	// 2129 push    ebp
	R(MOV(ebp, esp));	// 2130 mov     ebp, esp
	R(SUB(esp, 0x18));	// 2131 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 2132 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 2133 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_adc));	// 2134 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 2135 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 2136 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_adc));	// 2137 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 2138 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 2139 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_adc));	// 2140 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2141 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2142 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_adc));	// 2143 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2144 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2145 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_adc));	// 2146 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2147 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2148 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_adc));	// 2149 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 2150 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2151 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_adc));	// 2152 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2153 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2154 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_adc));	// 2155 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2156 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2157 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_adc));	// 2158 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2159 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2160 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_adc));	// 2161 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2162 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2163 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_adc));	// 2164 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2165 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2166 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_adc));	// 2167 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2168 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2169 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_adc));	// 2170 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2171 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2172 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_adc));	// 2173 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2174 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2175 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_adc));	// 2176 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2177 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2178 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_adc));	// 2179 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2180 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2181 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_adc));	// 2182 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2183 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2184 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_adc));	// 2185 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2186 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2187 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_adc));	// 2188 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2189 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2190 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_adc));	// 2191 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2192 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2193 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_adc));	// 2194 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2195 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2196 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_adc));	// 2197 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2198 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2199 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_adc));	// 2200 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2201 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2202 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_adc));	// 2203 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2204 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2205 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_adc));	// 2206 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2207 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2208 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2209 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2210 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2211 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2212 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2213 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2214 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2215 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 2216 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2217 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2218 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 2219 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2220 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2221 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 2222 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2223 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2224 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 2225 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2226 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2227 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 2228 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2229 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2230 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 2231 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2232 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2233 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 2234 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2235 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2236 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 2237 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2238 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2239 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 2240 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2241 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_adc));	// 2242 call    exec_adc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2243 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 2244 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_adc));	// 2245 call    exec_adc
	R(MOV(esp, ebp));
R(POP(ebp));	// 2246 leave
	R(RETN);	// 2247 retn
 // Procedure exec_sbbl() start
exec_sbbl:
#undef s0
#define s0 8	// 2260 s0 = 8
#undef s1
#define s1 0x0C	// 2261 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2262 iflags = 0x10
	R(PUSH(ebp));	// 2265 push    ebp
	R(MOV(ebp, esp));	// 2266 mov     ebp, esp
	R(PUSH(esi));	// 2267 push    esi
	R(PUSH(ebx));	// 2268 push    ebx
	R(SUB(esp, 0x20));	// 2269 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 2270 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 2271 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 2272 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 2273 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 2274 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 2275 mov     edx, res
	R(MOV(eax, flags));	// 2276 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 2277 mov     [esp+14h], flags
	R(PUSH(eax));	// 2278 push    eax
	R(POPF);	// 2279 popf
	R(SBB(edx, ecx));	// 2280 sbb     edx, ecx
	R(PUSHF);	// 2281 pushf
	R(POP(eax));	// 2282 pop     eax
#undef res
#define res edx	// 2283 res = edx
#undef flags
#define flags eax	// 2284 flags = eax
	R(AND(flags, 0x8D5));	// 2285 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 2286 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 2287 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 2288 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 2289 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSbbl)));	// 2290 mov     dword ptr [esp+4], offset aSbbl ; "sbbl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 2291 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2292 call    printf
	R(ADD(esp, 0x20));	// 2293 add     esp, 20h
	R(POP(ebx));	// 2294 pop     ebx
	R(POP(esi));	// 2295 pop     esi
	R(POP(ebp));	// 2296 pop     ebp
	R(RETN);	// 2297 retn
 // Procedure exec_sbbw() start
exec_sbbw:
#undef s0
#define s0 8	// 2310 s0 = 8
#undef s1
#define s1 0x0C	// 2311 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2312 iflags = 0x10
	R(PUSH(ebp));	// 2315 push    ebp
	R(MOV(ebp, esp));	// 2316 mov     ebp, esp
	R(PUSH(esi));	// 2317 push    esi
	R(PUSH(ebx));	// 2318 push    ebx
	R(SUB(esp, 0x20));	// 2319 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 2320 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 2321 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 2322 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 2323 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 2324 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 2325 mov     edx, res
	R(MOV(eax, flags));	// 2326 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 2327 mov     [esp+14h], flags
	R(PUSH(eax));	// 2328 push    eax
	R(POPF);	// 2329 popf
	R(SBB(dx, cx));	// 2330 sbb     dx, cx
	R(PUSHF);	// 2331 pushf
	R(POP(eax));	// 2332 pop     eax
#undef res
#define res edx	// 2333 res = edx
#undef flags
#define flags eax	// 2334 flags = eax
	R(AND(flags, 0x8D5));	// 2335 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 2336 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 2337 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 2338 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 2339 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSbbw)));	// 2340 mov     dword ptr [esp+4], offset aSbbw ; "sbbw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 2341 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2342 call    printf
	R(ADD(esp, 0x20));	// 2343 add     esp, 20h
	R(POP(ebx));	// 2344 pop     ebx
	R(POP(esi));	// 2345 pop     esi
	R(POP(ebp));	// 2346 pop     ebp
	R(RETN);	// 2347 retn
 // Procedure exec_sbbb() start
exec_sbbb:
#undef s0
#define s0 8	// 2360 s0 = 8
#undef s1
#define s1 0x0C	// 2361 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2362 iflags = 0x10
	R(PUSH(ebp));	// 2365 push    ebp
	R(MOV(ebp, esp));	// 2366 mov     ebp, esp
	R(PUSH(esi));	// 2367 push    esi
	R(PUSH(ebx));	// 2368 push    ebx
	R(SUB(esp, 0x20));	// 2369 sub     esp, 20h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 2370 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 2371 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 2372 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 2373 flags = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 2374 mov     ecx, [ebp+s1]
	R(MOV(edx, res));	// 2375 mov     edx, res
	R(MOV(eax, flags));	// 2376 mov     eax, flags
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), flags));	// 2377 mov     [esp+14h], flags
	R(PUSH(eax));	// 2378 push    eax
	R(POPF);	// 2379 popf
	R(SBB(dl, cl));	// 2380 sbb     dl, cl
	R(PUSHF);	// 2381 pushf
	R(POP(eax));	// 2382 pop     eax
#undef res
#define res edx	// 2383 res = edx
#undef flags
#define flags eax	// 2384 flags = eax
	R(AND(flags, 0x8D5));	// 2385 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 2386 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 2387 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 2388 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 2389 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSbbb)));	// 2390 mov     dword ptr [esp+4], offset aSbbb ; "sbbb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 2391 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2392 call    printf
	R(ADD(esp, 0x20));	// 2393 add     esp, 20h
	R(POP(ebx));	// 2394 pop     ebx
	R(POP(esi));	// 2395 pop     esi
	R(POP(ebp));	// 2396 pop     ebp
	R(RETN);	// 2397 retn
 // Procedure exec_sbb() start
exec_sbb:
#undef s0
#define s0 8	// 2410 s0 = 8
#undef s1
#define s1 0x0C	// 2411 s1 = 0x0C
	R(PUSH(ebp));	// 2414 push    ebp
	R(MOV(ebp, esp));	// 2415 mov     ebp, esp
	R(PUSH(esi));	// 2416 push    esi
	R(PUSH(ebx));	// 2417 push    ebx
	R(SUB(esp, 0x10));	// 2418 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 2419 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 2420 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2421 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2422 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2423 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_sbbl));	// 2424 call    exec_sbbl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2425 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2426 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2427 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_sbbw));	// 2428 call    exec_sbbw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2429 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2430 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2431 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_sbbb));	// 2432 call    exec_sbbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2433 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2434 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2435 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_sbbl));	// 2436 call    exec_sbbl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2437 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2438 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2439 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_sbbw));	// 2440 call    exec_sbbw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2441 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2442 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2443 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_sbbb));	// 2444 call    exec_sbbb
	R(ADD(esp, 0x10));	// 2445 add     esp, 10h
	R(POP(ebx));	// 2446 pop     ebx
	R(POP(esi));	// 2447 pop     esi
	R(POP(ebp));	// 2448 pop     ebp
	R(RETN);	// 2449 retn
 // Procedure test_sbb() start
test_sbb:
	R(PUSH(ebp));	// 2461 push    ebp
	R(MOV(ebp, esp));	// 2462 mov     ebp, esp
	R(SUB(esp, 0x18));	// 2463 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 2464 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 2465 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_sbb));	// 2466 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 2467 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 2468 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_sbb));	// 2469 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 2470 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 2471 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_sbb));	// 2472 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2473 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2474 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sbb));	// 2475 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2476 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2477 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sbb));	// 2478 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2479 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2480 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sbb));	// 2481 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 2482 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2483 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_sbb));	// 2484 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2485 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2486 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_sbb));	// 2487 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2488 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2489 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_sbb));	// 2490 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2491 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2492 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_sbb));	// 2493 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2494 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2495 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_sbb));	// 2496 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2497 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2498 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_sbb));	// 2499 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2500 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2501 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_sbb));	// 2502 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2503 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2504 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_sbb));	// 2505 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2506 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2507 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_sbb));	// 2508 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2509 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2510 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_sbb));	// 2511 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2512 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2513 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_sbb));	// 2514 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2515 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2516 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_sbb));	// 2517 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2518 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2519 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_sbb));	// 2520 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2521 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2522 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_sbb));	// 2523 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2524 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2525 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_sbb));	// 2526 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2527 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2528 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_sbb));	// 2529 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2530 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2531 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_sbb));	// 2532 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2533 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2534 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_sbb));	// 2535 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2536 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2537 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_sbb));	// 2538 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2539 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2540 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2541 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2542 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2543 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2544 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2545 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2546 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2547 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 2548 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2549 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2550 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 2551 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2552 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2553 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 2554 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2555 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2556 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 2557 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2558 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2559 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 2560 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2561 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2562 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 2563 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2564 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2565 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 2566 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2567 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2568 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 2569 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2570 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2571 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 2572 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2573 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_sbb));	// 2574 call    exec_sbb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2575 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 2576 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_sbb));	// 2577 call    exec_sbb
	R(MOV(esp, ebp));
R(POP(ebp));	// 2578 leave
	R(RETN);	// 2579 retn
 // Procedure exec_incl() start
exec_incl:
#undef s0
#define s0 8	// 2592 s0 = 8
#undef s1
#define s1 0x0C	// 2593 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2594 iflags = 0x10
	R(PUSH(ebp));	// 2597 push    ebp
	R(MOV(ebp, esp));	// 2598 mov     ebp, esp
	R(PUSH(ebx));	// 2599 push    ebx
	R(SUB(esp, 0x24));	// 2600 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 2601 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 2602 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 2603 res = ecx
#undef flags
#define flags ebx	// 2604 flags = ebx
	R(MOV(edx, res));	// 2605 mov     edx, res
	R(MOV(eax, flags));	// 2606 mov     eax, flags
	R(PUSH(eax));	// 2607 push    eax
	R(POPF);	// 2608 popf
	R(INC(edx));	// 2609 inc     edx
	R(PUSHF);	// 2610 pushf
	R(POP(eax));	// 2611 pop     eax
#undef res
#define res edx	// 2612 res = edx
#undef flags
#define flags eax	// 2613 flags = eax
	R(AND(flags, 0x8D5));	// 2614 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 2615 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 2616 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 2617 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 2618 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIncl)));	// 2619 mov     dword ptr [esp+4], offset aIncl ; "incl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 2620 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2621 call    printf
	R(ADD(esp, 0x24));	// 2622 add     esp, 24h
	R(POP(ebx));	// 2623 pop     ebx
	R(POP(ebp));	// 2624 pop     ebp
	R(RETN);	// 2625 retn
 // Procedure exec_incw() start
exec_incw:
#undef s0
#define s0 8	// 2638 s0 = 8
#undef s1
#define s1 0x0C	// 2639 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2640 iflags = 0x10
	R(PUSH(ebp));	// 2643 push    ebp
	R(MOV(ebp, esp));	// 2644 mov     ebp, esp
	R(PUSH(ebx));	// 2645 push    ebx
	R(SUB(esp, 0x24));	// 2646 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 2647 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 2648 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 2649 res = ecx
#undef flags
#define flags ebx	// 2650 flags = ebx
	R(MOV(edx, res));	// 2651 mov     edx, res
	R(MOV(eax, flags));	// 2652 mov     eax, flags
	R(PUSH(eax));	// 2653 push    eax
	R(POPF);	// 2654 popf
	R(INC(dx));	// 2655 inc     dx
	R(PUSHF);	// 2656 pushf
	R(POP(eax));	// 2657 pop     eax
#undef res
#define res edx	// 2658 res = edx
#undef flags
#define flags eax	// 2659 flags = eax
	R(AND(flags, 0x8D5));	// 2660 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 2661 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 2662 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 2663 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 2664 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIncw)));	// 2665 mov     dword ptr [esp+4], offset aIncw ; "incw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 2666 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2667 call    printf
	R(ADD(esp, 0x24));	// 2668 add     esp, 24h
	R(POP(ebx));	// 2669 pop     ebx
	R(POP(ebp));	// 2670 pop     ebp
	R(RETN);	// 2671 retn
 // Procedure exec_incb() start
exec_incb:
#undef s0
#define s0 8	// 2684 s0 = 8
#undef s1
#define s1 0x0C	// 2685 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2686 iflags = 0x10
	R(PUSH(ebp));	// 2689 push    ebp
	R(MOV(ebp, esp));	// 2690 mov     ebp, esp
	R(PUSH(ebx));	// 2691 push    ebx
	R(SUB(esp, 0x24));	// 2692 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 2693 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 2694 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 2695 res = ecx
#undef flags
#define flags ebx	// 2696 flags = ebx
	R(MOV(edx, res));	// 2697 mov     edx, res
	R(MOV(eax, flags));	// 2698 mov     eax, flags
	R(PUSH(eax));	// 2699 push    eax
	R(POPF);	// 2700 popf
	R(INC(dl));	// 2701 inc     dl
	R(PUSHF);	// 2702 pushf
	R(POP(eax));	// 2703 pop     eax
#undef res
#define res edx	// 2704 res = edx
#undef flags
#define flags eax	// 2705 flags = eax
	R(AND(flags, 0x8D5));	// 2706 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 2707 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 2708 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 2709 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 2710 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIncb)));	// 2711 mov     dword ptr [esp+4], offset aIncb ; "incb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 2712 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2713 call    printf
	R(ADD(esp, 0x24));	// 2714 add     esp, 24h
	R(POP(ebx));	// 2715 pop     ebx
	R(POP(ebp));	// 2716 pop     ebp
	R(RETN);	// 2717 retn
 // Procedure exec_inc() start
exec_inc:
#undef s0
#define s0 8	// 2730 s0 = 8
#undef s1
#define s1 0x0C	// 2731 s1 = 0x0C
	R(PUSH(ebp));	// 2734 push    ebp
	R(MOV(ebp, esp));	// 2735 mov     ebp, esp
	R(PUSH(esi));	// 2736 push    esi
	R(PUSH(ebx));	// 2737 push    ebx
	R(SUB(esp, 0x10));	// 2738 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 2739 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 2740 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2741 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2742 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2743 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_incl));	// 2744 call    exec_incl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2745 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2746 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2747 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_incw));	// 2748 call    exec_incw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2749 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2750 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 2751 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_incb));	// 2752 call    exec_incb
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2753 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2754 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2755 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_incl));	// 2756 call    exec_incl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2757 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2758 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2759 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_incw));	// 2760 call    exec_incw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 2761 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 2762 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 2763 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_incb));	// 2764 call    exec_incb
	R(ADD(esp, 0x10));	// 2765 add     esp, 10h
	R(POP(ebx));	// 2766 pop     ebx
	R(POP(esi));	// 2767 pop     esi
	R(POP(ebp));	// 2768 pop     ebp
	R(RETN);	// 2769 retn
 // Procedure test_inc() start
test_inc:
	R(PUSH(ebp));	// 2781 push    ebp
	R(MOV(ebp, esp));	// 2782 mov     ebp, esp
	R(SUB(esp, 0x18));	// 2783 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 2784 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 2785 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_inc));	// 2786 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 2787 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 2788 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_inc));	// 2789 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 2790 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 2791 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_inc));	// 2792 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2793 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2794 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_inc));	// 2795 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2796 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2797 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_inc));	// 2798 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2799 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2800 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_inc));	// 2801 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 2802 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 2803 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_inc));	// 2804 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2805 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2806 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_inc));	// 2807 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2808 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2809 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_inc));	// 2810 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2811 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 2812 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_inc));	// 2813 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2814 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2815 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_inc));	// 2816 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2817 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2818 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_inc));	// 2819 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2820 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 2821 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_inc));	// 2822 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2823 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2824 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_inc));	// 2825 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2826 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2827 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_inc));	// 2828 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2829 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 2830 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_inc));	// 2831 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2832 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2833 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_inc));	// 2834 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2835 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2836 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_inc));	// 2837 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2838 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 2839 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_inc));	// 2840 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2841 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2842 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_inc));	// 2843 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2844 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2845 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_inc));	// 2846 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2847 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 2848 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_inc));	// 2849 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2850 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2851 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_inc));	// 2852 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2853 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2854 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_inc));	// 2855 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 2856 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 2857 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_inc));	// 2858 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 2859 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2860 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2861 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 2862 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2863 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2864 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2865 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2866 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2867 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 2868 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2869 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2870 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 2871 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2872 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2873 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 2874 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2875 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2876 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 2877 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2878 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2879 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 2880 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2881 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2882 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 2883 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2884 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2885 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 2886 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2887 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2888 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 2889 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2890 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2891 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 2892 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 2893 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_inc));	// 2894 call    exec_inc
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 2895 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 2896 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_inc));	// 2897 call    exec_inc
	R(MOV(esp, ebp));
R(POP(ebp));	// 2898 leave
	R(RETN);	// 2899 retn
 // Procedure exec_decl() start
exec_decl:
#undef s0
#define s0 8	// 2912 s0 = 8
#undef s1
#define s1 0x0C	// 2913 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2914 iflags = 0x10
	R(PUSH(ebp));	// 2917 push    ebp
	R(MOV(ebp, esp));	// 2918 mov     ebp, esp
	R(PUSH(ebx));	// 2919 push    ebx
	R(SUB(esp, 0x24));	// 2920 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 2921 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 2922 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 2923 res = ecx
#undef flags
#define flags ebx	// 2924 flags = ebx
	R(MOV(edx, res));	// 2925 mov     edx, res
	R(MOV(eax, flags));	// 2926 mov     eax, flags
	R(PUSH(eax));	// 2927 push    eax
	R(POPF);	// 2928 popf
	R(DEC(edx));	// 2929 dec     edx
	R(PUSHF);	// 2930 pushf
	R(POP(eax));	// 2931 pop     eax
#undef res
#define res edx	// 2932 res = edx
#undef flags
#define flags eax	// 2933 flags = eax
	R(AND(flags, 0x8D5));	// 2934 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 2935 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 2936 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 2937 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 2938 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDecl)));	// 2939 mov     dword ptr [esp+4], offset aDecl ; "decl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 2940 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2941 call    printf
	R(ADD(esp, 0x24));	// 2942 add     esp, 24h
	R(POP(ebx));	// 2943 pop     ebx
	R(POP(ebp));	// 2944 pop     ebp
	R(RETN);	// 2945 retn
 // Procedure exec_decw() start
exec_decw:
#undef s0
#define s0 8	// 2958 s0 = 8
#undef s1
#define s1 0x0C	// 2959 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 2960 iflags = 0x10
	R(PUSH(ebp));	// 2963 push    ebp
	R(MOV(ebp, esp));	// 2964 mov     ebp, esp
	R(PUSH(ebx));	// 2965 push    ebx
	R(SUB(esp, 0x24));	// 2966 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 2967 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 2968 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 2969 res = ecx
#undef flags
#define flags ebx	// 2970 flags = ebx
	R(MOV(edx, res));	// 2971 mov     edx, res
	R(MOV(eax, flags));	// 2972 mov     eax, flags
	R(PUSH(eax));	// 2973 push    eax
	R(POPF);	// 2974 popf
	R(DEC(dx));	// 2975 dec     dx
	R(PUSHF);	// 2976 pushf
	R(POP(eax));	// 2977 pop     eax
#undef res
#define res edx	// 2978 res = edx
#undef flags
#define flags eax	// 2979 flags = eax
	R(AND(flags, 0x8D5));	// 2980 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 2981 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 2982 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 2983 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 2984 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDecw)));	// 2985 mov     dword ptr [esp+4], offset aDecw ; "decw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 2986 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 2987 call    printf
	R(ADD(esp, 0x24));	// 2988 add     esp, 24h
	R(POP(ebx));	// 2989 pop     ebx
	R(POP(ebp));	// 2990 pop     ebp
	R(RETN);	// 2991 retn
 // Procedure exec_decb() start
exec_decb:
#undef s0
#define s0 8	// 3004 s0 = 8
#undef s1
#define s1 0x0C	// 3005 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3006 iflags = 0x10
	R(PUSH(ebp));	// 3009 push    ebp
	R(MOV(ebp, esp));	// 3010 mov     ebp, esp
	R(PUSH(ebx));	// 3011 push    ebx
	R(SUB(esp, 0x24));	// 3012 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 3013 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 3014 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 3015 res = ecx
#undef flags
#define flags ebx	// 3016 flags = ebx
	R(MOV(edx, res));	// 3017 mov     edx, res
	R(MOV(eax, flags));	// 3018 mov     eax, flags
	R(PUSH(eax));	// 3019 push    eax
	R(POPF);	// 3020 popf
	R(DEC(dl));	// 3021 dec     dl
	R(PUSHF);	// 3022 pushf
	R(POP(eax));	// 3023 pop     eax
#undef res
#define res edx	// 3024 res = edx
#undef flags
#define flags eax	// 3025 flags = eax
	R(AND(flags, 0x8D5));	// 3026 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 3027 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 3028 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 3029 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 3030 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDecb)));	// 3031 mov     dword ptr [esp+4], offset aDecb ; "decb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 3032 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3033 call    printf
	R(ADD(esp, 0x24));	// 3034 add     esp, 24h
	R(POP(ebx));	// 3035 pop     ebx
	R(POP(ebp));	// 3036 pop     ebp
	R(RETN);	// 3037 retn
 // Procedure exec_dec() start
exec_dec:
#undef s0
#define s0 8	// 3050 s0 = 8
#undef s1
#define s1 0x0C	// 3051 s1 = 0x0C
	R(PUSH(ebp));	// 3054 push    ebp
	R(MOV(ebp, esp));	// 3055 mov     ebp, esp
	R(PUSH(esi));	// 3056 push    esi
	R(PUSH(ebx));	// 3057 push    ebx
	R(SUB(esp, 0x10));	// 3058 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 3059 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 3060 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3061 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3062 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3063 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_decl));	// 3064 call    exec_decl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3065 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3066 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3067 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_decw));	// 3068 call    exec_decw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3069 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3070 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3071 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_decb));	// 3072 call    exec_decb
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3073 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3074 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3075 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_decl));	// 3076 call    exec_decl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3077 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3078 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3079 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_decw));	// 3080 call    exec_decw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3081 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3082 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3083 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_decb));	// 3084 call    exec_decb
	R(ADD(esp, 0x10));	// 3085 add     esp, 10h
	R(POP(ebx));	// 3086 pop     ebx
	R(POP(esi));	// 3087 pop     esi
	R(POP(ebp));	// 3088 pop     ebp
	R(RETN);	// 3089 retn
 // Procedure test_dec() start
test_dec:
	R(PUSH(ebp));	// 3101 push    ebp
	R(MOV(ebp, esp));	// 3102 mov     ebp, esp
	R(SUB(esp, 0x18));	// 3103 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 3104 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 3105 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_dec));	// 3106 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 3107 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 3108 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_dec));	// 3109 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 3110 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 3111 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_dec));	// 3112 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3113 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3114 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_dec));	// 3115 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3116 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3117 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_dec));	// 3118 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3119 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3120 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_dec));	// 3121 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 3122 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3123 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_dec));	// 3124 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3125 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3126 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_dec));	// 3127 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3128 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3129 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_dec));	// 3130 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3131 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3132 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_dec));	// 3133 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3134 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3135 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_dec));	// 3136 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3137 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3138 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_dec));	// 3139 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3140 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3141 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_dec));	// 3142 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3143 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3144 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_dec));	// 3145 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3146 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3147 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_dec));	// 3148 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3149 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3150 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_dec));	// 3151 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3152 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3153 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_dec));	// 3154 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3155 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3156 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_dec));	// 3157 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3158 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3159 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_dec));	// 3160 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3161 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3162 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_dec));	// 3163 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3164 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3165 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_dec));	// 3166 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3167 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3168 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_dec));	// 3169 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3170 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3171 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_dec));	// 3172 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3173 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3174 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_dec));	// 3175 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3176 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3177 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_dec));	// 3178 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3179 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3180 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3181 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3182 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3183 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3184 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3185 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3186 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3187 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 3188 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3189 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3190 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 3191 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3192 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3193 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 3194 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3195 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3196 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 3197 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3198 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3199 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 3200 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3201 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3202 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 3203 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3204 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3205 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 3206 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3207 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3208 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 3209 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3210 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3211 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 3212 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3213 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_dec));	// 3214 call    exec_dec
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3215 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 3216 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_dec));	// 3217 call    exec_dec
	R(MOV(esp, ebp));
R(POP(ebp));	// 3218 leave
	R(RETN);	// 3219 retn
 // Procedure exec_negl() start
exec_negl:
#undef s0
#define s0 8	// 3232 s0 = 8
#undef s1
#define s1 0x0C	// 3233 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3234 iflags = 0x10
	R(PUSH(ebp));	// 3237 push    ebp
	R(MOV(ebp, esp));	// 3238 mov     ebp, esp
	R(PUSH(ebx));	// 3239 push    ebx
	R(SUB(esp, 0x24));	// 3240 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 3241 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 3242 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 3243 res = ecx
#undef flags
#define flags ebx	// 3244 flags = ebx
	R(MOV(edx, res));	// 3245 mov     edx, res
	R(MOV(eax, flags));	// 3246 mov     eax, flags
	R(PUSH(eax));	// 3247 push    eax
	R(POPF);	// 3248 popf
	R(NEG(edx));	// 3249 neg     edx
	R(PUSHF);	// 3250 pushf
	R(POP(eax));	// 3251 pop     eax
#undef res
#define res edx	// 3252 res = edx
#undef flags
#define flags eax	// 3253 flags = eax
	R(AND(flags, 0x8D5));	// 3254 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 3255 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 3256 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 3257 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 3258 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNegl)));	// 3259 mov     dword ptr [esp+4], offset aNegl ; "negl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 3260 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3261 call    printf
	R(ADD(esp, 0x24));	// 3262 add     esp, 24h
	R(POP(ebx));	// 3263 pop     ebx
	R(POP(ebp));	// 3264 pop     ebp
	R(RETN);	// 3265 retn
 // Procedure exec_negw() start
exec_negw:
#undef s0
#define s0 8	// 3278 s0 = 8
#undef s1
#define s1 0x0C	// 3279 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3280 iflags = 0x10
	R(PUSH(ebp));	// 3283 push    ebp
	R(MOV(ebp, esp));	// 3284 mov     ebp, esp
	R(PUSH(ebx));	// 3285 push    ebx
	R(SUB(esp, 0x24));	// 3286 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 3287 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 3288 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 3289 res = ecx
#undef flags
#define flags ebx	// 3290 flags = ebx
	R(MOV(edx, res));	// 3291 mov     edx, res
	R(MOV(eax, flags));	// 3292 mov     eax, flags
	R(PUSH(eax));	// 3293 push    eax
	R(POPF);	// 3294 popf
	R(NEG(dx));	// 3295 neg     dx
	R(PUSHF);	// 3296 pushf
	R(POP(eax));	// 3297 pop     eax
#undef res
#define res edx	// 3298 res = edx
#undef flags
#define flags eax	// 3299 flags = eax
	R(AND(flags, 0x8D5));	// 3300 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 3301 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 3302 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 3303 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 3304 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNegw)));	// 3305 mov     dword ptr [esp+4], offset aNegw ; "negw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 3306 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3307 call    printf
	R(ADD(esp, 0x24));	// 3308 add     esp, 24h
	R(POP(ebx));	// 3309 pop     ebx
	R(POP(ebp));	// 3310 pop     ebp
	R(RETN);	// 3311 retn
 // Procedure exec_negb() start
exec_negb:
#undef s0
#define s0 8	// 3324 s0 = 8
#undef s1
#define s1 0x0C	// 3325 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3326 iflags = 0x10
	R(PUSH(ebp));	// 3329 push    ebp
	R(MOV(ebp, esp));	// 3330 mov     ebp, esp
	R(PUSH(ebx));	// 3331 push    ebx
	R(SUB(esp, 0x24));	// 3332 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 3333 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 3334 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 3335 res = ecx
#undef flags
#define flags ebx	// 3336 flags = ebx
	R(MOV(edx, res));	// 3337 mov     edx, res
	R(MOV(eax, flags));	// 3338 mov     eax, flags
	R(PUSH(eax));	// 3339 push    eax
	R(POPF);	// 3340 popf
	R(NEG(dl));	// 3341 neg     dl
	R(PUSHF);	// 3342 pushf
	R(POP(eax));	// 3343 pop     eax
#undef res
#define res edx	// 3344 res = edx
#undef flags
#define flags eax	// 3345 flags = eax
	R(AND(flags, 0x8D5));	// 3346 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 3347 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 3348 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 3349 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 3350 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNegb)));	// 3351 mov     dword ptr [esp+4], offset aNegb ; "negb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 3352 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3353 call    printf
	R(ADD(esp, 0x24));	// 3354 add     esp, 24h
	R(POP(ebx));	// 3355 pop     ebx
	R(POP(ebp));	// 3356 pop     ebp
	R(RETN);	// 3357 retn
 // Procedure exec_neg() start
exec_neg:
#undef s0
#define s0 8	// 3370 s0 = 8
#undef s1
#define s1 0x0C	// 3371 s1 = 0x0C
	R(PUSH(ebp));	// 3374 push    ebp
	R(MOV(ebp, esp));	// 3375 mov     ebp, esp
	R(PUSH(esi));	// 3376 push    esi
	R(PUSH(ebx));	// 3377 push    ebx
	R(SUB(esp, 0x10));	// 3378 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 3379 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 3380 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3381 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3382 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3383 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_negl));	// 3384 call    exec_negl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3385 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3386 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3387 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_negw));	// 3388 call    exec_negw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3389 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3390 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3391 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_negb));	// 3392 call    exec_negb
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3393 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3394 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3395 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_negl));	// 3396 call    exec_negl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3397 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3398 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3399 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_negw));	// 3400 call    exec_negw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3401 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3402 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3403 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_negb));	// 3404 call    exec_negb
	R(ADD(esp, 0x10));	// 3405 add     esp, 10h
	R(POP(ebx));	// 3406 pop     ebx
	R(POP(esi));	// 3407 pop     esi
	R(POP(ebp));	// 3408 pop     ebp
	R(RETN);	// 3409 retn
 // Procedure test_neg() start
test_neg:
	R(PUSH(ebp));	// 3421 push    ebp
	R(MOV(ebp, esp));	// 3422 mov     ebp, esp
	R(SUB(esp, 0x18));	// 3423 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 3424 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 3425 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_neg));	// 3426 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 3427 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 3428 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_neg));	// 3429 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 3430 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 3431 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_neg));	// 3432 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3433 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3434 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_neg));	// 3435 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3436 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3437 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_neg));	// 3438 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3439 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3440 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_neg));	// 3441 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 3442 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3443 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_neg));	// 3444 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3445 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3446 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_neg));	// 3447 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3448 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3449 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_neg));	// 3450 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3451 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3452 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_neg));	// 3453 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3454 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3455 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_neg));	// 3456 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3457 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3458 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_neg));	// 3459 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3460 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3461 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_neg));	// 3462 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3463 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3464 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_neg));	// 3465 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3466 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3467 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_neg));	// 3468 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3469 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3470 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_neg));	// 3471 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3472 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3473 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_neg));	// 3474 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3475 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3476 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_neg));	// 3477 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3478 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3479 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_neg));	// 3480 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3481 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3482 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_neg));	// 3483 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3484 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3485 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_neg));	// 3486 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3487 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3488 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_neg));	// 3489 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3490 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3491 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_neg));	// 3492 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3493 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3494 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_neg));	// 3495 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3496 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3497 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_neg));	// 3498 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3499 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3500 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3501 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3502 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3503 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3504 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3505 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3506 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3507 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 3508 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3509 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3510 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 3511 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3512 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3513 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 3514 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3515 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3516 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 3517 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3518 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3519 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 3520 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3521 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3522 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 3523 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3524 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3525 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 3526 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3527 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3528 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 3529 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3530 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3531 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 3532 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3533 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_neg));	// 3534 call    exec_neg
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3535 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 3536 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_neg));	// 3537 call    exec_neg
	R(MOV(esp, ebp));
R(POP(ebp));	// 3538 leave
	R(RETN);	// 3539 retn
 // Procedure exec_notl() start
exec_notl:
#undef s0
#define s0 8	// 3552 s0 = 8
#undef s1
#define s1 0x0C	// 3553 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3554 iflags = 0x10
	R(PUSH(ebp));	// 3557 push    ebp
	R(MOV(ebp, esp));	// 3558 mov     ebp, esp
	R(PUSH(ebx));	// 3559 push    ebx
	R(SUB(esp, 0x24));	// 3560 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 3561 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 3562 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 3563 res = ecx
#undef flags
#define flags ebx	// 3564 flags = ebx
	R(MOV(edx, res));	// 3565 mov     edx, res
	R(MOV(eax, flags));	// 3566 mov     eax, flags
	R(PUSH(eax));	// 3567 push    eax
	R(POPF);	// 3568 popf
	R(NOT(edx));	// 3569 not     edx
	R(PUSHF);	// 3570 pushf
	R(POP(eax));	// 3571 pop     eax
#undef res
#define res edx	// 3572 res = edx
#undef flags
#define flags eax	// 3573 flags = eax
	R(AND(flags, 0x8D5));	// 3574 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 3575 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 3576 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 3577 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 3578 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNotl)));	// 3579 mov     dword ptr [esp+4], offset aNotl ; "notl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 3580 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3581 call    printf
	R(ADD(esp, 0x24));	// 3582 add     esp, 24h
	R(POP(ebx));	// 3583 pop     ebx
	R(POP(ebp));	// 3584 pop     ebp
	R(RETN);	// 3585 retn
 // Procedure exec_notw() start
exec_notw:
#undef s0
#define s0 8	// 3598 s0 = 8
#undef s1
#define s1 0x0C	// 3599 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3600 iflags = 0x10
	R(PUSH(ebp));	// 3603 push    ebp
	R(MOV(ebp, esp));	// 3604 mov     ebp, esp
	R(PUSH(ebx));	// 3605 push    ebx
	R(SUB(esp, 0x24));	// 3606 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 3607 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 3608 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 3609 res = ecx
#undef flags
#define flags ebx	// 3610 flags = ebx
	R(MOV(edx, res));	// 3611 mov     edx, res
	R(MOV(eax, flags));	// 3612 mov     eax, flags
	R(PUSH(eax));	// 3613 push    eax
	R(POPF);	// 3614 popf
	R(NOT(dx));	// 3615 not     dx
	R(PUSHF);	// 3616 pushf
	R(POP(eax));	// 3617 pop     eax
#undef res
#define res edx	// 3618 res = edx
#undef flags
#define flags eax	// 3619 flags = eax
	R(AND(flags, 0x8D5));	// 3620 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 3621 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 3622 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 3623 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 3624 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNotw)));	// 3625 mov     dword ptr [esp+4], offset aNotw ; "notw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 3626 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3627 call    printf
	R(ADD(esp, 0x24));	// 3628 add     esp, 24h
	R(POP(ebx));	// 3629 pop     ebx
	R(POP(ebp));	// 3630 pop     ebp
	R(RETN);	// 3631 retn
 // Procedure exec_notb() start
exec_notb:
#undef s0
#define s0 8	// 3644 s0 = 8
#undef s1
#define s1 0x0C	// 3645 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3646 iflags = 0x10
	R(PUSH(ebp));	// 3649 push    ebp
	R(MOV(ebp, esp));	// 3650 mov     ebp, esp
	R(PUSH(ebx));	// 3651 push    ebx
	R(SUB(esp, 0x24));	// 3652 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+iflags))));	// 3653 mov     ebx, [ebp+iflags]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 3654 mov     ecx, [ebp+s0]
#undef res
#define res ecx	// 3655 res = ecx
#undef flags
#define flags ebx	// 3656 flags = ebx
	R(MOV(edx, res));	// 3657 mov     edx, res
	R(MOV(eax, flags));	// 3658 mov     eax, flags
	R(PUSH(eax));	// 3659 push    eax
	R(POPF);	// 3660 popf
	R(NOT(dl));	// 3661 not     dl
	R(PUSHF);	// 3662 pushf
	R(POP(eax));	// 3663 pop     eax
#undef res
#define res edx	// 3664 res = edx
#undef flags
#define flags eax	// 3665 flags = eax
	R(AND(flags, 0x8D5));	// 3666 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 3667 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 3668 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 3669 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 3670 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aNotb)));	// 3671 mov     dword ptr [esp+4], offset aNotb ; "notb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxC)));	// 3672 mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3673 call    printf
	R(ADD(esp, 0x24));	// 3674 add     esp, 24h
	R(POP(ebx));	// 3675 pop     ebx
	R(POP(ebp));	// 3676 pop     ebp
	R(RETN);	// 3677 retn
 // Procedure exec_not() start
exec_not:
#undef s0
#define s0 8	// 3690 s0 = 8
#undef s1
#define s1 0x0C	// 3691 s1 = 0x0C
	R(PUSH(ebp));	// 3694 push    ebp
	R(MOV(ebp, esp));	// 3695 mov     ebp, esp
	R(PUSH(esi));	// 3696 push    esi
	R(PUSH(ebx));	// 3697 push    ebx
	R(SUB(esp, 0x10));	// 3698 sub     esp, 10h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 3699 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 3700 mov     esi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3701 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3702 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3703 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_notl));	// 3704 call    exec_notl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3705 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3706 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3707 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_notw));	// 3708 call    exec_notw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3709 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3710 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 3711 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_notb));	// 3712 call    exec_notb
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3713 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3714 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3715 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_notl));	// 3716 call    exec_notl
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3717 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3718 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3719 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_notw));	// 3720 call    exec_notw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 3721 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 3722 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 3723 mov     dword ptr [esp+8], 1 ; iflags
	R(CALL(kexec_notb));	// 3724 call    exec_notb
	R(ADD(esp, 0x10));	// 3725 add     esp, 10h
	R(POP(ebx));	// 3726 pop     ebx
	R(POP(esi));	// 3727 pop     esi
	R(POP(ebp));	// 3728 pop     ebp
	R(RETN);	// 3729 retn
 // Procedure test_not() start
test_not:
	R(PUSH(ebp));	// 3741 push    ebp
	R(MOV(ebp, esp));	// 3742 mov     ebp, esp
	R(SUB(esp, 0x18));	// 3743 sub     esp, 18h
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x812FADA));	// 3744 mov     dword ptr [esp+4], 812FADAh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12345678));	// 3745 mov     dword ptr [esp], 12345678h ; s0
	R(CALL(kexec_not));	// 3746 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12341));	// 3747 mov     dword ptr [esp+4], 12341h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 3748 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_not));	// 3749 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFEDCBF));	// 3750 mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341));	// 3751 mov     dword ptr [esp], 12341h ; s0
	R(CALL(kexec_not));	// 3752 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3753 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3754 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_not));	// 3755 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3756 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3757 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_not));	// 3758 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3759 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3760 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_not));	// 3761 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 3762 mov     dword ptr [esp+4], 2 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 3763 mov     dword ptr [esp], 0FFFFFFFFh ; s0
	R(CALL(kexec_not));	// 3764 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3765 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3766 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_not));	// 3767 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3768 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3769 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_not));	// 3770 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3771 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFF));	// 3772 mov     dword ptr [esp], 7FFFFFFFh ; s0
	R(CALL(kexec_not));	// 3773 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3774 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3775 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_not));	// 3776 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3777 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3778 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_not));	// 3779 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3780 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 3781 mov     dword ptr [esp], 80000000h ; s0
	R(CALL(kexec_not));	// 3782 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3783 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3784 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_not));	// 3785 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3786 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3787 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_not));	// 3788 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3789 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347FFF));	// 3790 mov     dword ptr [esp], 12347FFFh ; s0
	R(CALL(kexec_not));	// 3791 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3792 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3793 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_not));	// 3794 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3795 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3796 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_not));	// 3797 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3798 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348000));	// 3799 mov     dword ptr [esp], 12348000h ; s0
	R(CALL(kexec_not));	// 3800 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3801 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3802 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_not));	// 3803 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3804 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3805 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_not));	// 3806 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3807 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12347F7F));	// 3808 mov     dword ptr [esp], 12347F7Fh ; s0
	R(CALL(kexec_not));	// 3809 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3810 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3811 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_not));	// 3812 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3813 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3814 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_not));	// 3815 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 3816 mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12348080));	// 3817 mov     dword ptr [esp], 12348080h ; s0
	R(CALL(kexec_not));	// 3818 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 3819 mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3820 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3821 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 3822 mov     dword ptr [esp+4], 1 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3823 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3824 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3825 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3826 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3827 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 3828 mov     dword ptr [esp+4], 0FFFE0080h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3829 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3830 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 3831 mov     dword ptr [esp+4], 80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3832 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3833 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x81));	// 3834 mov     dword ptr [esp+4], 81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3835 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3836 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 3837 mov     dword ptr [esp+4], 10000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3838 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3839 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x20000));	// 3840 mov     dword ptr [esp+4], 20000h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3841 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3842 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF7F));	// 3843 mov     dword ptr [esp+4], 1FF7Fh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3844 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3845 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF80));	// 3846 mov     dword ptr [esp+4], 1FF80h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3847 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3848 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FF81));	// 3849 mov     dword ptr [esp+4], 1FF81h ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3850 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3851 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1FFFF));	// 3852 mov     dword ptr [esp+4], 1FFFFh ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 3853 mov     dword ptr [esp], 0FFFE0080h ; s0
	R(CALL(kexec_not));	// 3854 call    exec_not
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 3855 mov     dword ptr [esp+4], 0 ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 3856 mov     dword ptr [esp], 0 ; s0
	R(CALL(kexec_not));	// 3857 call    exec_not
	R(MOV(esp, ebp));
R(POP(ebp));	// 3858 leave
	R(RETN);	// 3859 retn
 // Procedure exec_shll() start
exec_shll:
#undef s2
#define s2 8	// 3871 s2 = 8
#undef s0
#define s0 0x0C	// 3872 s0 = 0x0C
#undef s1
#define s1 0x10	// 3873 s1 = 0x10
#undef iflags
#define iflags 0x14	// 3874 iflags = 0x14
	R(PUSH(ebp));	// 3877 push    ebp
	R(MOV(ebp, esp));	// 3878 mov     ebp, esp
	R(PUSH(esi));	// 3879 push    esi
	R(PUSH(ebx));	// 3880 push    ebx
	R(SUB(esp, 0x20));	// 3881 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 3882 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 3883 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 3884 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 3885 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 3886 flags = esi
	R(MOV(edx, res));	// 3887 mov     edx, res
	R(MOV(eax, flags));	// 3888 mov     eax, flags
	R(PUSH(eax));	// 3889 push    eax
	R(POPF);	// 3890 popf
	R(SHL(edx, cl));	// 3891 shl     edx, cl
	R(PUSHF);	// 3892 pushf
	R(POP(eax));	// 3893 pop     eax
#undef res
#define res edx	// 3894 res = edx
#undef flags
#define flags eax	// 3895 flags = eax
	R(CMP(ecx, 1));	// 3896 cmp     ecx, 1
		R(JZ(loc_40458f));	// 3897 jz      short loc_40458F
	R(AND(ah, 0x0F7));	// 3898 and     ah, 0F7h
loc_40458f:
	R(AND(flags, 0x8C5));	// 3901 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 3902 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 3903 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 3904 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 3905 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 3906 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShll)));	// 3907 mov     dword ptr [esp+4], offset aShll ; "shll"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 3908 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3909 call    printf
	R(ADD(esp, 0x20));	// 3910 add     esp, 20h
	R(POP(ebx));	// 3911 pop     ebx
	R(POP(esi));	// 3912 pop     esi
	R(POP(ebp));	// 3913 pop     ebp
	R(RETN);	// 3914 retn
 // Procedure exec_shlw() start
exec_shlw:
#undef s2
#define s2 8	// 3926 s2 = 8
#undef s0
#define s0 0x0C	// 3927 s0 = 0x0C
#undef s1
#define s1 0x10	// 3928 s1 = 0x10
#undef iflags
#define iflags 0x14	// 3929 iflags = 0x14
	R(PUSH(ebp));	// 3932 push    ebp
	R(MOV(ebp, esp));	// 3933 mov     ebp, esp
	R(PUSH(esi));	// 3934 push    esi
	R(PUSH(ebx));	// 3935 push    ebx
	R(SUB(esp, 0x20));	// 3936 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 3937 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 3938 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 3939 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 3940 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 3941 flags = esi
	R(MOV(edx, res));	// 3942 mov     edx, res
	R(MOV(eax, flags));	// 3943 mov     eax, flags
	R(PUSH(eax));	// 3944 push    eax
	R(POPF);	// 3945 popf
	R(SHL(dx, cl));	// 3946 shl     dx, cl
	R(PUSHF);	// 3947 pushf
	R(POP(eax));	// 3948 pop     eax
#undef res
#define res edx	// 3949 res = edx
#undef flags
#define flags eax	// 3950 flags = eax
	R(CMP(ecx, 1));	// 3951 cmp     ecx, 1
		R(JZ(loc_4045e7));	// 3952 jz      short loc_4045E7
	R(AND(ah, 0x0F7));	// 3953 and     ah, 0F7h
loc_4045e7:
	R(AND(flags, 0x8C5));	// 3956 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 3957 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 3958 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 3959 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 3960 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 3961 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShlw)));	// 3962 mov     dword ptr [esp+4], offset aShlw ; "shlw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 3963 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 3964 call    printf
	R(ADD(esp, 0x20));	// 3965 add     esp, 20h
	R(POP(ebx));	// 3966 pop     ebx
	R(POP(esi));	// 3967 pop     esi
	R(POP(ebp));	// 3968 pop     ebp
	R(RETN);	// 3969 retn
 // Procedure exec_shlb() start
exec_shlb:
#undef s0
#define s0 8	// 3981 s0 = 8
#undef s1
#define s1 0x0C	// 3982 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 3983 iflags = 0x10
	R(PUSH(ebp));	// 3986 push    ebp
	R(MOV(ebp, esp));	// 3987 mov     ebp, esp
	R(PUSH(esi));	// 3988 push    esi
	R(PUSH(ebx));	// 3989 push    ebx
	R(SUB(esp, 0x20));	// 3990 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 3991 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 3992 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 3993 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 3994 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 3995 flags = esi
	R(MOV(edx, res));	// 3996 mov     edx, res
	R(MOV(eax, flags));	// 3997 mov     eax, flags
	R(PUSH(eax));	// 3998 push    eax
	R(POPF);	// 3999 popf
	R(SHL(dl, cl));	// 4000 shl     dl, cl
	R(PUSHF);	// 4001 pushf
	R(POP(eax));	// 4002 pop     eax
#undef res
#define res edx	// 4003 res = edx
#undef flags
#define flags eax	// 4004 flags = eax
	R(CMP(ecx, 1));	// 4005 cmp     ecx, 1
		R(JZ(loc_40463e));	// 4006 jz      short loc_40463E
	R(AND(ah, 0x0F7));	// 4007 and     ah, 0F7h
loc_40463e:
	R(AND(flags, 0x8C5));	// 4010 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4011 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4012 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4013 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4014 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4015 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShlb)));	// 4016 mov     dword ptr [esp+4], offset aShlb ; "shlb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4017 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4018 call    printf
	R(ADD(esp, 0x20));	// 4019 add     esp, 20h
	R(POP(ebx));	// 4020 pop     ebx
	R(POP(esi));	// 4021 pop     esi
	R(POP(ebp));	// 4022 pop     ebp
	R(RETN);	// 4023 retn
 // Procedure exec_shl() start
exec_shl:
#undef s2
#define s2 8	// 4036 s2 = 8
#undef s0
#define s0 0x0C	// 4037 s0 = 0x0C
#undef s1
#define s1 0x10	// 4038 s1 = 0x10
	R(PUSH(ebp));	// 4041 push    ebp
	R(MOV(ebp, esp));	// 4042 mov     ebp, esp
	R(PUSH(edi));	// 4043 push    edi
	R(PUSH(esi));	// 4044 push    esi
	R(PUSH(ebx));	// 4045 push    ebx
	R(SUB(esp, 0x1C));	// 4046 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4047 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 4048 mov     esi, [ebp+s1]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));	// 4049 mov     edi, [ebp+s2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4050 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4051 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4052 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4053 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shll));	// 4054 call    exec_shll
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4055 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4056 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4057 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4058 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shlw));	// 4059 call    exec_shlw
	R(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));	// 4060 mov     [ebp+s0], esi
	R(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));	// 4061 mov     [ebp+s2], ebx
	R(MOV(*(raddr(ds,ebp+s1)), 0));	// 4062 mov     [ebp+s1], 0
	R(ADD(esp, 0x1C));	// 4063 add     esp, 1Ch
	R(POP(ebx));	// 4064 pop     ebx
	R(POP(esi));	// 4065 pop     esi
	R(POP(edi));	// 4066 pop     edi
	R(POP(ebp));	// 4067 pop     ebp
		R(JMP(exec_shlb));	// 4068 jmp     exec_shlb
 // Procedure test_shl() start
test_shl:
	R(PUSH(ebp));	// 4080 push    ebp
	R(MOV(ebp, esp));	// 4081 mov     ebp, esp
	R(PUSH(ebx));	// 4082 push    ebx
	R(SUB(esp, 0x14));	// 4083 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 4084 xor     ebx, ebx
loc_4046d6:
#undef i
#define i ebx	// 4087 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4088 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 4089 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 4090 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 4091 inc     i
	R(CALL(kexec_shl));	// 4092 call    exec_shl
#undef i
#define i ebx	// 4093 i = ebx
	R(CMP(i, 0x20));	// 4094 cmp     i, 20h
		R(JNZ(loc_4046d6));	// 4095 jnz     short loc_4046D6
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4096 xor     i, i
loc_4046f6:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4099 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 4100 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 4101 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 4102 inc     i
	R(CALL(kexec_shl));	// 4103 call    exec_shl
#undef i
#define i ebx	// 4104 i = ebx
	R(CMP(i, 0x20));	// 4105 cmp     i, 20h
		R(JNZ(loc_4046f6));	// 4106 jnz     short loc_4046F6
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4107 xor     i, i
loc_404716:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4110 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 4111 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 4112 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 4113 inc     i
	R(CALL(kexec_shl));	// 4114 call    exec_shl
#undef i
#define i ebx	// 4115 i = ebx
	R(CMP(i, 0x20));	// 4116 cmp     i, 20h
		R(JNZ(loc_404716));	// 4117 jnz     short loc_404716
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4118 xor     i, i
loc_404736:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4121 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 4122 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 4123 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 4124 inc     i
	R(CALL(kexec_shl));	// 4125 call    exec_shl
#undef i
#define i ebx	// 4126 i = ebx
	R(CMP(i, 0x20));	// 4127 cmp     i, 20h
		R(JNZ(loc_404736));	// 4128 jnz     short loc_404736
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4129 xor     i, i
loc_404756:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4132 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 4133 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 4134 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 4135 inc     i
	R(CALL(kexec_shl));	// 4136 call    exec_shl
#undef i
#define i ebx	// 4137 i = ebx
	R(CMP(i, 0x20));	// 4138 cmp     i, 20h
		R(JNZ(loc_404756));	// 4139 jnz     short loc_404756
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4140 xor     i, i
loc_404776:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4143 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 4144 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 4145 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 4146 inc     i
	R(CALL(kexec_shl));	// 4147 call    exec_shl
#undef i
#define i ebx	// 4148 i = ebx
	R(CMP(i, 0x20));	// 4149 cmp     i, 20h
		R(JNZ(loc_404776));	// 4150 jnz     short loc_404776
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4151 xor     i, i
loc_404796:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4154 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 4155 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 4156 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 4157 inc     i
	R(CALL(kexec_shl));	// 4158 call    exec_shl
#undef i
#define i ebx	// 4159 i = ebx
	R(CMP(i, 0x20));	// 4160 cmp     i, 20h
		R(JNZ(loc_404796));	// 4161 jnz     short loc_404796
	R(ADD(esp, 0x14));	// 4162 add     esp, 14h
	R(POP(i));	// 4163 pop     i
	R(POP(ebp));	// 4164 pop     ebp
	R(RETN);	// 4165 retn
 // Procedure exec_shrl() start
exec_shrl:
#undef s2
#define s2 8	// 4177 s2 = 8
#undef s0
#define s0 0x0C	// 4178 s0 = 0x0C
#undef s1
#define s1 0x10	// 4179 s1 = 0x10
#undef iflags
#define iflags 0x14	// 4180 iflags = 0x14
	R(PUSH(ebp));	// 4183 push    ebp
	R(MOV(ebp, esp));	// 4184 mov     ebp, esp
	R(PUSH(esi));	// 4185 push    esi
	R(PUSH(ebx));	// 4186 push    ebx
	R(SUB(esp, 0x20));	// 4187 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4188 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4189 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4190 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4191 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4192 flags = esi
	R(MOV(edx, res));	// 4193 mov     edx, res
	R(MOV(eax, flags));	// 4194 mov     eax, flags
	R(PUSH(eax));	// 4195 push    eax
	R(POPF);	// 4196 popf
	R(SHR(edx, cl));	// 4197 shr     edx, cl
	R(PUSHF);	// 4198 pushf
	R(POP(eax));	// 4199 pop     eax
#undef res
#define res edx	// 4200 res = edx
#undef flags
#define flags eax	// 4201 flags = eax
	R(CMP(ecx, 1));	// 4202 cmp     ecx, 1
		R(JZ(loc_4047dd));	// 4203 jz      short loc_4047DD
	R(AND(ah, 0x0F7));	// 4204 and     ah, 0F7h
loc_4047dd:
	R(AND(flags, 0x8C5));	// 4207 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4208 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4209 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4210 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4211 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4212 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrl)));	// 4213 mov     dword ptr [esp+4], offset aShrl ; "shrl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4214 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4215 call    printf
	R(ADD(esp, 0x20));	// 4216 add     esp, 20h
	R(POP(ebx));	// 4217 pop     ebx
	R(POP(esi));	// 4218 pop     esi
	R(POP(ebp));	// 4219 pop     ebp
	R(RETN);	// 4220 retn
 // Procedure exec_shrw() start
exec_shrw:
#undef s2
#define s2 8	// 4232 s2 = 8
#undef s0
#define s0 0x0C	// 4233 s0 = 0x0C
#undef s1
#define s1 0x10	// 4234 s1 = 0x10
#undef iflags
#define iflags 0x14	// 4235 iflags = 0x14
	R(PUSH(ebp));	// 4238 push    ebp
	R(MOV(ebp, esp));	// 4239 mov     ebp, esp
	R(PUSH(esi));	// 4240 push    esi
	R(PUSH(ebx));	// 4241 push    ebx
	R(SUB(esp, 0x20));	// 4242 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4243 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4244 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4245 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4246 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4247 flags = esi
	R(MOV(edx, res));	// 4248 mov     edx, res
	R(MOV(eax, flags));	// 4249 mov     eax, flags
	R(PUSH(eax));	// 4250 push    eax
	R(POPF);	// 4251 popf
	R(SHR(dx, cl));	// 4252 shr     dx, cl
	R(PUSHF);	// 4253 pushf
	R(POP(eax));	// 4254 pop     eax
#undef res
#define res edx	// 4255 res = edx
#undef flags
#define flags eax	// 4256 flags = eax
	R(CMP(ecx, 1));	// 4257 cmp     ecx, 1
		R(JZ(loc_404835));	// 4258 jz      short loc_404835
	R(AND(ah, 0x0F7));	// 4259 and     ah, 0F7h
loc_404835:
	R(AND(flags, 0x8C5));	// 4262 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4263 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4264 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4265 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4266 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4267 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrw)));	// 4268 mov     dword ptr [esp+4], offset aShrw ; "shrw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4269 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4270 call    printf
	R(ADD(esp, 0x20));	// 4271 add     esp, 20h
	R(POP(ebx));	// 4272 pop     ebx
	R(POP(esi));	// 4273 pop     esi
	R(POP(ebp));	// 4274 pop     ebp
	R(RETN);	// 4275 retn
 // Procedure exec_shrb() start
exec_shrb:
#undef s0
#define s0 8	// 4287 s0 = 8
#undef s1
#define s1 0x0C	// 4288 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 4289 iflags = 0x10
	R(PUSH(ebp));	// 4292 push    ebp
	R(MOV(ebp, esp));	// 4293 mov     ebp, esp
	R(PUSH(esi));	// 4294 push    esi
	R(PUSH(ebx));	// 4295 push    ebx
	R(SUB(esp, 0x20));	// 4296 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4297 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4298 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4299 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4300 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4301 flags = esi
	R(MOV(edx, res));	// 4302 mov     edx, res
	R(MOV(eax, flags));	// 4303 mov     eax, flags
	R(PUSH(eax));	// 4304 push    eax
	R(POPF);	// 4305 popf
	R(SHR(dl, cl));	// 4306 shr     dl, cl
	R(PUSHF);	// 4307 pushf
	R(POP(eax));	// 4308 pop     eax
#undef res
#define res edx	// 4309 res = edx
#undef flags
#define flags eax	// 4310 flags = eax
	R(CMP(ecx, 1));	// 4311 cmp     ecx, 1
		R(JZ(loc_40488c));	// 4312 jz      short loc_40488C
	R(AND(ah, 0x0F7));	// 4313 and     ah, 0F7h
loc_40488c:
	R(AND(flags, 0x8C5));	// 4316 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4317 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4318 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4319 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4320 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4321 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrb)));	// 4322 mov     dword ptr [esp+4], offset aShrb ; "shrb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4323 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4324 call    printf
	R(ADD(esp, 0x20));	// 4325 add     esp, 20h
	R(POP(ebx));	// 4326 pop     ebx
	R(POP(esi));	// 4327 pop     esi
	R(POP(ebp));	// 4328 pop     ebp
	R(RETN);	// 4329 retn
 // Procedure exec_shr() start
exec_shr:
#undef s2
#define s2 8	// 4342 s2 = 8
#undef s0
#define s0 0x0C	// 4343 s0 = 0x0C
#undef s1
#define s1 0x10	// 4344 s1 = 0x10
	R(PUSH(ebp));	// 4347 push    ebp
	R(MOV(ebp, esp));	// 4348 mov     ebp, esp
	R(PUSH(edi));	// 4349 push    edi
	R(PUSH(esi));	// 4350 push    esi
	R(PUSH(ebx));	// 4351 push    ebx
	R(SUB(esp, 0x1C));	// 4352 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4353 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 4354 mov     esi, [ebp+s1]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));	// 4355 mov     edi, [ebp+s2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4356 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4357 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4358 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4359 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shrl));	// 4360 call    exec_shrl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4361 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4362 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4363 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4364 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shrw));	// 4365 call    exec_shrw
	R(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));	// 4366 mov     [ebp+s0], esi
	R(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));	// 4367 mov     [ebp+s2], ebx
	R(MOV(*(raddr(ds,ebp+s1)), 0));	// 4368 mov     [ebp+s1], 0
	R(ADD(esp, 0x1C));	// 4369 add     esp, 1Ch
	R(POP(ebx));	// 4370 pop     ebx
	R(POP(esi));	// 4371 pop     esi
	R(POP(edi));	// 4372 pop     edi
	R(POP(ebp));	// 4373 pop     ebp
		R(JMP(exec_shrb));	// 4374 jmp     exec_shrb
 // Procedure test_shr() start
test_shr:
	R(PUSH(ebp));	// 4386 push    ebp
	R(MOV(ebp, esp));	// 4387 mov     ebp, esp
	R(PUSH(ebx));	// 4388 push    ebx
	R(SUB(esp, 0x14));	// 4389 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 4390 xor     ebx, ebx
loc_404924:
#undef i
#define i ebx	// 4393 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4394 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 4395 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 4396 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 4397 inc     i
	R(CALL(kexec_shr));	// 4398 call    exec_shr
#undef i
#define i ebx	// 4399 i = ebx
	R(CMP(i, 0x20));	// 4400 cmp     i, 20h
		R(JNZ(loc_404924));	// 4401 jnz     short loc_404924
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4402 xor     i, i
loc_404944:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4405 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 4406 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 4407 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 4408 inc     i
	R(CALL(kexec_shr));	// 4409 call    exec_shr
#undef i
#define i ebx	// 4410 i = ebx
	R(CMP(i, 0x20));	// 4411 cmp     i, 20h
		R(JNZ(loc_404944));	// 4412 jnz     short loc_404944
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4413 xor     i, i
loc_404964:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4416 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 4417 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 4418 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 4419 inc     i
	R(CALL(kexec_shr));	// 4420 call    exec_shr
#undef i
#define i ebx	// 4421 i = ebx
	R(CMP(i, 0x20));	// 4422 cmp     i, 20h
		R(JNZ(loc_404964));	// 4423 jnz     short loc_404964
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4424 xor     i, i
loc_404984:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4427 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 4428 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 4429 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 4430 inc     i
	R(CALL(kexec_shr));	// 4431 call    exec_shr
#undef i
#define i ebx	// 4432 i = ebx
	R(CMP(i, 0x20));	// 4433 cmp     i, 20h
		R(JNZ(loc_404984));	// 4434 jnz     short loc_404984
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4435 xor     i, i
loc_4049a4:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4438 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 4439 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 4440 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 4441 inc     i
	R(CALL(kexec_shr));	// 4442 call    exec_shr
#undef i
#define i ebx	// 4443 i = ebx
	R(CMP(i, 0x20));	// 4444 cmp     i, 20h
		R(JNZ(loc_4049a4));	// 4445 jnz     short loc_4049A4
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4446 xor     i, i
loc_4049c4:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4449 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 4450 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 4451 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 4452 inc     i
	R(CALL(kexec_shr));	// 4453 call    exec_shr
#undef i
#define i ebx	// 4454 i = ebx
	R(CMP(i, 0x20));	// 4455 cmp     i, 20h
		R(JNZ(loc_4049c4));	// 4456 jnz     short loc_4049C4
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4457 xor     i, i
loc_4049e4:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4460 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 4461 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 4462 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 4463 inc     i
	R(CALL(kexec_shr));	// 4464 call    exec_shr
#undef i
#define i ebx	// 4465 i = ebx
	R(CMP(i, 0x20));	// 4466 cmp     i, 20h
		R(JNZ(loc_4049e4));	// 4467 jnz     short loc_4049E4
	R(ADD(esp, 0x14));	// 4468 add     esp, 14h
	R(POP(i));	// 4469 pop     i
	R(POP(ebp));	// 4470 pop     ebp
	R(RETN);	// 4471 retn
 // Procedure exec_sarl() start
exec_sarl:
#undef s2
#define s2 8	// 4483 s2 = 8
#undef s0
#define s0 0x0C	// 4484 s0 = 0x0C
#undef s1
#define s1 0x10	// 4485 s1 = 0x10
#undef iflags
#define iflags 0x14	// 4486 iflags = 0x14
	R(PUSH(ebp));	// 4489 push    ebp
	R(MOV(ebp, esp));	// 4490 mov     ebp, esp
	R(PUSH(esi));	// 4491 push    esi
	R(PUSH(ebx));	// 4492 push    ebx
	R(SUB(esp, 0x20));	// 4493 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4494 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4495 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4496 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4497 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4498 flags = esi
	R(MOV(edx, res));	// 4499 mov     edx, res
	R(MOV(eax, flags));	// 4500 mov     eax, flags
	R(PUSH(eax));	// 4501 push    eax
	R(POPF);	// 4502 popf
	R(SAR(edx, cl));	// 4503 sar     edx, cl
	R(PUSHF);	// 4504 pushf
	R(POP(eax));	// 4505 pop     eax
#undef res
#define res edx	// 4506 res = edx
#undef flags
#define flags eax	// 4507 flags = eax
	R(CMP(ecx, 1));	// 4508 cmp     ecx, 1
		R(JZ(loc_404a2b));	// 4509 jz      short loc_404A2B
	R(AND(ah, 0x0F7));	// 4510 and     ah, 0F7h
loc_404a2b:
	R(AND(flags, 0x8C5));	// 4513 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4514 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4515 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4516 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4517 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4518 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSarl)));	// 4519 mov     dword ptr [esp+4], offset aSarl ; "sarl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4520 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4521 call    printf
	R(ADD(esp, 0x20));	// 4522 add     esp, 20h
	R(POP(ebx));	// 4523 pop     ebx
	R(POP(esi));	// 4524 pop     esi
	R(POP(ebp));	// 4525 pop     ebp
	R(RETN);	// 4526 retn
 // Procedure exec_sarw() start
exec_sarw:
#undef s2
#define s2 8	// 4538 s2 = 8
#undef s0
#define s0 0x0C	// 4539 s0 = 0x0C
#undef s1
#define s1 0x10	// 4540 s1 = 0x10
#undef iflags
#define iflags 0x14	// 4541 iflags = 0x14
	R(PUSH(ebp));	// 4544 push    ebp
	R(MOV(ebp, esp));	// 4545 mov     ebp, esp
	R(PUSH(esi));	// 4546 push    esi
	R(PUSH(ebx));	// 4547 push    ebx
	R(SUB(esp, 0x20));	// 4548 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4549 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4550 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4551 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4552 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4553 flags = esi
	R(MOV(edx, res));	// 4554 mov     edx, res
	R(MOV(eax, flags));	// 4555 mov     eax, flags
	R(PUSH(eax));	// 4556 push    eax
	R(POPF);	// 4557 popf
	R(SAR(dx, cl));	// 4558 sar     dx, cl
	R(PUSHF);	// 4559 pushf
	R(POP(eax));	// 4560 pop     eax
#undef res
#define res edx	// 4561 res = edx
#undef flags
#define flags eax	// 4562 flags = eax
	R(CMP(ecx, 1));	// 4563 cmp     ecx, 1
		R(JZ(loc_404a83));	// 4564 jz      short loc_404A83
	R(AND(ah, 0x0F7));	// 4565 and     ah, 0F7h
loc_404a83:
	R(AND(flags, 0x8C5));	// 4568 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4569 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4570 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4571 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4572 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4573 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSarw)));	// 4574 mov     dword ptr [esp+4], offset aSarw ; "sarw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4575 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4576 call    printf
	R(ADD(esp, 0x20));	// 4577 add     esp, 20h
	R(POP(ebx));	// 4578 pop     ebx
	R(POP(esi));	// 4579 pop     esi
	R(POP(ebp));	// 4580 pop     ebp
	R(RETN);	// 4581 retn
 // Procedure exec_sarb() start
exec_sarb:
#undef s0
#define s0 8	// 4593 s0 = 8
#undef s1
#define s1 0x0C	// 4594 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 4595 iflags = 0x10
	R(PUSH(ebp));	// 4598 push    ebp
	R(MOV(ebp, esp));	// 4599 mov     ebp, esp
	R(PUSH(esi));	// 4600 push    esi
	R(PUSH(ebx));	// 4601 push    ebx
	R(SUB(esp, 0x20));	// 4602 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4603 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4604 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4605 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4606 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4607 flags = esi
	R(MOV(edx, res));	// 4608 mov     edx, res
	R(MOV(eax, flags));	// 4609 mov     eax, flags
	R(PUSH(eax));	// 4610 push    eax
	R(POPF);	// 4611 popf
	R(SAR(dl, cl));	// 4612 sar     dl, cl
	R(PUSHF);	// 4613 pushf
	R(POP(eax));	// 4614 pop     eax
#undef res
#define res edx	// 4615 res = edx
#undef flags
#define flags eax	// 4616 flags = eax
	R(CMP(ecx, 1));	// 4617 cmp     ecx, 1
		R(JZ(loc_404ada));	// 4618 jz      short loc_404ADA
	R(AND(ah, 0x0F7));	// 4619 and     ah, 0F7h
loc_404ada:
	R(AND(flags, 0x8C5));	// 4622 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4623 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4624 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4625 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4626 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4627 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSarb)));	// 4628 mov     dword ptr [esp+4], offset aSarb ; "sarb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4629 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4630 call    printf
	R(ADD(esp, 0x20));	// 4631 add     esp, 20h
	R(POP(ebx));	// 4632 pop     ebx
	R(POP(esi));	// 4633 pop     esi
	R(POP(ebp));	// 4634 pop     ebp
	R(RETN);	// 4635 retn
 // Procedure exec_sar() start
exec_sar:
#undef s2
#define s2 8	// 4648 s2 = 8
#undef s0
#define s0 0x0C	// 4649 s0 = 0x0C
#undef s1
#define s1 0x10	// 4650 s1 = 0x10
	R(PUSH(ebp));	// 4653 push    ebp
	R(MOV(ebp, esp));	// 4654 mov     ebp, esp
	R(PUSH(edi));	// 4655 push    edi
	R(PUSH(esi));	// 4656 push    esi
	R(PUSH(ebx));	// 4657 push    ebx
	R(SUB(esp, 0x1C));	// 4658 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4659 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 4660 mov     esi, [ebp+s1]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));	// 4661 mov     edi, [ebp+s2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4662 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4663 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4664 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4665 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_sarl));	// 4666 call    exec_sarl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4667 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4668 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4669 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4670 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_sarw));	// 4671 call    exec_sarw
	R(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));	// 4672 mov     [ebp+s0], esi
	R(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));	// 4673 mov     [ebp+s2], ebx
	R(MOV(*(raddr(ds,ebp+s1)), 0));	// 4674 mov     [ebp+s1], 0
	R(ADD(esp, 0x1C));	// 4675 add     esp, 1Ch
	R(POP(ebx));	// 4676 pop     ebx
	R(POP(esi));	// 4677 pop     esi
	R(POP(edi));	// 4678 pop     edi
	R(POP(ebp));	// 4679 pop     ebp
		R(JMP(exec_sarb));	// 4680 jmp     exec_sarb
 // Procedure test_sar() start
test_sar:
	R(PUSH(ebp));	// 4692 push    ebp
	R(MOV(ebp, esp));	// 4693 mov     ebp, esp
	R(PUSH(ebx));	// 4694 push    ebx
	R(SUB(esp, 0x14));	// 4695 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 4696 xor     ebx, ebx
loc_404b72:
#undef i
#define i ebx	// 4699 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4700 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 4701 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 4702 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 4703 inc     i
	R(CALL(kexec_sar));	// 4704 call    exec_sar
#undef i
#define i ebx	// 4705 i = ebx
	R(CMP(i, 0x20));	// 4706 cmp     i, 20h
		R(JNZ(loc_404b72));	// 4707 jnz     short loc_404B72
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4708 xor     i, i
loc_404b92:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4711 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 4712 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 4713 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 4714 inc     i
	R(CALL(kexec_sar));	// 4715 call    exec_sar
#undef i
#define i ebx	// 4716 i = ebx
	R(CMP(i, 0x20));	// 4717 cmp     i, 20h
		R(JNZ(loc_404b92));	// 4718 jnz     short loc_404B92
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4719 xor     i, i
loc_404bb2:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4722 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 4723 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 4724 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 4725 inc     i
	R(CALL(kexec_sar));	// 4726 call    exec_sar
#undef i
#define i ebx	// 4727 i = ebx
	R(CMP(i, 0x20));	// 4728 cmp     i, 20h
		R(JNZ(loc_404bb2));	// 4729 jnz     short loc_404BB2
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4730 xor     i, i
loc_404bd2:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4733 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 4734 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 4735 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 4736 inc     i
	R(CALL(kexec_sar));	// 4737 call    exec_sar
#undef i
#define i ebx	// 4738 i = ebx
	R(CMP(i, 0x20));	// 4739 cmp     i, 20h
		R(JNZ(loc_404bd2));	// 4740 jnz     short loc_404BD2
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4741 xor     i, i
loc_404bf2:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4744 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 4745 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 4746 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 4747 inc     i
	R(CALL(kexec_sar));	// 4748 call    exec_sar
#undef i
#define i ebx	// 4749 i = ebx
	R(CMP(i, 0x20));	// 4750 cmp     i, 20h
		R(JNZ(loc_404bf2));	// 4751 jnz     short loc_404BF2
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4752 xor     i, i
loc_404c12:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4755 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 4756 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 4757 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 4758 inc     i
	R(CALL(kexec_sar));	// 4759 call    exec_sar
#undef i
#define i ebx	// 4760 i = ebx
	R(CMP(i, 0x20));	// 4761 cmp     i, 20h
		R(JNZ(loc_404c12));	// 4762 jnz     short loc_404C12
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 4763 xor     i, i
loc_404c32:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 4766 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 4767 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 4768 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 4769 inc     i
	R(CALL(kexec_sar));	// 4770 call    exec_sar
#undef i
#define i ebx	// 4771 i = ebx
	R(CMP(i, 0x20));	// 4772 cmp     i, 20h
		R(JNZ(loc_404c32));	// 4773 jnz     short loc_404C32
	R(ADD(esp, 0x14));	// 4774 add     esp, 14h
	R(POP(i));	// 4775 pop     i
	R(POP(ebp));	// 4776 pop     ebp
	R(RETN);	// 4777 retn
 // Procedure exec_roll() start
exec_roll:
#undef s2
#define s2 8	// 4789 s2 = 8
#undef s0
#define s0 0x0C	// 4790 s0 = 0x0C
#undef s1
#define s1 0x10	// 4791 s1 = 0x10
#undef iflags
#define iflags 0x14	// 4792 iflags = 0x14
	R(PUSH(ebp));	// 4795 push    ebp
	R(MOV(ebp, esp));	// 4796 mov     ebp, esp
	R(PUSH(esi));	// 4797 push    esi
	R(PUSH(ebx));	// 4798 push    ebx
	R(SUB(esp, 0x20));	// 4799 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4800 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4801 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4802 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4803 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4804 flags = esi
	R(MOV(edx, res));	// 4805 mov     edx, res
	R(MOV(eax, flags));	// 4806 mov     eax, flags
	R(PUSH(eax));	// 4807 push    eax
	R(POPF);	// 4808 popf
	R(ROL(edx, cl));	// 4809 rol     edx, cl
	R(PUSHF);	// 4810 pushf
	R(POP(eax));	// 4811 pop     eax
#undef res
#define res edx	// 4812 res = edx
#undef flags
#define flags eax	// 4813 flags = eax
	R(CMP(ecx, 1));	// 4814 cmp     ecx, 1
		R(JZ(loc_404c79));	// 4815 jz      short loc_404C79
	R(AND(ah, 0x0F7));	// 4816 and     ah, 0F7h
loc_404c79:
	R(AND(flags, 0x8C5));	// 4819 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4820 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4821 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4822 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4823 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4824 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRoll)));	// 4825 mov     dword ptr [esp+4], offset aRoll ; "roll"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4826 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4827 call    printf
	R(ADD(esp, 0x20));	// 4828 add     esp, 20h
	R(POP(ebx));	// 4829 pop     ebx
	R(POP(esi));	// 4830 pop     esi
	R(POP(ebp));	// 4831 pop     ebp
	R(RETN);	// 4832 retn
 // Procedure exec_rolw() start
exec_rolw:
#undef s2
#define s2 8	// 4844 s2 = 8
#undef s0
#define s0 0x0C	// 4845 s0 = 0x0C
#undef s1
#define s1 0x10	// 4846 s1 = 0x10
#undef iflags
#define iflags 0x14	// 4847 iflags = 0x14
	R(PUSH(ebp));	// 4850 push    ebp
	R(MOV(ebp, esp));	// 4851 mov     ebp, esp
	R(PUSH(esi));	// 4852 push    esi
	R(PUSH(ebx));	// 4853 push    ebx
	R(SUB(esp, 0x20));	// 4854 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4855 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4856 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4857 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4858 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4859 flags = esi
	R(MOV(edx, res));	// 4860 mov     edx, res
	R(MOV(eax, flags));	// 4861 mov     eax, flags
	R(PUSH(eax));	// 4862 push    eax
	R(POPF);	// 4863 popf
	R(ROL(dx, cl));	// 4864 rol     dx, cl
	R(PUSHF);	// 4865 pushf
	R(POP(eax));	// 4866 pop     eax
#undef res
#define res edx	// 4867 res = edx
#undef flags
#define flags eax	// 4868 flags = eax
	R(CMP(ecx, 1));	// 4869 cmp     ecx, 1
		R(JZ(loc_404cd1));	// 4870 jz      short loc_404CD1
	R(AND(ah, 0x0F7));	// 4871 and     ah, 0F7h
loc_404cd1:
	R(AND(flags, 0x8C5));	// 4874 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4875 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4876 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4877 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4878 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4879 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRolw)));	// 4880 mov     dword ptr [esp+4], offset aRolw ; "rolw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4881 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4882 call    printf
	R(ADD(esp, 0x20));	// 4883 add     esp, 20h
	R(POP(ebx));	// 4884 pop     ebx
	R(POP(esi));	// 4885 pop     esi
	R(POP(ebp));	// 4886 pop     ebp
	R(RETN);	// 4887 retn
 // Procedure exec_rolb() start
exec_rolb:
#undef s0
#define s0 8	// 4899 s0 = 8
#undef s1
#define s1 0x0C	// 4900 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 4901 iflags = 0x10
	R(PUSH(ebp));	// 4904 push    ebp
	R(MOV(ebp, esp));	// 4905 mov     ebp, esp
	R(PUSH(esi));	// 4906 push    esi
	R(PUSH(ebx));	// 4907 push    ebx
	R(SUB(esp, 0x20));	// 4908 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 4909 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4910 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 4911 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 4912 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 4913 flags = esi
	R(MOV(edx, res));	// 4914 mov     edx, res
	R(MOV(eax, flags));	// 4915 mov     eax, flags
	R(PUSH(eax));	// 4916 push    eax
	R(POPF);	// 4917 popf
	R(ROL(dl, cl));	// 4918 rol     dl, cl
	R(PUSHF);	// 4919 pushf
	R(POP(eax));	// 4920 pop     eax
#undef res
#define res edx	// 4921 res = edx
#undef flags
#define flags eax	// 4922 flags = eax
	R(CMP(ecx, 1));	// 4923 cmp     ecx, 1
		R(JZ(loc_404d28));	// 4924 jz      short loc_404D28
	R(AND(ah, 0x0F7));	// 4925 and     ah, 0F7h
loc_404d28:
	R(AND(flags, 0x8C5));	// 4928 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 4929 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 4930 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 4931 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 4932 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 4933 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRolb)));	// 4934 mov     dword ptr [esp+4], offset aRolb ; "rolb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 4935 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 4936 call    printf
	R(ADD(esp, 0x20));	// 4937 add     esp, 20h
	R(POP(ebx));	// 4938 pop     ebx
	R(POP(esi));	// 4939 pop     esi
	R(POP(ebp));	// 4940 pop     ebp
	R(RETN);	// 4941 retn
 // Procedure exec_rol() start
exec_rol:
#undef s2
#define s2 8	// 4954 s2 = 8
#undef s0
#define s0 0x0C	// 4955 s0 = 0x0C
#undef s1
#define s1 0x10	// 4956 s1 = 0x10
	R(PUSH(ebp));	// 4959 push    ebp
	R(MOV(ebp, esp));	// 4960 mov     ebp, esp
	R(PUSH(edi));	// 4961 push    edi
	R(PUSH(esi));	// 4962 push    esi
	R(PUSH(ebx));	// 4963 push    ebx
	R(SUB(esp, 0x1C));	// 4964 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 4965 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 4966 mov     esi, [ebp+s1]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));	// 4967 mov     edi, [ebp+s2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4968 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4969 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4970 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4971 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_roll));	// 4972 call    exec_roll
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 4973 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 4974 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 4975 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 4976 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_rolw));	// 4977 call    exec_rolw
	R(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));	// 4978 mov     [ebp+s0], esi
	R(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));	// 4979 mov     [ebp+s2], ebx
	R(MOV(*(raddr(ds,ebp+s1)), 0));	// 4980 mov     [ebp+s1], 0
	R(ADD(esp, 0x1C));	// 4981 add     esp, 1Ch
	R(POP(ebx));	// 4982 pop     ebx
	R(POP(esi));	// 4983 pop     esi
	R(POP(edi));	// 4984 pop     edi
	R(POP(ebp));	// 4985 pop     ebp
		R(JMP(exec_rolb));	// 4986 jmp     exec_rolb
 // Procedure test_rol() start
test_rol:
	R(PUSH(ebp));	// 4998 push    ebp
	R(MOV(ebp, esp));	// 4999 mov     ebp, esp
	R(PUSH(ebx));	// 5000 push    ebx
	R(SUB(esp, 0x14));	// 5001 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 5002 xor     ebx, ebx
loc_404dc0:
#undef i
#define i ebx	// 5005 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5006 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5007 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5008 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5009 inc     i
	R(CALL(kexec_rol));	// 5010 call    exec_rol
#undef i
#define i ebx	// 5011 i = ebx
	R(CMP(i, 0x20));	// 5012 cmp     i, 20h
		R(JNZ(loc_404dc0));	// 5013 jnz     short loc_404DC0
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5014 xor     i, i
loc_404de0:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5017 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5018 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5019 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5020 inc     i
	R(CALL(kexec_rol));	// 5021 call    exec_rol
#undef i
#define i ebx	// 5022 i = ebx
	R(CMP(i, 0x20));	// 5023 cmp     i, 20h
		R(JNZ(loc_404de0));	// 5024 jnz     short loc_404DE0
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5025 xor     i, i
loc_404e00:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5028 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5029 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5030 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5031 inc     i
	R(CALL(kexec_rol));	// 5032 call    exec_rol
#undef i
#define i ebx	// 5033 i = ebx
	R(CMP(i, 0x20));	// 5034 cmp     i, 20h
		R(JNZ(loc_404e00));	// 5035 jnz     short loc_404E00
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5036 xor     i, i
loc_404e20:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5039 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5040 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5041 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5042 inc     i
	R(CALL(kexec_rol));	// 5043 call    exec_rol
#undef i
#define i ebx	// 5044 i = ebx
	R(CMP(i, 0x20));	// 5045 cmp     i, 20h
		R(JNZ(loc_404e20));	// 5046 jnz     short loc_404E20
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5047 xor     i, i
loc_404e40:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5050 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 5051 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 5052 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 5053 inc     i
	R(CALL(kexec_rol));	// 5054 call    exec_rol
#undef i
#define i ebx	// 5055 i = ebx
	R(CMP(i, 0x20));	// 5056 cmp     i, 20h
		R(JNZ(loc_404e40));	// 5057 jnz     short loc_404E40
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5058 xor     i, i
loc_404e60:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5061 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 5062 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 5063 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 5064 inc     i
	R(CALL(kexec_rol));	// 5065 call    exec_rol
#undef i
#define i ebx	// 5066 i = ebx
	R(CMP(i, 0x20));	// 5067 cmp     i, 20h
		R(JNZ(loc_404e60));	// 5068 jnz     short loc_404E60
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5069 xor     i, i
loc_404e80:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5072 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 5073 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 5074 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 5075 inc     i
	R(CALL(kexec_rol));	// 5076 call    exec_rol
#undef i
#define i ebx	// 5077 i = ebx
	R(CMP(i, 0x20));	// 5078 cmp     i, 20h
		R(JNZ(loc_404e80));	// 5079 jnz     short loc_404E80
	R(ADD(esp, 0x14));	// 5080 add     esp, 14h
	R(POP(i));	// 5081 pop     i
	R(POP(ebp));	// 5082 pop     ebp
	R(RETN);	// 5083 retn
 // Procedure exec_rorl() start
exec_rorl:
#undef s2
#define s2 8	// 5095 s2 = 8
#undef s0
#define s0 0x0C	// 5096 s0 = 0x0C
#undef s1
#define s1 0x10	// 5097 s1 = 0x10
#undef iflags
#define iflags 0x14	// 5098 iflags = 0x14
	R(PUSH(ebp));	// 5101 push    ebp
	R(MOV(ebp, esp));	// 5102 mov     ebp, esp
	R(PUSH(esi));	// 5103 push    esi
	R(PUSH(ebx));	// 5104 push    ebx
	R(SUB(esp, 0x20));	// 5105 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5106 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5107 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5108 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5109 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5110 flags = esi
	R(MOV(edx, res));	// 5111 mov     edx, res
	R(MOV(eax, flags));	// 5112 mov     eax, flags
	R(PUSH(eax));	// 5113 push    eax
	R(POPF);	// 5114 popf
	R(ROR(edx, cl));	// 5115 ror     edx, cl
	R(PUSHF);	// 5116 pushf
	R(POP(eax));	// 5117 pop     eax
#undef res
#define res edx	// 5118 res = edx
#undef flags
#define flags eax	// 5119 flags = eax
	R(CMP(ecx, 1));	// 5120 cmp     ecx, 1
		R(JZ(loc_404ec7));	// 5121 jz      short loc_404EC7
	R(AND(ah, 0x0F7));	// 5122 and     ah, 0F7h
loc_404ec7:
	R(AND(flags, 0x8C5));	// 5125 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5126 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5127 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5128 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5129 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5130 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRorl)));	// 5131 mov     dword ptr [esp+4], offset aRorl ; "rorl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5132 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5133 call    printf
	R(ADD(esp, 0x20));	// 5134 add     esp, 20h
	R(POP(ebx));	// 5135 pop     ebx
	R(POP(esi));	// 5136 pop     esi
	R(POP(ebp));	// 5137 pop     ebp
	R(RETN);	// 5138 retn
 // Procedure exec_rorw() start
exec_rorw:
#undef s2
#define s2 8	// 5150 s2 = 8
#undef s0
#define s0 0x0C	// 5151 s0 = 0x0C
#undef s1
#define s1 0x10	// 5152 s1 = 0x10
#undef iflags
#define iflags 0x14	// 5153 iflags = 0x14
	R(PUSH(ebp));	// 5156 push    ebp
	R(MOV(ebp, esp));	// 5157 mov     ebp, esp
	R(PUSH(esi));	// 5158 push    esi
	R(PUSH(ebx));	// 5159 push    ebx
	R(SUB(esp, 0x20));	// 5160 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5161 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5162 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5163 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5164 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5165 flags = esi
	R(MOV(edx, res));	// 5166 mov     edx, res
	R(MOV(eax, flags));	// 5167 mov     eax, flags
	R(PUSH(eax));	// 5168 push    eax
	R(POPF);	// 5169 popf
	R(ROR(dx, cl));	// 5170 ror     dx, cl
	R(PUSHF);	// 5171 pushf
	R(POP(eax));	// 5172 pop     eax
#undef res
#define res edx	// 5173 res = edx
#undef flags
#define flags eax	// 5174 flags = eax
	R(CMP(ecx, 1));	// 5175 cmp     ecx, 1
		R(JZ(loc_404f1f));	// 5176 jz      short loc_404F1F
	R(AND(ah, 0x0F7));	// 5177 and     ah, 0F7h
loc_404f1f:
	R(AND(flags, 0x8C5));	// 5180 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5181 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5182 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5183 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5184 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5185 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRorw)));	// 5186 mov     dword ptr [esp+4], offset aRorw ; "rorw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5187 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5188 call    printf
	R(ADD(esp, 0x20));	// 5189 add     esp, 20h
	R(POP(ebx));	// 5190 pop     ebx
	R(POP(esi));	// 5191 pop     esi
	R(POP(ebp));	// 5192 pop     ebp
	R(RETN);	// 5193 retn
 // Procedure exec_rorb() start
exec_rorb:
#undef s0
#define s0 8	// 5205 s0 = 8
#undef s1
#define s1 0x0C	// 5206 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 5207 iflags = 0x10
	R(PUSH(ebp));	// 5210 push    ebp
	R(MOV(ebp, esp));	// 5211 mov     ebp, esp
	R(PUSH(esi));	// 5212 push    esi
	R(PUSH(ebx));	// 5213 push    ebx
	R(SUB(esp, 0x20));	// 5214 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5215 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5216 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5217 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5218 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5219 flags = esi
	R(MOV(edx, res));	// 5220 mov     edx, res
	R(MOV(eax, flags));	// 5221 mov     eax, flags
	R(PUSH(eax));	// 5222 push    eax
	R(POPF);	// 5223 popf
	R(ROR(dl, cl));	// 5224 ror     dl, cl
	R(PUSHF);	// 5225 pushf
	R(POP(eax));	// 5226 pop     eax
#undef res
#define res edx	// 5227 res = edx
#undef flags
#define flags eax	// 5228 flags = eax
	R(CMP(ecx, 1));	// 5229 cmp     ecx, 1
		R(JZ(loc_404f76));	// 5230 jz      short loc_404F76
	R(AND(ah, 0x0F7));	// 5231 and     ah, 0F7h
loc_404f76:
	R(AND(flags, 0x8C5));	// 5234 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5235 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5236 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5237 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5238 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5239 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRorb)));	// 5240 mov     dword ptr [esp+4], offset aRorb ; "rorb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5241 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5242 call    printf
	R(ADD(esp, 0x20));	// 5243 add     esp, 20h
	R(POP(ebx));	// 5244 pop     ebx
	R(POP(esi));	// 5245 pop     esi
	R(POP(ebp));	// 5246 pop     ebp
	R(RETN);	// 5247 retn
 // Procedure exec_ror() start
exec_ror:
#undef s2
#define s2 8	// 5260 s2 = 8
#undef s0
#define s0 0x0C	// 5261 s0 = 0x0C
#undef s1
#define s1 0x10	// 5262 s1 = 0x10
	R(PUSH(ebp));	// 5265 push    ebp
	R(MOV(ebp, esp));	// 5266 mov     ebp, esp
	R(PUSH(edi));	// 5267 push    edi
	R(PUSH(esi));	// 5268 push    esi
	R(PUSH(ebx));	// 5269 push    ebx
	R(SUB(esp, 0x1C));	// 5270 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5271 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 5272 mov     esi, [ebp+s1]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));	// 5273 mov     edi, [ebp+s2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5274 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5275 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5276 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 5277 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_rorl));	// 5278 call    exec_rorl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5279 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5280 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5281 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 5282 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_rorw));	// 5283 call    exec_rorw
	R(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));	// 5284 mov     [ebp+s0], esi
	R(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));	// 5285 mov     [ebp+s2], ebx
	R(MOV(*(raddr(ds,ebp+s1)), 0));	// 5286 mov     [ebp+s1], 0
	R(ADD(esp, 0x1C));	// 5287 add     esp, 1Ch
	R(POP(ebx));	// 5288 pop     ebx
	R(POP(esi));	// 5289 pop     esi
	R(POP(edi));	// 5290 pop     edi
	R(POP(ebp));	// 5291 pop     ebp
		R(JMP(exec_rorb));	// 5292 jmp     exec_rorb
 // Procedure test_ror() start
test_ror:
	R(PUSH(ebp));	// 5304 push    ebp
	R(MOV(ebp, esp));	// 5305 mov     ebp, esp
	R(PUSH(ebx));	// 5306 push    ebx
	R(SUB(esp, 0x14));	// 5307 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 5308 xor     ebx, ebx
loc_40500e:
#undef i
#define i ebx	// 5311 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5312 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5313 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5314 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5315 inc     i
	R(CALL(kexec_ror));	// 5316 call    exec_ror
#undef i
#define i ebx	// 5317 i = ebx
	R(CMP(i, 0x20));	// 5318 cmp     i, 20h
		R(JNZ(loc_40500e));	// 5319 jnz     short loc_40500E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5320 xor     i, i
loc_40502e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5323 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5324 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5325 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5326 inc     i
	R(CALL(kexec_ror));	// 5327 call    exec_ror
#undef i
#define i ebx	// 5328 i = ebx
	R(CMP(i, 0x20));	// 5329 cmp     i, 20h
		R(JNZ(loc_40502e));	// 5330 jnz     short loc_40502E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5331 xor     i, i
loc_40504e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5334 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5335 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5336 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5337 inc     i
	R(CALL(kexec_ror));	// 5338 call    exec_ror
#undef i
#define i ebx	// 5339 i = ebx
	R(CMP(i, 0x20));	// 5340 cmp     i, 20h
		R(JNZ(loc_40504e));	// 5341 jnz     short loc_40504E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5342 xor     i, i
loc_40506e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5345 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5346 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5347 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5348 inc     i
	R(CALL(kexec_ror));	// 5349 call    exec_ror
#undef i
#define i ebx	// 5350 i = ebx
	R(CMP(i, 0x20));	// 5351 cmp     i, 20h
		R(JNZ(loc_40506e));	// 5352 jnz     short loc_40506E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5353 xor     i, i
loc_40508e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5356 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 5357 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 5358 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 5359 inc     i
	R(CALL(kexec_ror));	// 5360 call    exec_ror
#undef i
#define i ebx	// 5361 i = ebx
	R(CMP(i, 0x20));	// 5362 cmp     i, 20h
		R(JNZ(loc_40508e));	// 5363 jnz     short loc_40508E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5364 xor     i, i
loc_4050ae:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5367 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 5368 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 5369 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 5370 inc     i
	R(CALL(kexec_ror));	// 5371 call    exec_ror
#undef i
#define i ebx	// 5372 i = ebx
	R(CMP(i, 0x20));	// 5373 cmp     i, 20h
		R(JNZ(loc_4050ae));	// 5374 jnz     short loc_4050AE
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5375 xor     i, i
loc_4050ce:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5378 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 5379 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 5380 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 5381 inc     i
	R(CALL(kexec_ror));	// 5382 call    exec_ror
#undef i
#define i ebx	// 5383 i = ebx
	R(CMP(i, 0x20));	// 5384 cmp     i, 20h
		R(JNZ(loc_4050ce));	// 5385 jnz     short loc_4050CE
	R(ADD(esp, 0x14));	// 5386 add     esp, 14h
	R(POP(i));	// 5387 pop     i
	R(POP(ebp));	// 5388 pop     ebp
	R(RETN);	// 5389 retn
 // Procedure exec_rcrl() start
exec_rcrl:
#undef s2
#define s2 8	// 5402 s2 = 8
#undef s0
#define s0 0x0C	// 5403 s0 = 0x0C
#undef s1
#define s1 0x10	// 5404 s1 = 0x10
#undef iflags
#define iflags 0x14	// 5405 iflags = 0x14
	R(PUSH(ebp));	// 5408 push    ebp
	R(MOV(ebp, esp));	// 5409 mov     ebp, esp
	R(PUSH(esi));	// 5410 push    esi
	R(PUSH(ebx));	// 5411 push    ebx
	R(SUB(esp, 0x20));	// 5412 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5413 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5414 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5415 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5416 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5417 flags = esi
	R(MOV(edx, res));	// 5418 mov     edx, res
	R(MOV(eax, flags));	// 5419 mov     eax, flags
	R(PUSH(eax));	// 5420 push    eax
	R(POPF);	// 5421 popf
	R(RCR(edx, cl));	// 5422 rcr     edx, cl
	R(PUSHF);	// 5423 pushf
	R(POP(eax));	// 5424 pop     eax
#undef res
#define res edx	// 5425 res = edx
#undef flags
#define flags eax	// 5426 flags = eax
	R(CMP(ecx, 1));	// 5427 cmp     ecx, 1
		R(JZ(loc_405115));	// 5428 jz      short loc_405115
	R(AND(ah, 0x0F7));	// 5429 and     ah, 0F7h
loc_405115:
	R(AND(flags, 0x8C5));	// 5432 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5433 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5434 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5435 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5436 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5437 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcrl)));	// 5438 mov     dword ptr [esp+4], offset aRcrl ; "rcrl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5439 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5440 call    printf
	R(ADD(esp, 0x20));	// 5441 add     esp, 20h
	R(POP(ebx));	// 5442 pop     ebx
	R(POP(esi));	// 5443 pop     esi
	R(POP(ebp));	// 5444 pop     ebp
	R(RETN);	// 5445 retn
 // Procedure exec_rcrw() start
exec_rcrw:
#undef s2
#define s2 8	// 5458 s2 = 8
#undef s0
#define s0 0x0C	// 5459 s0 = 0x0C
#undef s1
#define s1 0x10	// 5460 s1 = 0x10
#undef iflags
#define iflags 0x14	// 5461 iflags = 0x14
	R(PUSH(ebp));	// 5464 push    ebp
	R(MOV(ebp, esp));	// 5465 mov     ebp, esp
	R(PUSH(esi));	// 5466 push    esi
	R(PUSH(ebx));	// 5467 push    ebx
	R(SUB(esp, 0x20));	// 5468 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5469 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5470 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5471 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5472 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5473 flags = esi
	R(MOV(edx, res));	// 5474 mov     edx, res
	R(MOV(eax, flags));	// 5475 mov     eax, flags
	R(PUSH(eax));	// 5476 push    eax
	R(POPF);	// 5477 popf
	R(RCR(dx, cl));	// 5478 rcr     dx, cl
	R(PUSHF);	// 5479 pushf
	R(POP(eax));	// 5480 pop     eax
#undef res
#define res edx	// 5481 res = edx
#undef flags
#define flags eax	// 5482 flags = eax
	R(CMP(ecx, 1));	// 5483 cmp     ecx, 1
		R(JZ(loc_40516d));	// 5484 jz      short loc_40516D
	R(AND(ah, 0x0F7));	// 5485 and     ah, 0F7h
loc_40516d:
	R(AND(flags, 0x8C5));	// 5488 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5489 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5490 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5491 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5492 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5493 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcrw)));	// 5494 mov     dword ptr [esp+4], offset aRcrw ; "rcrw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5495 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5496 call    printf
	R(ADD(esp, 0x20));	// 5497 add     esp, 20h
	R(POP(ebx));	// 5498 pop     ebx
	R(POP(esi));	// 5499 pop     esi
	R(POP(ebp));	// 5500 pop     ebp
	R(RETN);	// 5501 retn
 // Procedure exec_rcrb() start
exec_rcrb:
#undef s0
#define s0 8	// 5514 s0 = 8
#undef s1
#define s1 0x0C	// 5515 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 5516 iflags = 0x10
	R(PUSH(ebp));	// 5519 push    ebp
	R(MOV(ebp, esp));	// 5520 mov     ebp, esp
	R(PUSH(esi));	// 5521 push    esi
	R(PUSH(ebx));	// 5522 push    ebx
	R(SUB(esp, 0x20));	// 5523 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5524 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5525 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5526 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5527 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5528 flags = esi
	R(MOV(edx, res));	// 5529 mov     edx, res
	R(MOV(eax, flags));	// 5530 mov     eax, flags
	R(PUSH(eax));	// 5531 push    eax
	R(POPF);	// 5532 popf
	R(RCR(dl, cl));	// 5533 rcr     dl, cl
	R(PUSHF);	// 5534 pushf
	R(POP(eax));	// 5535 pop     eax
#undef res
#define res edx	// 5536 res = edx
#undef flags
#define flags eax	// 5537 flags = eax
	R(CMP(ecx, 1));	// 5538 cmp     ecx, 1
		R(JZ(loc_4051c4));	// 5539 jz      short loc_4051C4
	R(AND(ah, 0x0F7));	// 5540 and     ah, 0F7h
loc_4051c4:
	R(AND(flags, 0x8C5));	// 5543 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5544 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5545 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5546 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5547 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5548 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcrb)));	// 5549 mov     dword ptr [esp+4], offset aRcrb ; "rcrb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5550 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5551 call    printf
	R(ADD(esp, 0x20));	// 5552 add     esp, 20h
	R(POP(ebx));	// 5553 pop     ebx
	R(POP(esi));	// 5554 pop     esi
	R(POP(ebp));	// 5555 pop     ebp
	R(RETN);	// 5556 retn
 // Procedure exec_rcr() start
exec_rcr:
#undef s2
#define s2 8	// 5569 s2 = 8
#undef s0
#define s0 0x0C	// 5570 s0 = 0x0C
#undef s1
#define s1 0x10	// 5571 s1 = 0x10
	R(PUSH(ebp));	// 5574 push    ebp
	R(MOV(ebp, esp));	// 5575 mov     ebp, esp
	R(PUSH(edi));	// 5576 push    edi
	R(PUSH(esi));	// 5577 push    esi
	R(PUSH(ebx));	// 5578 push    ebx
	R(SUB(esp, 0x1C));	// 5579 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5580 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 5581 mov     esi, [ebp+s1]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));	// 5582 mov     edi, [ebp+s2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5583 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5584 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5585 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 5586 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_rcrl));	// 5587 call    exec_rcrl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5588 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5589 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5590 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 5591 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_rcrw));	// 5592 call    exec_rcrw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 5593 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 5594 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 5595 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_rcrb));	// 5596 call    exec_rcrb
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5597 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5598 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5599 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 1));	// 5600 mov     dword ptr [esp+0Ch], 1 ; iflags
	R(CALL(kexec_rcrl));	// 5601 call    exec_rcrl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5602 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5603 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5604 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 1));	// 5605 mov     dword ptr [esp+0Ch], 1 ; iflags
	R(CALL(kexec_rcrw));	// 5606 call    exec_rcrw
	R(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));	// 5607 mov     [ebp+s0], esi
	R(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));	// 5608 mov     [ebp+s2], ebx
	R(MOV(*(raddr(ds,ebp+s1)), 1));	// 5609 mov     [ebp+s1], 1
	R(ADD(esp, 0x1C));	// 5610 add     esp, 1Ch
	R(POP(ebx));	// 5611 pop     ebx
	R(POP(esi));	// 5612 pop     esi
	R(POP(edi));	// 5613 pop     edi
	R(POP(ebp));	// 5614 pop     ebp
		R(JMP(exec_rcrb));	// 5615 jmp     exec_rcrb
 // Procedure test_rcr() start
test_rcr:
	R(PUSH(ebp));	// 5627 push    ebp
	R(MOV(ebp, esp));	// 5628 mov     ebp, esp
	R(PUSH(ebx));	// 5629 push    ebx
	R(SUB(esp, 0x14));	// 5630 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 5631 xor     ebx, ebx
loc_4052a0:
#undef i
#define i ebx	// 5634 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5635 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5636 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5637 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5638 inc     i
	R(CALL(kexec_rcr));	// 5639 call    exec_rcr
#undef i
#define i ebx	// 5640 i = ebx
	R(CMP(i, 0x20));	// 5641 cmp     i, 20h
		R(JNZ(loc_4052a0));	// 5642 jnz     short loc_4052A0
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5643 xor     i, i
loc_4052c0:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5646 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5647 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5648 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5649 inc     i
	R(CALL(kexec_rcr));	// 5650 call    exec_rcr
#undef i
#define i ebx	// 5651 i = ebx
	R(CMP(i, 0x20));	// 5652 cmp     i, 20h
		R(JNZ(loc_4052c0));	// 5653 jnz     short loc_4052C0
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5654 xor     i, i
loc_4052e0:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5657 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5658 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5659 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5660 inc     i
	R(CALL(kexec_rcr));	// 5661 call    exec_rcr
#undef i
#define i ebx	// 5662 i = ebx
	R(CMP(i, 0x20));	// 5663 cmp     i, 20h
		R(JNZ(loc_4052e0));	// 5664 jnz     short loc_4052E0
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5665 xor     i, i
loc_405300:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5668 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5669 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5670 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5671 inc     i
	R(CALL(kexec_rcr));	// 5672 call    exec_rcr
#undef i
#define i ebx	// 5673 i = ebx
	R(CMP(i, 0x20));	// 5674 cmp     i, 20h
		R(JNZ(loc_405300));	// 5675 jnz     short loc_405300
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5676 xor     i, i
loc_405320:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5679 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 5680 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 5681 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 5682 inc     i
	R(CALL(kexec_rcr));	// 5683 call    exec_rcr
#undef i
#define i ebx	// 5684 i = ebx
	R(CMP(i, 0x20));	// 5685 cmp     i, 20h
		R(JNZ(loc_405320));	// 5686 jnz     short loc_405320
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5687 xor     i, i
loc_405340:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5690 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 5691 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 5692 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 5693 inc     i
	R(CALL(kexec_rcr));	// 5694 call    exec_rcr
#undef i
#define i ebx	// 5695 i = ebx
	R(CMP(i, 0x20));	// 5696 cmp     i, 20h
		R(JNZ(loc_405340));	// 5697 jnz     short loc_405340
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5698 xor     i, i
loc_405360:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5701 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 5702 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 5703 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 5704 inc     i
	R(CALL(kexec_rcr));	// 5705 call    exec_rcr
#undef i
#define i ebx	// 5706 i = ebx
	R(CMP(i, 0x20));	// 5707 cmp     i, 20h
		R(JNZ(loc_405360));	// 5708 jnz     short loc_405360
	R(ADD(esp, 0x14));	// 5709 add     esp, 14h
	R(POP(i));	// 5710 pop     i
	R(POP(ebp));	// 5711 pop     ebp
	R(RETN);	// 5712 retn
 // Procedure exec_rcll() start
exec_rcll:
#undef s2
#define s2 8	// 5725 s2 = 8
#undef s0
#define s0 0x0C	// 5726 s0 = 0x0C
#undef s1
#define s1 0x10	// 5727 s1 = 0x10
#undef iflags
#define iflags 0x14	// 5728 iflags = 0x14
	R(PUSH(ebp));	// 5731 push    ebp
	R(MOV(ebp, esp));	// 5732 mov     ebp, esp
	R(PUSH(esi));	// 5733 push    esi
	R(PUSH(ebx));	// 5734 push    ebx
	R(SUB(esp, 0x20));	// 5735 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5736 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5737 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5738 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5739 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5740 flags = esi
	R(MOV(edx, res));	// 5741 mov     edx, res
	R(MOV(eax, flags));	// 5742 mov     eax, flags
	R(PUSH(eax));	// 5743 push    eax
	R(POPF);	// 5744 popf
	R(RCL(edx, cl));	// 5745 rcl     edx, cl
	R(PUSHF);	// 5746 pushf
	R(POP(eax));	// 5747 pop     eax
#undef res
#define res edx	// 5748 res = edx
#undef flags
#define flags eax	// 5749 flags = eax
	R(CMP(ecx, 1));	// 5750 cmp     ecx, 1
		R(JZ(loc_4053a7));	// 5751 jz      short loc_4053A7
	R(AND(ah, 0x0F7));	// 5752 and     ah, 0F7h
loc_4053a7:
	R(AND(flags, 0x8C5));	// 5755 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5756 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5757 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5758 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5759 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5760 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRcll)));	// 5761 mov     dword ptr [esp+4], offset aRcll ; "rcll"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5762 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5763 call    printf
	R(ADD(esp, 0x20));	// 5764 add     esp, 20h
	R(POP(ebx));	// 5765 pop     ebx
	R(POP(esi));	// 5766 pop     esi
	R(POP(ebp));	// 5767 pop     ebp
	R(RETN);	// 5768 retn
 // Procedure exec_rclw() start
exec_rclw:
#undef s2
#define s2 8	// 5781 s2 = 8
#undef s0
#define s0 0x0C	// 5782 s0 = 0x0C
#undef s1
#define s1 0x10	// 5783 s1 = 0x10
#undef iflags
#define iflags 0x14	// 5784 iflags = 0x14
	R(PUSH(ebp));	// 5787 push    ebp
	R(MOV(ebp, esp));	// 5788 mov     ebp, esp
	R(PUSH(esi));	// 5789 push    esi
	R(PUSH(ebx));	// 5790 push    ebx
	R(SUB(esp, 0x20));	// 5791 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5792 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5793 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5794 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5795 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5796 flags = esi
	R(MOV(edx, res));	// 5797 mov     edx, res
	R(MOV(eax, flags));	// 5798 mov     eax, flags
	R(PUSH(eax));	// 5799 push    eax
	R(POPF);	// 5800 popf
	R(RCL(dx, cl));	// 5801 rcl     dx, cl
	R(PUSHF);	// 5802 pushf
	R(POP(eax));	// 5803 pop     eax
#undef res
#define res edx	// 5804 res = edx
#undef flags
#define flags eax	// 5805 flags = eax
	R(CMP(ecx, 1));	// 5806 cmp     ecx, 1
		R(JZ(loc_4053ff));	// 5807 jz      short loc_4053FF
	R(AND(ah, 0x0F7));	// 5808 and     ah, 0F7h
loc_4053ff:
	R(AND(flags, 0x8C5));	// 5811 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5812 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5813 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5814 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5815 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5816 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRclw)));	// 5817 mov     dword ptr [esp+4], offset aRclw ; "rclw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5818 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5819 call    printf
	R(ADD(esp, 0x20));	// 5820 add     esp, 20h
	R(POP(ebx));	// 5821 pop     ebx
	R(POP(esi));	// 5822 pop     esi
	R(POP(ebp));	// 5823 pop     ebp
	R(RETN);	// 5824 retn
 // Procedure exec_rclb() start
exec_rclb:
#undef s0
#define s0 8	// 5837 s0 = 8
#undef s1
#define s1 0x0C	// 5838 s1 = 0x0C
#undef iflags
#define iflags 0x10	// 5839 iflags = 0x10
	R(PUSH(ebp));	// 5842 push    ebp
	R(MOV(ebp, esp));	// 5843 mov     ebp, esp
	R(PUSH(esi));	// 5844 push    esi
	R(PUSH(ebx));	// 5845 push    ebx
	R(SUB(esp, 0x20));	// 5846 sub     esp, 20h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 5847 mov     ecx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5848 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 5849 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 5850 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 5851 flags = esi
	R(MOV(edx, res));	// 5852 mov     edx, res
	R(MOV(eax, flags));	// 5853 mov     eax, flags
	R(PUSH(eax));	// 5854 push    eax
	R(POPF);	// 5855 popf
	R(RCL(dl, cl));	// 5856 rcl     dl, cl
	R(PUSHF);	// 5857 pushf
	R(POP(eax));	// 5858 pop     eax
#undef res
#define res edx	// 5859 res = edx
#undef flags
#define flags eax	// 5860 flags = eax
	R(CMP(ecx, 1));	// 5861 cmp     ecx, 1
		R(JZ(loc_405456));	// 5862 jz      short loc_405456
	R(AND(ah, 0x0F7));	// 5863 and     ah, 0F7h
loc_405456:
	R(AND(flags, 0x8C5));	// 5866 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 5867 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 5868 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 5869 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 5870 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 5871 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRclb)));	// 5872 mov     dword ptr [esp+4], offset aRclb ; "rclb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 5873 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 5874 call    printf
	R(ADD(esp, 0x20));	// 5875 add     esp, 20h
	R(POP(ebx));	// 5876 pop     ebx
	R(POP(esi));	// 5877 pop     esi
	R(POP(ebp));	// 5878 pop     ebp
	R(RETN);	// 5879 retn
 // Procedure exec_rcl() start
exec_rcl:
#undef s2
#define s2 8	// 5892 s2 = 8
#undef s0
#define s0 0x0C	// 5893 s0 = 0x0C
#undef s1
#define s1 0x10	// 5894 s1 = 0x10
	R(PUSH(ebp));	// 5897 push    ebp
	R(MOV(ebp, esp));	// 5898 mov     ebp, esp
	R(PUSH(edi));	// 5899 push    edi
	R(PUSH(esi));	// 5900 push    esi
	R(PUSH(ebx));	// 5901 push    ebx
	R(SUB(esp, 0x1C));	// 5902 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 5903 mov     ebx, [ebp+s0]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s1))));	// 5904 mov     esi, [ebp+s1]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s2))));	// 5905 mov     edi, [ebp+s2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5906 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5907 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5908 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 5909 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_rcll));	// 5910 call    exec_rcll
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5911 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5912 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5913 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 5914 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_rclw));	// 5915 call    exec_rclw
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 5916 mov     [esp+4], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 5917 mov     [esp], ebx      ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 5918 mov     dword ptr [esp+8], 0 ; iflags
	R(CALL(kexec_rclb));	// 5919 call    exec_rclb
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5920 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5921 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5922 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 1));	// 5923 mov     dword ptr [esp+0Ch], 1 ; iflags
	R(CALL(kexec_rcll));	// 5924 call    exec_rcll
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 5925 mov     [esp+8], esi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), ebx));	// 5926 mov     [esp+4], ebx    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), edi));	// 5927 mov     [esp], edi      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 1));	// 5928 mov     dword ptr [esp+0Ch], 1 ; iflags
	R(CALL(kexec_rclw));	// 5929 call    exec_rclw
	R(MOV(*(dd*)(raddr(ds,ebp+s0)), esi));	// 5930 mov     [ebp+s0], esi
	R(MOV(*(dd*)(raddr(ds,ebp+s2)), ebx));	// 5931 mov     [ebp+s2], ebx
	R(MOV(*(raddr(ds,ebp+s1)), 1));	// 5932 mov     [ebp+s1], 1
	R(ADD(esp, 0x1C));	// 5933 add     esp, 1Ch
	R(POP(ebx));	// 5934 pop     ebx
	R(POP(esi));	// 5935 pop     esi
	R(POP(edi));	// 5936 pop     edi
	R(POP(ebp));	// 5937 pop     ebp
		R(JMP(exec_rclb));	// 5938 jmp     exec_rclb
 // Procedure test_rcl() start
test_rcl:
	R(PUSH(ebp));	// 5950 push    ebp
	R(MOV(ebp, esp));	// 5951 mov     ebp, esp
	R(PUSH(ebx));	// 5952 push    ebx
	R(SUB(esp, 0x14));	// 5953 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 5954 xor     ebx, ebx
loc_405532:
#undef i
#define i ebx	// 5957 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5958 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5959 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5960 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5961 inc     i
	R(CALL(kexec_rcl));	// 5962 call    exec_rcl
#undef i
#define i ebx	// 5963 i = ebx
	R(CMP(i, 0x20));	// 5964 cmp     i, 20h
		R(JNZ(loc_405532));	// 5965 jnz     short loc_405532
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5966 xor     i, i
loc_405552:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5969 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5970 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5971 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5972 inc     i
	R(CALL(kexec_rcl));	// 5973 call    exec_rcl
#undef i
#define i ebx	// 5974 i = ebx
	R(CMP(i, 0x20));	// 5975 cmp     i, 20h
		R(JNZ(loc_405552));	// 5976 jnz     short loc_405552
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5977 xor     i, i
loc_405572:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5980 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 5981 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 5982 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 5983 inc     i
	R(CALL(kexec_rcl));	// 5984 call    exec_rcl
#undef i
#define i ebx	// 5985 i = ebx
	R(CMP(i, 0x20));	// 5986 cmp     i, 20h
		R(JNZ(loc_405572));	// 5987 jnz     short loc_405572
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5988 xor     i, i
loc_405592:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 5991 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 5992 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 5993 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 5994 inc     i
	R(CALL(kexec_rcl));	// 5995 call    exec_rcl
#undef i
#define i ebx	// 5996 i = ebx
	R(CMP(i, 0x20));	// 5997 cmp     i, 20h
		R(JNZ(loc_405592));	// 5998 jnz     short loc_405592
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 5999 xor     i, i
loc_4055b2:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6002 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 6003 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 6004 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 6005 inc     i
	R(CALL(kexec_rcl));	// 6006 call    exec_rcl
#undef i
#define i ebx	// 6007 i = ebx
	R(CMP(i, 0x20));	// 6008 cmp     i, 20h
		R(JNZ(loc_4055b2));	// 6009 jnz     short loc_4055B2
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6010 xor     i, i
loc_4055d2:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6013 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 6014 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 6015 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 6016 inc     i
	R(CALL(kexec_rcl));	// 6017 call    exec_rcl
#undef i
#define i ebx	// 6018 i = ebx
	R(CMP(i, 0x20));	// 6019 cmp     i, 20h
		R(JNZ(loc_4055d2));	// 6020 jnz     short loc_4055D2
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6021 xor     i, i
loc_4055f2:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6024 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 6025 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 6026 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 6027 inc     i
	R(CALL(kexec_rcl));	// 6028 call    exec_rcl
#undef i
#define i ebx	// 6029 i = ebx
	R(CMP(i, 0x20));	// 6030 cmp     i, 20h
		R(JNZ(loc_4055f2));	// 6031 jnz     short loc_4055F2
	R(ADD(esp, 0x14));	// 6032 add     esp, 14h
	R(POP(i));	// 6033 pop     i
	R(POP(ebp));	// 6034 pop     ebp
	R(RETN);	// 6035 retn
 // Procedure exec_shldl() start
exec_shldl:
#undef s2
#define s2 8	// 6047 s2 = 8
#undef s0
#define s0 0x0C	// 6048 s0 = 0x0C
#undef s1
#define s1 0x10	// 6049 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6050 iflags = 0x14
	R(PUSH(ebp));	// 6053 push    ebp
	R(MOV(ebp, esp));	// 6054 mov     ebp, esp
	R(PUSH(edi));	// 6055 push    edi
	R(PUSH(esi));	// 6056 push    esi
	R(PUSH(ebx));	// 6057 push    ebx
	R(SUB(esp, 0x2C));	// 6058 sub     esp, 2Ch
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 6059 mov     ecx, [ebp+s1]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6060 mov     esi, [ebp+s0]
#undef res
#define res esi	// 6061 res = esi
	R(MOV(edi, *(dd*)(raddr(ds,ebp+iflags))));	// 6062 mov     edi, [ebp+iflags]
#undef flags
#define flags edi	// 6063 flags = edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6064 mov     ebx, [ebp+s2]
	R(MOV(edx, res));	// 6065 mov     edx, res
	R(MOV(eax, flags));	// 6066 mov     eax, flags
	R(PUSH(eax));	// 6067 push    eax
	R(POPF);	// 6068 popf
	R(SHLD(edx, ebx, cl));	// 6069 shld    edx, ebx, cl
	R(PUSHF);	// 6070 pushf
	R(POP(eax));	// 6071 pop     eax
#undef res
#define res edx	// 6072 res = edx
#undef flags
#define flags eax	// 6073 flags = eax
	R(CMP(ecx, 1));	// 6074 cmp     ecx, 1
		R(JZ(loc_40563e));	// 6075 jz      short loc_40563E
	R(AND(ah, 0x0F7));	// 6076 and     ah, 0F7h
loc_40563e:
	R(AND(flags, 0x8C5));	// 6079 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edi));	// 6080 mov     [esp+18h], edi
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ebx));	// 6081 mov     [esp+0Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 6082 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), eax));	// 6083 mov     [esp+1Ch], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), res));	// 6084 mov     [esp+14h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ecx));	// 6085 mov     [esp+10h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShldl)));	// 6086 mov     dword ptr [esp+4], offset aShldl ; "shldl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxC)));	// 6087 mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6088 call    printf
	R(ADD(esp, 0x2C));	// 6089 add     esp, 2Ch
	R(POP(ebx));	// 6090 pop     ebx
	R(POP(esi));	// 6091 pop     esi
	R(POP(edi));	// 6092 pop     edi
	R(POP(ebp));	// 6093 pop     ebp
	R(RETN);	// 6094 retn
 // Procedure exec_shldw() start
exec_shldw:
#undef s2
#define s2 8	// 6106 s2 = 8
#undef s0
#define s0 0x0C	// 6107 s0 = 0x0C
#undef s1
#define s1 0x10	// 6108 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6109 iflags = 0x14
	R(PUSH(ebp));	// 6112 push    ebp
	R(MOV(ebp, esp));	// 6113 mov     ebp, esp
	R(PUSH(edi));	// 6114 push    edi
	R(PUSH(esi));	// 6115 push    esi
	R(PUSH(ebx));	// 6116 push    ebx
	R(SUB(esp, 0x2C));	// 6117 sub     esp, 2Ch
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 6118 mov     ecx, [ebp+s1]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6119 mov     esi, [ebp+s0]
#undef res
#define res esi	// 6120 res = esi
	R(MOV(edi, *(dd*)(raddr(ds,ebp+iflags))));	// 6121 mov     edi, [ebp+iflags]
#undef flags
#define flags edi	// 6122 flags = edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6123 mov     ebx, [ebp+s2]
	R(MOV(edx, res));	// 6124 mov     edx, res
	R(MOV(eax, flags));	// 6125 mov     eax, flags
	R(PUSH(eax));	// 6126 push    eax
	R(POPF);	// 6127 popf
	R(SHLD(dx, bx, cl));	// 6128 shld    dx, bx, cl
	R(PUSHF);	// 6129 pushf
	R(POP(eax));	// 6130 pop     eax
#undef res
#define res edx	// 6131 res = edx
#undef flags
#define flags eax	// 6132 flags = eax
	R(CMP(ecx, 1));	// 6133 cmp     ecx, 1
		R(JZ(loc_4056a0));	// 6134 jz      short loc_4056A0
	R(AND(ah, 0x0F7));	// 6135 and     ah, 0F7h
loc_4056a0:
	R(AND(flags, 0x8C5));	// 6138 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edi));	// 6139 mov     [esp+18h], edi
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ebx));	// 6140 mov     [esp+0Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 6141 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), eax));	// 6142 mov     [esp+1Ch], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), res));	// 6143 mov     [esp+14h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ecx));	// 6144 mov     [esp+10h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShldw)));	// 6145 mov     dword ptr [esp+4], offset aShldw ; "shldw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxC)));	// 6146 mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6147 call    printf
	R(ADD(esp, 0x2C));	// 6148 add     esp, 2Ch
	R(POP(ebx));	// 6149 pop     ebx
	R(POP(esi));	// 6150 pop     esi
	R(POP(edi));	// 6151 pop     edi
	R(POP(ebp));	// 6152 pop     ebp
	R(RETN);	// 6153 retn
 // Procedure exec_shld() start
exec_shld:
#undef s2
#define s2 8	// 6166 s2 = 8
#undef s0
#define s0 0x0C	// 6167 s0 = 0x0C
#undef s1
#define s1 0x10	// 6168 s1 = 0x10
	R(PUSH(ebp));	// 6171 push    ebp
	R(MOV(ebp, esp));	// 6172 mov     ebp, esp
	R(PUSH(edi));	// 6173 push    edi
	R(PUSH(esi));	// 6174 push    esi
	R(PUSH(ebx));	// 6175 push    ebx
	R(SUB(esp, 0x1C));	// 6176 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6177 mov     ebx, [ebp+s2]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6178 mov     esi, [ebp+s0]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));	// 6179 mov     edi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6180 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6181 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6182 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6183 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shldl));	// 6184 call    exec_shldl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6185 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6186 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6187 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6188 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shldw));	// 6189 call    exec_shldw
	R(ADD(esp, 0x1C));	// 6190 add     esp, 1Ch
	R(POP(ebx));	// 6191 pop     ebx
	R(POP(esi));	// 6192 pop     esi
	R(POP(edi));	// 6193 pop     edi
	R(POP(ebp));	// 6194 pop     ebp
	R(RETN);	// 6195 retn
 // Procedure test_shld() start
test_shld:
	R(PUSH(ebp));	// 6207 push    ebp
	R(MOV(ebp, esp));	// 6208 mov     ebp, esp
	R(PUSH(ebx));	// 6209 push    ebx
	R(SUB(esp, 0x14));	// 6210 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 6211 xor     ebx, ebx
loc_40572c:
#undef i
#define i ebx	// 6214 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6215 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 6216 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6217 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6218 inc     i
	R(CALL(kexec_shld));	// 6219 call    exec_shld
#undef i
#define i ebx	// 6220 i = ebx
	R(CMP(i, 0x20));	// 6221 cmp     i, 20h
		R(JNZ(loc_40572c));	// 6222 jnz     short loc_40572C
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6223 xor     i, i
loc_40574c:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6226 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6227 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 6228 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 6229 inc     i
	R(CALL(kexec_shld));	// 6230 call    exec_shld
#undef i
#define i ebx	// 6231 i = ebx
	R(CMP(i, 0x20));	// 6232 cmp     i, 20h
		R(JNZ(loc_40574c));	// 6233 jnz     short loc_40574C
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6234 xor     i, i
loc_40576c:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6237 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6238 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6239 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6240 inc     i
	R(CALL(kexec_shld));	// 6241 call    exec_shld
#undef i
#define i ebx	// 6242 i = ebx
	R(CMP(i, 0x20));	// 6243 cmp     i, 20h
		R(JNZ(loc_40576c));	// 6244 jnz     short loc_40576C
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6245 xor     i, i
loc_40578c:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6248 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 6249 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 6250 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 6251 inc     i
	R(CALL(kexec_shld));	// 6252 call    exec_shld
#undef i
#define i ebx	// 6253 i = ebx
	R(CMP(i, 0x20));	// 6254 cmp     i, 20h
		R(JNZ(loc_40578c));	// 6255 jnz     short loc_40578C
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6256 xor     i, i
loc_4057ac:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6259 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 6260 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 6261 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 6262 inc     i
	R(CALL(kexec_shld));	// 6263 call    exec_shld
#undef i
#define i ebx	// 6264 i = ebx
	R(CMP(i, 0x20));	// 6265 cmp     i, 20h
		R(JNZ(loc_4057ac));	// 6266 jnz     short loc_4057AC
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6267 xor     i, i
loc_4057cc:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6270 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 6271 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 6272 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 6273 inc     i
	R(CALL(kexec_shld));	// 6274 call    exec_shld
#undef i
#define i ebx	// 6275 i = ebx
	R(CMP(i, 0x20));	// 6276 cmp     i, 20h
		R(JNZ(loc_4057cc));	// 6277 jnz     short loc_4057CC
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6278 xor     i, i
loc_4057ec:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6281 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 6282 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 6283 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 6284 inc     i
	R(CALL(kexec_shld));	// 6285 call    exec_shld
#undef i
#define i ebx	// 6286 i = ebx
	R(CMP(i, 0x20));	// 6287 cmp     i, 20h
		R(JNZ(loc_4057ec));	// 6288 jnz     short loc_4057EC
	R(ADD(esp, 0x14));	// 6289 add     esp, 14h
	R(POP(i));	// 6290 pop     i
	R(POP(ebp));	// 6291 pop     ebp
	R(RETN);	// 6292 retn
 // Procedure exec_shrdl() start
exec_shrdl:
#undef s2
#define s2 8	// 6304 s2 = 8
#undef s0
#define s0 0x0C	// 6305 s0 = 0x0C
#undef s1
#define s1 0x10	// 6306 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6307 iflags = 0x14
	R(PUSH(ebp));	// 6310 push    ebp
	R(MOV(ebp, esp));	// 6311 mov     ebp, esp
	R(PUSH(edi));	// 6312 push    edi
	R(PUSH(esi));	// 6313 push    esi
	R(PUSH(ebx));	// 6314 push    ebx
	R(SUB(esp, 0x2C));	// 6315 sub     esp, 2Ch
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 6316 mov     ecx, [ebp+s1]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6317 mov     esi, [ebp+s0]
#undef res
#define res esi	// 6318 res = esi
	R(MOV(edi, *(dd*)(raddr(ds,ebp+iflags))));	// 6319 mov     edi, [ebp+iflags]
#undef flags
#define flags edi	// 6320 flags = edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6321 mov     ebx, [ebp+s2]
	R(MOV(edx, res));	// 6322 mov     edx, res
	R(MOV(eax, flags));	// 6323 mov     eax, flags
	R(PUSH(eax));	// 6324 push    eax
	R(POPF);	// 6325 popf
	R(SHRD(edx, ebx, cl));	// 6326 shrd    edx, ebx, cl
	R(PUSHF);	// 6327 pushf
	R(POP(eax));	// 6328 pop     eax
#undef res
#define res edx	// 6329 res = edx
#undef flags
#define flags eax	// 6330 flags = eax
	R(CMP(ecx, 1));	// 6331 cmp     ecx, 1
		R(JZ(loc_405838));	// 6332 jz      short loc_405838
	R(AND(ah, 0x0F7));	// 6333 and     ah, 0F7h
loc_405838:
	R(AND(flags, 0x8C5));	// 6336 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edi));	// 6337 mov     [esp+18h], edi
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ebx));	// 6338 mov     [esp+0Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 6339 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), eax));	// 6340 mov     [esp+1Ch], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), res));	// 6341 mov     [esp+14h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ecx));	// 6342 mov     [esp+10h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrdl)));	// 6343 mov     dword ptr [esp+4], offset aShrdl ; "shrdl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxC)));	// 6344 mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6345 call    printf
	R(ADD(esp, 0x2C));	// 6346 add     esp, 2Ch
	R(POP(ebx));	// 6347 pop     ebx
	R(POP(esi));	// 6348 pop     esi
	R(POP(edi));	// 6349 pop     edi
	R(POP(ebp));	// 6350 pop     ebp
	R(RETN);	// 6351 retn
 // Procedure exec_shrdw() start
exec_shrdw:
#undef s2
#define s2 8	// 6363 s2 = 8
#undef s0
#define s0 0x0C	// 6364 s0 = 0x0C
#undef s1
#define s1 0x10	// 6365 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6366 iflags = 0x14
	R(PUSH(ebp));	// 6369 push    ebp
	R(MOV(ebp, esp));	// 6370 mov     ebp, esp
	R(PUSH(edi));	// 6371 push    edi
	R(PUSH(esi));	// 6372 push    esi
	R(PUSH(ebx));	// 6373 push    ebx
	R(SUB(esp, 0x2C));	// 6374 sub     esp, 2Ch
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 6375 mov     ecx, [ebp+s1]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6376 mov     esi, [ebp+s0]
#undef res
#define res esi	// 6377 res = esi
	R(MOV(edi, *(dd*)(raddr(ds,ebp+iflags))));	// 6378 mov     edi, [ebp+iflags]
#undef flags
#define flags edi	// 6379 flags = edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6380 mov     ebx, [ebp+s2]
	R(MOV(edx, res));	// 6381 mov     edx, res
	R(MOV(eax, flags));	// 6382 mov     eax, flags
	R(PUSH(eax));	// 6383 push    eax
	R(POPF);	// 6384 popf
	R(SHRD(dx, bx, cl));	// 6385 shrd    dx, bx, cl
	R(PUSHF);	// 6386 pushf
	R(POP(eax));	// 6387 pop     eax
#undef res
#define res edx	// 6388 res = edx
#undef flags
#define flags eax	// 6389 flags = eax
	R(CMP(ecx, 1));	// 6390 cmp     ecx, 1
		R(JZ(loc_40589a));	// 6391 jz      short loc_40589A
	R(AND(ah, 0x0F7));	// 6392 and     ah, 0F7h
loc_40589a:
	R(AND(flags, 0x8C5));	// 6395 and     flags, 8C5h
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edi));	// 6396 mov     [esp+18h], edi
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ebx));	// 6397 mov     [esp+0Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 6398 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), eax));	// 6399 mov     [esp+1Ch], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), res));	// 6400 mov     [esp+14h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ecx));	// 6401 mov     [esp+10h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aShrdw)));	// 6402 mov     dword ptr [esp+4], offset aShrdw ; "shrdw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxC)));	// 6403 mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6404 call    printf
	R(ADD(esp, 0x2C));	// 6405 add     esp, 2Ch
	R(POP(ebx));	// 6406 pop     ebx
	R(POP(esi));	// 6407 pop     esi
	R(POP(edi));	// 6408 pop     edi
	R(POP(ebp));	// 6409 pop     ebp
	R(RETN);	// 6410 retn
 // Procedure exec_shrd() start
exec_shrd:
#undef s2
#define s2 8	// 6423 s2 = 8
#undef s0
#define s0 0x0C	// 6424 s0 = 0x0C
#undef s1
#define s1 0x10	// 6425 s1 = 0x10
	R(PUSH(ebp));	// 6428 push    ebp
	R(MOV(ebp, esp));	// 6429 mov     ebp, esp
	R(PUSH(edi));	// 6430 push    edi
	R(PUSH(esi));	// 6431 push    esi
	R(PUSH(ebx));	// 6432 push    ebx
	R(SUB(esp, 0x1C));	// 6433 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6434 mov     ebx, [ebp+s2]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6435 mov     esi, [ebp+s0]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));	// 6436 mov     edi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6437 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6438 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6439 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6440 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shrdl));	// 6441 call    exec_shrdl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6442 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6443 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6444 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6445 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_shrdw));	// 6446 call    exec_shrdw
	R(ADD(esp, 0x1C));	// 6447 add     esp, 1Ch
	R(POP(ebx));	// 6448 pop     ebx
	R(POP(esi));	// 6449 pop     esi
	R(POP(edi));	// 6450 pop     edi
	R(POP(ebp));	// 6451 pop     ebp
	R(RETN);	// 6452 retn
 // Procedure test_shrd() start
test_shrd:
	R(PUSH(ebp));	// 6464 push    ebp
	R(MOV(ebp, esp));	// 6465 mov     ebp, esp
	R(PUSH(ebx));	// 6466 push    ebx
	R(SUB(esp, 0x14));	// 6467 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 6468 xor     ebx, ebx
loc_405926:
#undef i
#define i ebx	// 6471 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6472 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 6473 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6474 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6475 inc     i
	R(CALL(kexec_shrd));	// 6476 call    exec_shrd
#undef i
#define i ebx	// 6477 i = ebx
	R(CMP(i, 0x20));	// 6478 cmp     i, 20h
		R(JNZ(loc_405926));	// 6479 jnz     short loc_405926
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6480 xor     i, i
loc_405946:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6483 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6484 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 6485 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 6486 inc     i
	R(CALL(kexec_shrd));	// 6487 call    exec_shrd
#undef i
#define i ebx	// 6488 i = ebx
	R(CMP(i, 0x20));	// 6489 cmp     i, 20h
		R(JNZ(loc_405946));	// 6490 jnz     short loc_405946
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6491 xor     i, i
loc_405966:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6494 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6495 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6496 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6497 inc     i
	R(CALL(kexec_shrd));	// 6498 call    exec_shrd
#undef i
#define i ebx	// 6499 i = ebx
	R(CMP(i, 0x20));	// 6500 cmp     i, 20h
		R(JNZ(loc_405966));	// 6501 jnz     short loc_405966
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6502 xor     i, i
loc_405986:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6505 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 6506 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 6507 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 6508 inc     i
	R(CALL(kexec_shrd));	// 6509 call    exec_shrd
#undef i
#define i ebx	// 6510 i = ebx
	R(CMP(i, 0x20));	// 6511 cmp     i, 20h
		R(JNZ(loc_405986));	// 6512 jnz     short loc_405986
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6513 xor     i, i
loc_4059a6:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6516 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 6517 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 6518 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 6519 inc     i
	R(CALL(kexec_shrd));	// 6520 call    exec_shrd
#undef i
#define i ebx	// 6521 i = ebx
	R(CMP(i, 0x20));	// 6522 cmp     i, 20h
		R(JNZ(loc_4059a6));	// 6523 jnz     short loc_4059A6
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6524 xor     i, i
loc_4059c6:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6527 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 6528 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 6529 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 6530 inc     i
	R(CALL(kexec_shrd));	// 6531 call    exec_shrd
#undef i
#define i ebx	// 6532 i = ebx
	R(CMP(i, 0x20));	// 6533 cmp     i, 20h
		R(JNZ(loc_4059c6));	// 6534 jnz     short loc_4059C6
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6535 xor     i, i
loc_4059e6:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6538 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 6539 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 6540 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 6541 inc     i
	R(CALL(kexec_shrd));	// 6542 call    exec_shrd
#undef i
#define i ebx	// 6543 i = ebx
	R(CMP(i, 0x20));	// 6544 cmp     i, 20h
		R(JNZ(loc_4059e6));	// 6545 jnz     short loc_4059E6
	R(ADD(esp, 0x14));	// 6546 add     esp, 14h
	R(POP(i));	// 6547 pop     i
	R(POP(ebp));	// 6548 pop     ebp
	R(RETN);	// 6549 retn
 // Procedure exec_btl() start
exec_btl:
#undef s2
#define s2 8	// 6561 s2 = 8
#undef s0
#define s0 0x0C	// 6562 s0 = 0x0C
#undef s1
#define s1 0x10	// 6563 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6564 iflags = 0x14
	R(PUSH(ebp));	// 6567 push    ebp
	R(MOV(ebp, esp));	// 6568 mov     ebp, esp
	R(PUSH(esi));	// 6569 push    esi
	R(PUSH(ebx));	// 6570 push    ebx
	R(SUB(esp, 0x20));	// 6571 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 6572 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 6573 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 6574 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 6575 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 6576 flags = esi
	R(MOV(ecx, res));	// 6577 mov     ecx, res
	R(MOV(eax, flags));	// 6578 mov     eax, flags
	R(PUSH(eax));	// 6579 push    eax
	R(POPF);	// 6580 popf
	R(BT(ecx, edx));	// 6581 bt      ecx, edx
	R(PUSHF);	// 6582 pushf
	R(POP(eax));	// 6583 pop     eax
#undef res
#define res ecx	// 6584 res = ecx
#undef flags
#define flags eax	// 6585 flags = eax
	R(CMP(edx, 1));	// 6586 cmp     edx, 1
		R(JZ(loc_405a2e));	// 6587 jz      short loc_405A2E
	R(AND(ah, 0x0F7));	// 6588 and     ah, 0F7h
loc_405a2e:
	R(AND(flags, 1));	// 6591 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 6592 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 6593 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 6594 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 6595 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 6596 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtl)));	// 6597 mov     dword ptr [esp+4], offset aBtl ; "btl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 6598 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6599 call    printf
	R(ADD(esp, 0x20));	// 6600 add     esp, 20h
	R(POP(ebx));	// 6601 pop     ebx
	R(POP(esi));	// 6602 pop     esi
	R(POP(ebp));	// 6603 pop     ebp
	R(RETN);	// 6604 retn
 // Procedure exec_btw() start
exec_btw:
#undef s2
#define s2 8	// 6616 s2 = 8
#undef s0
#define s0 0x0C	// 6617 s0 = 0x0C
#undef s1
#define s1 0x10	// 6618 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6619 iflags = 0x14
	R(PUSH(ebp));	// 6622 push    ebp
	R(MOV(ebp, esp));	// 6623 mov     ebp, esp
	R(PUSH(esi));	// 6624 push    esi
	R(PUSH(ebx));	// 6625 push    ebx
	R(SUB(esp, 0x20));	// 6626 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 6627 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 6628 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 6629 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 6630 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 6631 flags = esi
	R(MOV(ecx, res));	// 6632 mov     ecx, res
	R(MOV(eax, flags));	// 6633 mov     eax, flags
	R(PUSH(eax));	// 6634 push    eax
	R(POPF);	// 6635 popf
	R(BT(cx, dx));	// 6636 bt      cx, dx
	R(PUSHF);	// 6637 pushf
	R(POP(eax));	// 6638 pop     eax
#undef res
#define res ecx	// 6639 res = ecx
#undef flags
#define flags eax	// 6640 flags = eax
	R(CMP(edx, 1));	// 6641 cmp     edx, 1
		R(JZ(loc_405a85));	// 6642 jz      short loc_405A85
	R(AND(ah, 0x0F7));	// 6643 and     ah, 0F7h
loc_405a85:
	R(AND(flags, 1));	// 6646 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 6647 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 6648 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 6649 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 6650 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 6651 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtw)));	// 6652 mov     dword ptr [esp+4], offset aBtw ; "btw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 6653 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6654 call    printf
	R(ADD(esp, 0x20));	// 6655 add     esp, 20h
	R(POP(ebx));	// 6656 pop     ebx
	R(POP(esi));	// 6657 pop     esi
	R(POP(ebp));	// 6658 pop     ebp
	R(RETN);	// 6659 retn
 // Procedure exec_bt() start
exec_bt:
#undef s2
#define s2 8	// 6672 s2 = 8
#undef s0
#define s0 0x0C	// 6673 s0 = 0x0C
#undef s1
#define s1 0x10	// 6674 s1 = 0x10
	R(PUSH(ebp));	// 6677 push    ebp
	R(MOV(ebp, esp));	// 6678 mov     ebp, esp
	R(PUSH(edi));	// 6679 push    edi
	R(PUSH(esi));	// 6680 push    esi
	R(PUSH(ebx));	// 6681 push    ebx
	R(SUB(esp, 0x1C));	// 6682 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6683 mov     ebx, [ebp+s2]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6684 mov     esi, [ebp+s0]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));	// 6685 mov     edi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6686 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6687 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6688 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6689 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btl));	// 6690 call    exec_btl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6691 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6692 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6693 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6694 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btw));	// 6695 call    exec_btw
	R(ADD(esp, 0x1C));	// 6696 add     esp, 1Ch
	R(POP(ebx));	// 6697 pop     ebx
	R(POP(esi));	// 6698 pop     esi
	R(POP(edi));	// 6699 pop     edi
	R(POP(ebp));	// 6700 pop     ebp
	R(RETN);	// 6701 retn
 // Procedure test_bt() start
test_bt:
	R(PUSH(ebp));	// 6713 push    ebp
	R(MOV(ebp, esp));	// 6714 mov     ebp, esp
	R(PUSH(ebx));	// 6715 push    ebx
	R(SUB(esp, 0x14));	// 6716 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 6717 xor     ebx, ebx
loc_405b0a:
#undef i
#define i ebx	// 6720 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6721 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 6722 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6723 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6724 inc     i
	R(CALL(kexec_bt));	// 6725 call    exec_bt
#undef i
#define i ebx	// 6726 i = ebx
	R(CMP(i, 0x20));	// 6727 cmp     i, 20h
		R(JNZ(loc_405b0a));	// 6728 jnz     short loc_405B0A
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6729 xor     i, i
loc_405b2a:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6732 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6733 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 6734 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 6735 inc     i
	R(CALL(kexec_bt));	// 6736 call    exec_bt
#undef i
#define i ebx	// 6737 i = ebx
	R(CMP(i, 0x20));	// 6738 cmp     i, 20h
		R(JNZ(loc_405b2a));	// 6739 jnz     short loc_405B2A
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6740 xor     i, i
loc_405b4a:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6743 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6744 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6745 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6746 inc     i
	R(CALL(kexec_bt));	// 6747 call    exec_bt
#undef i
#define i ebx	// 6748 i = ebx
	R(CMP(i, 0x20));	// 6749 cmp     i, 20h
		R(JNZ(loc_405b4a));	// 6750 jnz     short loc_405B4A
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6751 xor     i, i
loc_405b6a:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6754 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 6755 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 6756 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 6757 inc     i
	R(CALL(kexec_bt));	// 6758 call    exec_bt
#undef i
#define i ebx	// 6759 i = ebx
	R(CMP(i, 0x20));	// 6760 cmp     i, 20h
		R(JNZ(loc_405b6a));	// 6761 jnz     short loc_405B6A
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6762 xor     i, i
loc_405b8a:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6765 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 6766 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 6767 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 6768 inc     i
	R(CALL(kexec_bt));	// 6769 call    exec_bt
#undef i
#define i ebx	// 6770 i = ebx
	R(CMP(i, 0x20));	// 6771 cmp     i, 20h
		R(JNZ(loc_405b8a));	// 6772 jnz     short loc_405B8A
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6773 xor     i, i
loc_405baa:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6776 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 6777 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 6778 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 6779 inc     i
	R(CALL(kexec_bt));	// 6780 call    exec_bt
#undef i
#define i ebx	// 6781 i = ebx
	R(CMP(i, 0x20));	// 6782 cmp     i, 20h
		R(JNZ(loc_405baa));	// 6783 jnz     short loc_405BAA
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6784 xor     i, i
loc_405bca:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6787 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 6788 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 6789 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 6790 inc     i
	R(CALL(kexec_bt));	// 6791 call    exec_bt
#undef i
#define i ebx	// 6792 i = ebx
	R(CMP(i, 0x20));	// 6793 cmp     i, 20h
		R(JNZ(loc_405bca));	// 6794 jnz     short loc_405BCA
	R(ADD(esp, 0x14));	// 6795 add     esp, 14h
	R(POP(i));	// 6796 pop     i
	R(POP(ebp));	// 6797 pop     ebp
	R(RETN);	// 6798 retn
 // Procedure exec_btsl() start
exec_btsl:
#undef s2
#define s2 8	// 6810 s2 = 8
#undef s0
#define s0 0x0C	// 6811 s0 = 0x0C
#undef s1
#define s1 0x10	// 6812 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6813 iflags = 0x14
	R(PUSH(ebp));	// 6816 push    ebp
	R(MOV(ebp, esp));	// 6817 mov     ebp, esp
	R(PUSH(esi));	// 6818 push    esi
	R(PUSH(ebx));	// 6819 push    ebx
	R(SUB(esp, 0x20));	// 6820 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 6821 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 6822 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 6823 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 6824 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 6825 flags = esi
	R(MOV(ecx, res));	// 6826 mov     ecx, res
	R(MOV(eax, flags));	// 6827 mov     eax, flags
	R(PUSH(eax));	// 6828 push    eax
	R(POPF);	// 6829 popf
	R(BTS(ecx, edx));	// 6830 bts     ecx, edx
	R(PUSHF);	// 6831 pushf
	R(POP(eax));	// 6832 pop     eax
#undef res
#define res ecx	// 6833 res = ecx
#undef flags
#define flags eax	// 6834 flags = eax
	R(CMP(edx, 1));	// 6835 cmp     edx, 1
		R(JZ(loc_405c12));	// 6836 jz      short loc_405C12
	R(AND(ah, 0x0F7));	// 6837 and     ah, 0F7h
loc_405c12:
	R(AND(flags, 1));	// 6840 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 6841 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 6842 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 6843 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 6844 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 6845 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtsl)));	// 6846 mov     dword ptr [esp+4], offset aBtsl ; "btsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 6847 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6848 call    printf
	R(ADD(esp, 0x20));	// 6849 add     esp, 20h
	R(POP(ebx));	// 6850 pop     ebx
	R(POP(esi));	// 6851 pop     esi
	R(POP(ebp));	// 6852 pop     ebp
	R(RETN);	// 6853 retn
 // Procedure exec_btsw() start
exec_btsw:
#undef s2
#define s2 8	// 6865 s2 = 8
#undef s0
#define s0 0x0C	// 6866 s0 = 0x0C
#undef s1
#define s1 0x10	// 6867 s1 = 0x10
#undef iflags
#define iflags 0x14	// 6868 iflags = 0x14
	R(PUSH(ebp));	// 6871 push    ebp
	R(MOV(ebp, esp));	// 6872 mov     ebp, esp
	R(PUSH(esi));	// 6873 push    esi
	R(PUSH(ebx));	// 6874 push    ebx
	R(SUB(esp, 0x20));	// 6875 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 6876 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 6877 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 6878 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 6879 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 6880 flags = esi
	R(MOV(ecx, res));	// 6881 mov     ecx, res
	R(MOV(eax, flags));	// 6882 mov     eax, flags
	R(PUSH(eax));	// 6883 push    eax
	R(POPF);	// 6884 popf
	R(BTS(cx, dx));	// 6885 bts     cx, dx
	R(PUSHF);	// 6886 pushf
	R(POP(eax));	// 6887 pop     eax
#undef res
#define res ecx	// 6888 res = ecx
#undef flags
#define flags eax	// 6889 flags = eax
	R(CMP(edx, 1));	// 6890 cmp     edx, 1
		R(JZ(loc_405c69));	// 6891 jz      short loc_405C69
	R(AND(ah, 0x0F7));	// 6892 and     ah, 0F7h
loc_405c69:
	R(AND(flags, 1));	// 6895 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 6896 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 6897 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 6898 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 6899 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 6900 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtsw)));	// 6901 mov     dword ptr [esp+4], offset aBtsw ; "btsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 6902 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 6903 call    printf
	R(ADD(esp, 0x20));	// 6904 add     esp, 20h
	R(POP(ebx));	// 6905 pop     ebx
	R(POP(esi));	// 6906 pop     esi
	R(POP(ebp));	// 6907 pop     ebp
	R(RETN);	// 6908 retn
 // Procedure exec_bts() start
exec_bts:
#undef s2
#define s2 8	// 6921 s2 = 8
#undef s0
#define s0 0x0C	// 6922 s0 = 0x0C
#undef s1
#define s1 0x10	// 6923 s1 = 0x10
	R(PUSH(ebp));	// 6926 push    ebp
	R(MOV(ebp, esp));	// 6927 mov     ebp, esp
	R(PUSH(edi));	// 6928 push    edi
	R(PUSH(esi));	// 6929 push    esi
	R(PUSH(ebx));	// 6930 push    ebx
	R(SUB(esp, 0x1C));	// 6931 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 6932 mov     ebx, [ebp+s2]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 6933 mov     esi, [ebp+s0]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));	// 6934 mov     edi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6935 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6936 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6937 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6938 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btsl));	// 6939 call    exec_btsl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 6940 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 6941 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 6942 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 6943 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btsw));	// 6944 call    exec_btsw
	R(ADD(esp, 0x1C));	// 6945 add     esp, 1Ch
	R(POP(ebx));	// 6946 pop     ebx
	R(POP(esi));	// 6947 pop     esi
	R(POP(edi));	// 6948 pop     edi
	R(POP(ebp));	// 6949 pop     ebp
	R(RETN);	// 6950 retn
 // Procedure test_bts() start
test_bts:
	R(PUSH(ebp));	// 6962 push    ebp
	R(MOV(ebp, esp));	// 6963 mov     ebp, esp
	R(PUSH(ebx));	// 6964 push    ebx
	R(SUB(esp, 0x14));	// 6965 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 6966 xor     ebx, ebx
loc_405cee:
#undef i
#define i ebx	// 6969 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6970 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 6971 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6972 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6973 inc     i
	R(CALL(kexec_bts));	// 6974 call    exec_bts
#undef i
#define i ebx	// 6975 i = ebx
	R(CMP(i, 0x20));	// 6976 cmp     i, 20h
		R(JNZ(loc_405cee));	// 6977 jnz     short loc_405CEE
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6978 xor     i, i
loc_405d0e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6981 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6982 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 6983 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 6984 inc     i
	R(CALL(kexec_bts));	// 6985 call    exec_bts
#undef i
#define i ebx	// 6986 i = ebx
	R(CMP(i, 0x20));	// 6987 cmp     i, 20h
		R(JNZ(loc_405d0e));	// 6988 jnz     short loc_405D0E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 6989 xor     i, i
loc_405d2e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 6992 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 6993 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 6994 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 6995 inc     i
	R(CALL(kexec_bts));	// 6996 call    exec_bts
#undef i
#define i ebx	// 6997 i = ebx
	R(CMP(i, 0x20));	// 6998 cmp     i, 20h
		R(JNZ(loc_405d2e));	// 6999 jnz     short loc_405D2E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7000 xor     i, i
loc_405d4e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7003 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 7004 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 7005 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 7006 inc     i
	R(CALL(kexec_bts));	// 7007 call    exec_bts
#undef i
#define i ebx	// 7008 i = ebx
	R(CMP(i, 0x20));	// 7009 cmp     i, 20h
		R(JNZ(loc_405d4e));	// 7010 jnz     short loc_405D4E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7011 xor     i, i
loc_405d6e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7014 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 7015 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 7016 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 7017 inc     i
	R(CALL(kexec_bts));	// 7018 call    exec_bts
#undef i
#define i ebx	// 7019 i = ebx
	R(CMP(i, 0x20));	// 7020 cmp     i, 20h
		R(JNZ(loc_405d6e));	// 7021 jnz     short loc_405D6E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7022 xor     i, i
loc_405d8e:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7025 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 7026 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 7027 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 7028 inc     i
	R(CALL(kexec_bts));	// 7029 call    exec_bts
#undef i
#define i ebx	// 7030 i = ebx
	R(CMP(i, 0x20));	// 7031 cmp     i, 20h
		R(JNZ(loc_405d8e));	// 7032 jnz     short loc_405D8E
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7033 xor     i, i
loc_405dae:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7036 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 7037 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 7038 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 7039 inc     i
	R(CALL(kexec_bts));	// 7040 call    exec_bts
#undef i
#define i ebx	// 7041 i = ebx
	R(CMP(i, 0x20));	// 7042 cmp     i, 20h
		R(JNZ(loc_405dae));	// 7043 jnz     short loc_405DAE
	R(ADD(esp, 0x14));	// 7044 add     esp, 14h
	R(POP(i));	// 7045 pop     i
	R(POP(ebp));	// 7046 pop     ebp
	R(RETN);	// 7047 retn
 // Procedure exec_btrl() start
exec_btrl:
#undef s2
#define s2 8	// 7059 s2 = 8
#undef s0
#define s0 0x0C	// 7060 s0 = 0x0C
#undef s1
#define s1 0x10	// 7061 s1 = 0x10
#undef iflags
#define iflags 0x14	// 7062 iflags = 0x14
	R(PUSH(ebp));	// 7065 push    ebp
	R(MOV(ebp, esp));	// 7066 mov     ebp, esp
	R(PUSH(esi));	// 7067 push    esi
	R(PUSH(ebx));	// 7068 push    ebx
	R(SUB(esp, 0x20));	// 7069 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 7070 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 7071 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 7072 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 7073 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 7074 flags = esi
	R(MOV(ecx, res));	// 7075 mov     ecx, res
	R(MOV(eax, flags));	// 7076 mov     eax, flags
	R(PUSH(eax));	// 7077 push    eax
	R(POPF);	// 7078 popf
	R(BTR(ecx, edx));	// 7079 btr     ecx, edx
	R(PUSHF);	// 7080 pushf
	R(POP(eax));	// 7081 pop     eax
#undef res
#define res ecx	// 7082 res = ecx
#undef flags
#define flags eax	// 7083 flags = eax
	R(CMP(edx, 1));	// 7084 cmp     edx, 1
		R(JZ(loc_405df6));	// 7085 jz      short loc_405DF6
	R(AND(ah, 0x0F7));	// 7086 and     ah, 0F7h
loc_405df6:
	R(AND(flags, 1));	// 7089 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 7090 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 7091 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 7092 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 7093 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 7094 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtrl)));	// 7095 mov     dword ptr [esp+4], offset aBtrl ; "btrl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 7096 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7097 call    printf
	R(ADD(esp, 0x20));	// 7098 add     esp, 20h
	R(POP(ebx));	// 7099 pop     ebx
	R(POP(esi));	// 7100 pop     esi
	R(POP(ebp));	// 7101 pop     ebp
	R(RETN);	// 7102 retn
 // Procedure exec_btrw() start
exec_btrw:
#undef s2
#define s2 8	// 7114 s2 = 8
#undef s0
#define s0 0x0C	// 7115 s0 = 0x0C
#undef s1
#define s1 0x10	// 7116 s1 = 0x10
#undef iflags
#define iflags 0x14	// 7117 iflags = 0x14
	R(PUSH(ebp));	// 7120 push    ebp
	R(MOV(ebp, esp));	// 7121 mov     ebp, esp
	R(PUSH(esi));	// 7122 push    esi
	R(PUSH(ebx));	// 7123 push    ebx
	R(SUB(esp, 0x20));	// 7124 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 7125 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 7126 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 7127 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 7128 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 7129 flags = esi
	R(MOV(ecx, res));	// 7130 mov     ecx, res
	R(MOV(eax, flags));	// 7131 mov     eax, flags
	R(PUSH(eax));	// 7132 push    eax
	R(POPF);	// 7133 popf
	R(BTR(cx, dx));	// 7134 btr     cx, dx
	R(PUSHF);	// 7135 pushf
	R(POP(eax));	// 7136 pop     eax
#undef res
#define res ecx	// 7137 res = ecx
#undef flags
#define flags eax	// 7138 flags = eax
	R(CMP(edx, 1));	// 7139 cmp     edx, 1
		R(JZ(loc_405e4d));	// 7140 jz      short loc_405E4D
	R(AND(ah, 0x0F7));	// 7141 and     ah, 0F7h
loc_405e4d:
	R(AND(flags, 1));	// 7144 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 7145 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 7146 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 7147 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 7148 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 7149 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtrw)));	// 7150 mov     dword ptr [esp+4], offset aBtrw ; "btrw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 7151 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7152 call    printf
	R(ADD(esp, 0x20));	// 7153 add     esp, 20h
	R(POP(ebx));	// 7154 pop     ebx
	R(POP(esi));	// 7155 pop     esi
	R(POP(ebp));	// 7156 pop     ebp
	R(RETN);	// 7157 retn
 // Procedure exec_btr() start
exec_btr:
#undef s2
#define s2 8	// 7170 s2 = 8
#undef s0
#define s0 0x0C	// 7171 s0 = 0x0C
#undef s1
#define s1 0x10	// 7172 s1 = 0x10
	R(PUSH(ebp));	// 7175 push    ebp
	R(MOV(ebp, esp));	// 7176 mov     ebp, esp
	R(PUSH(edi));	// 7177 push    edi
	R(PUSH(esi));	// 7178 push    esi
	R(PUSH(ebx));	// 7179 push    ebx
	R(SUB(esp, 0x1C));	// 7180 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 7181 mov     ebx, [ebp+s2]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 7182 mov     esi, [ebp+s0]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));	// 7183 mov     edi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 7184 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 7185 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 7186 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 7187 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btrl));	// 7188 call    exec_btrl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 7189 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 7190 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 7191 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 7192 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btrw));	// 7193 call    exec_btrw
	R(ADD(esp, 0x1C));	// 7194 add     esp, 1Ch
	R(POP(ebx));	// 7195 pop     ebx
	R(POP(esi));	// 7196 pop     esi
	R(POP(edi));	// 7197 pop     edi
	R(POP(ebp));	// 7198 pop     ebp
	R(RETN);	// 7199 retn
 // Procedure test_btr() start
test_btr:
	R(PUSH(ebp));	// 7211 push    ebp
	R(MOV(ebp, esp));	// 7212 mov     ebp, esp
	R(PUSH(ebx));	// 7213 push    ebx
	R(SUB(esp, 0x14));	// 7214 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 7215 xor     ebx, ebx
loc_405ed2:
#undef i
#define i ebx	// 7218 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7219 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 7220 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 7221 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 7222 inc     i
	R(CALL(kexec_btr));	// 7223 call    exec_btr
#undef i
#define i ebx	// 7224 i = ebx
	R(CMP(i, 0x20));	// 7225 cmp     i, 20h
		R(JNZ(loc_405ed2));	// 7226 jnz     short loc_405ED2
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7227 xor     i, i
loc_405ef2:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7230 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 7231 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 7232 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 7233 inc     i
	R(CALL(kexec_btr));	// 7234 call    exec_btr
#undef i
#define i ebx	// 7235 i = ebx
	R(CMP(i, 0x20));	// 7236 cmp     i, 20h
		R(JNZ(loc_405ef2));	// 7237 jnz     short loc_405EF2
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7238 xor     i, i
loc_405f12:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7241 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 7242 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 7243 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 7244 inc     i
	R(CALL(kexec_btr));	// 7245 call    exec_btr
#undef i
#define i ebx	// 7246 i = ebx
	R(CMP(i, 0x20));	// 7247 cmp     i, 20h
		R(JNZ(loc_405f12));	// 7248 jnz     short loc_405F12
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7249 xor     i, i
loc_405f32:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7252 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 7253 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 7254 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 7255 inc     i
	R(CALL(kexec_btr));	// 7256 call    exec_btr
#undef i
#define i ebx	// 7257 i = ebx
	R(CMP(i, 0x20));	// 7258 cmp     i, 20h
		R(JNZ(loc_405f32));	// 7259 jnz     short loc_405F32
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7260 xor     i, i
loc_405f52:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7263 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 7264 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 7265 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 7266 inc     i
	R(CALL(kexec_btr));	// 7267 call    exec_btr
#undef i
#define i ebx	// 7268 i = ebx
	R(CMP(i, 0x20));	// 7269 cmp     i, 20h
		R(JNZ(loc_405f52));	// 7270 jnz     short loc_405F52
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7271 xor     i, i
loc_405f72:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7274 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 7275 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 7276 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 7277 inc     i
	R(CALL(kexec_btr));	// 7278 call    exec_btr
#undef i
#define i ebx	// 7279 i = ebx
	R(CMP(i, 0x20));	// 7280 cmp     i, 20h
		R(JNZ(loc_405f72));	// 7281 jnz     short loc_405F72
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7282 xor     i, i
loc_405f92:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7285 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 7286 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 7287 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 7288 inc     i
	R(CALL(kexec_btr));	// 7289 call    exec_btr
#undef i
#define i ebx	// 7290 i = ebx
	R(CMP(i, 0x20));	// 7291 cmp     i, 20h
		R(JNZ(loc_405f92));	// 7292 jnz     short loc_405F92
	R(ADD(esp, 0x14));	// 7293 add     esp, 14h
	R(POP(i));	// 7294 pop     i
	R(POP(ebp));	// 7295 pop     ebp
	R(RETN);	// 7296 retn
 // Procedure exec_btcl() start
exec_btcl:
#undef s2
#define s2 8	// 7308 s2 = 8
#undef s0
#define s0 0x0C	// 7309 s0 = 0x0C
#undef s1
#define s1 0x10	// 7310 s1 = 0x10
#undef iflags
#define iflags 0x14	// 7311 iflags = 0x14
	R(PUSH(ebp));	// 7314 push    ebp
	R(MOV(ebp, esp));	// 7315 mov     ebp, esp
	R(PUSH(esi));	// 7316 push    esi
	R(PUSH(ebx));	// 7317 push    ebx
	R(SUB(esp, 0x20));	// 7318 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 7319 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 7320 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 7321 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 7322 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 7323 flags = esi
	R(MOV(ecx, res));	// 7324 mov     ecx, res
	R(MOV(eax, flags));	// 7325 mov     eax, flags
	R(PUSH(eax));	// 7326 push    eax
	R(POPF);	// 7327 popf
	R(BTC(ecx, edx));	// 7328 btc     ecx, edx
	R(PUSHF);	// 7329 pushf
	R(POP(eax));	// 7330 pop     eax
#undef res
#define res ecx	// 7331 res = ecx
#undef flags
#define flags eax	// 7332 flags = eax
	R(CMP(edx, 1));	// 7333 cmp     edx, 1
		R(JZ(loc_405fda));	// 7334 jz      short loc_405FDA
	R(AND(ah, 0x0F7));	// 7335 and     ah, 0F7h
loc_405fda:
	R(AND(flags, 1));	// 7338 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 7339 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 7340 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 7341 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 7342 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 7343 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtcl)));	// 7344 mov     dword ptr [esp+4], offset aBtcl ; "btcl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 7345 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7346 call    printf
	R(ADD(esp, 0x20));	// 7347 add     esp, 20h
	R(POP(ebx));	// 7348 pop     ebx
	R(POP(esi));	// 7349 pop     esi
	R(POP(ebp));	// 7350 pop     ebp
	R(RETN);	// 7351 retn
 // Procedure exec_btcw() start
exec_btcw:
#undef s2
#define s2 8	// 7363 s2 = 8
#undef s0
#define s0 0x0C	// 7364 s0 = 0x0C
#undef s1
#define s1 0x10	// 7365 s1 = 0x10
#undef iflags
#define iflags 0x14	// 7366 iflags = 0x14
	R(PUSH(ebp));	// 7369 push    ebp
	R(MOV(ebp, esp));	// 7370 mov     ebp, esp
	R(PUSH(esi));	// 7371 push    esi
	R(PUSH(ebx));	// 7372 push    ebx
	R(SUB(esp, 0x20));	// 7373 sub     esp, 20h
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 7374 mov     edx, [ebp+s1]
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 7375 mov     ebx, [ebp+s0]
#undef res
#define res ebx	// 7376 res = ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+iflags))));	// 7377 mov     esi, [ebp+iflags]
#undef flags
#define flags esi	// 7378 flags = esi
	R(MOV(ecx, res));	// 7379 mov     ecx, res
	R(MOV(eax, flags));	// 7380 mov     eax, flags
	R(PUSH(eax));	// 7381 push    eax
	R(POPF);	// 7382 popf
	R(BTC(cx, dx));	// 7383 btc     cx, dx
	R(PUSHF);	// 7384 pushf
	R(POP(eax));	// 7385 pop     eax
#undef res
#define res ecx	// 7386 res = ecx
#undef flags
#define flags eax	// 7387 flags = eax
	R(CMP(edx, 1));	// 7388 cmp     edx, 1
		R(JZ(loc_406031));	// 7389 jz      short loc_406031
	R(AND(ah, 0x0F7));	// 7390 and     ah, 0F7h
loc_406031:
	R(AND(flags, 1));	// 7393 and     flags, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 7394 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 7395 mov     [esp+8], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), eax));	// 7396 mov     [esp+18h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 7397 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 7398 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBtcw)));	// 7399 mov     dword ptr [esp+4], offset aBtcw ; "btcw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR_0)));	// 7400 mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7401 call    printf
	R(ADD(esp, 0x20));	// 7402 add     esp, 20h
	R(POP(ebx));	// 7403 pop     ebx
	R(POP(esi));	// 7404 pop     esi
	R(POP(ebp));	// 7405 pop     ebp
	R(RETN);	// 7406 retn
 // Procedure exec_btc() start
exec_btc:
#undef s2
#define s2 8	// 7419 s2 = 8
#undef s0
#define s0 0x0C	// 7420 s0 = 0x0C
#undef s1
#define s1 0x10	// 7421 s1 = 0x10
	R(PUSH(ebp));	// 7424 push    ebp
	R(MOV(ebp, esp));	// 7425 mov     ebp, esp
	R(PUSH(edi));	// 7426 push    edi
	R(PUSH(esi));	// 7427 push    esi
	R(PUSH(ebx));	// 7428 push    ebx
	R(SUB(esp, 0x1C));	// 7429 sub     esp, 1Ch
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s2))));	// 7430 mov     ebx, [ebp+s2]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+s0))));	// 7431 mov     esi, [ebp+s0]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+s1))));	// 7432 mov     edi, [ebp+s1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 7433 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 7434 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 7435 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 7436 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btcl));	// 7437 call    exec_btcl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 7438 mov     [esp+8], edi    ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), esi));	// 7439 mov     [esp+4], esi    ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), ebx));	// 7440 mov     [esp], ebx      ; s2
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 7441 mov     dword ptr [esp+0Ch], 0 ; iflags
	R(CALL(kexec_btcw));	// 7442 call    exec_btcw
	R(ADD(esp, 0x1C));	// 7443 add     esp, 1Ch
	R(POP(ebx));	// 7444 pop     ebx
	R(POP(esi));	// 7445 pop     esi
	R(POP(edi));	// 7446 pop     edi
	R(POP(ebp));	// 7447 pop     ebp
	R(RETN);	// 7448 retn
 // Procedure test_btc() start
test_btc:
	R(PUSH(ebp));	// 7460 push    ebp
	R(MOV(ebp, esp));	// 7461 mov     ebp, esp
	R(PUSH(ebx));	// 7462 push    ebx
	R(SUB(esp, 0x14));	// 7463 sub     esp, 14h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 7464 xor     ebx, ebx
loc_4060b6:
#undef i
#define i ebx	// 7467 i = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7468 mov     [esp+8], i
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 7469 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 7470 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 7471 inc     i
	R(CALL(kexec_btc));	// 7472 call    exec_btc
#undef i
#define i ebx	// 7473 i = ebx
	R(CMP(i, 0x20));	// 7474 cmp     i, 20h
		R(JNZ(loc_4060b6));	// 7475 jnz     short loc_4060B6
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7476 xor     i, i
loc_4060d6:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7479 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 7480 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 7481 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 7482 inc     i
	R(CALL(kexec_btc));	// 7483 call    exec_btc
#undef i
#define i ebx	// 7484 i = ebx
	R(CMP(i, 0x20));	// 7485 cmp     i, 20h
		R(JNZ(loc_4060d6));	// 7486 jnz     short loc_4060D6
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7487 xor     i, i
loc_4060f6:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7490 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x82345679));	// 7491 mov     dword ptr [esp+4], 82345679h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x21AD3D34));	// 7492 mov     dword ptr [esp], 21AD3D34h ; s2
	R(INC(i));	// 7493 inc     i
	R(CALL(kexec_btc));	// 7494 call    exec_btc
#undef i
#define i ebx	// 7495 i = ebx
	R(CMP(i, 0x20));	// 7496 cmp     i, 20h
		R(JNZ(loc_4060f6));	// 7497 jnz     short loc_4060F6
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7498 xor     i, i
loc_406116:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7501 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 7502 mov     dword ptr [esp+4], 12345678h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x813F3421));	// 7503 mov     dword ptr [esp], 813F3421h ; s2
	R(INC(i));	// 7504 inc     i
	R(CALL(kexec_btc));	// 7505 call    exec_btc
#undef i
#define i ebx	// 7506 i = ebx
	R(CMP(i, 0x20));	// 7507 cmp     i, 20h
		R(JNZ(loc_406116));	// 7508 jnz     short loc_406116
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7509 xor     i, i
loc_406136:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7512 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80008688));	// 7513 mov     dword ptr [esp+4], 80008688h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80008481));	// 7514 mov     dword ptr [esp], 80008481h ; s2
	R(INC(i));	// 7515 inc     i
	R(CALL(kexec_btc));	// 7516 call    exec_btc
#undef i
#define i ebx	// 7517 i = ebx
	R(CMP(i, 0x20));	// 7518 cmp     i, 20h
		R(JNZ(loc_406136));	// 7519 jnz     short loc_406136
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7520 xor     i, i
loc_406156:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7523 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 7524 mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 7525 mov     dword ptr [esp], 0FFFFFFFFh ; s2
	R(INC(i));	// 7526 inc     i
	R(CALL(kexec_btc));	// 7527 call    exec_btc
#undef i
#define i ebx	// 7528 i = ebx
	R(CMP(i, 0x20));	// 7529 cmp     i, 20h
		R(JNZ(loc_406156));	// 7530 jnz     short loc_406156
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 7531 xor     i, i
loc_406176:
	R(MOV(*(dd*)(raddr(ds,esp+8)), i));	// 7534 mov     [esp+8], i      ; s1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFE0080));	// 7535 mov     dword ptr [esp+4], 0FFFE0080h ; s0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE0080));	// 7536 mov     dword ptr [esp], 0FFFE0080h ; s2
	R(INC(i));	// 7537 inc     i
	R(CALL(kexec_btc));	// 7538 call    exec_btc
#undef i
#define i ebx	// 7539 i = ebx
	R(CMP(i, 0x20));	// 7540 cmp     i, 20h
		R(JNZ(loc_406176));	// 7541 jnz     short loc_406176
	R(ADD(esp, 0x14));	// 7542 add     esp, 14h
	R(POP(i));	// 7543 pop     i
	R(POP(ebp));	// 7544 pop     ebp
	R(RETN);	// 7545 retn
 // Procedure test_lea() start
test_lea:
	R(PUSH(ebp));	// 7557 push    ebp
	R(MOV(ecx, 4));	// 7558 mov     ecx, 4
	R(MOV(ebp, esp));	// 7559 mov     ebp, esp
	R(PUSH(edi));	// 7560 push    edi
	R(PUSH(esi));	// 7561 push    esi
	R(PUSH(ebx));	// 7562 push    ebx
	R(SUB(esp, 0x1C));	// 7563 sub     esp, 1Ch
	R(MOV(esi, 0x10));	// 7564 mov     esi, 10h
	R(MOV(edi, 0x20));	// 7565 mov     edi, 20h
	R(MOV(ebx, 2));	// 7566 mov     ebx, 2
	R(MOV(edx, 8));	// 7567 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000)));	// 7568 mov     dword ptr [esp+4], offset a0x4000 ; "0x4000"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7569 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7570 mov     eax, 1
	R(eax = 0x4000);	// 7571 lea     eax, large ds:4000h
#undef res
#define res eax	// 7572 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7573 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7574 call    printf
	R(MOV(ecx, 4));	// 7575 mov     ecx, 4
	R(MOV(edx, 8));	// 7576 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEax)));	// 7577 mov     dword ptr [esp+4], offset aEax ; "(%%eax)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7578 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7579 mov     eax, 1
	R(eax = eax);	// 7580 lea     eax, [eax]
#undef res
#define res eax	// 7581 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7582 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7583 call    printf
	R(MOV(ecx, 4));	// 7584 mov     ecx, 4
	R(MOV(edx, 8));	// 7585 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEbx)));	// 7586 mov     dword ptr [esp+4], offset aEbx ; "(%%ebx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7587 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7588 mov     eax, 1
	R(eax = ebx);	// 7589 lea     eax, [ebx]
#undef res
#define res eax	// 7590 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7591 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7592 call    printf
	R(MOV(ecx, 4));	// 7593 mov     ecx, 4
	R(MOV(edx, 8));	// 7594 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcx)));	// 7595 mov     dword ptr [esp+4], offset aEcx ; "(%%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7596 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7597 mov     eax, 1
	R(eax = ecx);	// 7598 lea     eax, [ecx]
#undef res
#define res eax	// 7599 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7600 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7601 call    printf
	R(MOV(ecx, 4));	// 7602 mov     ecx, 4
	R(MOV(edx, 8));	// 7603 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdx)));	// 7604 mov     dword ptr [esp+4], offset aEdx ; "(%%edx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7605 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7606 mov     eax, 1
	R(eax = edx);	// 7607 lea     eax, [edx]
#undef res
#define res eax	// 7608 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7609 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7610 call    printf
	R(MOV(ecx, 4));	// 7611 mov     ecx, 4
	R(MOV(edx, 8));	// 7612 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEsi)));	// 7613 mov     dword ptr [esp+4], offset aEsi ; "(%%esi)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7614 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7615 mov     eax, 1
	R(eax = esi);	// 7616 lea     eax, [esi]
#undef res
#define res eax	// 7617 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7618 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7619 call    printf
	R(MOV(ecx, 4));	// 7620 mov     ecx, 4
	R(MOV(edx, 8));	// 7621 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdi)));	// 7622 mov     dword ptr [esp+4], offset aEdi ; "(%%edi)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7623 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7624 mov     eax, 1
	R(eax = edi);	// 7625 lea     eax, [edi]
#undef res
#define res eax	// 7626 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7627 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7628 call    printf
	R(MOV(ecx, 4));	// 7629 mov     ecx, 4
	R(MOV(edx, 8));	// 7630 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Eax)));	// 7631 mov     dword ptr [esp+4], offset a0x40Eax ; "0x40(%%eax)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7632 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7633 mov     eax, 1
	R(eax = eax+0x40);	// 7634 lea     eax, [eax+40h]
#undef res
#define res eax	// 7635 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7636 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7637 call    printf
	R(MOV(ecx, 4));	// 7638 mov     ecx, 4
	R(MOV(edx, 8));	// 7639 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ebx)));	// 7640 mov     dword ptr [esp+4], offset a0x40Ebx ; "0x40(%%ebx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7641 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7642 mov     eax, 1
	R(eax = ebx+0x40);	// 7643 lea     eax, [ebx+40h]
#undef res
#define res eax	// 7644 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7645 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7646 call    printf
	R(MOV(ecx, 4));	// 7647 mov     ecx, 4
	R(MOV(edx, 8));	// 7648 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ecx)));	// 7649 mov     dword ptr [esp+4], offset a0x40Ecx ; "0x40(%%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7650 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7651 mov     eax, 1
	R(eax = ecx+0x40);	// 7652 lea     eax, [ecx+40h]
#undef res
#define res eax	// 7653 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7654 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7655 call    printf
	R(MOV(ecx, 4));	// 7656 mov     ecx, 4
	R(MOV(edx, 8));	// 7657 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Edx)));	// 7658 mov     dword ptr [esp+4], offset a0x40Edx ; "0x40(%%edx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7659 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7660 mov     eax, 1
	R(eax = edx+0x40);	// 7661 lea     eax, [edx+40h]
#undef res
#define res eax	// 7662 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7663 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7664 call    printf
	R(MOV(ecx, 4));	// 7665 mov     ecx, 4
	R(MOV(edx, 8));	// 7666 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Esi)));	// 7667 mov     dword ptr [esp+4], offset a0x40Esi ; "0x40(%%esi)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7668 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7669 mov     eax, 1
	R(eax = esi+0x40);	// 7670 lea     eax, [esi+40h]
#undef res
#define res eax	// 7671 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7672 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7673 call    printf
	R(MOV(ecx, 4));	// 7674 mov     ecx, 4
	R(MOV(edx, 8));	// 7675 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Edi)));	// 7676 mov     dword ptr [esp+4], offset a0x40Edi ; "0x40(%%edi)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7677 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7678 mov     eax, 1
	R(eax = edi+0x40);	// 7679 lea     eax, [edi+40h]
#undef res
#define res eax	// 7680 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7681 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7682 call    printf
	R(MOV(ecx, 4));	// 7683 mov     ecx, 4
	R(MOV(edx, 8));	// 7684 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Eax)));	// 7685 mov     dword ptr [esp+4], offset a0x4000Eax ; "0x4000(%%eax)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7686 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7687 mov     eax, 1
	R(eax = eax+0x4000);	// 7688 lea     eax, [eax+4000h]
#undef res
#define res eax	// 7689 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7690 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7691 call    printf
	R(MOV(ecx, 4));	// 7692 mov     ecx, 4
	R(MOV(edx, 8));	// 7693 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Ebx)));	// 7694 mov     dword ptr [esp+4], offset a0x4000Ebx ; "0x4000(%%ebx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7695 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7696 mov     eax, 1
	R(eax = ebx+0x4000);	// 7697 lea     eax, [ebx+4000h]
#undef res
#define res eax	// 7698 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7699 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7700 call    printf
	R(MOV(ecx, 4));	// 7701 mov     ecx, 4
	R(MOV(edx, 8));	// 7702 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Ecx)));	// 7703 mov     dword ptr [esp+4], offset a0x4000Ecx ; "0x4000(%%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7704 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7705 mov     eax, 1
	R(eax = ecx+0x4000);	// 7706 lea     eax, [ecx+4000h]
#undef res
#define res eax	// 7707 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7708 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7709 call    printf
	R(MOV(ecx, 4));	// 7710 mov     ecx, 4
	R(MOV(edx, 8));	// 7711 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Edx)));	// 7712 mov     dword ptr [esp+4], offset a0x4000Edx ; "0x4000(%%edx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7713 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7714 mov     eax, 1
	R(eax = edx+0x4000);	// 7715 lea     eax, [edx+4000h]
#undef res
#define res eax	// 7716 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7717 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7718 call    printf
	R(MOV(ecx, 4));	// 7719 mov     ecx, 4
	R(MOV(edx, 8));	// 7720 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Esi)));	// 7721 mov     dword ptr [esp+4], offset a0x4000Esi ; "0x4000(%%esi)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7722 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7723 mov     eax, 1
	R(eax = esi+0x4000);	// 7724 lea     eax, [esi+4000h]
#undef res
#define res eax	// 7725 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7726 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7727 call    printf
	R(MOV(ecx, 4));	// 7728 mov     ecx, 4
	R(MOV(edx, 8));	// 7729 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000Edi)));	// 7730 mov     dword ptr [esp+4], offset a0x4000Edi ; "0x4000(%%edi)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7731 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7732 mov     eax, 1
	R(eax = edi+0x4000);	// 7733 lea     eax, [edi+4000h]
#undef res
#define res eax	// 7734 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7735 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7736 call    printf
	R(MOV(ecx, 4));	// 7737 mov     ecx, 4
	R(MOV(edx, 8));	// 7738 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEaxEcx)));	// 7739 mov     dword ptr [esp+4], offset aEaxEcx ; "(%%eax, %%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7740 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7741 mov     eax, 1
	R(eax = eax+ecx);	// 7742 lea     eax, [eax+ecx]
#undef res
#define res eax	// 7743 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7744 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7745 call    printf
	R(MOV(ecx, 4));	// 7746 mov     ecx, 4
	R(MOV(edx, 8));	// 7747 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEbxEdx)));	// 7748 mov     dword ptr [esp+4], offset aEbxEdx ; "(%%ebx, %%edx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7749 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7750 mov     eax, 1
	R(eax = ebx+edx);	// 7751 lea     eax, [ebx+edx]
#undef res
#define res eax	// 7752 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7753 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7754 call    printf
	R(MOV(ecx, 4));	// 7755 mov     ecx, 4
	R(MOV(edx, 8));	// 7756 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcxEcx)));	// 7757 mov     dword ptr [esp+4], offset aEcxEcx ; "(%%ecx, %%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7758 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7759 mov     eax, 1
	R(eax = ecx+ecx);	// 7760 lea     eax, [ecx+ecx]
#undef res
#define res eax	// 7761 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7762 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7763 call    printf
	R(MOV(ecx, 4));	// 7764 mov     ecx, 4
	R(MOV(edx, 8));	// 7765 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdxEcx)));	// 7766 mov     dword ptr [esp+4], offset aEdxEcx ; "(%%edx, %%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7767 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7768 mov     eax, 1
	R(eax = edx+ecx);	// 7769 lea     eax, [edx+ecx]
#undef res
#define res eax	// 7770 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7771 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7772 call    printf
	R(MOV(ecx, 4));	// 7773 mov     ecx, 4
	R(MOV(edx, 8));	// 7774 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEsiEcx)));	// 7775 mov     dword ptr [esp+4], offset aEsiEcx ; "(%%esi, %%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7776 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7777 mov     eax, 1
	R(eax = esi+ecx);	// 7778 lea     eax, [esi+ecx]
#undef res
#define res eax	// 7779 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7780 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7781 call    printf
	R(MOV(ecx, 4));	// 7782 mov     ecx, 4
	R(MOV(edx, 8));	// 7783 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdiEcx)));	// 7784 mov     dword ptr [esp+4], offset aEdiEcx ; "(%%edi, %%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7785 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7786 mov     eax, 1
	R(eax = edi+ecx);	// 7787 lea     eax, [edi+ecx]
#undef res
#define res eax	// 7788 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7789 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7790 call    printf
	R(MOV(ecx, 4));	// 7791 mov     ecx, 4
	R(MOV(edx, 8));	// 7792 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40EaxEcx)));	// 7793 mov     dword ptr [esp+4], offset a0x40EaxEcx ; "0x40(%%eax, %%ecx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7794 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7795 mov     eax, 1
	R(eax = eax+ecx+0x40);	// 7796 lea     eax, [eax+ecx+40h]
#undef res
#define res eax	// 7797 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7798 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7799 call    printf
	R(MOV(ecx, 4));	// 7800 mov     ecx, 4
	R(MOV(edx, 8));	// 7801 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EbxEdx)));	// 7802 mov     dword ptr [esp+4], offset a0x4000EbxEdx ; "0x4000(%%ebx, %%edx)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7803 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7804 mov     eax, 1
	R(eax = ebx+edx+0x4000);	// 7805 lea     eax, [ebx+edx+4000h]
#undef res
#define res eax	// 7806 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7807 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7808 call    printf
	R(MOV(ecx, 4));	// 7809 mov     ecx, 4
	R(MOV(edx, 8));	// 7810 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcxEcx2)));	// 7811 mov     dword ptr [esp+4], offset aEcxEcx2 ; "(%%ecx, %%ecx, 2)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7812 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7813 mov     eax, 1
	R(eax = ecx+ecx*2);	// 7814 lea     eax, [ecx+ecx*2]
#undef res
#define res eax	// 7815 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7816 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7817 call    printf
	R(MOV(ecx, 4));	// 7818 mov     ecx, 4
	R(MOV(edx, 8));	// 7819 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEdxEcx4)));	// 7820 mov     dword ptr [esp+4], offset aEdxEcx4 ; "(%%edx, %%ecx, 4)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7821 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7822 mov     eax, 1
	R(eax = edx+ecx*4);	// 7823 lea     eax, [edx+ecx*4]
#undef res
#define res eax	// 7824 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7825 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7826 call    printf
	R(MOV(ecx, 4));	// 7827 mov     ecx, 4
	R(MOV(edx, 8));	// 7828 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEsiEcx8)));	// 7829 mov     dword ptr [esp+4], offset aEsiEcx8 ; "(%%esi, %%ecx, 8)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7830 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7831 mov     eax, 1
	R(eax = esi+ecx*8);	// 7832 lea     eax, [esi+ecx*8]
#undef res
#define res eax	// 7833 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7834 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7835 call    printf
	R(MOV(ecx, 4));	// 7836 mov     ecx, 4
	R(MOV(edx, 8));	// 7837 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEax2)));	// 7838 mov     dword ptr [esp+4], offset aEax2 ; "(,%%eax, 2)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7839 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7840 mov     eax, 1
	R(eax = 0+eax*2);	// 7841 lea     eax, ds:0[eax*2]
#undef res
#define res eax	// 7842 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7843 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7844 call    printf
	R(MOV(ecx, 4));	// 7845 mov     ecx, 4
	R(MOV(edx, 8));	// 7846 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEbx4)));	// 7847 mov     dword ptr [esp+4], offset aEbx4 ; "(,%%ebx, 4)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7848 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7849 mov     eax, 1
	R(eax = 0+ebx*4);	// 7850 lea     eax, ds:0[ebx*4]
#undef res
#define res eax	// 7851 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7852 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7853 call    printf
	R(MOV(ecx, 4));	// 7854 mov     ecx, 4
	R(MOV(edx, 8));	// 7855 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aEcx8)));	// 7856 mov     dword ptr [esp+4], offset aEcx8 ; "(,%%ecx, 8)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7857 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7858 mov     eax, 1
	R(eax = 0+ecx*8);	// 7859 lea     eax, ds:0[ecx*8]
#undef res
#define res eax	// 7860 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7861 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7862 call    printf
	R(MOV(ecx, 4));	// 7863 mov     ecx, 4
	R(MOV(edx, 8));	// 7864 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Eax2)));	// 7865 mov     dword ptr [esp+4], offset a0x40Eax2 ; "0x40(,%%eax, 2)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7866 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7867 mov     eax, 1
	R(eax = 0x40+eax*2);	// 7868 lea     eax, ds:40h[eax*2]
#undef res
#define res eax	// 7869 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7870 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7871 call    printf
	R(MOV(ecx, 4));	// 7872 mov     ecx, 4
	R(MOV(edx, 8));	// 7873 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ebx4)));	// 7874 mov     dword ptr [esp+4], offset a0x40Ebx4 ; "0x40(,%%ebx, 4)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7875 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7876 mov     eax, 1
	R(eax = 0x40+ebx*4);	// 7877 lea     eax, ds:40h[ebx*4]
#undef res
#define res eax	// 7878 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7879 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7880 call    printf
	R(MOV(ecx, 4));	// 7881 mov     ecx, 4
	R(MOV(edx, 8));	// 7882 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x40Ecx8)));	// 7883 mov     dword ptr [esp+4], offset a0x40Ecx8 ; "0x40(,%%ecx, 8)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7884 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7885 mov     eax, 1
	R(eax = 0x40+ecx*8);	// 7886 lea     eax, ds:40h[ecx*8]
#undef res
#define res eax	// 7887 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7888 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7889 call    printf
	R(MOV(ecx, 4));	// 7890 mov     ecx, 4
	R(MOV(edx, 8));	// 7891 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a10EcxEcx2)));	// 7892 mov     dword ptr [esp+4], offset a10EcxEcx2 ; "-10(%%ecx, %%ecx, 2)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7893 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7894 mov     eax, 1
	R(eax = ecx+ecx*2-0x0A);	// 7895 lea     eax, [ecx+ecx*2-0Ah]
#undef res
#define res eax	// 7896 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7897 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7898 call    printf
	R(MOV(ecx, 4));	// 7899 mov     ecx, 4
	R(MOV(edx, 8));	// 7900 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a10EdxEcx4)));	// 7901 mov     dword ptr [esp+4], offset a10EdxEcx4 ; "-10(%%edx, %%ecx, 4)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7902 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7903 mov     eax, 1
	R(eax = edx+ecx*4-0x0A);	// 7904 lea     eax, [edx+ecx*4-0Ah]
#undef res
#define res eax	// 7905 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7906 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7907 call    printf
	R(MOV(ecx, 4));	// 7908 mov     ecx, 4
	R(MOV(edx, 8));	// 7909 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a10EsiEcx8)));	// 7910 mov     dword ptr [esp+4], offset a10EsiEcx8 ; "-10(%%esi, %%ecx, 8)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7911 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7912 mov     eax, 1
	R(eax = esi+ecx*8-0x0A);	// 7913 lea     eax, [esi+ecx*8-0Ah]
#undef res
#define res eax	// 7914 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7915 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7916 call    printf
	R(MOV(ecx, 4));	// 7917 mov     ecx, 4
	R(MOV(edx, 8));	// 7918 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EcxEcx2)));	// 7919 mov     dword ptr [esp+4], offset a0x4000EcxEcx2 ; "0x4000(%%ecx, %%ecx, 2)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7920 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7921 mov     eax, 1
	R(eax = ecx+ecx*2+0x4000);	// 7922 lea     eax, [ecx+ecx*2+4000h]
#undef res
#define res eax	// 7923 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7924 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7925 call    printf
	R(MOV(ecx, 4));	// 7926 mov     ecx, 4
	R(MOV(edx, 8));	// 7927 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EdxEcx4)));	// 7928 mov     dword ptr [esp+4], offset a0x4000EdxEcx4 ; "0x4000(%%edx, %%ecx, 4)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7929 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(MOV(eax, 1));	// 7930 mov     eax, 1
	R(eax = edx+ecx*4+0x4000);	// 7931 lea     eax, [edx+ecx*4+4000h]
#undef res
#define res eax	// 7932 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7933 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7934 call    printf
	R(MOV(eax, 1));	// 7935 mov     eax, 1
	R(MOV(ecx, 4));	// 7936 mov     ecx, 4
	R(MOV(edx, 8));	// 7937 mov     edx, 8
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,a0x4000EsiEcx8)));	// 7938 mov     dword ptr [esp+4], offset a0x4000EsiEcx8 ; "0x4000(%%esi, %%ecx, 8)"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aLeaS08lx)));	// 7939 mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
	R(ebx = esi+ecx*8+0x4000);	// 7940 lea     ebx, [esi+ecx*8+4000h]
#undef res
#define res ebx	// 7941 res = ebx
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7942 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7943 call    printf
	R(ADD(esp, 0x1C));	// 7944 add     esp, 1Ch
	R(POP(res));	// 7945 pop     res
	R(POP(esi));	// 7946 pop     esi
	R(POP(edi));	// 7947 pop     edi
	R(POP(ebp));	// 7948 pop     ebp
	R(RETN);	// 7949 retn
 // Procedure test_jcc() start
test_jcc:
#undef var_2c
#define var_2c -0x2C	// 7961 var_2C = -0x2C
#undef val
#define val -0x1C	// 7962 val = -0x1C
	R(PUSH(ebp));	// 7965 push    ebp
	R(MOV(ebp, esp));	// 7966 mov     ebp, esp
	R(PUSH(edi));	// 7967 push    edi
	R(PUSH(esi));	// 7968 push    esi
	R(PUSH(ebx));	// 7969 push    ebx
	R(SUB(esp, 0x3C));	// 7970 sub     esp, 3Ch
	R(MOV(ebx, 1));	// 7971 mov     ebx, 1
	R(MOV(eax, 1));	// 7972 mov     eax, 1
	R(CMP(ebx, ebx));	// 7973 cmp     ebx, ebx
		R(JNZ(loc_4068f5));	// 7974 jnz     short loc_4068F5
	R(MOV(eax, 0));	// 7975 mov     eax, 0
loc_4068f5:
#undef res
#define res eax	// 7978 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJne)));	// 7979 mov     dword ptr [esp+4], offset aJne ; "jne"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7980 mov     [esp+8], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 7981 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(esi, 0x12345678));	// 7982 mov     esi, 12345678h
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7983 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSetne)));	// 7984 mov     dword ptr [esp+4], offset aSetne ; "setne"
	R(MOV(eax, 0));	// 7985 mov     eax, 0
	R(CMP(ebx, ebx));	// 7986 cmp     ebx, ebx
	R(SETNZ(al))	// 7987 setnz   al
#undef res
#define res eax	// 7988 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 7989 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 7990 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 7991 call    printf
	res = 0;AFFECT_ZF(0); AFFECT_SF(res,0);	// 7992 xor     res, res
	R(MOV(eax, 1));	// 7993 mov     eax, 1
	R(CMP(ebx, esi));	// 7994 cmp     ebx, esi
		R(JNZ(loc_40698c));	// 7995 jnz     short loc_40698C
	R(MOV(eax, 0));	// 7996 mov     eax, 0
loc_40698c:
#undef res
#define res eax	// 7999 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJne)));	// 8000 mov     dword ptr [esp+4], offset aJne ; "jne"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8001 mov     [esp+8], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8002 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8003 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSetne)));	// 8004 mov     dword ptr [esp+4], offset aSetne ; "setne"
	R(MOV(eax, 0));	// 8005 mov     eax, 0
	R(CMP(ebx, esi));	// 8006 cmp     ebx, esi
	R(SETNZ(al))	// 8007 setnz   al
#undef res
#define res eax	// 8008 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8009 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8010 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8011 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJe)));	// 8012 mov     dword ptr [esp+4], offset aJe ; "je"
	R(MOV(eax, 1));	// 8013 mov     eax, 1
	R(CMP(ebx, ebx));	// 8014 cmp     ebx, ebx
		R(JZ(loc_406a1f));	// 8015 jz      short loc_406A1F
	R(MOV(eax, 0));	// 8016 mov     eax, 0
loc_406a1f:
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8019 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), eax));	// 8020 mov     [esp+8], eax
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8021 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSete)));	// 8022 mov     dword ptr [esp+4], offset aSete ; "sete"
	R(MOV(eax, 0));	// 8023 mov     eax, 0
	R(CMP(ebx, ebx));	// 8024 cmp     ebx, ebx
	R(SETZ(al))	// 8025 setz    al
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8026 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), eax));	// 8027 mov     [esp+8], eax
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8028 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJe)));	// 8029 mov     dword ptr [esp+4], offset aJe ; "je"
	R(MOV(eax, 1));	// 8030 mov     eax, 1
	R(CMP(ebx, esi));	// 8031 cmp     ebx, esi
		R(JZ(loc_406aaf));	// 8032 jz      short loc_406AAF
	R(MOV(eax, 0));	// 8033 mov     eax, 0
loc_406aaf:
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8036 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), eax));	// 8037 mov     [esp+8], eax
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8038 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSete)));	// 8039 mov     dword ptr [esp+4], offset aSete ; "sete"
	R(MOV(eax, 0));	// 8040 mov     eax, 0
	R(CMP(ebx, esi));	// 8041 cmp     ebx, esi
	R(SETZ(al))	// 8042 setz    al
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8043 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), eax));	// 8044 mov     [esp+8], eax
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8045 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJl)));	// 8046 mov     dword ptr [esp+4], offset aJl ; "jl"
	R(MOV(eax, 1));	// 8047 mov     eax, 1
	R(CMP(ebx, ebx));	// 8048 cmp     ebx, ebx
		R(JL(loc_406b3f));	// 8049 jl      short loc_406B3F
	R(MOV(eax, 0));	// 8050 mov     eax, 0
loc_406b3f:
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8053 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), eax));	// 8054 mov     [esp+8], eax
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8055 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJl)));	// 8056 mov     dword ptr [esp+4], offset aJl ; "jl"
	R(MOV(eax, 1));	// 8057 mov     eax, 1
	R(CMP(ebx, esi));	// 8058 cmp     ebx, esi
		R(JL(loc_406bcf));	// 8059 jl      short loc_406BCF
	R(MOV(eax, 0));	// 8060 mov     eax, 0
loc_406bcf:
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8063 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), eax));	// 8064 mov     [esp+8], eax
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8065 call    printf
	R(OR(res, 0x0FFFFFFFF));	// 8066 or      res, 0FFFFFFFFh
	R(MOV(eax, 1));	// 8067 mov     eax, 1
	R(CMP(ebx, edi));	// 8068 cmp     ebx, edi
		R(JL(loc_406c5a));	// 8069 jl      short loc_406C5A
	R(MOV(eax, 0));	// 8070 mov     eax, 0
loc_406c5a:
#undef res
#define res eax	// 8073 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJl)));	// 8074 mov     dword ptr [esp+4], offset aJl ; "jl"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8075 mov     [esp+8], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8076 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8077 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJle)));	// 8078 mov     dword ptr [esp+4], offset aJle ; "jle"
	R(MOV(eax, 1));	// 8079 mov     eax, 1
	R(CMP(ebx, ebx));	// 8080 cmp     ebx, ebx
		R(JLE(loc_406cf8));	// 8081 jle     short loc_406CF8
	R(MOV(eax, 0));	// 8082 mov     eax, 0
loc_406cf8:
#undef res
#define res eax	// 8085 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8086 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8087 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8088 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJle)));	// 8089 mov     dword ptr [esp+4], offset aJle ; "jle"
	R(MOV(eax, 1));	// 8090 mov     eax, 1
	R(CMP(ebx, esi));	// 8091 cmp     ebx, esi
		R(JLE(loc_406d8e));	// 8092 jle     short loc_406D8E
	R(MOV(eax, 0));	// 8093 mov     eax, 0
loc_406d8e:
#undef res
#define res eax	// 8096 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8097 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8098 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8099 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJle)));	// 8100 mov     dword ptr [esp+4], offset aJle ; "jle"
	R(MOV(eax, 1));	// 8101 mov     eax, 1
	R(CMP(ebx, edi));	// 8102 cmp     ebx, edi
		R(JLE(loc_406e24));	// 8103 jle     short loc_406E24
	R(MOV(eax, 0));	// 8104 mov     eax, 0
loc_406e24:
#undef res
#define res eax	// 8107 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8108 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8109 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8110 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJge)));	// 8111 mov     dword ptr [esp+4], offset aJge ; "jge"
	R(MOV(eax, 1));	// 8112 mov     eax, 1
	R(CMP(ebx, ebx));	// 8113 cmp     ebx, ebx
		R(JGE(loc_406eba));	// 8114 jge     short loc_406EBA
	R(MOV(eax, 0));	// 8115 mov     eax, 0
loc_406eba:
#undef res
#define res eax	// 8118 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8119 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8120 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8121 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJge)));	// 8122 mov     dword ptr [esp+4], offset aJge ; "jge"
	R(MOV(eax, 1));	// 8123 mov     eax, 1
	R(CMP(ebx, esi));	// 8124 cmp     ebx, esi
		R(JGE(loc_406f50));	// 8125 jge     short loc_406F50
	R(MOV(eax, 0));	// 8126 mov     eax, 0
loc_406f50:
#undef res
#define res eax	// 8129 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8130 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8131 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8132 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJge)));	// 8133 mov     dword ptr [esp+4], offset aJge ; "jge"
	R(MOV(eax, 1));	// 8134 mov     eax, 1
	R(CMP(edi, ebx));	// 8135 cmp     edi, ebx
		R(JGE(loc_406fe6));	// 8136 jge     short loc_406FE6
	R(MOV(eax, 0));	// 8137 mov     eax, 0
loc_406fe6:
#undef res
#define res eax	// 8140 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8141 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8142 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8143 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJg)));	// 8144 mov     dword ptr [esp+4], offset aJg ; "jg"
	R(MOV(eax, 1));	// 8145 mov     eax, 1
	R(CMP(ebx, ebx));	// 8146 cmp     ebx, ebx
		R(JG(loc_40707c));	// 8147 jg      short loc_40707C
	R(MOV(eax, 0));	// 8148 mov     eax, 0
loc_40707c:
#undef res
#define res eax	// 8151 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8152 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8153 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8154 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJg)));	// 8155 mov     dword ptr [esp+4], offset aJg ; "jg"
	R(MOV(eax, 1));	// 8156 mov     eax, 1
	R(CMP(ebx, esi));	// 8157 cmp     ebx, esi
		R(JG(loc_407112));	// 8158 jg      short loc_407112
	R(MOV(eax, 0));	// 8159 mov     eax, 0
loc_407112:
#undef res
#define res eax	// 8162 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8163 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8164 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8165 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJg)));	// 8166 mov     dword ptr [esp+4], offset aJg ; "jg"
	R(MOV(eax, 1));	// 8167 mov     eax, 1
	R(CMP(ebx, edi));	// 8168 cmp     ebx, edi
		R(JG(loc_4071a8));	// 8169 jg      short loc_4071A8
	R(MOV(eax, 0));	// 8170 mov     eax, 0
loc_4071a8:
#undef res
#define res eax	// 8173 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8174 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8175 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8176 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJb)));	// 8177 mov     dword ptr [esp+4], offset aJb ; "jb"
	R(MOV(eax, 1));	// 8178 mov     eax, 1
	R(CMP(ebx, ebx));	// 8179 cmp     ebx, ebx
		R(JC(loc_40723e));	// 8180 jb      short loc_40723E
	R(MOV(eax, 0));	// 8181 mov     eax, 0
loc_40723e:
#undef res
#define res eax	// 8184 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8185 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8186 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8187 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSetb)));	// 8188 mov     dword ptr [esp+4], offset aSetb ; "setb"
	R(MOV(eax, 0));	// 8189 mov     eax, 0
	R(CMP(ebx, ebx));	// 8190 cmp     ebx, ebx
	R(SETB(al))	// 8191 setb    al
#undef res
#define res eax	// 8192 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8193 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8194 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8195 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJb)));	// 8196 mov     dword ptr [esp+4], offset aJb ; "jb"
	R(MOV(eax, 1));	// 8197 mov     eax, 1
	R(CMP(ebx, esi));	// 8198 cmp     ebx, esi
		R(JC(loc_4072d4));	// 8199 jb      short loc_4072D4
	R(MOV(eax, 0));	// 8200 mov     eax, 0
loc_4072d4:
#undef res
#define res eax	// 8203 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8204 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8205 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8206 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSetb)));	// 8207 mov     dword ptr [esp+4], offset aSetb ; "setb"
	R(MOV(eax, 0));	// 8208 mov     eax, 0
	R(CMP(ebx, esi));	// 8209 cmp     ebx, esi
	R(SETB(al))	// 8210 setb    al
#undef res
#define res eax	// 8211 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8212 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8213 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8214 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJb)));	// 8215 mov     dword ptr [esp+4], offset aJb ; "jb"
	R(MOV(eax, 1));	// 8216 mov     eax, 1
	R(CMP(ebx, edi));	// 8217 cmp     ebx, edi
		R(JC(loc_40736a));	// 8218 jb      short loc_40736A
	R(MOV(eax, 0));	// 8219 mov     eax, 0
loc_40736a:
#undef res
#define res eax	// 8222 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8223 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8224 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8225 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aSetb)));	// 8226 mov     dword ptr [esp+4], offset aSetb ; "setb"
	R(MOV(eax, 0));	// 8227 mov     eax, 0
	R(CMP(ebx, edi));	// 8228 cmp     ebx, edi
	R(SETB(al))	// 8229 setb    al
#undef res
#define res eax	// 8230 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8231 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8232 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8233 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJbe)));	// 8234 mov     dword ptr [esp+4], offset aJbe ; "jbe"
	R(MOV(eax, 1));	// 8235 mov     eax, 1
	R(CMP(ebx, ebx));	// 8236 cmp     ebx, ebx
		R(JBE(loc_407400));	// 8237 jbe     short loc_407400
	R(MOV(eax, 0));	// 8238 mov     eax, 0
loc_407400:
#undef res
#define res eax	// 8241 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8242 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8243 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8244 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJbe)));	// 8245 mov     dword ptr [esp+4], offset aJbe ; "jbe"
	R(MOV(eax, 1));	// 8246 mov     eax, 1
	R(CMP(ebx, esi));	// 8247 cmp     ebx, esi
		R(JBE(loc_407496));	// 8248 jbe     short loc_407496
	R(MOV(eax, 0));	// 8249 mov     eax, 0
loc_407496:
#undef res
#define res eax	// 8252 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8253 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8254 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8255 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJbe)));	// 8256 mov     dword ptr [esp+4], offset aJbe ; "jbe"
	R(MOV(eax, 1));	// 8257 mov     eax, 1
	R(CMP(ebx, edi));	// 8258 cmp     ebx, edi
		R(JBE(loc_40752c));	// 8259 jbe     short loc_40752C
	R(MOV(eax, 0));	// 8260 mov     eax, 0
loc_40752c:
#undef res
#define res eax	// 8263 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8264 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8265 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8266 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJae)));	// 8267 mov     dword ptr [esp+4], offset aJae ; "jae"
	R(MOV(eax, 1));	// 8268 mov     eax, 1
	R(CMP(ebx, ebx));	// 8269 cmp     ebx, ebx
		R(JNC(loc_4075c2));	// 8270 jnb     short loc_4075C2
	R(MOV(eax, 0));	// 8271 mov     eax, 0
loc_4075c2:
#undef res
#define res eax	// 8274 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8275 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8276 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8277 call    printf
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8278 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJae)));	// 8279 mov     dword ptr [esp+4], offset aJae ; "jae"
	R(MOV(eax, 1));	// 8280 mov     eax, 1
	R(CMP(ebx, esi));	// 8281 cmp     ebx, esi
		R(JNC(loc_407658));	// 8282 jnb     short loc_407658
	R(MOV(eax, 0));	// 8283 mov     eax, 0
loc_407658:
#undef res
#define res eax	// 8286 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8287 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8288 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8289 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJae)));	// 8290 mov     dword ptr [esp+4], offset aJae ; "jae"
	R(MOV(eax, 1));	// 8291 mov     eax, 1
	R(CMP(ebx, edi));	// 8292 cmp     ebx, edi
		R(JNC(loc_4076ee));	// 8293 jnb     short loc_4076EE
	R(MOV(eax, 0));	// 8294 mov     eax, 0
loc_4076ee:
#undef res
#define res eax	// 8297 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8298 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8299 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8300 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJa)));	// 8301 mov     dword ptr [esp+4], offset aJa ; "ja"
	R(MOV(eax, 1));	// 8302 mov     eax, 1
	R(CMP(ebx, ebx));	// 8303 cmp     ebx, ebx
		R(JA(loc_407784));	// 8304 ja      short loc_407784
	R(MOV(eax, 0));	// 8305 mov     eax, 0
loc_407784:
#undef res
#define res eax	// 8308 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8309 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8310 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8311 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJa)));	// 8312 mov     dword ptr [esp+4], offset aJa ; "ja"
	R(MOV(eax, 1));	// 8313 mov     eax, 1
	R(CMP(ebx, esi));	// 8314 cmp     ebx, esi
		R(JA(loc_40781a));	// 8315 ja      short loc_40781A
	R(MOV(eax, 0));	// 8316 mov     eax, 0
loc_40781a:
#undef res
#define res eax	// 8319 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8320 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8321 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8322 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJa)));	// 8323 mov     dword ptr [esp+4], offset aJa ; "ja"
	R(MOV(eax, 1));	// 8324 mov     eax, 1
	R(CMP(ebx, edi));	// 8325 cmp     ebx, edi
		R(JA(loc_4078b0));	// 8326 ja      short loc_4078B0
	R(MOV(eax, 0));	// 8327 mov     eax, 0
loc_4078b0:
#undef res
#define res eax	// 8330 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8331 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8332 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8333 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJs)));	// 8334 mov     dword ptr [esp+4], offset aJs ; "js"
	R(MOV(eax, 1));	// 8335 mov     eax, 1
	R(CMP(esi, ebx));	// 8336 cmp     esi, ebx
		R(JS(loc_407e46));	// 8337 js      short loc_407E46
	R(MOV(eax, 0));	// 8338 mov     eax, 0
loc_407e46:
#undef res
#define res eax	// 8341 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8342 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8343 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8344 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJs)));	// 8345 mov     dword ptr [esp+4], offset aJs ; "js"
	R(MOV(eax, 1));	// 8346 mov     eax, 1
	R(CMP(esi, esi));	// 8347 cmp     esi, esi
		R(JS(loc_407f72));	// 8348 js      short loc_407F72
	R(MOV(eax, 0));	// 8349 mov     eax, 0
loc_407f72:
#undef res
#define res eax	// 8352 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8353 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8354 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8355 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJns)));	// 8356 mov     dword ptr [esp+4], offset aJns ; "jns"
	R(MOV(eax, 1));	// 8357 mov     eax, 1
	R(CMP(esi, ebx));	// 8358 cmp     esi, ebx
		R(JNS(loc_408008));	// 8359 jns     short loc_408008
	R(MOV(eax, 0));	// 8360 mov     eax, 0
loc_408008:
#undef res
#define res eax	// 8363 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8364 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8365 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8366 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJns)));	// 8367 mov     dword ptr [esp+4], offset aJns ; "jns"
	R(MOV(eax, 1));	// 8368 mov     eax, 1
	R(CMP(esi, edi));	// 8369 cmp     esi, edi
		R(JNS(loc_40809e));	// 8370 jns     short loc_40809E
	R(MOV(eax, 0));	// 8371 mov     eax, 0
loc_40809e:
#undef res
#define res eax	// 8374 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8375 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8376 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8377 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJns)));	// 8378 mov     dword ptr [esp+4], offset aJns ; "jns"
	R(MOV(eax, 1));	// 8379 mov     eax, 1
	R(CMP(esi, esi));	// 8380 cmp     esi, esi
		R(JNS(loc_408139));	// 8381 jns     short loc_408139
	R(MOV(eax, 0));	// 8382 mov     eax, 0
loc_408139:
#undef res
#define res eax	// 8385 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sD)));	// 8386 mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 8387 mov     [esp+8], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8388 call    printf
	R(ADD(esp, 0x3C));	// 8389 add     esp, 3Ch
	R(POP(ebx));	// 8390 pop     ebx
	R(POP(esi));	// 8391 pop     esi
	R(POP(res));	// 8392 pop     res
	R(POP(ebp));	// 8393 pop     ebp
	R(RETN);	// 8394 retn
 // Procedure test_loop() start
test_loop:
#undef ecx_0
#define ecx_0 -0x2C	// 8406 ecx_0 = -0x2C
#undef ecx_vals
#define ecx_vals -0x28	// 8407 ecx_vals = -0x28
	R(PUSH(ebp));	// 8410 push    ebp
	R(MOV(ecx, 4));	// 8411 mov     ecx, 4
	R(MOV(ebp, esp));	// 8412 mov     ebp, esp
	R(PUSH(edi));	// 8413 push    edi
	R(PUSH(esi));	// 8414 push    esi
	R(PUSH(ebx));	// 8415 push    ebx
	R(SUB(esp, 0x4C));	// 8416 sub     esp, 4Ch
	R(edi = ebp+ecx_vals);	// 8417 lea     edi, [ebp+ecx_vals]
	R(MOV(esi, offset(_data,unk_40E008)));	// 8418 mov     esi, offset unk_40E008
	REP	// 0 rep
MOVSD;	// 0 movsd
	esi = 0;AFFECT_ZF(0); AFFECT_SF(esi,0);	// 8420 xor     esi, esi
	R(MOV(edi, 1));	// 8421 mov     edi, 1
loc_4081d5:
#undef i
#define i esi	// 8424 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8425 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8426 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8427 mov     ebx, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx_0_0));	// 8428 mov     [esp+8], ecx_0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 8429 mov     dword ptr [esp+0Ch], 0
	R(TEST(ebx, ebx));	// 8430 test    ebx, ebx
	R(MOV(eax, 1));	// 8431 mov     eax, 1
		R(JCXZ(loc_4081f6));	// 8432 jcxz    loc_4081F6
	R(MOV(eax, 0));	// 8433 mov     eax, 0
loc_4081f6:
#undef res
#define res eax	// 8436 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJcxz)));	// 8437 mov     dword ptr [esp+4], offset aJcxz ; "jcxz"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8438 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8439 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(MOV(*(dw*)(raddr(ds,ebp+ecx_0)), ecx_0_0));	// 8440 mov     [ebp+ecx_0], ecx_0_0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8441 call    printf
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+ecx_0))));	// 8442 mov     ecx, [ebp+ecx_0]
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8443 xor     ebx, ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi));	// 8444 mov     [esp+0Ch], edi
	R(TEST(ebx, ebx));	// 8445 test    ebx, ebx
	R(MOV(eax, 1));	// 8446 mov     eax, 1
		R(JCXZ(loc_408229));	// 8447 jcxz    loc_408229
	R(MOV(eax, 0));	// 8448 mov     eax, 0
loc_408229:
#undef res
#define res eax	// 8451 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 8452 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8453 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJcxz)));	// 8454 mov     dword ptr [esp+4], offset aJcxz ; "jcxz"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8455 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(INC(i));	// 8456 inc     i
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8457 call    printf
#undef i
#define i esi	// 8458 i = esi
	R(CMP(i, 4));	// 8459 cmp     i, 4
		R(JNZ(loc_4081d5));	// 8460 jnz     short loc_4081D5
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 8461 xor     i, i
	R(MOV(edi, 1));	// 8462 mov     edi, 1
loc_408252:
#undef i
#define i esi	// 8465 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8466 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8467 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8468 mov     ebx, edi
#undef i
#define i esi	// 8469 i = esi
	R(CMP(i, 4));	// 8470 cmp     i, 4
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 8471 xor     i, i
	R(MOV(edi, 1));	// 8472 mov     edi, 1
loc_4082cf:
#undef i
#define i esi	// 8475 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8476 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8477 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8478 mov     ebx, edi
#undef i
#define i esi	// 8479 i = esi
	R(CMP(i, 4));	// 8480 cmp     i, 4
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 8481 xor     i, i
	R(MOV(edi, 1));	// 8482 mov     edi, 1
loc_40834c:
#undef i
#define i esi	// 8485 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8486 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8487 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8488 mov     ebx, edi
#undef i
#define i esi	// 8489 i = esi
	R(CMP(i, 4));	// 8490 cmp     i, 4
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 8491 xor     i, i
	R(MOV(edi, 1));	// 8492 mov     edi, 1
loc_4083c9:
#undef i
#define i esi	// 8495 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8496 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8497 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8498 mov     ebx, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx_0_0));	// 8499 mov     [esp+8], ecx_0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 8500 mov     dword ptr [esp+0Ch], 0
	R(TEST(ebx, ebx));	// 8501 test    ebx, ebx
	R(MOV(eax, 1));	// 8502 mov     eax, 1
		R(JECXZ(loc_4083e9));	// 8503 jecxz   short loc_4083E9
	R(MOV(eax, 0));	// 8504 mov     eax, 0
loc_4083e9:
#undef res
#define res eax	// 8507 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJecxz)));	// 8508 mov     dword ptr [esp+4], offset aJecxz ; "jecxz"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8509 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8510 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(MOV(*(dw*)(raddr(ds,ebp+ecx_0)), ecx_0_0));	// 8511 mov     [ebp+ecx_0], ecx_0_0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8512 call    printf
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+ecx_0))));	// 8513 mov     ecx, [ebp+ecx_0]
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8514 xor     ebx, ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi));	// 8515 mov     [esp+0Ch], edi
	R(TEST(ebx, ebx));	// 8516 test    ebx, ebx
	R(MOV(eax, 1));	// 8517 mov     eax, 1
		R(JECXZ(loc_40841b));	// 8518 jecxz   short loc_40841B
	R(MOV(eax, 0));	// 8519 mov     eax, 0
loc_40841b:
#undef res
#define res eax	// 8522 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 8523 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8524 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aJecxz)));	// 8525 mov     dword ptr [esp+4], offset aJecxz ; "jecxz"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8526 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(INC(i));	// 8527 inc     i
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8528 call    printf
#undef i
#define i esi	// 8529 i = esi
	R(CMP(i, 4));	// 8530 cmp     i, 4
		R(JNZ(loc_4083c9));	// 8531 jnz     short loc_4083C9
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 8532 xor     i, i
	R(MOV(edi, 1));	// 8533 mov     edi, 1
loc_408444:
#undef i
#define i esi	// 8536 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8537 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8538 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8539 mov     ebx, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx_0_0));	// 8540 mov     [esp+8], ecx_0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 8541 mov     dword ptr [esp+0Ch], 0
	R(TEST(ebx, ebx));	// 8542 test    ebx, ebx
	R(MOV(eax, 1));	// 8543 mov     eax, 1
		R(LOOP(loc_408464));	// 8544 loop    loc_408464
	R(MOV(eax, 0));	// 8545 mov     eax, 0
loc_408464:
#undef res
#define res eax	// 8548 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopl)));	// 8549 mov     dword ptr [esp+4], offset aLoopl ; "loopl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8550 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8551 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(MOV(*(dw*)(raddr(ds,ebp+ecx_0)), ecx_0_0));	// 8552 mov     [ebp+ecx_0], ecx_0_0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8553 call    printf
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+ecx_0))));	// 8554 mov     ecx, [ebp+ecx_0]
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8555 xor     ebx, ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi));	// 8556 mov     [esp+0Ch], edi
	R(TEST(ebx, ebx));	// 8557 test    ebx, ebx
	R(MOV(eax, 1));	// 8558 mov     eax, 1
		R(LOOP(loc_408496));	// 8559 loop    loc_408496
	R(MOV(eax, 0));	// 8560 mov     eax, 0
loc_408496:
#undef res
#define res eax	// 8563 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 8564 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8565 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopl)));	// 8566 mov     dword ptr [esp+4], offset aLoopl ; "loopl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8567 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(INC(i));	// 8568 inc     i
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8569 call    printf
#undef i
#define i esi	// 8570 i = esi
	R(CMP(i, 4));	// 8571 cmp     i, 4
		R(JNZ(loc_408444));	// 8572 jnz     short loc_408444
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 8573 xor     i, i
	R(MOV(edi, 1));	// 8574 mov     edi, 1
loc_4084bf:
#undef i
#define i esi	// 8577 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8578 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8579 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8580 mov     ebx, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx_0_0));	// 8581 mov     [esp+8], ecx_0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 8582 mov     dword ptr [esp+0Ch], 0
	R(TEST(ebx, ebx));	// 8583 test    ebx, ebx
	R(MOV(eax, 1));	// 8584 mov     eax, 1
	R(LOOPE(loc_4084df));	// 8585 loope   loc_4084DF
	R(MOV(eax, 0));	// 8586 mov     eax, 0
loc_4084df:
#undef res
#define res eax	// 8589 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopzl)));	// 8590 mov     dword ptr [esp+4], offset aLoopzl ; "loopzl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8591 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8592 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(MOV(*(dw*)(raddr(ds,ebp+ecx_0)), ecx_0_0));	// 8593 mov     [ebp+ecx_0], ecx_0_0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8594 call    printf
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+ecx_0))));	// 8595 mov     ecx, [ebp+ecx_0]
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8596 xor     ebx, ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi));	// 8597 mov     [esp+0Ch], edi
	R(TEST(ebx, ebx));	// 8598 test    ebx, ebx
	R(MOV(eax, 1));	// 8599 mov     eax, 1
	R(LOOPE(loc_408511));	// 8600 loope   loc_408511
	R(MOV(eax, 0));	// 8601 mov     eax, 0
loc_408511:
#undef res
#define res eax	// 8604 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 8605 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8606 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopzl)));	// 8607 mov     dword ptr [esp+4], offset aLoopzl ; "loopzl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8608 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(INC(i));	// 8609 inc     i
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8610 call    printf
#undef i
#define i esi	// 8611 i = esi
	R(CMP(i, 4));	// 8612 cmp     i, 4
		R(JNZ(loc_4084bf));	// 8613 jnz     short loc_4084BF
	i = 0;AFFECT_ZF(0); AFFECT_SF(i,0);	// 8614 xor     i, i
	R(MOV(edi, 1));	// 8615 mov     edi, 1
loc_40853a:
#undef i
#define i esi	// 8618 i = esi
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+i*4+ecx_vals))));	// 8619 mov     ecx, [ebp+i*4+ecx_vals]
#undef ecx_0_0
#define ecx_0_0 ecx	// 8620 ecx_0_0 = ecx
	R(MOV(ebx, edi));	// 8621 mov     ebx, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx_0_0));	// 8622 mov     [esp+8], ecx_0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0));	// 8623 mov     dword ptr [esp+0Ch], 0
	R(TEST(ebx, ebx));	// 8624 test    ebx, ebx
	R(MOV(eax, 1));	// 8625 mov     eax, 1
	R(LOOPNE(loc_40855a));	// 8626 loopne  loc_40855A
	R(MOV(eax, 0));	// 8627 mov     eax, 0
loc_40855a:
#undef res
#define res eax	// 8630 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopnzl)));	// 8631 mov     dword ptr [esp+4], offset aLoopnzl ; "loopnzl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8632 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8633 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(MOV(*(dw*)(raddr(ds,ebp+ecx_0)), ecx_0_0));	// 8634 mov     [ebp+ecx_0], ecx_0_0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8635 call    printf
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+ecx_0))));	// 8636 mov     ecx, [ebp+ecx_0]
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8637 xor     ebx, ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi));	// 8638 mov     [esp+0Ch], edi
	R(TEST(ebx, ebx));	// 8639 test    ebx, ebx
	R(MOV(eax, 1));	// 8640 mov     eax, 1
	R(LOOPNE(loc_40858c));	// 8641 loopne  loc_40858C
	R(MOV(eax, 0));	// 8642 mov     eax, 0
loc_40858c:
#undef res
#define res eax	// 8645 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 8646 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8647 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLoopnzl)));	// 8648 mov     dword ptr [esp+4], offset aLoopnzl ; "loopnzl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEcx08lxZfLd)));	// 8649 mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
	R(INC(i));	// 8650 inc     i
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8651 call    printf
#undef i
#define i esi	// 8652 i = esi
	R(CMP(i, 4));	// 8653 cmp     i, 4
		R(JNZ(loc_40853a));	// 8654 jnz     short loc_40853A
	R(ADD(esp, 0x4C));	// 8655 add     esp, 4Ch
	R(POP(ebx));	// 8656 pop     ebx
	R(POP(i));	// 8657 pop     i
	R(POP(edi));	// 8658 pop     edi
	R(POP(ebp));	// 8659 pop     ebp
	R(RETN);	// 8660 retn
 // Procedure test_mulb() start
test_mulb:
#undef s0
#define s0 8	// 8673 s0 = 8
#undef s1
#define s1 0x0C	// 8674 s1 = 0x0C
	R(PUSH(ebp));	// 8677 push    ebp
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 8678 xor     edx, edx
	R(MOV(ebp, esp));	// 8679 mov     ebp, esp
	R(PUSH(ebx));	// 8680 push    ebx
	R(SUB(esp, 0x24));	// 8681 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 8682 mov     ebx, [ebp+s0]
#undef s0_0
#define s0_0 ebx	// 8683 s0_0 = ebx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 8684 mov     ecx, [ebp+s1]
#undef s1_0
#define s1_0 ecx	// 8685 s1_0 = ecx
	R(MOV(eax, s0_0));	// 8686 mov     eax, s0_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), s0_0));	// 8687 mov     [esp+8], s0_0
	R(PUSH(edx));	// 8688 push    edx
	R(POPF);	// 8689 popf
	R(MUL1_1(cl));	// 8690 mul     cl
	R(PUSHF);	// 8691 pushf
	R(POP(edx));	// 8692 pop     edx
#undef res
#define res eax	// 8693 res = eax
#undef flags
#define flags edx	// 8694 flags = edx
	R(AND(flags, 0x801));	// 8695 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8696 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 8697 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), s1_0));	// 8698 mov     [esp+0Ch], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMulb)));	// 8699 mov     dword ptr [esp+4], offset aMulb ; "mulb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 8700 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8701 call    printf
	R(ADD(esp, 0x24));	// 8702 add     esp, 24h
	R(POP(s0_0));	// 8703 pop     s0_0
	R(POP(ebp));	// 8704 pop     ebp
	R(RETN);	// 8705 retn
 // Procedure test_mulw() start
test_mulw:
#undef op0h
#define op0h 8	// 8718 op0h = 8
#undef op0
#define op0 0x0C	// 8719 op0 = 0x0C
#undef s1
#define s1 0x10	// 8720 s1 = 0x10
	R(PUSH(ebp));	// 8723 push    ebp
	R(MOV(ebp, esp));	// 8724 mov     ebp, esp
	R(PUSH(edi));	// 8725 push    edi
	R(PUSH(esi));	// 8726 push    esi
	R(PUSH(ebx));	// 8727 push    ebx
	R(SUB(esp, 0x2C));	// 8728 sub     esp, 2Ch
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8729 xor     ebx, ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0h))));	// 8730 mov     esi, [ebp+op0h]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+op0))));	// 8731 mov     edi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 8732 mov     ecx, [ebp+s1]
#undef res
#define res edi	// 8733 res = edi
#undef s1_0
#define s1_0 ecx	// 8734 s1_0 = ecx
#undef resh
#define resh esi	// 8735 resh = esi
	R(MOV(eax, res));	// 8736 mov     eax, res
	R(MOV(edx, resh));	// 8737 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 8738 mov     [esp+0Ch], res
	R(PUSH(ebx));	// 8739 push    ebx
	R(POPF);	// 8740 popf
	R(MUL1_2(cx));	// 8741 mul     cx
	R(PUSHF);	// 8742 pushf
	R(POP(ebx));	// 8743 pop     ebx
#undef res
#define res eax	// 8744 res = eax
#undef flags
#define flags ebx	// 8745 flags = ebx
#undef resh
#define resh edx	// 8746 resh = edx
	R(AND(flags, 0x801));	// 8747 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 8748 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), ebx));	// 8749 mov     [esp+1Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 8750 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 8751 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 8752 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMulw)));	// 8753 mov     dword ptr [esp+4], offset aMulw ; "mulw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 8754 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8755 call    printf
	R(ADD(esp, 0x2C));	// 8756 add     esp, 2Ch
	R(POP(ebx));	// 8757 pop     ebx
	R(POP(esi));	// 8758 pop     esi
	R(POP(edi));	// 8759 pop     edi
	R(POP(ebp));	// 8760 pop     ebp
	R(RETN);	// 8761 retn
 // Procedure test_mull() start
test_mull:
#undef op0h
#define op0h 8	// 8774 op0h = 8
#undef op0
#define op0 0x0C	// 8775 op0 = 0x0C
#undef s1
#define s1 0x10	// 8776 s1 = 0x10
	R(PUSH(ebp));	// 8779 push    ebp
	R(MOV(ebp, esp));	// 8780 mov     ebp, esp
	R(PUSH(edi));	// 8781 push    edi
	R(PUSH(esi));	// 8782 push    esi
	R(PUSH(ebx));	// 8783 push    ebx
	R(SUB(esp, 0x2C));	// 8784 sub     esp, 2Ch
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8785 xor     ebx, ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0h))));	// 8786 mov     esi, [ebp+op0h]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+op0))));	// 8787 mov     edi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 8788 mov     ecx, [ebp+s1]
#undef res
#define res edi	// 8789 res = edi
#undef s1_0
#define s1_0 ecx	// 8790 s1_0 = ecx
#undef resh
#define resh esi	// 8791 resh = esi
	R(MOV(eax, res));	// 8792 mov     eax, res
	R(MOV(edx, resh));	// 8793 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 8794 mov     [esp+0Ch], res
	R(PUSH(ebx));	// 8795 push    ebx
	R(POPF);	// 8796 popf
	R(MUL1_4(s1_0));	// 8797 mul     s1_0
	R(PUSHF);	// 8798 pushf
	R(POP(ebx));	// 8799 pop     ebx
#undef res
#define res eax	// 8800 res = eax
#undef flags
#define flags ebx	// 8801 flags = ebx
#undef resh
#define resh edx	// 8802 resh = edx
	R(AND(flags, 0x801));	// 8803 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 8804 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), ebx));	// 8805 mov     [esp+1Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 8806 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 8807 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 8808 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMull)));	// 8809 mov     dword ptr [esp+4], offset aMull ; "mull"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 8810 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8811 call    printf
	R(ADD(esp, 0x2C));	// 8812 add     esp, 2Ch
	R(POP(ebx));	// 8813 pop     ebx
	R(POP(esi));	// 8814 pop     esi
	R(POP(edi));	// 8815 pop     edi
	R(POP(ebp));	// 8816 pop     ebp
	R(RETN);	// 8817 retn
 // Procedure test_imulb() start
test_imulb:
#undef s0
#define s0 8	// 8830 s0 = 8
#undef s1
#define s1 0x0C	// 8831 s1 = 0x0C
	R(PUSH(ebp));	// 8834 push    ebp
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 8835 xor     edx, edx
	R(MOV(ebp, esp));	// 8836 mov     ebp, esp
	R(PUSH(ebx));	// 8837 push    ebx
	R(SUB(esp, 0x24));	// 8838 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 8839 mov     ebx, [ebp+s0]
#undef s0_0
#define s0_0 ebx	// 8840 s0_0 = ebx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 8841 mov     ecx, [ebp+s1]
#undef s1_0
#define s1_0 ecx	// 8842 s1_0 = ecx
	R(MOV(eax, s0_0));	// 8843 mov     eax, s0_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), s0_0));	// 8844 mov     [esp+8], s0_0
	R(PUSH(edx));	// 8845 push    edx
	R(POPF);	// 8846 popf
	R(IMUL1_1(cl));	// 8847 imul    cl
	R(PUSHF);	// 8848 pushf
	R(POP(edx));	// 8849 pop     edx
#undef res
#define res eax	// 8850 res = eax
#undef flags
#define flags edx	// 8851 flags = edx
	R(AND(flags, 0x801));	// 8852 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 8853 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 8854 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), s1_0));	// 8855 mov     [esp+0Ch], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulb)));	// 8856 mov     dword ptr [esp+4], offset aImulb ; "imulb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 8857 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8858 call    printf
	R(ADD(esp, 0x24));	// 8859 add     esp, 24h
	R(POP(s0_0));	// 8860 pop     s0_0
	R(POP(ebp));	// 8861 pop     ebp
	R(RETN);	// 8862 retn
 // Procedure test_imulw() start
test_imulw:
#undef op0h
#define op0h 8	// 8875 op0h = 8
#undef op0
#define op0 0x0C	// 8876 op0 = 0x0C
#undef s1
#define s1 0x10	// 8877 s1 = 0x10
	R(PUSH(ebp));	// 8880 push    ebp
	R(MOV(ebp, esp));	// 8881 mov     ebp, esp
	R(PUSH(edi));	// 8882 push    edi
	R(PUSH(esi));	// 8883 push    esi
	R(PUSH(ebx));	// 8884 push    ebx
	R(SUB(esp, 0x2C));	// 8885 sub     esp, 2Ch
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8886 xor     ebx, ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0h))));	// 8887 mov     esi, [ebp+op0h]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+op0))));	// 8888 mov     edi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 8889 mov     ecx, [ebp+s1]
#undef res
#define res edi	// 8890 res = edi
#undef s1_0
#define s1_0 ecx	// 8891 s1_0 = ecx
#undef resh
#define resh esi	// 8892 resh = esi
	R(MOV(eax, res));	// 8893 mov     eax, res
	R(MOV(edx, resh));	// 8894 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 8895 mov     [esp+0Ch], res
	R(PUSH(ebx));	// 8896 push    ebx
	R(POPF);	// 8897 popf
	R(IMUL1_2(cx));	// 8898 imul    cx
	R(PUSHF);	// 8899 pushf
	R(POP(ebx));	// 8900 pop     ebx
#undef res
#define res eax	// 8901 res = eax
#undef flags
#define flags ebx	// 8902 flags = ebx
#undef resh
#define resh edx	// 8903 resh = edx
	R(AND(flags, 0x801));	// 8904 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 8905 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), ebx));	// 8906 mov     [esp+1Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 8907 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 8908 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 8909 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulw)));	// 8910 mov     dword ptr [esp+4], offset aImulw ; "imulw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 8911 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8912 call    printf
	R(ADD(esp, 0x2C));	// 8913 add     esp, 2Ch
	R(POP(ebx));	// 8914 pop     ebx
	R(POP(esi));	// 8915 pop     esi
	R(POP(edi));	// 8916 pop     edi
	R(POP(ebp));	// 8917 pop     ebp
	R(RETN);	// 8918 retn
 // Procedure test_imull() start
test_imull:
#undef op0h
#define op0h 8	// 8931 op0h = 8
#undef op0
#define op0 0x0C	// 8932 op0 = 0x0C
#undef s1
#define s1 0x10	// 8933 s1 = 0x10
	R(PUSH(ebp));	// 8936 push    ebp
	R(MOV(ebp, esp));	// 8937 mov     ebp, esp
	R(PUSH(edi));	// 8938 push    edi
	R(PUSH(esi));	// 8939 push    esi
	R(PUSH(ebx));	// 8940 push    ebx
	R(SUB(esp, 0x2C));	// 8941 sub     esp, 2Ch
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 8942 xor     ebx, ebx
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0h))));	// 8943 mov     esi, [ebp+op0h]
	R(MOV(edi, *(dd*)(raddr(ds,ebp+op0))));	// 8944 mov     edi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 8945 mov     ecx, [ebp+s1]
#undef res
#define res edi	// 8946 res = edi
#undef s1_0
#define s1_0 ecx	// 8947 s1_0 = ecx
#undef resh
#define resh esi	// 8948 resh = esi
	R(MOV(eax, res));	// 8949 mov     eax, res
	R(MOV(edx, resh));	// 8950 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 8951 mov     [esp+0Ch], res
	R(PUSH(ebx));	// 8952 push    ebx
	R(POPF);	// 8953 popf
	R(IMUL1_4(s1_0));	// 8954 imul    s1_0
	R(PUSHF);	// 8955 pushf
	R(POP(ebx));	// 8956 pop     ebx
#undef res
#define res eax	// 8957 res = eax
#undef flags
#define flags ebx	// 8958 flags = ebx
#undef resh
#define resh edx	// 8959 resh = edx
	R(AND(flags, 0x801));	// 8960 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 8961 mov     [esp+8], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), ebx));	// 8962 mov     [esp+1Ch], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 8963 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 8964 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 8965 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImull)));	// 8966 mov     dword ptr [esp+4], offset aImull ; "imull"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 8967 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 8968 call    printf
	R(ADD(esp, 0x2C));	// 8969 add     esp, 2Ch
	R(POP(ebx));	// 8970 pop     ebx
	R(POP(esi));	// 8971 pop     esi
	R(POP(edi));	// 8972 pop     edi
	R(POP(ebp));	// 8973 pop     ebp
	R(RETN);	// 8974 retn
 // Procedure test_imulw2() start
test_imulw2:
#undef s0
#define s0 8	// 8987 s0 = 8
#undef s1
#define s1 0x0C	// 8988 s1 = 0x0C
	R(PUSH(ebp));	// 8991 push    ebp
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 8992 xor     edx, edx
	R(MOV(ebp, esp));	// 8993 mov     ebp, esp
	R(PUSH(ebx));	// 8994 push    ebx
	R(SUB(esp, 0x24));	// 8995 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 8996 mov     ebx, [ebp+s0]
#undef s0_0
#define s0_0 ebx	// 8997 s0_0 = ebx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 8998 mov     ecx, [ebp+s1]
#undef s1_0
#define s1_0 ecx	// 8999 s1_0 = ecx
	R(MOV(eax, s0_0));	// 9000 mov     eax, s0_0
	R(PUSH(edx));	// 9001 push    edx
	R(POPF);	// 9002 popf
	R(IMUL2_2(ax,cx));	// 9003 imul    ax, cx
	R(PUSHF);	// 9004 pushf
	R(POP(edx));	// 9005 pop     edx
#undef res
#define res eax	// 9006 res = eax
#undef flags
#define flags edx	// 9007 flags = edx
	R(AND(flags, 0x801));	// 9008 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+8)), s0_0));	// 9009 mov     [esp+8], s0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 9010 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9011 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), s1_0));	// 9012 mov     [esp+0Ch], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulw)));	// 9013 mov     dword ptr [esp+4], offset aImulw ; "imulw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9014 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9015 call    printf
	R(ADD(esp, 0x24));	// 9016 add     esp, 24h
	R(POP(s0_0));	// 9017 pop     s0_0
	R(POP(ebp));	// 9018 pop     ebp
	R(RETN);	// 9019 retn
 // Procedure test_imull2() start
test_imull2:
#undef s0
#define s0 8	// 9032 s0 = 8
#undef s1
#define s1 0x0C	// 9033 s1 = 0x0C
	R(PUSH(ebp));	// 9036 push    ebp
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 9037 xor     edx, edx
	R(MOV(ebp, esp));	// 9038 mov     ebp, esp
	R(PUSH(ebx));	// 9039 push    ebx
	R(SUB(esp, 0x24));	// 9040 sub     esp, 24h
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+s0))));	// 9041 mov     ebx, [ebp+s0]
#undef s0_0
#define s0_0 ebx	// 9042 s0_0 = ebx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 9043 mov     ecx, [ebp+s1]
#undef s1_0
#define s1_0 ecx	// 9044 s1_0 = ecx
	R(MOV(eax, s0_0));	// 9045 mov     eax, s0_0
	R(PUSH(edx));	// 9046 push    edx
	R(POPF);	// 9047 popf
	R(IMUL2_4(eax,s1_0));	// 9048 imul    eax, s1_0
	R(PUSHF);	// 9049 pushf
	R(POP(edx));	// 9050 pop     edx
#undef res
#define res eax	// 9051 res = eax
#undef flags
#define flags edx	// 9052 flags = edx
	R(AND(flags, 0x801));	// 9053 and     flags, 801h
	R(MOV(*(dd*)(raddr(ds,esp+8)), s0_0));	// 9054 mov     [esp+8], s0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 9055 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9056 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), s1_0));	// 9057 mov     [esp+0Ch], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImull)));	// 9058 mov     dword ptr [esp+4], offset aImull ; "imull"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9059 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9060 call    printf
	R(ADD(esp, 0x24));	// 9061 add     esp, 24h
	R(POP(s0_0));	// 9062 pop     s0_0
	R(POP(ebp));	// 9063 pop     ebp
	R(RETN);	// 9064 retn
 // Procedure test_divb() start
test_divb:
#undef s0
#define s0 8	// 9077 s0 = 8
#undef s1
#define s1 0x0C	// 9078 s1 = 0x0C
	R(PUSH(ebp));	// 9081 push    ebp
	R(MOV(ebp, esp));	// 9082 mov     ebp, esp
	R(PUSH(ebx));	// 9083 push    ebx
	R(SUB(esp, 0x24));	// 9084 sub     esp, 24h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 9085 xor     ebx, ebx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 9086 mov     ecx, [ebp+s0]
#undef s0_0
#define s0_0 ecx	// 9087 s0_0 = ecx
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 9088 mov     edx, [ebp+s1]
#undef s1_0
#define s1_0 edx	// 9089 s1_0 = edx
	R(MOV(eax, s0_0));	// 9090 mov     eax, s0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9091 mov     dword ptr [esp+14h], 0
	R(PUSH(ebx));	// 9092 push    ebx
	R(POPF);	// 9093 popf
	R(DIV1(dl));	// 9094 div     dl
	R(PUSHF);	// 9095 pushf
	R(POP(ebx));	// 9096 pop     ebx
#undef res
#define res eax	// 9097 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), s1_0));	// 9098 mov     [esp+0Ch], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9099 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), s0_0));	// 9100 mov     [esp+8], s0_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDivb)));	// 9101 mov     dword ptr [esp+4], offset aDivb ; "divb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9102 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9103 call    printf
	R(ADD(esp, 0x24));	// 9104 add     esp, 24h
	R(POP(ebx));	// 9105 pop     ebx
	R(POP(ebp));	// 9106 pop     ebp
	R(RETN);	// 9107 retn
 // Procedure test_divw() start
test_divw:
#undef op0h
#define op0h 8	// 9120 op0h = 8
#undef op0
#define op0 0x0C	// 9121 op0 = 0x0C
#undef s1
#define s1 0x10	// 9122 s1 = 0x10
	R(PUSH(ebp));	// 9125 push    ebp
	R(MOV(ebp, esp));	// 9126 mov     ebp, esp
	R(PUSH(edi));	// 9127 push    edi
	R(PUSH(esi));	// 9128 push    esi
	R(PUSH(ebx));	// 9129 push    ebx
	R(SUB(esp, 0x2C));	// 9130 sub     esp, 2Ch
	edi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);	// 9131 xor     edi, edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+op0h))));	// 9132 mov     ebx, [ebp+op0h]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0))));	// 9133 mov     esi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 9134 mov     ecx, [ebp+s1]
#undef res
#define res esi	// 9135 res = esi
#undef s1_0
#define s1_0 ecx	// 9136 s1_0 = ecx
#undef resh
#define resh ebx	// 9137 resh = ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 9138 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), resh));	// 9139 mov     [esp+8], resh
	R(MOV(eax, res));	// 9140 mov     eax, res
	R(MOV(edx, resh));	// 9141 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), 0));	// 9142 mov     dword ptr [esp+1Ch], 0
	R(PUSH(edi));	// 9143 push    edi
	R(POPF);	// 9144 popf
	R(DIV2(cx));	// 9145 div     cx
	R(PUSHF);	// 9146 pushf
	R(POP(edi));	// 9147 pop     edi
#undef res
#define res eax	// 9148 res = eax
#undef resh
#define resh edx	// 9149 resh = edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 9150 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 9151 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 9152 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDivw)));	// 9153 mov     dword ptr [esp+4], offset aDivw ; "divw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 9154 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9155 call    printf
	R(ADD(esp, 0x2C));	// 9156 add     esp, 2Ch
	R(POP(ebx));	// 9157 pop     ebx
	R(POP(esi));	// 9158 pop     esi
	R(POP(edi));	// 9159 pop     edi
	R(POP(ebp));	// 9160 pop     ebp
	R(RETN);	// 9161 retn
 // Procedure test_divl() start
test_divl:
#undef op0h
#define op0h 8	// 9174 op0h = 8
#undef op0
#define op0 0x0C	// 9175 op0 = 0x0C
#undef s1
#define s1 0x10	// 9176 s1 = 0x10
	R(PUSH(ebp));	// 9179 push    ebp
	R(MOV(ebp, esp));	// 9180 mov     ebp, esp
	R(PUSH(edi));	// 9181 push    edi
	R(PUSH(esi));	// 9182 push    esi
	R(PUSH(ebx));	// 9183 push    ebx
	R(SUB(esp, 0x2C));	// 9184 sub     esp, 2Ch
	edi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);	// 9185 xor     edi, edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+op0h))));	// 9186 mov     ebx, [ebp+op0h]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0))));	// 9187 mov     esi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 9188 mov     ecx, [ebp+s1]
#undef res
#define res esi	// 9189 res = esi
#undef s1_0
#define s1_0 ecx	// 9190 s1_0 = ecx
#undef resh
#define resh ebx	// 9191 resh = ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 9192 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), resh));	// 9193 mov     [esp+8], resh
	R(MOV(eax, res));	// 9194 mov     eax, res
	R(MOV(edx, resh));	// 9195 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), 0));	// 9196 mov     dword ptr [esp+1Ch], 0
	R(PUSH(edi));	// 9197 push    edi
	R(POPF);	// 9198 popf
	R(DIV4(s1_0));	// 9199 div     s1_0
	R(PUSHF);	// 9200 pushf
	R(POP(edi));	// 9201 pop     edi
#undef res
#define res eax	// 9202 res = eax
#undef resh
#define resh edx	// 9203 resh = edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 9204 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 9205 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 9206 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDivl)));	// 9207 mov     dword ptr [esp+4], offset aDivl ; "divl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 9208 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9209 call    printf
	R(ADD(esp, 0x2C));	// 9210 add     esp, 2Ch
	R(POP(ebx));	// 9211 pop     ebx
	R(POP(esi));	// 9212 pop     esi
	R(POP(edi));	// 9213 pop     edi
	R(POP(ebp));	// 9214 pop     ebp
	R(RETN);	// 9215 retn
 // Procedure test_idivb() start
test_idivb:
#undef s0
#define s0 8	// 9228 s0 = 8
#undef s1
#define s1 0x0C	// 9229 s1 = 0x0C
	R(PUSH(ebp));	// 9232 push    ebp
	R(MOV(ebp, esp));	// 9233 mov     ebp, esp
	R(PUSH(ebx));	// 9234 push    ebx
	R(SUB(esp, 0x24));	// 9235 sub     esp, 24h
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 9236 xor     ebx, ebx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s0))));	// 9237 mov     ecx, [ebp+s0]
#undef s0_0
#define s0_0 ecx	// 9238 s0_0 = ecx
	R(MOV(edx, *(dd*)(raddr(ds,ebp+s1))));	// 9239 mov     edx, [ebp+s1]
#undef s1_0
#define s1_0 edx	// 9240 s1_0 = edx
	R(MOV(eax, s0_0));	// 9241 mov     eax, s0_0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9242 mov     dword ptr [esp+14h], 0
	R(PUSH(ebx));	// 9243 push    ebx
	R(POPF);	// 9244 popf
	R(IDIV1(dl));	// 9245 idiv    dl
	R(PUSHF);	// 9246 pushf
	R(POP(ebx));	// 9247 pop     ebx
#undef res
#define res eax	// 9248 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), s1_0));	// 9249 mov     [esp+0Ch], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9250 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), s0_0));	// 9251 mov     [esp+8], s0_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIdivb)));	// 9252 mov     dword ptr [esp+4], offset aIdivb ; "idivb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9253 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9254 call    printf
	R(ADD(esp, 0x24));	// 9255 add     esp, 24h
	R(POP(ebx));	// 9256 pop     ebx
	R(POP(ebp));	// 9257 pop     ebp
	R(RETN);	// 9258 retn
 // Procedure test_idivw() start
test_idivw:
#undef op0h
#define op0h 8	// 9271 op0h = 8
#undef op0
#define op0 0x0C	// 9272 op0 = 0x0C
#undef s1
#define s1 0x10	// 9273 s1 = 0x10
	R(PUSH(ebp));	// 9276 push    ebp
	R(MOV(ebp, esp));	// 9277 mov     ebp, esp
	R(PUSH(edi));	// 9278 push    edi
	R(PUSH(esi));	// 9279 push    esi
	R(PUSH(ebx));	// 9280 push    ebx
	R(SUB(esp, 0x2C));	// 9281 sub     esp, 2Ch
	edi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);	// 9282 xor     edi, edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+op0h))));	// 9283 mov     ebx, [ebp+op0h]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0))));	// 9284 mov     esi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 9285 mov     ecx, [ebp+s1]
#undef res
#define res esi	// 9286 res = esi
#undef s1_0
#define s1_0 ecx	// 9287 s1_0 = ecx
#undef resh
#define resh ebx	// 9288 resh = ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 9289 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), resh));	// 9290 mov     [esp+8], resh
	R(MOV(eax, res));	// 9291 mov     eax, res
	R(MOV(edx, resh));	// 9292 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), 0));	// 9293 mov     dword ptr [esp+1Ch], 0
	R(PUSH(edi));	// 9294 push    edi
	R(POPF);	// 9295 popf
	R(IDIV2(cx));	// 9296 idiv    cx
	R(PUSHF);	// 9297 pushf
	R(POP(edi));	// 9298 pop     edi
#undef res
#define res eax	// 9299 res = eax
#undef resh
#define resh edx	// 9300 resh = edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 9301 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 9302 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 9303 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIdivw)));	// 9304 mov     dword ptr [esp+4], offset aIdivw ; "idivw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 9305 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9306 call    printf
	R(ADD(esp, 0x2C));	// 9307 add     esp, 2Ch
	R(POP(ebx));	// 9308 pop     ebx
	R(POP(esi));	// 9309 pop     esi
	R(POP(edi));	// 9310 pop     edi
	R(POP(ebp));	// 9311 pop     ebp
	R(RETN);	// 9312 retn
 // Procedure test_idivl() start
test_idivl:
#undef op0h
#define op0h 8	// 9325 op0h = 8
#undef op0
#define op0 0x0C	// 9326 op0 = 0x0C
#undef s1
#define s1 0x10	// 9327 s1 = 0x10
	R(PUSH(ebp));	// 9330 push    ebp
	R(MOV(ebp, esp));	// 9331 mov     ebp, esp
	R(PUSH(edi));	// 9332 push    edi
	R(PUSH(esi));	// 9333 push    esi
	R(PUSH(ebx));	// 9334 push    ebx
	R(SUB(esp, 0x2C));	// 9335 sub     esp, 2Ch
	edi = 0;AFFECT_ZF(0); AFFECT_SF(edi,0);	// 9336 xor     edi, edi
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+op0h))));	// 9337 mov     ebx, [ebp+op0h]
	R(MOV(esi, *(dd*)(raddr(ds,ebp+op0))));	// 9338 mov     esi, [ebp+op0]
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+s1))));	// 9339 mov     ecx, [ebp+s1]
#undef res
#define res esi	// 9340 res = esi
#undef s1_0
#define s1_0 ecx	// 9341 s1_0 = ecx
#undef resh
#define resh ebx	// 9342 resh = ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 9343 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), resh));	// 9344 mov     [esp+8], resh
	R(MOV(eax, res));	// 9345 mov     eax, res
	R(MOV(edx, resh));	// 9346 mov     edx, resh
	R(MOV(*(dd*)(raddr(ds,esp+0x1C)), 0));	// 9347 mov     dword ptr [esp+1Ch], 0
	R(PUSH(edi));	// 9348 push    edi
	R(POPF);	// 9349 popf
	R(IDIV4(s1_0));	// 9350 idiv    s1_0
	R(PUSHF);	// 9351 pushf
	R(POP(edi));	// 9352 pop     edi
#undef res
#define res eax	// 9353 res = eax
#undef resh
#define resh edx	// 9354 resh = edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), s1_0));	// 9355 mov     [esp+10h], s1_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), res));	// 9356 mov     [esp+18h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), resh));	// 9357 mov     [esp+14h], resh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aIdivl)));	// 9358 mov     dword ptr [esp+4], offset aIdivl ; "idivl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sAh08lxAl08l)));	// 9359 mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9360 call    printf
	R(ADD(esp, 0x2C));	// 9361 add     esp, 2Ch
	R(POP(ebx));	// 9362 pop     ebx
	R(POP(esi));	// 9363 pop     esi
	R(POP(edi));	// 9364 pop     edi
	R(POP(ebp));	// 9365 pop     ebp
	R(RETN);	// 9366 retn
 // Procedure test_mul() start
test_mul:
#undef var_20
#define var_20 -0x20	// 9378 var_20 = -0x20
#undef var_1c
#define var_1c -0x1C	// 9379 var_1c = -0x1C
	R(PUSH(ebp));	// 9382 push    ebp
	R(MOV(ebp, esp));	// 9383 mov     ebp, esp
	R(PUSH(edi));	// 9384 push    edi
	R(PUSH(esi));	// 9385 push    esi
	R(PUSH(ebx));	// 9386 push    ebx
	R(SUB(esp, 0x3C));	// 9387 sub     esp, 3Ch
	R(MOV(*(dd*)(raddr(ds,esp+4)), 4));	// 9388 mov     dword ptr [esp+4], 4 ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1234561D));	// 9389 mov     dword ptr [esp], 1234561Dh ; op0
	R(CALL(ktest_imulb));	// 9390 call    test_imulb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFC));	// 9391 mov     dword ptr [esp+4], 0FFFFFFFCh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 3));	// 9392 mov     dword ptr [esp], 3 ; op0
	R(CALL(ktest_imulb));	// 9393 call    test_imulb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 9394 mov     dword ptr [esp+4], 80h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80));	// 9395 mov     dword ptr [esp], 80h ; op0
	R(CALL(ktest_imulb));	// 9396 call    test_imulb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10));	// 9397 mov     dword ptr [esp+4], 10h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x10));	// 9398 mov     dword ptr [esp], 10h ; op0
	R(CALL(ktest_imulb));	// 9399 call    test_imulb
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));	// 9400 mov     dword ptr [esp+8], 2Dh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1234001D));	// 9401 mov     dword ptr [esp+4], 1234001Dh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9402 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imulw));	// 9403 call    test_imulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9404 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x17));	// 9405 mov     dword ptr [esp+4], 17h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9406 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imulw));	// 9407 call    test_imulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));	// 9408 mov     dword ptr [esp+8], 8000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x8000));	// 9409 mov     dword ptr [esp+4], 8000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9410 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imulw));	// 9411 call    test_imulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x100));	// 9412 mov     dword ptr [esp+8], 100h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x100));	// 9413 mov     dword ptr [esp+4], 100h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9414 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imulw));	// 9415 call    test_imulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));	// 9416 mov     dword ptr [esp+8], 2Dh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1234001D));	// 9417 mov     dword ptr [esp+4], 1234001Dh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9418 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imull));	// 9419 call    test_imull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9420 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x17));	// 9421 mov     dword ptr [esp+4], 17h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9422 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imull));	// 9423 call    test_imull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x80000000));	// 9424 mov     dword ptr [esp+8], 80000000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));	// 9425 mov     dword ptr [esp+4], 80000000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9426 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imull));	// 9427 call    test_imull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x10000));	// 9428 mov     dword ptr [esp+8], 10000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 9429 mov     dword ptr [esp+4], 10000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9430 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_imull));	// 9431 call    test_imull
	R(MOV(*(dd*)(raddr(ds,esp+4)), 4));	// 9432 mov     dword ptr [esp+4], 4 ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1234561D));	// 9433 mov     dword ptr [esp], 1234561Dh ; op0
	R(CALL(ktest_mulb));	// 9434 call    test_mulb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFC));	// 9435 mov     dword ptr [esp+4], 0FFFFFFFCh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 3));	// 9436 mov     dword ptr [esp], 3 ; op0
	R(CALL(ktest_mulb));	// 9437 call    test_mulb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80));	// 9438 mov     dword ptr [esp+4], 80h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80));	// 9439 mov     dword ptr [esp], 80h ; op0
	R(CALL(ktest_mulb));	// 9440 call    test_mulb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10));	// 9441 mov     dword ptr [esp+4], 10h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x10));	// 9442 mov     dword ptr [esp], 10h ; op0
	R(CALL(ktest_mulb));	// 9443 call    test_mulb
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));	// 9444 mov     dword ptr [esp+8], 2Dh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1234001D));	// 9445 mov     dword ptr [esp+4], 1234001Dh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9446 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mulw));	// 9447 call    test_mulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9448 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x17));	// 9449 mov     dword ptr [esp+4], 17h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9450 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mulw));	// 9451 call    test_mulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));	// 9452 mov     dword ptr [esp+8], 8000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x8000));	// 9453 mov     dword ptr [esp+4], 8000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9454 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mulw));	// 9455 call    test_mulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x100));	// 9456 mov     dword ptr [esp+8], 100h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x100));	// 9457 mov     dword ptr [esp+4], 100h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9458 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mulw));	// 9459 call    test_mulw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));	// 9460 mov     dword ptr [esp+8], 2Dh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x1234001D));	// 9461 mov     dword ptr [esp+4], 1234001Dh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9462 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9463 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9464 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x17));	// 9465 mov     dword ptr [esp+4], 17h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9466 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9467 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x80000000));	// 9468 mov     dword ptr [esp+8], 80000000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));	// 9469 mov     dword ptr [esp+4], 80000000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9470 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9471 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x10000));	// 9472 mov     dword ptr [esp+8], 10000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 9473 mov     dword ptr [esp+4], 10000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9474 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9475 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9476 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9477 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9478 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9479 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9480 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 9481 mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9482 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9483 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFE));	// 9484 mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9485 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9486 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9487 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 9488 mov     dword ptr [esp+8], 0 ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9489 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9490 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9491 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 1));	// 9492 mov     dword ptr [esp+8], 1 ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9493 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9494 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9495 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 2));	// 9496 mov     dword ptr [esp+8], 2 ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9497 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9498 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9499 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 3));	// 9500 mov     dword ptr [esp+8], 3 ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9501 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9502 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9503 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9504 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 9505 mov     dword ptr [esp+4], 0 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9506 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9507 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9508 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 9509 mov     dword ptr [esp+4], 1 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9510 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9511 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9512 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 2));	// 9513 mov     dword ptr [esp+4], 2 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9514 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9515 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9516 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 3));	// 9517 mov     dword ptr [esp+4], 3 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9518 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_mull));	// 9519 call    test_mull
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x2D));	// 9520 mov     dword ptr [esp+4], 2Dh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1234001D));	// 9521 mov     dword ptr [esp], 1234001Dh ; op0
	ebx = 0;AFFECT_ZF(0); AFFECT_SF(ebx,0);	// 9522 xor     ebx, ebx
	R(CALL(ktest_imulw2));	// 9523 call    test_imulw2
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFD3));	// 9524 mov     dword ptr [esp+4], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x17));	// 9525 mov     dword ptr [esp], 17h ; op0
	R(CALL(ktest_imulw2));	// 9526 call    test_imulw2
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x8000));	// 9527 mov     dword ptr [esp+4], 8000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x8000));	// 9528 mov     dword ptr [esp], 8000h ; op0
	R(CALL(ktest_imulw2));	// 9529 call    test_imulw2
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x100));	// 9530 mov     dword ptr [esp+4], 100h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x100));	// 9531 mov     dword ptr [esp], 100h ; op0
	R(CALL(ktest_imulw2));	// 9532 call    test_imulw2
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x2D));	// 9533 mov     dword ptr [esp+4], 2Dh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1234001D));	// 9534 mov     dword ptr [esp], 1234001Dh ; op0
	R(CALL(ktest_imull2));	// 9535 call    test_imull2
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFD3));	// 9536 mov     dword ptr [esp+4], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x17));	// 9537 mov     dword ptr [esp], 17h ; op0
	R(CALL(ktest_imull2));	// 9538 call    test_imull2
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));	// 9539 mov     dword ptr [esp+4], 80000000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x80000000));	// 9540 mov     dword ptr [esp], 80000000h ; op0
	R(CALL(ktest_imull2));	// 9541 call    test_imull2
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x10000));	// 9542 mov     dword ptr [esp+4], 10000h ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x10000));	// 9543 mov     dword ptr [esp], 10000h ; op0
	R(CALL(ktest_imull2));	// 9544 call    test_imull2
	R(MOV(ecx, 0x1234));	// 9545 mov     ecx, 1234h
	R(MOV(eax, ebx));	// 9546 mov     eax, ebx
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 9547 xor     edx, edx
	R(PUSH(edx));	// 9548 push    edx
	R(POPF);	// 9549 popf
	R(IMUL3_2(ax,cx,0x2D));	// 9550 imul    ax, cx, 2Dh
	R(PUSHF);	// 9551 pushf
	R(POP(edx));	// 9552 pop     edx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9553 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 9554 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1234));	// 9555 mov     dword ptr [esp+0Ch], 1234h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));	// 9556 mov     dword ptr [esp+8], 2Dh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulwIm)));	// 9557 mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9558 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), ecx));	// 9559 mov     [ebp+var_20], ecx
#undef res
#define res eax	// 9560 res = eax
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9561 call    printf
	R(MOV(edx, 0x17));	// 9562 mov     edx, 17h
	R(MOV(eax, ebx));	// 9563 mov     eax, ebx
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 9564 xor     ecx, ecx
	R(PUSH(ecx));	// 9565 push    ecx
	R(POPF);	// 9566 popf
	R(IMUL3_2(ax,dx,-0x2D));	// 9567 imul    ax, dx, -2Dh
	R(PUSHF);	// 9568 pushf
	R(POP(ecx));	// 9569 pop     ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9570 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 9571 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x17));	// 9572 mov     dword ptr [esp+0Ch], 17h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9573 mov     dword ptr [esp+8], 0FFFFFFD3h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulwIm)));	// 9574 mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9575 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
	R(MOV(*(dd*)(raddr(ds,ebp+var_1c)), edx));	// 9576 mov     [ebp+var_1c], edx
#undef res
#define res eax	// 9577 res = eax
	R(MOV(edi, 0x80000000));	// 9578 mov     edi, 80000000h
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9579 call    printf
	R(MOV(eax, ebx));	// 9580 mov     eax, ebx
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 9581 xor     edx, edx
	R(PUSH(edx));	// 9582 push    edx
	R(POPF);	// 9583 popf
	R(IMUL3_2(ax,di,0x8000));	// 9584 imul    ax, di, 8000h
	R(PUSHF);	// 9585 pushf
	R(POP(edx));	// 9586 pop     edx
#undef res
#define res eax	// 9587 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9588 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9589 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x80000000));	// 9590 mov     dword ptr [esp+0Ch], 80000000h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));	// 9591 mov     dword ptr [esp+8], 8000h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulwIm)));	// 9592 mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9593 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9594 call    printf
	R(MOV(esi, 0x1000));	// 9595 mov     esi, 1000h
	R(MOV(eax, ebx));	// 9596 mov     eax, ebx
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 9597 xor     ecx, ecx
	R(PUSH(ecx));	// 9598 push    ecx
	R(POPF);	// 9599 popf
	R(IMUL3_2(ax,si,0x7FFF));	// 9600 imul    ax, si, 7FFFh
	R(PUSHF);	// 9601 pushf
	R(POP(ecx));	// 9602 pop     ecx
#undef res
#define res eax	// 9603 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9604 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9605 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1000));	// 9606 mov     dword ptr [esp+0Ch], 1000h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFF));	// 9607 mov     dword ptr [esp+8], 7FFFh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImulwIm)));	// 9608 mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9609 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9610 call    printf
	R(MOV(eax, ebx));	// 9611 mov     eax, ebx
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 9612 xor     edx, edx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20))));	// 9613 mov     ecx, [ebp+var_20]
	R(PUSH(edx));	// 9614 push    edx
	R(POPF);	// 9615 popf
	R(IMUL3_4(eax,ecx,0x2D));	// 9616 imul    eax, ecx, 2Dh
	R(PUSHF);	// 9617 pushf
	R(POP(edx));	// 9618 pop     edx
#undef res
#define res eax	// 9619 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9620 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9621 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1234));	// 9622 mov     dword ptr [esp+0Ch], 1234h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x2D));	// 9623 mov     dword ptr [esp+8], 2Dh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImullIm)));	// 9624 mov     dword ptr [esp+4], offset aImullIm ; "imull im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9625 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9626 call    printf
	R(MOV(eax, ebx));	// 9627 mov     eax, ebx
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 9628 xor     ecx, ecx
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_1c))));	// 9629 mov     edx, [ebp+var_1c]
	R(PUSH(ecx));	// 9630 push    ecx
	R(POPF);	// 9631 popf
	R(IMUL3_4(eax,edx,-0x2D));	// 9632 imul    eax, edx, -2Dh
	R(PUSHF);	// 9633 pushf
	R(POP(ecx));	// 9634 pop     ecx
#undef res
#define res eax	// 9635 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9636 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9637 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x17));	// 9638 mov     dword ptr [esp+0Ch], 17h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9639 mov     dword ptr [esp+8], 0FFFFFFD3h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImullIm)));	// 9640 mov     dword ptr [esp+4], offset aImullIm ; "imull im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9641 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9642 call    printf
	R(MOV(eax, ebx));	// 9643 mov     eax, ebx
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 9644 xor     edx, edx
	R(PUSH(edx));	// 9645 push    edx
	R(POPF);	// 9646 popf
	R(IMUL3_4(eax,edi,0x8000));	// 9647 imul    eax, edi, 8000h
	R(PUSHF);	// 9648 pushf
	R(POP(edx));	// 9649 pop     edx
#undef res
#define res eax	// 9650 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9651 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9652 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x80000000));	// 9653 mov     dword ptr [esp+0Ch], 80000000h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8000));	// 9654 mov     dword ptr [esp+8], 8000h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImullIm)));	// 9655 mov     dword ptr [esp+4], offset aImullIm ; "imull im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9656 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9657 call    printf
	eax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);	// 9658 xor     eax, eax
	R(PUSH(eax));	// 9659 push    eax
	R(POPF);	// 9660 popf
	R(IMUL3_4(ebx,esi,0x7FFF));	// 9661 imul    ebx, esi, 7FFFh
	R(PUSHF);	// 9662 pushf
	R(POP(eax));	// 9663 pop     eax
#undef res
#define res ebx	// 9664 res = ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), res));	// 9665 mov     [esp+10h], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), 0));	// 9666 mov     dword ptr [esp+14h], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), 0x1000));	// 9667 mov     dword ptr [esp+0Ch], 1000h
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFF));	// 9668 mov     dword ptr [esp+8], 7FFFh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aImullIm)));	// 9669 mov     dword ptr [esp+4], offset aImullIm ; "imull im"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lxR)));	// 9670 mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 9671 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x127E));	// 9672 mov     dword ptr [esp+4], 127Eh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341678));	// 9673 mov     dword ptr [esp], 12341678h ; op0
	R(CALL(ktest_idivb));	// 9674 call    test_idivb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFB));	// 9675 mov     dword ptr [esp+4], 0FFFFFFFBh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x43210123));	// 9676 mov     dword ptr [esp], 43210123h ; op0
	R(CALL(ktest_idivb));	// 9677 call    test_idivb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9678 mov     dword ptr [esp+4], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12340004));	// 9679 mov     dword ptr [esp], 12340004h ; op0
	R(CALL(ktest_idivb));	// 9680 call    test_idivb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 3));	// 9681 mov     dword ptr [esp+4], 3 ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));	// 9682 mov     dword ptr [esp], 0FFFFFFECh ; op0
	R(CALL(ktest_idivb));	// 9683 call    test_idivb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFD));	// 9684 mov     dword ptr [esp+4], 0FFFFFFFDh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x14));	// 9685 mov     dword ptr [esp], 14h ; op0
	R(CALL(ktest_idivb));	// 9686 call    test_idivb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFD));	// 9687 mov     dword ptr [esp+4], 0FFFFFFFDh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));	// 9688 mov     dword ptr [esp], 0FFFFFFECh ; op0
	R(CALL(ktest_idivb));	// 9689 call    test_idivb
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x303B));	// 9690 mov     dword ptr [esp+8], 303Bh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9691 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9692 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivw));	// 9693 call    test_idivw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9694 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFA549));	// 9695 mov     dword ptr [esp+4], 0FFFFA549h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9696 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivw));	// 9697 call    test_idivw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9698 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12348000));	// 9699 mov     dword ptr [esp+4], 12348000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9700 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivw));	// 9701 call    test_idivw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x81238567));	// 9702 mov     dword ptr [esp+8], 81238567h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9703 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12343));	// 9704 mov     dword ptr [esp], 12343h ; op0h
	R(CALL(ktest_idivw));	// 9705 call    test_idivw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12C));	// 9706 mov     dword ptr [esp+8], 12Ch ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 9707 mov     dword ptr [esp+4], 0 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));	// 9708 mov     dword ptr [esp], 0FFFFFFECh ; op0h
	R(CALL(ktest_idivw));	// 9709 call    test_idivw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFED4));	// 9710 mov     dword ptr [esp+8], 0FFFFFED4h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 9711 mov     dword ptr [esp+4], 0 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x14));	// 9712 mov     dword ptr [esp], 14h ; op0h
	R(CALL(ktest_idivw));	// 9713 call    test_idivw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFED4));	// 9714 mov     dword ptr [esp+8], 0FFFFFED4h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 9715 mov     dword ptr [esp+4], 0 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFEC));	// 9716 mov     dword ptr [esp], 0FFFFFFECh ; op0h
	R(CALL(ktest_idivw));	// 9717 call    test_idivw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x303B));	// 9718 mov     dword ptr [esp+8], 303Bh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9719 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9720 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivl));	// 9721 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9722 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFC70F9));	// 9723 mov     dword ptr [esp+4], 0FFFC70F9h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9724 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivl));	// 9725 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9726 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));	// 9727 mov     dword ptr [esp+4], 80000000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9728 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivl));	// 9729 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x81234567));	// 9730 mov     dword ptr [esp+8], 81234567h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9731 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12343));	// 9732 mov     dword ptr [esp], 12343h ; op0h
	R(CALL(ktest_idivl));	// 9733 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x127E));	// 9734 mov     dword ptr [esp+4], 127Eh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12341678));	// 9735 mov     dword ptr [esp], 12341678h ; op0
	R(CALL(ktest_divb));	// 9736 call    test_divb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFB));	// 9737 mov     dword ptr [esp+4], 0FFFFFFFBh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x43210123));	// 9738 mov     dword ptr [esp], 43210123h ; op0
	R(CALL(ktest_divb));	// 9739 call    test_divb
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9740 mov     dword ptr [esp+4], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12340004));	// 9741 mov     dword ptr [esp], 12340004h ; op0
	R(CALL(ktest_divb));	// 9742 call    test_divb
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x303B));	// 9743 mov     dword ptr [esp+8], 303Bh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9744 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9745 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divw));	// 9746 call    test_divw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9747 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFA549));	// 9748 mov     dword ptr [esp+4], 0FFFFA549h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9749 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divw));	// 9750 call    test_divw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9751 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12348000));	// 9752 mov     dword ptr [esp+4], 12348000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9753 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divw));	// 9754 call    test_divw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x81238567));	// 9755 mov     dword ptr [esp+8], 81238567h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9756 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12343));	// 9757 mov     dword ptr [esp], 12343h ; op0h
	R(CALL(ktest_divw));	// 9758 call    test_divw
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x303B));	// 9759 mov     dword ptr [esp+8], 303Bh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9760 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9761 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9762 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFD3));	// 9763 mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFC70F9));	// 9764 mov     dword ptr [esp+4], 0FFFC70F9h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9765 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9766 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9767 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000000));	// 9768 mov     dword ptr [esp+4], 80000000h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9769 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9770 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x81234567));	// 9771 mov     dword ptr [esp+8], 81234567h ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x12345678));	// 9772 mov     dword ptr [esp+4], 12345678h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x12343));	// 9773 mov     dword ptr [esp], 12343h ; op0h
	R(CALL(ktest_divl));	// 9774 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9775 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9776 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFE));	// 9777 mov     dword ptr [esp], 0FFFFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9778 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFF));	// 9779 mov     dword ptr [esp+8], 0FFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9780 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFE));	// 9781 mov     dword ptr [esp], 0FFFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9782 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFF));	// 9783 mov     dword ptr [esp+8], 0FFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9784 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFE));	// 9785 mov     dword ptr [esp], 0FFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9786 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFF));	// 9787 mov     dword ptr [esp+8], 0FFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9788 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFE));	// 9789 mov     dword ptr [esp], 0FFFFEh ; op0h
	R(CALL(ktest_divl));	// 9790 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFF));	// 9791 mov     dword ptr [esp+8], 0FFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9792 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFE));	// 9793 mov     dword ptr [esp], 0FFFEh ; op0h
	R(CALL(ktest_divl));	// 9794 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFF));	// 9795 mov     dword ptr [esp+8], 0FFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9796 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFE));	// 9797 mov     dword ptr [esp], 0FFEh ; op0h
	R(CALL(ktest_divl));	// 9798 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FF));	// 9799 mov     dword ptr [esp+8], 0FFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9800 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FE));	// 9801 mov     dword ptr [esp], 0FEh ; op0h
	R(CALL(ktest_divl));	// 9802 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0F));	// 9803 mov     dword ptr [esp+8], 0Fh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9804 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0E));	// 9805 mov     dword ptr [esp], 0Eh ; op0h
	R(CALL(ktest_divl));	// 9806 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFFF));	// 9807 mov     dword ptr [esp+8], 7FFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9808 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFFE));	// 9809 mov     dword ptr [esp], 7FFFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9810 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFF));	// 9811 mov     dword ptr [esp+8], 7FFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9812 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFFE));	// 9813 mov     dword ptr [esp], 7FFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9814 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFF));	// 9815 mov     dword ptr [esp+8], 7FFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9816 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFFE));	// 9817 mov     dword ptr [esp], 7FFFFEh ; op0h
	R(CALL(ktest_divl));	// 9818 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFF));	// 9819 mov     dword ptr [esp+8], 7FFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9820 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFFE));	// 9821 mov     dword ptr [esp], 7FFFEh ; op0h
	R(CALL(ktest_divl));	// 9822 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFF));	// 9823 mov     dword ptr [esp+8], 7FFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9824 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FFE));	// 9825 mov     dword ptr [esp], 7FFEh ; op0h
	R(CALL(ktest_divl));	// 9826 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FF));	// 9827 mov     dword ptr [esp+8], 7FFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9828 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7FE));	// 9829 mov     dword ptr [esp], 7FEh ; op0h
	R(CALL(ktest_divl));	// 9830 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7F));	// 9831 mov     dword ptr [esp+8], 7Fh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9832 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x7E));	// 9833 mov     dword ptr [esp], 7Eh ; op0h
	R(CALL(ktest_divl));	// 9834 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFFFF));	// 9835 mov     dword ptr [esp+8], 3FFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9836 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFFFE));	// 9837 mov     dword ptr [esp], 3FFFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9838 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFFF));	// 9839 mov     dword ptr [esp+8], 3FFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9840 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFFE));	// 9841 mov     dword ptr [esp], 3FFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9842 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFFF));	// 9843 mov     dword ptr [esp+8], 3FFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9844 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFFE));	// 9845 mov     dword ptr [esp], 3FFFFEh ; op0h
	R(CALL(ktest_divl));	// 9846 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFFF));	// 9847 mov     dword ptr [esp+8], 3FFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9848 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x3FFFE));	// 9849 mov     dword ptr [esp], 3FFFEh ; op0h
	R(CALL(ktest_divl));	// 9850 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FFF));	// 9851 mov     dword ptr [esp+8], 3FFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9852 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x3FFE));	// 9853 mov     dword ptr [esp], 3FFEh ; op0h
	R(CALL(ktest_divl));	// 9854 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x3FF));	// 9855 mov     dword ptr [esp+8], 3FFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9856 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x3FE));	// 9857 mov     dword ptr [esp], 3FEh ; op0h
	R(CALL(ktest_divl));	// 9858 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x3F));	// 9859 mov     dword ptr [esp+8], 3Fh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9860 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x3E));	// 9861 mov     dword ptr [esp], 3Eh ; op0h
	R(CALL(ktest_divl));	// 9862 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFFFF));	// 9863 mov     dword ptr [esp+8], 1FFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9864 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFFFE));	// 9865 mov     dword ptr [esp], 1FFFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9866 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFFF));	// 9867 mov     dword ptr [esp+8], 1FFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9868 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFFE));	// 9869 mov     dword ptr [esp], 1FFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9870 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFFF));	// 9871 mov     dword ptr [esp+8], 1FFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9872 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFFE));	// 9873 mov     dword ptr [esp], 1FFFFEh ; op0h
	R(CALL(ktest_divl));	// 9874 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFFF));	// 9875 mov     dword ptr [esp+8], 1FFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9876 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1FFFE));	// 9877 mov     dword ptr [esp], 1FFFEh ; op0h
	R(CALL(ktest_divl));	// 9878 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FFF));	// 9879 mov     dword ptr [esp+8], 1FFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9880 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1FFE));	// 9881 mov     dword ptr [esp], 1FFEh ; op0h
	R(CALL(ktest_divl));	// 9882 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1FF));	// 9883 mov     dword ptr [esp+8], 1FFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9884 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1FE));	// 9885 mov     dword ptr [esp], 1FEh ; op0h
	R(CALL(ktest_divl));	// 9886 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1F));	// 9887 mov     dword ptr [esp+8], 1Fh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9888 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x1E));	// 9889 mov     dword ptr [esp], 1Eh ; op0h
	R(CALL(ktest_divl));	// 9890 call    test_divl
	res = 0;AFFECT_ZF(0); AFFECT_SF(res,0);	// 9891 xor     res, res
loc_409652:
#undef i
#define i ebx	// 9894 i = ebx
	R(esi = i+1);	// 9895 lea     esi, [i+1]
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 9896 mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 9897 mov     [esp+8], esi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9898 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9899 call    test_divl
	R(edi = i+2);	// 9900 lea     edi, [i+2]
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 9901 mov     [esp+8], esi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9902 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9903 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9904 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9905 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 9906 mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 1));	// 9907 mov     dword ptr [esp], 1 ; op0h
	R(CALL(ktest_divl));	// 9908 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9909 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9910 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(edi = i+3);	// 9911 lea     edi, [i+3]
	R(MOV(*(dd*)(raddr(ds,esp)), 1));	// 9912 mov     dword ptr [esp], 1 ; op0h
	R(CALL(ktest_divl));	// 9913 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9914 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 9915 mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 2));	// 9916 mov     dword ptr [esp], 2 ; op0h
	R(CALL(ktest_divl));	// 9917 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9918 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9919 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(edi = i+4);	// 9920 lea     edi, [i+4]
	R(MOV(*(dd*)(raddr(ds,esp)), 2));	// 9921 mov     dword ptr [esp], 2 ; op0h
	R(CALL(ktest_divl));	// 9922 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9923 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 9924 mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 3));	// 9925 mov     dword ptr [esp], 3 ; op0h
	R(CALL(ktest_divl));	// 9926 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9927 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9928 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(edi = i+5);	// 9929 lea     edi, [i+5]
	R(MOV(*(dd*)(raddr(ds,esp)), 3));	// 9930 mov     dword ptr [esp], 3 ; op0h
	R(CALL(ktest_divl));	// 9931 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9932 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFE));	// 9933 mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 4));	// 9934 mov     dword ptr [esp], 4 ; op0h
	R(CALL(ktest_divl));	// 9935 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), edi));	// 9936 mov     [esp+8], edi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9937 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 4));	// 9938 mov     dword ptr [esp], 4 ; op0h
	R(CALL(ktest_divl));	// 9939 call    test_divl
	R(edi = i-0x10);	// 9940 lea     edi, [i-10h]
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9941 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFE));	// 9942 mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFD));	// 9943 mov     dword ptr [esp], 0FFFFFFFDh ; op0h
	R(CALL(ktest_divl));	// 9944 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFE));	// 9945 mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), edi));	// 9946 mov     [esp+4], edi    ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFD));	// 9947 mov     dword ptr [esp], 0FFFFFFFDh ; op0h
	R(CALL(ktest_divl));	// 9948 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9949 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9950 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFE));	// 9951 mov     dword ptr [esp], 0FFFFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9952 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9953 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), edi));	// 9954 mov     [esp+4], edi    ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFE));	// 9955 mov     dword ptr [esp], 0FFFFFFFEh ; op0h
	R(CALL(ktest_divl));	// 9956 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9957 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFA));	// 9958 mov     dword ptr [esp+8], 0FFFFFFFAh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9959 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9960 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9961 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFB));	// 9962 mov     dword ptr [esp+8], 0FFFFFFFBh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9963 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9964 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9965 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFC));	// 9966 mov     dword ptr [esp+8], 0FFFFFFFCh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9967 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9968 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9969 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFD));	// 9970 mov     dword ptr [esp+8], 0FFFFFFFDh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9971 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9972 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9973 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFE));	// 9974 mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9975 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9976 call    test_divl
	R(MOV(*(dd*)(raddr(ds,esp+4)), i));	// 9977 mov     [esp+4], i      ; op0
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 9978 mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9979 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_divl));	// 9980 call    test_divl
	R(MOV(i, esi));	// 9981 mov     i, esi
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 9982 mov     [esp+8], esi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 9983 mov     dword ptr [esp+4], 1 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9984 mov     dword ptr [esp], 0 ; op0h
	R(NEG(ebx));	// 9985 neg     ebx
	R(CALL(ktest_idivl));	// 9986 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 9987 mov     [esp+8], esi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9988 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 9989 mov     dword ptr [esp], 0FFFFFFFFh ; op0h
	R(CALL(ktest_idivl));	// 9990 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 9991 mov     [esp+8], ebx    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 1));	// 9992 mov     dword ptr [esp+4], 1 ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 9993 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivl));	// 9994 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 9995 mov     [esp+8], ebx    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x0FFFFFFFF));	// 9996 mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 9997 mov     dword ptr [esp], 0FFFFFFFFh ; op0h
	R(CALL(ktest_idivl));	// 9998 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 9999 mov     [esp+8], esi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x7FFFFFFF));	// 10000 mov     dword ptr [esp+4], 7FFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 10001 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivl));	// 10002 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi));	// 10003 mov     [esp+8], esi    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000001));	// 10004 mov     dword ptr [esp+4], 80000001h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 10005 mov     dword ptr [esp], 0FFFFFFFFh ; op0h
	R(CALL(ktest_idivl));	// 10006 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 10007 mov     [esp+8], ebx    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x7FFFFFFF));	// 10008 mov     dword ptr [esp+4], 7FFFFFFFh ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0));	// 10009 mov     dword ptr [esp], 0 ; op0h
	R(CALL(ktest_idivl));	// 10010 call    test_idivl
	R(MOV(*(dd*)(raddr(ds,esp+8)), ebx));	// 10011 mov     [esp+8], ebx    ; op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0x80000001));	// 10012 mov     dword ptr [esp+4], 80000001h ; op0
	R(MOV(*(dd*)(raddr(ds,esp)), 0x0FFFFFFFF));	// 10013 mov     dword ptr [esp], 0FFFFFFFFh ; op0h
	R(CALL(ktest_idivl));	// 10014 call    test_idivl
#undef i
#define i esi	// 10015 i = esi
	R(MOV(ebx, i));	// 10016 mov     ebx, i
	R(CMP(i, 0x10));	// 10017 cmp     i, 10h
		R(JNZ(loc_409652));	// 10018 jnz     loc_409652
	R(ADD(esp, 0x3C));	// 10019 add     esp, 3Ch
	R(POP(ebx));	// 10020 pop     ebx
	R(POP(i));	// 10021 pop     i
	R(POP(edi));	// 10022 pop     edi
	R(POP(ebp));	// 10023 pop     ebp
	R(RETN);	// 10024 retn
 // Procedure test_bsx() start
test_bsx:
	R(PUSH(ebp));	// 10036 push    ebp
	R(MOV(ebp, esp));	// 10037 mov     ebp, esp
	R(PUSH(edi));	// 10038 push    edi
	R(PUSH(esi));	// 10039 push    esi
	R(PUSH(ebx));	// 10040 push    ebx
	R(SUB(esp, 0x2C));	// 10041 sub     esp, 2Ch
	esi = 0;AFFECT_ZF(0); AFFECT_SF(esi,0);	// 10042 xor     esi, esi
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10043 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10044 mov     eax, 12345678h
	R(BSR(ax, si));	// 10045 bsr     ax, si
	R(SETZ(dl))	// 10046 setz    dl
#undef res
#define res eax	// 10047 res = eax
#undef resz
#define resz edx	// 10048 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 10049 mov     dword ptr [esp+8], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10050 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10051 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrw)));	// 10052 mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10053 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
	R(MOV(edi, 0x12340128));	// 10054 mov     edi, 12340128h
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10055 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340128));	// 10056 mov     dword ptr [esp+8], 12340128h
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10057 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10058 mov     eax, 12345678h
	R(BSR(ax, di));	// 10059 bsr     ax, di
	R(SETZ(dl))	// 10060 setz    dl
#undef res
#define res eax	// 10061 res = eax
#undef resz
#define resz edx	// 10062 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrw)));	// 10063 mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10064 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10065 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10066 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10067 call    printf
	R(OR(ebx, 0x0FFFFFFFF));	// 10068 or      ebx, 0FFFFFFFFh
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10069 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10070 mov     eax, 12345678h
	R(BSR(ax, bx));	// 10071 bsr     ax, bx
	R(SETZ(dl))	// 10072 setz    dl
#undef res
#define res eax	// 10073 res = eax
#undef resz
#define resz edx	// 10074 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 10075 mov     dword ptr [esp+8], 0FFFFFFFFh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10076 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10077 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrw)));	// 10078 mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10079 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10080 call    printf
	R(MOV(eax, 0x0FFFF7FFF));	// 10081 mov     eax, 0FFFF7FFFh
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10082 xor     ecx, ecx
	R(MOV(edx, 0x12345678));	// 10083 mov     edx, 12345678h
	R(BSR(dx, ax));	// 10084 bsr     dx, ax
	R(SETZ(cl))	// 10085 setz    cl
#undef res
#define res edx	// 10086 res = edx
#undef resz
#define resz ecx	// 10087 resz = ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFF7FFF));	// 10088 mov     dword ptr [esp+8], 0FFFF7FFFh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10089 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10090 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrw)));	// 10091 mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10092 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10093 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 10094 mov     dword ptr [esp+8], 0
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10095 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10096 mov     eax, 12345678h
	R(BSR(ax, si));	// 10097 bsf     ax, si
	R(SETZ(dl))	// 10098 setz    dl
#undef res
#define res eax	// 10099 res = eax
#undef resz
#define resz edx	// 10100 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfw)));	// 10101 mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10102 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10103 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10104 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10105 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340128));	// 10106 mov     dword ptr [esp+8], 12340128h
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10107 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10108 mov     eax, 12345678h
	R(BSR(ax, di));	// 10109 bsf     ax, di
	R(SETZ(dl))	// 10110 setz    dl
#undef res
#define res eax	// 10111 res = eax
#undef resz
#define resz edx	// 10112 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfw)));	// 10113 mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10114 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10115 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10116 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10117 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 10118 mov     dword ptr [esp+8], 0FFFFFFFFh
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10119 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10120 mov     eax, 12345678h
	R(BSR(ax, bx));	// 10121 bsf     ax, bx
	R(SETZ(dl))	// 10122 setz    dl
#undef res
#define res eax	// 10123 res = eax
#undef resz
#define resz edx	// 10124 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfw)));	// 10125 mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10126 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10127 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10128 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10129 call    printf
	R(MOV(edi, 0x0FFFFFFF7));	// 10130 mov     edi, 0FFFFFFF7h
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10131 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10132 mov     eax, 12345678h
	R(BSR(ax, di));	// 10133 bsf     ax, di
	R(SETZ(dl))	// 10134 setz    dl
#undef res
#define res eax	// 10135 res = eax
#undef resz
#define resz edx	// 10136 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFF7));	// 10137 mov     dword ptr [esp+8], 0FFFFFFF7h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10138 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10139 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfw)));	// 10140 mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10141 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10142 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 10143 mov     dword ptr [esp+8], 0
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10144 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10145 mov     eax, 12345678h
	R(BSR(eax, esi));	// 10146 bsr     eax, esi
	R(SETZ(dl))	// 10147 setz    dl
#undef res
#define res eax	// 10148 res = eax
#undef resz
#define resz edx	// 10149 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrl)));	// 10150 mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10151 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10152 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10153 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10154 call    printf
	R(MOV(edx, 0x340128));	// 10155 mov     edx, 340128h
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10156 xor     ecx, ecx
	R(MOV(eax, 0x12345678));	// 10157 mov     eax, 12345678h
	R(BSR(eax, edx));	// 10158 bsr     eax, edx
	R(SETZ(cl))	// 10159 setz    cl
#undef res
#define res eax	// 10160 res = eax
#undef resz
#define resz ecx	// 10161 resz = ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x340128));	// 10162 mov     dword ptr [esp+8], 340128h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10163 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10164 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrl)));	// 10165 mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10166 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10167 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 10168 mov     dword ptr [esp+8], 0FFFFFFFFh
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10169 xor     ecx, ecx
	R(MOV(eax, 0x12345678));	// 10170 mov     eax, 12345678h
	R(BSR(eax, ebx));	// 10171 bsr     eax, ebx
	R(SETZ(cl))	// 10172 setz    cl
#undef res
#define res eax	// 10173 res = eax
#undef resz
#define resz ecx	// 10174 resz = ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrl)));	// 10175 mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10176 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10177 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10178 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10179 call    printf
	R(MOV(eax, 0x7FFFFFFF));	// 10180 mov     eax, 7FFFFFFFh
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10181 xor     ecx, ecx
	R(MOV(edx, 0x12345678));	// 10182 mov     edx, 12345678h
	R(BSR(edx, eax));	// 10183 bsr     edx, eax
	R(SETZ(cl))	// 10184 setz    cl
#undef res
#define res edx	// 10185 res = edx
#undef resz
#define resz ecx	// 10186 resz = ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x7FFFFFFF));	// 10187 mov     dword ptr [esp+8], 7FFFFFFFh
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10188 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10189 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsrl)));	// 10190 mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10191 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10192 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0));	// 10193 mov     dword ptr [esp+8], 0
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10194 xor     ecx, ecx
	R(MOV(eax, 0x12345678));	// 10195 mov     eax, 12345678h
	R(BSR(eax, esi));	// 10196 bsf     eax, esi
	R(SETZ(cl))	// 10197 setz    cl
#undef res
#define res eax	// 10198 res = eax
#undef resz
#define resz ecx	// 10199 resz = ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfl)));	// 10200 mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10201 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10202 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10203 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10204 call    printf
	R(MOV(edx, 0x340128));	// 10205 mov     edx, 340128h
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10206 xor     ecx, ecx
	R(MOV(eax, 0x12345678));	// 10207 mov     eax, 12345678h
	R(BSR(eax, edx));	// 10208 bsf     eax, edx
	R(SETZ(cl))	// 10209 setz    cl
#undef res
#define res eax	// 10210 res = eax
#undef resz
#define resz ecx	// 10211 resz = ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x340128));	// 10212 mov     dword ptr [esp+8], 340128h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10213 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10214 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfl)));	// 10215 mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10216 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10217 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFFF));	// 10218 mov     dword ptr [esp+8], 0FFFFFFFFh
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10219 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10220 mov     eax, 12345678h
	R(BSR(eax, ebx));	// 10221 bsf     eax, ebx
	R(SETZ(dl))	// 10222 setz    dl
#undef res
#define res eax	// 10223 res = eax
#undef resz
#define resz edx	// 10224 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfl)));	// 10225 mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10226 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10227 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10228 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10229 call    printf
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFFFFF7));	// 10230 mov     dword ptr [esp+8], 0FFFFFFF7h
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10231 xor     edx, edx
	R(MOV(eax, 0x12345678));	// 10232 mov     eax, 12345678h
	R(BSR(eax, edi));	// 10233 bsf     eax, edi
	R(SETZ(dl))	// 10234 setz    dl
#undef res
#define res eax	// 10235 res = eax
#undef resz
#define resz edx	// 10236 resz = edx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBsfl)));	// 10237 mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), resz));	// 10238 mov     [esp+10h], resz
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10239 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lxL)));	// 10240 mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10241 call    printf
	R(ADD(esp, 0x2C));	// 10242 add     esp, 2Ch
	R(POP(ebx));	// 10243 pop     ebx
	R(POP(esi));	// 10244 pop     esi
	R(POP(edi));	// 10245 pop     edi
	R(POP(ebp));	// 10246 pop     ebp
	R(RETN);	// 10247 retn
 // Procedure test_popcnt() start
test_popcnt:
	R(PUSH(ebp));	// 10259 push    ebp
	eax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);	// 10260 xor     eax, eax
	R(MOV(ebp, esp));	// 10261 mov     ebp, esp
	R(SUB(esp, 0x18));	// 10262 sub     esp, 18h
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10263 xor     ecx, ecx
	R(MOV(edx, 0x12345678));	// 10264 mov     edx, 12345678h
	R(PUSHF);	// 10266 pushf
	R(POP(ecx));	// 10267 pop     ecx
#undef res
#define res edx	// 10268 res = edx
#undef resz
#define resz ecx	// 10269 resz = ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), 0));	// 10270 mov     dword ptr [esp+4], 0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), resz));	// 10271 mov     [esp+0Ch], resz
	R(MOV(*(dd*)(raddr(ds,esp+8)), res));	// 10272 mov     [esp+8], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aPopcntA08lxR08)));	// 10273 mov     dword ptr [esp], offset aPopcntA08lxR08 ; "popcnt A=%08lx R=%08lx flags=%lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10274 call    printf
	R(MOV(esp, ebp));
R(POP(ebp));	// 10275 leave
	R(RETN);	// 10276 retn
 // Procedure test_bcd() start
test_bcd:
#undef var_1c
#define var_1c -0x1C	// 10289 var_1c = -0x1C
	R(PUSH(ebp));	// 10292 push    ebp
	R(MOV(edx, 0x10));	// 10293 mov     edx, 10h
	R(MOV(ebp, esp));	// 10294 mov     ebp, esp
	R(PUSH(edi));	// 10295 push    edi
	R(PUSH(esi));	// 10296 push    esi
	R(PUSH(ebx));	// 10297 push    ebx
	R(SUB(esp, 0x3C));	// 10298 sub     esp, 3Ch
	R(MOV(esi, 0x12340503));	// 10299 mov     esi, 12340503h
	R(MOV(eax, esi));	// 10300 mov     eax, esi
	R(MOV(ebx, 0x12340506));	// 10301 mov     ebx, 12340506h
	R(PUSH(edx));	// 10302 push    edx
	R(POPF);	// 10303 popf
	R(DAA);	// 10304 daa
	R(PUSHF);	// 10305 pushf
	R(POP(edx));	// 10306 pop     edx
#undef res
#define res eax	// 10307 res = eax
#undef flags
#define flags edx	// 10308 flags = edx
	R(AND(flags, 0x0D5));	// 10309 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10310 mov     dword ptr [esp+10h], 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10311 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10312 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10313 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10314 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10315 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
	R(MOV(edi, 0x123405A0));	// 10316 mov     edi, 123405A0h
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10317 call    printf
	R(MOV(eax, ebx));	// 10318 mov     eax, ebx
	R(MOV(edx, 0x10));	// 10319 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10320 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10321 push    edx
	R(POPF);	// 10322 popf
	R(DAA);	// 10323 daa
	R(PUSHF);	// 10324 pushf
	R(POP(edx));	// 10325 pop     edx
#undef res
#define res eax	// 10326 res = eax
#undef flags
#define flags edx	// 10327 flags = edx
	R(AND(flags, 0x0D5));	// 10328 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10329 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10330 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10331 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10332 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10333 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10334 call    printf
	R(MOV(edx, 0x12340507));	// 10335 mov     edx, 12340507h
	R(MOV(eax, edx));	// 10336 mov     eax, edx
	R(MOV(ecx, 0x10));	// 10337 mov     ecx, 10h
	R(PUSH(ecx));	// 10338 push    ecx
	R(POPF);	// 10339 popf
	R(DAA);	// 10340 daa
	R(PUSHF);	// 10341 pushf
	R(POP(ecx));	// 10342 pop     ecx
#undef res
#define res eax	// 10343 res = eax
#undef flags
#define flags ecx	// 10344 flags = ecx
	R(AND(flags, 0x0D5));	// 10345 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10346 mov     dword ptr [esp+10h], 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10347 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10348 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340507));	// 10349 mov     dword ptr [esp+8], 12340507h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10350 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10351 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
	R(MOV(*(dd*)(raddr(ds,ebp+var_1c)), edx));	// 10352 mov     [ebp+var_1c], edx
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10353 call    printf
	R(MOV(eax, 0x12340559));	// 10354 mov     eax, 12340559h
	R(MOV(ecx, 0x10));	// 10355 mov     ecx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10356 mov     dword ptr [esp+10h], 10h
	R(PUSH(ecx));	// 10357 push    ecx
	R(POPF);	// 10358 popf
	R(DAA);	// 10359 daa
	R(PUSHF);	// 10360 pushf
	R(POP(ecx));	// 10361 pop     ecx
#undef res
#define res eax	// 10362 res = eax
#undef flags
#define flags ecx	// 10363 flags = ecx
	R(AND(flags, 0x0D5));	// 10364 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10365 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10366 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340559));	// 10367 mov     dword ptr [esp+8], 12340559h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10368 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10369 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10370 call    printf
	R(MOV(eax, 0x12340560));	// 10371 mov     eax, 12340560h
	R(MOV(ecx, 0x10));	// 10372 mov     ecx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10373 mov     dword ptr [esp+10h], 10h
	R(PUSH(ecx));	// 10374 push    ecx
	R(POPF);	// 10375 popf
	R(DAA);	// 10376 daa
	R(PUSHF);	// 10377 pushf
	R(POP(ecx));	// 10378 pop     ecx
#undef res
#define res eax	// 10379 res = eax
#undef flags
#define flags ecx	// 10380 flags = ecx
	R(AND(flags, 0x0D5));	// 10381 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10382 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10383 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340560));	// 10384 mov     dword ptr [esp+8], 12340560h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10385 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10386 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10387 call    printf
	R(MOV(eax, 0x1234059F));	// 10388 mov     eax, 1234059Fh
	R(MOV(ecx, 0x10));	// 10389 mov     ecx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10390 mov     dword ptr [esp+10h], 10h
	R(PUSH(ecx));	// 10391 push    ecx
	R(POPF);	// 10392 popf
	R(DAA);	// 10393 daa
	R(PUSHF);	// 10394 pushf
	R(POP(ecx));	// 10395 pop     ecx
#undef res
#define res eax	// 10396 res = eax
#undef flags
#define flags ecx	// 10397 flags = ecx
	R(AND(flags, 0x0D5));	// 10398 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10399 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10400 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234059F));	// 10401 mov     dword ptr [esp+8], 1234059Fh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10402 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10403 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10404 call    printf
	R(MOV(eax, edi));	// 10405 mov     eax, edi
	R(MOV(ecx, 0x10));	// 10406 mov     ecx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10407 mov     dword ptr [esp+10h], 10h
	R(PUSH(ecx));	// 10408 push    ecx
	R(POPF);	// 10409 popf
	R(DAA);	// 10410 daa
	R(PUSHF);	// 10411 pushf
	R(POP(ecx));	// 10412 pop     ecx
#undef res
#define res eax	// 10413 res = eax
#undef flags
#define flags ecx	// 10414 flags = ecx
	R(AND(flags, 0x0D5));	// 10415 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10416 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10417 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405A0));	// 10418 mov     dword ptr [esp+8], 123405A0h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10419 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10420 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10421 call    printf
	R(MOV(eax, esi));	// 10422 mov     eax, esi
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10423 xor     ecx, ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10424 mov     dword ptr [esp+10h], 0
	R(PUSH(ecx));	// 10425 push    ecx
	R(POPF);	// 10426 popf
	R(DAA);	// 10427 daa
	R(PUSHF);	// 10428 pushf
	R(POP(ecx));	// 10429 pop     ecx
#undef res
#define res eax	// 10430 res = eax
#undef flags
#define flags ecx	// 10431 flags = ecx
	R(AND(flags, 0x0D5));	// 10432 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10433 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10434 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10435 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10436 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10437 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10438 call    printf
	R(MOV(eax, ebx));	// 10439 mov     eax, ebx
	ecx = 0;AFFECT_ZF(0); AFFECT_SF(ecx,0);	// 10440 xor     ecx, ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10441 mov     dword ptr [esp+10h], 0
	R(PUSH(ecx));	// 10442 push    ecx
	R(POPF);	// 10443 popf
	R(DAA);	// 10444 daa
	R(PUSHF);	// 10445 pushf
	R(POP(ecx));	// 10446 pop     ecx
#undef res
#define res eax	// 10447 res = eax
#undef flags
#define flags ecx	// 10448 flags = ecx
	R(AND(flags, 0x0D5));	// 10449 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10450 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10451 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10452 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10453 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10454 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10455 call    printf
	R(MOV(eax, esi));	// 10456 mov     eax, esi
	R(MOV(ecx, 1));	// 10457 mov     ecx, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 1));	// 10458 mov     dword ptr [esp+10h], 1
	R(PUSH(ecx));	// 10459 push    ecx
	R(POPF);	// 10460 popf
	R(DAA);	// 10461 daa
	R(PUSHF);	// 10462 pushf
	R(POP(ecx));	// 10463 pop     ecx
#undef res
#define res eax	// 10464 res = eax
#undef flags
#define flags ecx	// 10465 flags = ecx
	R(AND(flags, 0x0D5));	// 10466 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10467 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10468 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10469 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10470 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10471 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10472 call    printf
	R(MOV(eax, ebx));	// 10473 mov     eax, ebx
	R(MOV(ecx, 1));	// 10474 mov     ecx, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 1));	// 10475 mov     dword ptr [esp+10h], 1
	R(PUSH(ecx));	// 10476 push    ecx
	R(POPF);	// 10477 popf
	R(DAA);	// 10478 daa
	R(PUSHF);	// 10479 pushf
	R(POP(ecx));	// 10480 pop     ecx
#undef res
#define res eax	// 10481 res = eax
#undef flags
#define flags ecx	// 10482 flags = ecx
	R(AND(flags, 0x0D5));	// 10483 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10484 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10485 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10486 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10487 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10488 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10489 call    printf
	R(MOV(eax, esi));	// 10490 mov     eax, esi
	R(MOV(ecx, 0x11));	// 10491 mov     ecx, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x11));	// 10492 mov     dword ptr [esp+10h], 11h
	R(PUSH(ecx));	// 10493 push    ecx
	R(POPF);	// 10494 popf
	R(DAA);	// 10495 daa
	R(PUSHF);	// 10496 pushf
	R(POP(ecx));	// 10497 pop     ecx
#undef res
#define res eax	// 10498 res = eax
#undef flags
#define flags ecx	// 10499 flags = ecx
	R(AND(flags, 0x0D5));	// 10500 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10501 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10502 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10503 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10504 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10505 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10506 call    printf
	R(MOV(eax, ebx));	// 10507 mov     eax, ebx
	R(MOV(ecx, 0x11));	// 10508 mov     ecx, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x11));	// 10509 mov     dword ptr [esp+10h], 11h
	R(PUSH(ecx));	// 10510 push    ecx
	R(POPF);	// 10511 popf
	R(DAA);	// 10512 daa
	R(PUSHF);	// 10513 pushf
	R(POP(ecx));	// 10514 pop     ecx
#undef res
#define res eax	// 10515 res = eax
#undef flags
#define flags ecx	// 10516 flags = ecx
	R(AND(flags, 0x0D5));	// 10517 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10518 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10519 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10520 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDaa)));	// 10521 mov     dword ptr [esp+4], offset aDaa ; "daa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10522 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10523 call    printf
	R(MOV(eax, esi));	// 10524 mov     eax, esi
	R(MOV(ecx, 0x10));	// 10525 mov     ecx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10526 mov     dword ptr [esp+10h], 10h
	R(PUSH(ecx));	// 10527 push    ecx
	R(POPF);	// 10528 popf
	R(DAS);	// 10529 das
	R(PUSHF);	// 10530 pushf
	R(POP(ecx));	// 10531 pop     ecx
#undef res
#define res eax	// 10532 res = eax
#undef flags
#define flags ecx	// 10533 flags = ecx
	R(AND(flags, 0x0D5));	// 10534 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10535 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10536 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10537 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10538 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10539 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10540 call    printf
	R(MOV(eax, ebx));	// 10541 mov     eax, ebx
	R(MOV(ecx, 0x10));	// 10542 mov     ecx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10543 mov     dword ptr [esp+10h], 10h
	R(PUSH(ecx));	// 10544 push    ecx
	R(POPF);	// 10545 popf
	R(DAS);	// 10546 das
	R(PUSHF);	// 10547 pushf
	R(POP(ecx));	// 10548 pop     ecx
#undef res
#define res eax	// 10549 res = eax
#undef flags
#define flags ecx	// 10550 flags = ecx
	R(AND(flags, 0x0D5));	// 10551 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10552 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10553 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10554 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10555 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10556 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10557 call    printf
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_1c))));	// 10558 mov     edx, [ebp+var_1c]
	R(MOV(eax, edx));	// 10559 mov     eax, edx
	R(MOV(ecx, 0x10));	// 10560 mov     ecx, 10h
	R(PUSH(ecx));	// 10561 push    ecx
	R(POPF);	// 10562 popf
	R(DAS);	// 10563 das
	R(PUSHF);	// 10564 pushf
	R(POP(ecx));	// 10565 pop     ecx
#undef res
#define res eax	// 10566 res = eax
#undef flags
#define flags ecx	// 10567 flags = ecx
	R(AND(flags, 0x0D5));	// 10568 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10569 mov     dword ptr [esp+10h], 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 10570 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10571 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340507));	// 10572 mov     dword ptr [esp+8], 12340507h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10573 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10574 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10575 call    printf
	R(MOV(eax, 0x12340559));	// 10576 mov     eax, 12340559h
	R(MOV(edx, 0x10));	// 10577 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10578 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10579 push    edx
	R(POPF);	// 10580 popf
	R(DAS);	// 10581 das
	R(PUSHF);	// 10582 pushf
	R(POP(edx));	// 10583 pop     edx
#undef res
#define res eax	// 10584 res = eax
#undef flags
#define flags edx	// 10585 flags = edx
	R(AND(flags, 0x0D5));	// 10586 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10587 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10588 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340559));	// 10589 mov     dword ptr [esp+8], 12340559h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10590 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10591 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10592 call    printf
	R(MOV(eax, 0x12340560));	// 10593 mov     eax, 12340560h
	R(MOV(edx, 0x10));	// 10594 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10595 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10596 push    edx
	R(POPF);	// 10597 popf
	R(DAS);	// 10598 das
	R(PUSHF);	// 10599 pushf
	R(POP(edx));	// 10600 pop     edx
#undef res
#define res eax	// 10601 res = eax
#undef flags
#define flags edx	// 10602 flags = edx
	R(AND(flags, 0x0D5));	// 10603 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10604 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10605 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340560));	// 10606 mov     dword ptr [esp+8], 12340560h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10607 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10608 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10609 call    printf
	R(MOV(eax, 0x1234059F));	// 10610 mov     eax, 1234059Fh
	R(MOV(edx, 0x10));	// 10611 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10612 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10613 push    edx
	R(POPF);	// 10614 popf
	R(DAS);	// 10615 das
	R(PUSHF);	// 10616 pushf
	R(POP(edx));	// 10617 pop     edx
#undef res
#define res eax	// 10618 res = eax
#undef flags
#define flags edx	// 10619 flags = edx
	R(AND(flags, 0x0D5));	// 10620 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10621 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10622 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234059F));	// 10623 mov     dword ptr [esp+8], 1234059Fh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10624 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10625 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10626 call    printf
	R(MOV(eax, edi));	// 10627 mov     eax, edi
	R(MOV(edx, 0x10));	// 10628 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10629 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10630 push    edx
	R(POPF);	// 10631 popf
	R(DAS);	// 10632 das
	R(PUSHF);	// 10633 pushf
	R(POP(edx));	// 10634 pop     edx
#undef res
#define res eax	// 10635 res = eax
#undef flags
#define flags edx	// 10636 flags = edx
	R(AND(flags, 0x0D5));	// 10637 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10638 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10639 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405A0));	// 10640 mov     dword ptr [esp+8], 123405A0h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10641 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10642 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10643 call    printf
	R(MOV(eax, esi));	// 10644 mov     eax, esi
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10645 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10646 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10647 push    edx
	R(POPF);	// 10648 popf
	R(DAS);	// 10649 das
	R(PUSHF);	// 10650 pushf
	R(POP(edx));	// 10651 pop     edx
#undef res
#define res eax	// 10652 res = eax
#undef flags
#define flags edx	// 10653 flags = edx
	R(AND(flags, 0x0D5));	// 10654 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10655 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10656 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10657 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10658 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10659 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10660 call    printf
	R(MOV(eax, ebx));	// 10661 mov     eax, ebx
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10662 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10663 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10664 push    edx
	R(POPF);	// 10665 popf
	R(DAS);	// 10666 das
	R(PUSHF);	// 10667 pushf
	R(POP(edx));	// 10668 pop     edx
#undef res
#define res eax	// 10669 res = eax
#undef flags
#define flags edx	// 10670 flags = edx
	R(AND(flags, 0x0D5));	// 10671 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10672 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10673 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10674 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10675 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10676 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10677 call    printf
	R(MOV(eax, esi));	// 10678 mov     eax, esi
	R(MOV(edx, 1));	// 10679 mov     edx, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 1));	// 10680 mov     dword ptr [esp+10h], 1
	R(PUSH(edx));	// 10681 push    edx
	R(POPF);	// 10682 popf
	R(DAS);	// 10683 das
	R(PUSHF);	// 10684 pushf
	R(POP(edx));	// 10685 pop     edx
#undef res
#define res eax	// 10686 res = eax
#undef flags
#define flags edx	// 10687 flags = edx
	R(AND(flags, 0x0D5));	// 10688 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10689 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10690 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10691 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10692 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10693 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10694 call    printf
	R(MOV(eax, ebx));	// 10695 mov     eax, ebx
	R(MOV(edx, 1));	// 10696 mov     edx, 1
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 1));	// 10697 mov     dword ptr [esp+10h], 1
	R(PUSH(edx));	// 10698 push    edx
	R(POPF);	// 10699 popf
	R(DAS);	// 10700 das
	R(PUSHF);	// 10701 pushf
	R(POP(edx));	// 10702 pop     edx
#undef res
#define res eax	// 10703 res = eax
#undef flags
#define flags edx	// 10704 flags = edx
	R(AND(flags, 0x0D5));	// 10705 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10706 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10707 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10708 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10709 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10710 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10711 call    printf
	R(MOV(eax, esi));	// 10712 mov     eax, esi
	R(MOV(edx, 0x11));	// 10713 mov     edx, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x11));	// 10714 mov     dword ptr [esp+10h], 11h
	R(PUSH(edx));	// 10715 push    edx
	R(POPF);	// 10716 popf
	R(DAS);	// 10717 das
	R(PUSHF);	// 10718 pushf
	R(POP(edx));	// 10719 pop     edx
#undef res
#define res eax	// 10720 res = eax
#undef flags
#define flags edx	// 10721 flags = edx
	R(AND(flags, 0x0D5));	// 10722 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10723 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10724 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340503));	// 10725 mov     dword ptr [esp+8], 12340503h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10726 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10727 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10728 call    printf
	R(MOV(eax, ebx));	// 10729 mov     eax, ebx
	R(MOV(edx, 0x11));	// 10730 mov     edx, 11h
	R(MOV(edi, 0x12340205));	// 10731 mov     edi, 12340205h
	R(PUSH(edx));	// 10732 push    edx
	R(POPF);	// 10733 popf
	R(DAS);	// 10734 das
	R(PUSHF);	// 10735 pushf
	R(POP(edx));	// 10736 pop     edx
#undef res
#define res eax	// 10737 res = eax
#undef flags
#define flags edx	// 10738 flags = edx
	R(AND(flags, 0x0D5));	// 10739 and     flags, 0D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x11));	// 10740 mov     dword ptr [esp+10h], 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10741 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10742 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340506));	// 10743 mov     dword ptr [esp+8], 12340506h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aDas)));	// 10744 mov     dword ptr [esp+4], offset aDas ; "das"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10745 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
	R(MOV(esi, 0x12340306));	// 10746 mov     esi, 12340306h
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10747 call    printf
	R(MOV(eax, edi));	// 10748 mov     eax, edi
	R(MOV(edx, 0x10));	// 10749 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10750 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10751 push    edx
	R(POPF);	// 10752 popf
	R(AAA);	// 10753 aaa
	R(PUSHF);	// 10754 pushf
	R(POP(edx));	// 10755 pop     edx
#undef res
#define res eax	// 10756 res = eax
#undef flags
#define flags edx	// 10757 flags = edx
	R(AND(flags, 0x11));	// 10758 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10759 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10760 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340205));	// 10761 mov     dword ptr [esp+8], 12340205h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10762 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10763 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10764 call    printf
	R(MOV(eax, esi));	// 10765 mov     eax, esi
	R(MOV(edx, 0x10));	// 10766 mov     edx, 10h
	R(MOV(ebx, 0x1234040A));	// 10767 mov     ebx, 1234040Ah
	R(PUSH(edx));	// 10768 push    edx
	R(POPF);	// 10769 popf
	R(AAA);	// 10770 aaa
	R(PUSHF);	// 10771 pushf
	R(POP(edx));	// 10772 pop     edx
#undef res
#define res eax	// 10773 res = eax
#undef flags
#define flags edx	// 10774 flags = edx
	R(AND(flags, 0x11));	// 10775 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10776 mov     dword ptr [esp+10h], 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10777 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10778 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340306));	// 10779 mov     dword ptr [esp+8], 12340306h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10780 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10781 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10782 call    printf
	R(MOV(eax, ebx));	// 10783 mov     eax, ebx
	R(MOV(edx, 0x10));	// 10784 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10785 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10786 push    edx
	R(POPF);	// 10787 popf
	R(AAA);	// 10788 aaa
	R(PUSHF);	// 10789 pushf
	R(POP(edx));	// 10790 pop     edx
#undef res
#define res eax	// 10791 res = eax
#undef flags
#define flags edx	// 10792 flags = edx
	R(AND(flags, 0x11));	// 10793 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10794 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10795 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234040A));	// 10796 mov     dword ptr [esp+8], 1234040Ah
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10797 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10798 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10799 call    printf
	R(MOV(eax, 0x123405FA));	// 10800 mov     eax, 123405FAh
	R(MOV(edx, 0x10));	// 10801 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10802 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10803 push    edx
	R(POPF);	// 10804 popf
	R(AAA);	// 10805 aaa
	R(PUSHF);	// 10806 pushf
	R(POP(edx));	// 10807 pop     edx
#undef res
#define res eax	// 10808 res = eax
#undef flags
#define flags edx	// 10809 flags = edx
	R(AND(flags, 0x11));	// 10810 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10811 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10812 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405FA));	// 10813 mov     dword ptr [esp+8], 123405FAh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10814 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10815 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10816 call    printf
	R(MOV(eax, edi));	// 10817 mov     eax, edi
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10818 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10819 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10820 push    edx
	R(POPF);	// 10821 popf
	R(AAA);	// 10822 aaa
	R(PUSHF);	// 10823 pushf
	R(POP(edx));	// 10824 pop     edx
#undef res
#define res eax	// 10825 res = eax
#undef flags
#define flags edx	// 10826 flags = edx
	R(AND(flags, 0x11));	// 10827 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10828 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10829 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340205));	// 10830 mov     dword ptr [esp+8], 12340205h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10831 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10832 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10833 call    printf
	R(MOV(eax, esi));	// 10834 mov     eax, esi
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10835 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10836 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10837 push    edx
	R(POPF);	// 10838 popf
	R(AAA);	// 10839 aaa
	R(PUSHF);	// 10840 pushf
	R(POP(edx));	// 10841 pop     edx
#undef res
#define res eax	// 10842 res = eax
#undef flags
#define flags edx	// 10843 flags = edx
	R(AND(flags, 0x11));	// 10844 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10845 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10846 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340306));	// 10847 mov     dword ptr [esp+8], 12340306h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10848 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10849 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10850 call    printf
	R(MOV(eax, ebx));	// 10851 mov     eax, ebx
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10852 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10853 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10854 push    edx
	R(POPF);	// 10855 popf
	R(AAA);	// 10856 aaa
	R(PUSHF);	// 10857 pushf
	R(POP(edx));	// 10858 pop     edx
#undef res
#define res eax	// 10859 res = eax
#undef flags
#define flags edx	// 10860 flags = edx
	R(AND(flags, 0x11));	// 10861 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10862 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10863 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234040A));	// 10864 mov     dword ptr [esp+8], 1234040Ah
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10865 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10866 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10867 call    printf
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10868 xor     edx, edx
	R(MOV(eax, 0x123405FA));	// 10869 mov     eax, 123405FAh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10870 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10871 push    edx
	R(POPF);	// 10872 popf
	R(AAA);	// 10873 aaa
	R(PUSHF);	// 10874 pushf
	R(POP(edx));	// 10875 pop     edx
#undef res
#define res eax	// 10876 res = eax
#undef flags
#define flags edx	// 10877 flags = edx
	R(AND(flags, 0x11));	// 10878 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10879 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10880 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405FA));	// 10881 mov     dword ptr [esp+8], 123405FAh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAaa)));	// 10882 mov     dword ptr [esp+4], offset aAaa ; "aaa"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10883 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10884 call    printf
	R(MOV(eax, edi));	// 10885 mov     eax, edi
	R(MOV(edx, 0x10));	// 10886 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10887 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10888 push    edx
	R(POPF);	// 10889 popf
	R(AAS);	// 10890 aas
	R(PUSHF);	// 10891 pushf
	R(POP(edx));	// 10892 pop     edx
#undef res
#define res eax	// 10893 res = eax
#undef flags
#define flags edx	// 10894 flags = edx
	R(AND(flags, 0x11));	// 10895 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10896 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10897 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340205));	// 10898 mov     dword ptr [esp+8], 12340205h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 10899 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10900 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10901 call    printf
	R(MOV(eax, esi));	// 10902 mov     eax, esi
	R(MOV(edx, 0x10));	// 10903 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10904 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10905 push    edx
	R(POPF);	// 10906 popf
	R(AAS);	// 10907 aas
	R(PUSHF);	// 10908 pushf
	R(POP(edx));	// 10909 pop     edx
#undef res
#define res eax	// 10910 res = eax
#undef flags
#define flags edx	// 10911 flags = edx
	R(AND(flags, 0x11));	// 10912 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10913 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10914 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340306));	// 10915 mov     dword ptr [esp+8], 12340306h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 10916 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10917 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10918 call    printf
	R(MOV(eax, ebx));	// 10919 mov     eax, ebx
	R(MOV(edx, 0x10));	// 10920 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10921 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10922 push    edx
	R(POPF);	// 10923 popf
	R(AAS);	// 10924 aas
	R(PUSHF);	// 10925 pushf
	R(POP(edx));	// 10926 pop     edx
#undef res
#define res eax	// 10927 res = eax
#undef flags
#define flags edx	// 10928 flags = edx
	R(AND(flags, 0x11));	// 10929 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10930 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10931 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234040A));	// 10932 mov     dword ptr [esp+8], 1234040Ah
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 10933 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10934 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10935 call    printf
	R(MOV(eax, 0x123405FA));	// 10936 mov     eax, 123405FAh
	R(MOV(edx, 0x10));	// 10937 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 10938 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 10939 push    edx
	R(POPF);	// 10940 popf
	R(AAS);	// 10941 aas
	R(PUSHF);	// 10942 pushf
	R(POP(edx));	// 10943 pop     edx
#undef res
#define res eax	// 10944 res = eax
#undef flags
#define flags edx	// 10945 flags = edx
	R(AND(flags, 0x11));	// 10946 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10947 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10948 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405FA));	// 10949 mov     dword ptr [esp+8], 123405FAh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 10950 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10951 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10952 call    printf
	R(MOV(eax, edi));	// 10953 mov     eax, edi
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10954 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10955 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10956 push    edx
	R(POPF);	// 10957 popf
	R(AAS);	// 10958 aas
	R(PUSHF);	// 10959 pushf
	R(POP(edx));	// 10960 pop     edx
#undef res
#define res eax	// 10961 res = eax
#undef flags
#define flags edx	// 10962 flags = edx
	R(AND(flags, 0x11));	// 10963 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10964 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10965 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340205));	// 10966 mov     dword ptr [esp+8], 12340205h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 10967 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10968 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10969 call    printf
	R(MOV(eax, esi));	// 10970 mov     eax, esi
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10971 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10972 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10973 push    edx
	R(POPF);	// 10974 popf
	R(AAS);	// 10975 aas
	R(PUSHF);	// 10976 pushf
	R(POP(edx));	// 10977 pop     edx
#undef res
#define res eax	// 10978 res = eax
#undef flags
#define flags edx	// 10979 flags = edx
	R(AND(flags, 0x11));	// 10980 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10981 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10982 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340306));	// 10983 mov     dword ptr [esp+8], 12340306h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 10984 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 10985 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 10986 call    printf
	R(MOV(eax, ebx));	// 10987 mov     eax, ebx
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 10988 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 10989 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 10990 push    edx
	R(POPF);	// 10991 popf
	R(AAS);	// 10992 aas
	R(PUSHF);	// 10993 pushf
	R(POP(edx));	// 10994 pop     edx
#undef res
#define res eax	// 10995 res = eax
#undef flags
#define flags edx	// 10996 flags = edx
	R(AND(flags, 0x11));	// 10997 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 10998 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 10999 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x1234040A));	// 11000 mov     dword ptr [esp+8], 1234040Ah
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 11001 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 11002 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11003 call    printf
	R(MOV(eax, 0x123405FA));	// 11004 mov     eax, 123405FAh
	edx = 0;AFFECT_ZF(0); AFFECT_SF(edx,0);	// 11005 xor     edx, edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0));	// 11006 mov     dword ptr [esp+10h], 0
	R(PUSH(edx));	// 11007 push    edx
	R(POPF);	// 11008 popf
	R(AAS);	// 11009 aas
	R(PUSHF);	// 11010 pushf
	R(POP(edx));	// 11011 pop     edx
#undef res
#define res eax	// 11012 res = eax
#undef flags
#define flags edx	// 11013 flags = edx
	R(AND(flags, 0x11));	// 11014 and     flags, 11h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 11015 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 11016 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x123405FA));	// 11017 mov     dword ptr [esp+8], 123405FAh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAas)));	// 11018 mov     dword ptr [esp+4], offset aAas ; "aas"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 11019 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11020 call    printf
	R(MOV(eax, 0x12340547));	// 11021 mov     eax, 12340547h
	R(MOV(edx, 0x10));	// 11022 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 11023 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 11024 push    edx
	R(POPF);	// 11025 popf
	R(AAM);	// 11026 aam
	R(PUSHF);	// 11027 pushf
	R(POP(edx));	// 11028 pop     edx
#undef res
#define res eax	// 11029 res = eax
#undef flags
#define flags edx	// 11030 flags = edx
	R(AND(flags, 0x8D5));	// 11031 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 11032 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 11033 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340547));	// 11034 mov     dword ptr [esp+8], 12340547h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAam)));	// 11035 mov     dword ptr [esp+4], offset aAam ; "aam"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 11036 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11037 call    printf
	R(MOV(eax, 0x12340407));	// 11038 mov     eax, 12340407h
	R(MOV(edx, 0x10));	// 11039 mov     edx, 10h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), 0x10));	// 11040 mov     dword ptr [esp+10h], 10h
	R(PUSH(edx));	// 11041 push    edx
	R(POPF);	// 11042 popf
	R(AAD);	// 11043 aad
	R(PUSHF);	// 11044 pushf
	R(POP(edx));	// 11045 pop     edx
#undef res
#define res eax	// 11046 res = eax
#undef flags
#define flags edx	// 11047 flags = edx
	R(AND(flags, 0x8D5));	// 11048 and     flags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), res));	// 11049 mov     [esp+0Ch], res
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edx));	// 11050 mov     [esp+14h], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12340407));	// 11051 mov     dword ptr [esp+8], 12340407h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aAad)));	// 11052 mov     dword ptr [esp+4], offset aAad ; "aad"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08xR08xCci)));	// 11053 mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11054 call    printf
	R(ADD(esp, 0x3C));	// 11055 add     esp, 3Ch
	R(POP(ebx));	// 11056 pop     ebx
	R(POP(esi));	// 11057 pop     esi
	R(POP(edi));	// 11058 pop     edi
	R(POP(ebp));	// 11059 pop     ebp
	R(RETN);	// 11060 retn
 // Procedure test_xchg() start
test_xchg:
#undef edx_0
#define edx_0 -0x2C	// 11072 edx_0 = -0x2C
#undef var_20
#define var_20 -0x20	// 11073 var_20 = -0x20
	R(PUSH(ebp));	// 11076 push    ebp
	R(MOV(ebp, esp));	// 11077 mov     ebp, esp
	R(PUSH(edi));	// 11078 push    edi
	R(PUSH(esi));	// 11079 push    esi
	R(PUSH(ebx));	// 11080 push    ebx
	R(SUB(esp, 0x4C));	// 11081 sub     esp, 4Ch
	R(MOV(ebx, 0x12345678));	// 11082 mov     ebx, 12345678h
	R(MOV(edi, 0x0FBCA7654));	// 11083 mov     edi, 0FBCA7654h
	R(MOV(eax, ebx));	// 11084 mov     eax, ebx
	R(MOV(edx, edi));	// 11085 mov     edx, edi
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgl)));	// 11086 mov     dword ptr [esp+4], offset aXchgl ; "xchgl"
	R(XCHG(eax, edx));	// 11087 xchg    eax, edx
#undef op0
#define op0 eax	// 11088 op0 = eax
#undef op1
#define op1 edx	// 11089 op1 = edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11090 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op1));	// 11091 mov     [esp+0Ch], op1
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11092 mov     [esp+8], op0
	R(MOV(esi, 0x0FFFEFDFC));	// 11093 mov     esi, 0FFFEFDFCh
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11094 call    printf
	R(MOV(eax, ebx));	// 11095 mov     eax, ebx
	R(MOV(edx, edi));	// 11096 mov     edx, edi
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgw)));	// 11097 mov     dword ptr [esp+4], offset aXchgw ; "xchgw"
	R(XCHG(ax, dx));	// 11098 xchg    ax, dx
#undef op0
#define op0 eax	// 11099 op0 = eax
#undef op1
#define op1 edx	// 11100 op1 = edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11101 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op1));	// 11102 mov     [esp+0Ch], op1
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11103 mov     [esp+8], op0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11104 call    printf
	R(MOV(eax, ebx));	// 11105 mov     eax, ebx
	R(MOV(edx, edi));	// 11106 mov     edx, edi
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgb)));	// 11107 mov     dword ptr [esp+4], offset aXchgb ; "xchgb"
	R(XCHG(al, dl));	// 11108 xchg    al, dl
#undef op0
#define op0 eax	// 11109 op0 = eax
#undef op1
#define op1 edx	// 11110 op1 = edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11111 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op1));	// 11112 mov     [esp+0Ch], op1
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11113 mov     [esp+8], op0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11114 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11115 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(eax, ebx));	// 11116 mov     eax, ebx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgl)));	// 11117 mov     dword ptr [esp+4], offset aXchgl ; "xchgl"
	R(XCHG(eax, *(dd*)(raddr(ds,ebp+var_20))));	// 11118 xchg    eax, dword ptr [ebp+var_20]
#undef op0
#define op0 eax	// 11119 op0 = eax
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));	// 11120 mov     edx, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11121 mov     [esp+8], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 11122 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11123 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11124 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11125 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(eax, ebx));	// 11126 mov     eax, ebx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgw)));	// 11127 mov     dword ptr [esp+4], offset aXchgw ; "xchgw"
	R(XCHG(ax, *(dw*)(raddr(ds,ebp+var_20))));	// 11128 xchg    ax, word ptr [ebp+var_20]
#undef op0
#define op0 eax	// 11129 op0 = eax
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));	// 11130 mov     edx, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11131 mov     [esp+8], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 11132 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11133 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11134 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11135 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(eax, ebx));	// 11136 mov     eax, ebx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXchgb)));	// 11137 mov     dword ptr [esp+4], offset aXchgb ; "xchgb"
	R(XCHG(al, *(raddr(ds,ebp+var_20))));	// 11138 xchg    al, byte ptr [ebp+var_20]
#undef op0
#define op0 eax	// 11139 op0 = eax
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));	// 11140 mov     edx, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11141 mov     [esp+8], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 11142 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11143 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11144 call    printf
	R(MOV(eax, ebx));	// 11145 mov     eax, ebx
	R(MOV(edx, edi));	// 11146 mov     edx, edi
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddl)));	// 11147 mov     dword ptr [esp+4], offset aXaddl ; "xaddl"
	R(XADD(edx, eax));	// 11148 xadd    edx, eax
#undef op0
#define op0 eax	// 11149 op0 = eax
#undef op1
#define op1 edx	// 11150 op1 = edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11151 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op1));	// 11152 mov     [esp+0Ch], op1
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11153 mov     [esp+8], op0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11154 call    printf
	R(MOV(eax, ebx));	// 11155 mov     eax, ebx
	R(MOV(edx, edi));	// 11156 mov     edx, edi
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddw)));	// 11157 mov     dword ptr [esp+4], offset aXaddw ; "xaddw"
	R(XADD(dx, ax));	// 11158 xadd    dx, ax
#undef op0
#define op0 eax	// 11159 op0 = eax
#undef op1
#define op1 edx	// 11160 op1 = edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11161 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op1));	// 11162 mov     [esp+0Ch], op1
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11163 mov     [esp+8], op0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11164 call    printf
	R(MOV(eax, ebx));	// 11165 mov     eax, ebx
	R(MOV(edx, edi));	// 11166 mov     edx, edi
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddb)));	// 11167 mov     dword ptr [esp+4], offset aXaddb ; "xaddb"
	R(XADD(dl, al));	// 11168 xadd    dl, al
#undef op0
#define op0 eax	// 11169 op0 = eax
#undef op1
#define op1 edx	// 11170 op1 = edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11171 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op1));	// 11172 mov     [esp+0Ch], op1
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11173 mov     [esp+8], op0
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11174 call    printf
	R(MOV(eax, ebx));	// 11175 mov     eax, ebx
	R(XADD(eax, eax));	// 11176 xadd    eax, eax
#undef res
#define res eax	// 11177 res = eax
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aXaddlSameRes08)));	// 11178 mov     dword ptr [esp], offset aXaddlSameRes08 ; "xaddl same res=%08x\n"
	R(MOV(*(dd*)(raddr(ds,esp+4)), res));	// 11179 mov     [esp+4], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11180 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11181 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(eax, ebx));	// 11182 mov     eax, ebx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddl)));	// 11183 mov     dword ptr [esp+4], offset aXaddl ; "xaddl"
	R(XADD(*(dd*)(raddr(ds,ebp+var_20)), eax));	// 11184 xadd    dword ptr [ebp+var_20], eax
#undef op0
#define op0 eax	// 11185 op0 = eax
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));	// 11186 mov     edx, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11187 mov     [esp+8], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 11188 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11189 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11190 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11191 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(eax, ebx));	// 11192 mov     eax, ebx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddw)));	// 11193 mov     dword ptr [esp+4], offset aXaddw ; "xaddw"
	R(XADD(*(dw*)(raddr(ds,ebp+var_20)), ax));	// 11194 xadd    word ptr [ebp+var_20], ax
#undef op0
#define op0 eax	// 11195 op0 = eax
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));	// 11196 mov     edx, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11197 mov     [esp+8], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 11198 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11199 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11200 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11201 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(eax, ebx));	// 11202 mov     eax, ebx
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aXaddb)));	// 11203 mov     dword ptr [esp+4], offset aXaddb ; "xaddb"
	R(XADD(*(raddr(ds,ebp+var_20)), al));	// 11204 xadd    byte ptr [ebp+var_20], al
#undef op0
#define op0 eax	// 11205 op0 = eax
	R(MOV(edx, *(dd*)(raddr(ds,ebp+var_20))));	// 11206 mov     edx, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+8)), op0));	// 11207 mov     [esp+8], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 11208 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxB08lx)));	// 11209 mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11210 call    printf
	R(MOV(edx, ebx));	// 11211 mov     edx, ebx
	R(MOV(eax, edi));	// 11212 mov     eax, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));	// 11213 mov     dword ptr [esp+8], 0FBCA7654h
	R(CMPXCHG(eax, edx));	// 11214 cmpxchg eax, edx
	R(PUSHF);	// 11215 pushf
	R(POP(ecx));	// 11216 pop     ecx
#undef op0
#define op0 edx	// 11217 op0 = edx
#undef op1
#define op1 eax	// 11218 op1 = eax
#undef eflags
#define eflags ecx	// 11219 eflags = ecx
	R(AND(eflags, 0x8D5));	// 11220 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11221 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 11222 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), op1));	// 11223 mov     [esp+10h], op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgl)));	// 11224 mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11225 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11226 call    printf
	R(MOV(edx, ebx));	// 11227 mov     edx, ebx
	R(MOV(eax, edi));	// 11228 mov     eax, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));	// 11229 mov     dword ptr [esp+8], 0FBCA7654h
	R(CMPXCHG(ax, dx));	// 11230 cmpxchg ax, dx
	R(PUSHF);	// 11231 pushf
	R(POP(ecx));	// 11232 pop     ecx
#undef op0
#define op0 edx	// 11233 op0 = edx
#undef op1
#define op1 eax	// 11234 op1 = eax
#undef eflags
#define eflags ecx	// 11235 eflags = ecx
	R(AND(eflags, 0x8D5));	// 11236 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11237 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 11238 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), op1));	// 11239 mov     [esp+10h], op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgw)));	// 11240 mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11241 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11242 call    printf
	R(MOV(edx, ebx));	// 11243 mov     edx, ebx
	R(MOV(eax, edi));	// 11244 mov     eax, edi
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));	// 11245 mov     dword ptr [esp+8], 0FBCA7654h
	R(CMPXCHG(al, dl));	// 11246 cmpxchg al, dl
	R(PUSHF);	// 11247 pushf
	R(POP(ecx));	// 11248 pop     ecx
#undef op0
#define op0 edx	// 11249 op0 = edx
#undef op1
#define op1 eax	// 11250 op1 = eax
#undef eflags
#define eflags ecx	// 11251 eflags = ecx
	R(AND(eflags, 0x8D5));	// 11252 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11253 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 11254 mov     [esp+14h], ecx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), op1));	// 11255 mov     [esp+10h], op1
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgb)));	// 11256 mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11257 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11258 call    printf
	R(MOV(edx, ebx));	// 11259 mov     edx, ebx
	R(MOV(ecx, edi));	// 11260 mov     ecx, edi
	R(MOV(eax, esi));	// 11261 mov     eax, esi
	R(CMPXCHG(ecx, edx));	// 11262 cmpxchg ecx, edx
	R(PUSHF);	// 11263 pushf
	R(POP(eax));	// 11264 pop     eax
#undef op0
#define op0 edx	// 11265 op0 = edx
#undef op1
#define op1 ecx	// 11266 op1 = ecx
#undef eflags
#define eflags eax	// 11267 eflags = eax
	R(AND(eflags, 0x8D5));	// 11268 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), op1));	// 11269 mov     [esp+10h], op1
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11270 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 11271 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFEFDFC));	// 11272 mov     dword ptr [esp+8], 0FFFEFDFCh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgl)));	// 11273 mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11274 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11275 call    printf
	R(MOV(edx, ebx));	// 11276 mov     edx, ebx
	R(MOV(ecx, edi));	// 11277 mov     ecx, edi
	R(MOV(eax, esi));	// 11278 mov     eax, esi
	R(CMPXCHG(cx, dx));	// 11279 cmpxchg cx, dx
	R(PUSHF);	// 11280 pushf
	R(POP(eax));	// 11281 pop     eax
#undef op0
#define op0 edx	// 11282 op0 = edx
#undef op1
#define op1 ecx	// 11283 op1 = ecx
#undef eflags
#define eflags eax	// 11284 eflags = eax
	R(AND(eflags, 0x8D5));	// 11285 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), op1));	// 11286 mov     [esp+10h], op1
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11287 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 11288 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFEFDFC));	// 11289 mov     dword ptr [esp+8], 0FFFEFDFCh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgw)));	// 11290 mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11291 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11292 call    printf
	R(MOV(edx, ebx));	// 11293 mov     edx, ebx
	R(MOV(ecx, edi));	// 11294 mov     ecx, edi
	R(MOV(eax, esi));	// 11295 mov     eax, esi
	R(CMPXCHG(cl, dl));	// 11296 cmpxchg cl, dl
	R(PUSHF);	// 11297 pushf
	R(POP(eax));	// 11298 pop     eax
#undef op0
#define op0 edx	// 11299 op0 = edx
#undef op1
#define op1 ecx	// 11300 op1 = ecx
#undef eflags
#define eflags eax	// 11301 eflags = eax
	R(AND(eflags, 0x8D5));	// 11302 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), op1));	// 11303 mov     [esp+10h], op1
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11304 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 11305 mov     [esp+14h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFEFDFC));	// 11306 mov     dword ptr [esp+8], 0FFFEFDFCh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgb)));	// 11307 mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11308 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11309 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11310 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(edx, ebx));	// 11311 mov     edx, ebx
	R(MOV(eax, edi));	// 11312 mov     eax, edi
	R(CMPXCHG(*(dd*)(raddr(ds,ebp+var_20)), edx));	// 11313 cmpxchg dword ptr [ebp+var_20], edx
	R(PUSHF);	// 11314 pushf
	R(POP(eax));	// 11315 pop     eax
#undef op0
#define op0 edx	// 11316 op0 = edx
#undef eflags
#define eflags eax	// 11317 eflags = eax
	R(AND(eflags, 0x8D5));	// 11318 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11319 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 11320 mov     [esp+14h], eax
	R(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));	// 11321 mov     eax, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 11322 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));	// 11323 mov     dword ptr [esp+8], 0FBCA7654h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgl)));	// 11324 mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11325 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11326 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11327 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(edx, ebx));	// 11328 mov     edx, ebx
	R(MOV(eax, edi));	// 11329 mov     eax, edi
	R(CMPXCHG(*(dw*)(raddr(ds,ebp+var_20)), dx));	// 11330 cmpxchg word ptr [ebp+var_20], dx
	R(PUSHF);	// 11331 pushf
	R(POP(eax));	// 11332 pop     eax
#undef op0
#define op0 edx	// 11333 op0 = edx
#undef eflags
#define eflags eax	// 11334 eflags = eax
	R(AND(eflags, 0x8D5));	// 11335 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11336 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 11337 mov     [esp+14h], eax
	R(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));	// 11338 mov     eax, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 11339 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));	// 11340 mov     dword ptr [esp+8], 0FBCA7654h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgw)));	// 11341 mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11342 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11343 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11344 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(edx, ebx));	// 11345 mov     edx, ebx
	R(MOV(eax, edi));	// 11346 mov     eax, edi
	R(CMPXCHG(*(raddr(ds,ebp+var_20)), dl));	// 11347 cmpxchg byte ptr [ebp+var_20], dl
	R(PUSHF);	// 11348 pushf
	R(POP(edi));	// 11349 pop     edi
#undef op0
#define op0 edx	// 11350 op0 = edx
#undef eflags
#define eflags edi	// 11351 eflags = edi
	R(AND(eflags, 0x8D5));	// 11352 and     eflags, 8D5h
	R(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));	// 11353 mov     eax, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), edi));	// 11354 mov     [esp+14h], edi
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11355 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 11356 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FBCA7654));	// 11357 mov     dword ptr [esp+8], 0FBCA7654h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgb)));	// 11358 mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11359 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11360 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11361 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(edx, ebx));	// 11362 mov     edx, ebx
	R(MOV(eax, esi));	// 11363 mov     eax, esi
	R(CMPXCHG(*(dd*)(raddr(ds,ebp+var_20)), edx));	// 11364 cmpxchg dword ptr [ebp+var_20], edx
	R(PUSHF);	// 11365 pushf
	R(POP(eax));	// 11366 pop     eax
#undef op0
#define op0 edx	// 11367 op0 = edx
#undef eflags
#define eflags eax	// 11368 eflags = eax
	R(AND(eflags, 0x8D5));	// 11369 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11370 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 11371 mov     [esp+14h], eax
	R(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));	// 11372 mov     eax, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 11373 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFEFDFC));	// 11374 mov     dword ptr [esp+8], 0FFFEFDFCh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgl)));	// 11375 mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11376 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11377 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11378 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(edx, ebx));	// 11379 mov     edx, ebx
	R(MOV(eax, esi));	// 11380 mov     eax, esi
	R(CMPXCHG(*(dw*)(raddr(ds,ebp+var_20)), dx));	// 11381 cmpxchg word ptr [ebp+var_20], dx
	R(PUSHF);	// 11382 pushf
	R(POP(eax));	// 11383 pop     eax
#undef op0
#define op0 edx	// 11384 op0 = edx
#undef eflags
#define eflags eax	// 11385 eflags = eax
	R(AND(eflags, 0x8D5));	// 11386 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11387 mov     [esp+0Ch], op0
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), eax));	// 11388 mov     [esp+14h], eax
	R(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));	// 11389 mov     eax, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 11390 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFEFDFC));	// 11391 mov     dword ptr [esp+8], 0FFFEFDFCh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgw)));	// 11392 mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11393 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11394 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x0FBCA7654));	// 11395 mov     dword ptr [ebp+var_20], 0FBCA7654h
	R(MOV(eax, esi));	// 11396 mov     eax, esi
	R(MOV(edi, 0x12345));	// 11397 mov     edi, 12345h
	R(CMPXCHG(*(raddr(ds,ebp+var_20)), bl));	// 11398 cmpxchg byte ptr [ebp+var_20], bl
	R(PUSHF);	// 11399 pushf
	R(POP(esi));	// 11400 pop     esi
#undef op0
#define op0 ebx	// 11401 op0 = ebx
#undef eflags
#define eflags esi	// 11402 eflags = esi
	R(AND(eflags, 0x8D5));	// 11403 and     eflags, 8D5h
	R(MOV(eax, *(dd*)(raddr(ds,ebp+var_20))));	// 11404 mov     eax, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), esi));	// 11405 mov     [esp+14h], esi
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), op0));	// 11406 mov     [esp+0Ch], op0
	R(MOV(esi, 0x6789ABCD));	// 11407 mov     esi, 6789ABCDh
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax));	// 11408 mov     [esp+10h], eax
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x0FFFEFDFC));	// 11409 mov     dword ptr [esp+8], 0FFFEFDFCh
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpxchgb)));	// 11410 mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEax08lxA08l)));	// 11411 mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
	R(MOV(op0, 0x32432434));	// 11412 mov     op0, 32432434h
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11413 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x65423456));	// 11414 mov     dword ptr [ebp+var_20], 65423456h
	R(MOV(*(dd*)(raddr(ds,ebp+var_20+4)), 0x0FBCA7));	// 11415 mov     dword ptr [ebp+var_20+4], 0FBCA7h
	R(MOV(eax, esi));	// 11416 mov     eax, esi
	R(MOV(edx, edi));	// 11417 mov     edx, edi
	R(MOV(ecx, 0x65324));	// 11418 mov     ecx, 65324h
	R(CMPXCHG8B(*(dw*)(raddr(ds,ebp+var_20))));	// 11419 cmpxchg8b [ebp+var_20]
	R(PUSHF);	// 11420 pushf
	R(POP(ecx));	// 11421 pop     ecx
	R(AND(ecx, 0x40));	// 11422 and     ecx, 40h
	R(MOV(*(dd*)(raddr(ds,ebp+edx_0)), edx));	// 11423 mov     [ebp+edx_0], edx
#undef eax_0
#define eax_0 eax	// 11424 eax_0 = eax
#undef edx_0_0
#define edx_0_0 edx	// 11425 edx_0_0 = edx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx));	// 11426 mov     [esp+14h], ecx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20+4))));	// 11427 mov     ecx, dword ptr [ebp+var_20+4]
	R(MOV(edx_0_0, *(dd*)(raddr(ds,ebp+var_20))));	// 11428 mov     edx_0_0, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ecx));	// 11429 mov     [esp+10h], ecx
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+edx_0))));	// 11430 mov     ecx, [ebp+edx_0]
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edx));	// 11431 mov     [esp+0Ch], edx
	R(MOV(*(dd*)(raddr(ds,esp+8)), ecx));	// 11432 mov     [esp+8], ecx
	R(MOV(*(dd*)(raddr(ds,esp+4)), eax_0));	// 11433 mov     [esp+4], eax_0
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aCmpxchg8bEax08)));	// 11434 mov     dword ptr [esp], offset aCmpxchg8bEax08 ; "cmpxchg8b: eax=%08lx edx=%08lx op1=%016"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11435 call    printf
	R(MOV(*(dd*)(raddr(ds,ebp+var_20)), 0x6789ABCD));	// 11436 mov     dword ptr [ebp+var_20], 6789ABCDh
	R(MOV(*(dd*)(raddr(ds,ebp+var_20+4)), 0x12345));	// 11437 mov     dword ptr [ebp+var_20+4], 12345h
	R(MOV(eax, esi));	// 11438 mov     eax, esi
	R(MOV(edx, edi));	// 11439 mov     edx, edi
	R(MOV(ecx, 0x65324));	// 11440 mov     ecx, 65324h
	R(CMPXCHG8B(*(dw*)(raddr(ds,ebp+var_20))));	// 11441 cmpxchg8b [ebp+var_20]
	R(PUSHF);	// 11442 pushf
	R(POP(ebx));	// 11443 pop     ebx
#undef eax_0
#define eax_0 eax	// 11444 eax_0 = eax
#undef edx_0_0
#define edx_0_0 edx	// 11445 edx_0_0 = edx
#undef eflags
#define eflags ebx	// 11446 eflags = ebx
	R(AND(eflags, 0x40));	// 11447 and     eflags, 40h
	R(MOV(ecx, *(dd*)(raddr(ds,ebp+var_20))));	// 11448 mov     ecx, dword ptr [ebp+var_20]
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ebx));	// 11449 mov     [esp+14h], ebx
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+var_20+4))));	// 11450 mov     ebx, dword ptr [ebp+var_20+4]
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), ebx));	// 11451 mov     [esp+10h], ebx
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), ecx));	// 11452 mov     [esp+0Ch], ecx
	R(MOV(*(dd*)(raddr(ds,esp+8)), edx_0_0));	// 11453 mov     [esp+8], edx_0_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), eax_0));	// 11454 mov     [esp+4], eax_0
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aCmpxchg8bEax08)));	// 11455 mov     dword ptr [esp], offset aCmpxchg8bEax08 ; "cmpxchg8b: eax=%08lx edx=%08lx op1=%016"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11456 call    printf
	R(ADD(esp, 0x4C));	// 11457 add     esp, 4Ch
	R(POP(ebx));	// 11458 pop     ebx
	R(POP(esi));	// 11459 pop     esi
	R(POP(edi));	// 11460 pop     edi
	R(POP(ebp));	// 11461 pop     ebp
	R(RETN);	// 11462 retn
 // Procedure test_misc() start
test_misc:
#undef table
#define table -0x108	// 11474 table = -0x108
	R(PUSH(ebp));	// 11477 push    ebp
	eax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);	// 11478 xor     eax, eax
	R(MOV(ebp, esp));	// 11479 mov     ebp, esp
	R(PUSH(ebx));	// 11480 push    ebx
	R(SUB(esp, 0x114));	// 11481 sub     esp, 114h
loc_40b72a:
#undef i
#define i eax	// 11484 i = eax
	R(MOV(dl, al));	// 11485 mov     dl, al
	R(ebx = ebp+table);	// 11486 lea     ebx, [ebp+table]
	R(NEG(edx));	// 11487 neg     edx
	R(MOV(*(raddr(ds,ebp+i+table)), dl));	// 11488 mov     [ebp+i+table], dl
	R(INC(i));	// 11489 inc     i
	R(CMP(i, 0x100));	// 11490 cmp     i, 100h
		R(JNZ(loc_40b72a));	// 11491 jnz     short loc_40B72A
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aXlatEax08lx)));	// 11492 mov     dword ptr [esp], offset aXlatEax08lx ; "xlat: EAX=%08lx\n"
	R(MOV(i, 0x12345678));	// 11493 mov     i, 12345678h
	R(XLAT);	// 11494 xlat
#undef res
#define res eax	// 11495 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), res));	// 11496 mov     [esp+4], res
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11497 call    printf
	R(PUSH(0x0BC6058));	// 11498 push    0BC6058h
	R(PUSH(0x9ABCDEF));	// 11499 push    9ABCDEFh
	R(POP(*(dd*)(raddr(ds,esp))));	// 11500 pop     dword ptr [esp]
	R(POP(eax));	// 11501 pop     eax
#undef res
#define res eax	// 11502 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), res));	// 11503 mov     [esp+4], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aPoplEsp08lx)));	// 11504 mov     dword ptr [esp], offset aPoplEsp08lx ; "popl esp=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11505 call    printf
	R(PUSH(0x0BC6058));	// 11506 push    0BC6058h
	R(PUSH(0x9ABCDEF));	// 11507 push    9ABCDEFh
	R(POP(*(dw*)(raddr(ds,esp))));	// 11508 pop     small word ptr [esp]
	R(ADD(esp, 2));	// 11509 add     esp, 2
	R(POP(eax));	// 11510 pop     eax
#undef res
#define res eax	// 11511 res = eax
	R(MOV(*(dd*)(raddr(ds,esp+4)), res));	// 11512 mov     [esp+4], res
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,aPopwEsp08lx)));	// 11513 mov     dword ptr [esp], offset aPopwEsp08lx ; "popw esp=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11514 call    printf
	R(ADD(esp, 0x114));	// 11515 add     esp, 114h
	R(POP(ebx));	// 11516 pop     ebx
	R(POP(ebp));	// 11517 pop     ebp
	R(RETN);	// 11518 retn
 // Procedure test_string() start
test_string:
	R(PUSH(ebp));	// 11530 push    ebp
	eax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);	// 11531 xor     eax, eax
	R(MOV(ebp, esp));	// 11532 mov     ebp, esp
	R(PUSH(edi));	// 11533 push    edi
	R(PUSH(esi));	// 11534 push    esi
	R(PUSH(ebx));	// 11535 push    ebx
	R(SUB(esp, 0x2C));	// 11536 sub     esp, 2Ch
loc_40b7ad:
#undef i
#define i eax	// 11539 i = eax
	R(edx = i+0x56);	// 11540 lea     edx, [i+56h]
	R(INC(i));	// 11541 inc     i
	R(MOV(*(raddr(ds,offset(_bss,byte_41411F)+eax)), dl));	// 11542 mov     ds:byte_41411F[eax], dl
#undef i
#define i eax	// 11543 i = eax
	R(CMP(i, 0x1000));	// 11544 cmp     i, 1000h
		R(JNZ(loc_40b7ad));	// 11545 jnz     short loc_40B7AD
	R(MOV(ebx, offset(_bss,str_buffer)+0x800));	// 11546 mov     ebx, (offset str_buffer+800h)
#undef esi_0
#define esi_0 ebx	// 11547 esi_0 = ebx
	R(MOV(edi, offset(_bss,str_buffer)+0x810));	// 11548 mov     edi, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11549 edi_0 = edi
	R(MOV(esi, esi_0));	// 11550 mov     esi, esi_0
	R(MOV(i, 0x12345678));	// 11551 mov     i, 12345678h
	R(MOV(ecx, 0x11));	// 11552 mov     ecx, 11h
	R(PUSH(0));	// 11553 push    0
	R(POPF);	// 11554 popf
STOSB;	// 11555 stosb
	R(CLD);	// 11556 cld
	R(PUSHF);	// 11557 pushf
	R(POP(edx));	// 11558 pop     edx
#undef esi_0
#define esi_0 esi	// 11559 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11560 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11561 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11562 eflags = edx
	R(AND(eflags, 0x8D5));	// 11563 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11564 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11565 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11566 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11567 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11568 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosb)));	// 11569 mov     dword ptr [esp+4], offset aStosb ; "stosb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11570 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11571 call    printf
	R(MOV(esi_0, ebx));	// 11572 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11573 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11574 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11575 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11576 mov     ecx, 11h
	R(PUSH(0));	// 11577 push    0
	R(POPF);	// 11578 popf
STOSW;	// 11579 stosw
	R(CLD);	// 11580 cld
	R(PUSHF);	// 11581 pushf
	R(POP(edx));	// 11582 pop     edx
#undef esi_0
#define esi_0 esi	// 11583 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11584 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11585 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11586 eflags = edx
	R(AND(eflags, 0x8D5));	// 11587 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11588 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11589 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11590 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11591 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11592 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosw)));	// 11593 mov     dword ptr [esp+4], offset aStosw ; "stosw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11594 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11595 call    printf
	R(MOV(esi_0, ebx));	// 11596 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11597 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11598 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11599 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11600 mov     ecx, 11h
	R(PUSH(0));	// 11601 push    0
	R(POPF);	// 11602 popf
STOSD;	// 11603 stosd
	R(CLD);	// 11604 cld
	R(PUSHF);	// 11605 pushf
	R(POP(edx));	// 11606 pop     edx
#undef esi_0
#define esi_0 esi	// 11607 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11608 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11609 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11610 eflags = edx
	R(AND(eflags, 0x8D5));	// 11611 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11612 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11613 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11614 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11615 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11616 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosl)));	// 11617 mov     dword ptr [esp+4], offset aStosl ; "stosl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11618 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11619 call    printf
	R(MOV(esi_0, ebx));	// 11620 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11621 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11622 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11623 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11624 mov     ecx, 11h
	R(PUSH(0));	// 11625 push    0
	R(POPF);	// 11626 popf
	R(STD);	// 11627 std
STOSB;	// 11628 stosb
	R(CLD);	// 11629 cld
	R(PUSHF);	// 11630 pushf
	R(POP(edx));	// 11631 pop     edx
#undef esi_0
#define esi_0 esi	// 11632 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11633 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11634 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11635 eflags = edx
	R(AND(eflags, 0x8D5));	// 11636 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11637 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11638 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11639 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11640 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11641 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosb)));	// 11642 mov     dword ptr [esp+4], offset aStosb ; "stosb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11643 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11644 call    printf
	R(MOV(esi_0, ebx));	// 11645 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11646 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11647 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11648 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11649 mov     ecx, 11h
	R(PUSH(0));	// 11650 push    0
	R(POPF);	// 11651 popf
	R(STD);	// 11652 std
STOSW;	// 11653 stosw
	R(CLD);	// 11654 cld
	R(PUSHF);	// 11655 pushf
	R(POP(edx));	// 11656 pop     edx
#undef esi_0
#define esi_0 esi	// 11657 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11658 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11659 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11660 eflags = edx
	R(AND(eflags, 0x8D5));	// 11661 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11662 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11663 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11664 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11665 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11666 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosw)));	// 11667 mov     dword ptr [esp+4], offset aStosw ; "stosw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11668 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11669 call    printf
	R(MOV(esi_0, ebx));	// 11670 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11671 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11672 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11673 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11674 mov     ecx, 11h
	R(PUSH(0));	// 11675 push    0
	R(POPF);	// 11676 popf
	R(STD);	// 11677 std
STOSD;	// 11678 stosd
	R(CLD);	// 11679 cld
	R(PUSHF);	// 11680 pushf
	R(POP(edx));	// 11681 pop     edx
#undef esi_0
#define esi_0 esi	// 11682 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11683 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11684 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11685 eflags = edx
	R(AND(eflags, 0x8D5));	// 11686 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11687 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11688 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11689 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11690 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11691 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aStosl)));	// 11692 mov     dword ptr [esp+4], offset aStosl ; "stosl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11693 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11694 call    printf
	R(MOV(esi_0, ebx));	// 11695 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11696 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11697 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11698 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11699 mov     ecx, 11h
	R(PUSH(0));	// 11700 push    0
	R(POPF);	// 11701 popf
	REP	// 0 rep
STOSB;	// 0 stosb
	R(CLD);	// 11703 cld
	R(PUSHF);	// 11704 pushf
	R(POP(edx));	// 11705 pop     edx
#undef esi_0
#define esi_0 esi	// 11706 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11707 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11708 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11709 eflags = edx
	R(AND(eflags, 0x8D5));	// 11710 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11711 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11712 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11713 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11714 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11715 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosb)));	// 11716 mov     dword ptr [esp+4], offset aRepStosb ; "rep stosb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11717 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11718 call    printf
	R(MOV(esi_0, ebx));	// 11719 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11720 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11721 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11722 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11723 mov     ecx, 11h
	R(PUSH(0));	// 11724 push    0
	R(POPF);	// 11725 popf
	REP	// 0 rep
STOSW;	// 0 stosw
	R(CLD);	// 11727 cld
	R(PUSHF);	// 11728 pushf
	R(POP(edx));	// 11729 pop     edx
#undef esi_0
#define esi_0 esi	// 11730 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11731 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11732 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11733 eflags = edx
	R(AND(eflags, 0x8D5));	// 11734 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11735 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11736 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11737 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11738 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11739 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosw)));	// 11740 mov     dword ptr [esp+4], offset aRepStosw ; "rep stosw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11741 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11742 call    printf
	R(MOV(esi_0, ebx));	// 11743 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11744 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11745 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11746 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11747 mov     ecx, 11h
	R(PUSH(0));	// 11748 push    0
	R(POPF);	// 11749 popf
	REP	// 0 rep
STOSD;	// 0 stosd
	R(CLD);	// 11751 cld
	R(PUSHF);	// 11752 pushf
	R(POP(edx));	// 11753 pop     edx
#undef esi_0
#define esi_0 esi	// 11754 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11755 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11756 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11757 eflags = edx
	R(AND(eflags, 0x8D5));	// 11758 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11759 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11760 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11761 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11762 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11763 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosl)));	// 11764 mov     dword ptr [esp+4], offset aRepStosl ; "rep stosl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11765 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11766 call    printf
	R(MOV(esi_0, ebx));	// 11767 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11768 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11769 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11770 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11771 mov     ecx, 11h
	R(PUSH(0));	// 11772 push    0
	R(POPF);	// 11773 popf
	R(STD);	// 11774 std
	REP	// 0 rep
STOSB;	// 0 stosb
	R(CLD);	// 11776 cld
	R(PUSHF);	// 11777 pushf
	R(POP(edx));	// 11778 pop     edx
#undef esi_0
#define esi_0 esi	// 11779 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11780 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11781 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11782 eflags = edx
	R(AND(eflags, 0x8D5));	// 11783 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11784 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11785 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11786 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11787 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11788 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosb)));	// 11789 mov     dword ptr [esp+4], offset aRepStosb ; "rep stosb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11790 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11791 call    printf
	R(MOV(esi_0, ebx));	// 11792 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11793 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11794 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11795 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11796 mov     ecx, 11h
	R(PUSH(0));	// 11797 push    0
	R(POPF);	// 11798 popf
	R(STD);	// 11799 std
	REP	// 0 rep
STOSW;	// 0 stosw
	R(CLD);	// 11801 cld
	R(PUSHF);	// 11802 pushf
	R(POP(edx));	// 11803 pop     edx
#undef esi_0
#define esi_0 esi	// 11804 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11805 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11806 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11807 eflags = edx
	R(AND(eflags, 0x8D5));	// 11808 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11809 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11810 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11811 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11812 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11813 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosw)));	// 11814 mov     dword ptr [esp+4], offset aRepStosw ; "rep stosw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11815 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11816 call    printf
	R(MOV(esi_0, ebx));	// 11817 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11818 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11819 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11820 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11821 mov     ecx, 11h
	R(PUSH(0));	// 11822 push    0
	R(POPF);	// 11823 popf
	R(STD);	// 11824 std
	REP	// 0 rep
STOSD;	// 0 stosd
	R(CLD);	// 11826 cld
	R(PUSHF);	// 11827 pushf
	R(POP(edx));	// 11828 pop     edx
#undef esi_0
#define esi_0 esi	// 11829 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11830 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11831 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11832 eflags = edx
	R(AND(eflags, 0x8D5));	// 11833 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11834 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11835 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11836 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11837 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11838 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepStosl)));	// 11839 mov     dword ptr [esp+4], offset aRepStosl ; "rep stosl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11840 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11841 call    printf
	R(MOV(esi_0, ebx));	// 11842 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11843 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11844 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11845 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11846 mov     ecx, 11h
	R(PUSH(0));	// 11847 push    0
	R(POPF);	// 11848 popf
LODSB;	// 11849 lodsb
	R(CLD);	// 11850 cld
	R(PUSHF);	// 11851 pushf
	R(POP(edx));	// 11852 pop     edx
#undef esi_0
#define esi_0 esi	// 11853 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11854 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11855 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11856 eflags = edx
	R(AND(eflags, 0x8D5));	// 11857 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11858 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11859 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11860 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11861 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11862 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsb)));	// 11863 mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11864 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11865 call    printf
	R(MOV(esi_0, ebx));	// 11866 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11867 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11868 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11869 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11870 mov     ecx, 11h
	R(PUSH(0));	// 11871 push    0
	R(POPF);	// 11872 popf
LODSW;	// 11873 lodsw
	R(CLD);	// 11874 cld
	R(PUSHF);	// 11875 pushf
	R(POP(edx));	// 11876 pop     edx
#undef esi_0
#define esi_0 esi	// 11877 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11878 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11879 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11880 eflags = edx
	R(AND(eflags, 0x8D5));	// 11881 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11882 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11883 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11884 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11885 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11886 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsw)));	// 11887 mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11888 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11889 call    printf
	R(MOV(esi_0, ebx));	// 11890 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11891 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11892 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11893 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11894 mov     ecx, 11h
	R(PUSH(0));	// 11895 push    0
	R(POPF);	// 11896 popf
LODSD;	// 11897 lodsd
	R(CLD);	// 11898 cld
	R(PUSHF);	// 11899 pushf
	R(POP(edx));	// 11900 pop     edx
#undef esi_0
#define esi_0 esi	// 11901 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11902 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11903 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11904 eflags = edx
	R(AND(eflags, 0x8D5));	// 11905 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11906 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11907 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11908 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11909 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11910 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsl)));	// 11911 mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11912 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11913 call    printf
	R(MOV(esi_0, ebx));	// 11914 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11915 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11916 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11917 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11918 mov     ecx, 11h
	R(PUSH(0));	// 11919 push    0
	R(POPF);	// 11920 popf
	R(STD);	// 11921 std
LODSB;	// 11922 lodsb
	R(CLD);	// 11923 cld
	R(PUSHF);	// 11924 pushf
	R(POP(edx));	// 11925 pop     edx
#undef esi_0
#define esi_0 esi	// 11926 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11927 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11928 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11929 eflags = edx
	R(AND(eflags, 0x8D5));	// 11930 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11931 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11932 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11933 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11934 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11935 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsb)));	// 11936 mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11937 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11938 call    printf
	R(MOV(esi_0, ebx));	// 11939 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11940 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11941 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11942 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11943 mov     ecx, 11h
	R(PUSH(0));	// 11944 push    0
	R(POPF);	// 11945 popf
	R(STD);	// 11946 std
LODSW;	// 11947 lodsw
	R(CLD);	// 11948 cld
	R(PUSHF);	// 11949 pushf
	R(POP(edx));	// 11950 pop     edx
#undef esi_0
#define esi_0 esi	// 11951 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11952 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11953 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11954 eflags = edx
	R(AND(eflags, 0x8D5));	// 11955 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11956 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11957 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11958 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11959 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11960 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsw)));	// 11961 mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11962 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11963 call    printf
	R(MOV(esi_0, ebx));	// 11964 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11965 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11966 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11967 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11968 mov     ecx, 11h
	R(PUSH(0));	// 11969 push    0
	R(POPF);	// 11970 popf
	R(STD);	// 11971 std
LODSD;	// 11972 lodsd
	R(CLD);	// 11973 cld
	R(PUSHF);	// 11974 pushf
	R(POP(edx));	// 11975 pop     edx
#undef esi_0
#define esi_0 esi	// 11976 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 11977 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 11978 ecx_0 = ecx
#undef eflags
#define eflags edx	// 11979 eflags = edx
	R(AND(eflags, 0x8D5));	// 11980 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 11981 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 11982 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 11983 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 11984 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 11985 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsl)));	// 11986 mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 11987 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 11988 call    printf
	R(MOV(esi_0, ebx));	// 11989 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 11990 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 11991 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 11992 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 11993 mov     ecx, 11h
	R(PUSH(0));	// 11994 push    0
	R(POPF);	// 11995 popf
	REP	// 0 rep
LODSB;	// 0 lodsb
	R(CLD);	// 11997 cld
	R(PUSHF);	// 11998 pushf
	R(POP(edx));	// 11999 pop     edx
#undef esi_0
#define esi_0 esi	// 12000 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12001 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12002 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12003 eflags = edx
	R(AND(eflags, 0x8D5));	// 12004 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12005 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12006 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12007 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12008 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12009 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsb)));	// 12010 mov     dword ptr [esp+4], offset aRepLodsb ; "rep lodsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12011 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12012 call    printf
	R(MOV(esi_0, ebx));	// 12013 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12014 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12015 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12016 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12017 mov     ecx, 11h
	R(PUSH(0));	// 12018 push    0
	R(POPF);	// 12019 popf
	REP	// 0 rep
LODSW;	// 0 lodsw
	R(CLD);	// 12021 cld
	R(PUSHF);	// 12022 pushf
	R(POP(edx));	// 12023 pop     edx
#undef esi_0
#define esi_0 esi	// 12024 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12025 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12026 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12027 eflags = edx
	R(AND(eflags, 0x8D5));	// 12028 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12029 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12030 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12031 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12032 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12033 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsw)));	// 12034 mov     dword ptr [esp+4], offset aRepLodsw ; "rep lodsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12035 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12036 call    printf
	R(MOV(esi_0, ebx));	// 12037 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12038 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12039 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12040 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12041 mov     ecx, 11h
	R(PUSH(0));	// 12042 push    0
	R(POPF);	// 12043 popf
	REP	// 0 rep
LODSD;	// 0 lodsd
	R(CLD);	// 12045 cld
	R(PUSHF);	// 12046 pushf
	R(POP(edx));	// 12047 pop     edx
#undef esi_0
#define esi_0 esi	// 12048 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12049 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12050 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12051 eflags = edx
	R(AND(eflags, 0x8D5));	// 12052 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12053 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12054 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12055 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12056 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12057 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsl)));	// 12058 mov     dword ptr [esp+4], offset aRepLodsl ; "rep lodsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12059 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12060 call    printf
	R(MOV(esi_0, ebx));	// 12061 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12062 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12063 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12064 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12065 mov     ecx, 11h
	R(PUSH(0));	// 12066 push    0
	R(POPF);	// 12067 popf
	R(STD);	// 12068 std
	REP	// 0 rep
LODSB;	// 0 lodsb
	R(CLD);	// 12070 cld
	R(PUSHF);	// 12071 pushf
	R(POP(edx));	// 12072 pop     edx
#undef esi_0
#define esi_0 esi	// 12073 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12074 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12075 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12076 eflags = edx
	R(AND(eflags, 0x8D5));	// 12077 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12078 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12079 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12080 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12081 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12082 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsb)));	// 12083 mov     dword ptr [esp+4], offset aRepLodsb ; "rep lodsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12084 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12085 call    printf
	R(MOV(esi_0, ebx));	// 12086 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12087 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12088 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12089 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12090 mov     ecx, 11h
	R(PUSH(0));	// 12091 push    0
	R(POPF);	// 12092 popf
	R(STD);	// 12093 std
	REP	// 0 rep
LODSW;	// 0 lodsw
	R(CLD);	// 12095 cld
	R(PUSHF);	// 12096 pushf
	R(POP(edx));	// 12097 pop     edx
#undef esi_0
#define esi_0 esi	// 12098 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12099 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12100 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12101 eflags = edx
	R(AND(eflags, 0x8D5));	// 12102 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12103 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12104 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12105 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12106 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12107 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsw)));	// 12108 mov     dword ptr [esp+4], offset aRepLodsw ; "rep lodsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12109 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12110 call    printf
	R(MOV(esi_0, ebx));	// 12111 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12112 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12113 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12114 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12115 mov     ecx, 11h
	R(PUSH(0));	// 12116 push    0
	R(POPF);	// 12117 popf
	R(STD);	// 12118 std
	REP	// 0 rep
LODSD;	// 0 lodsd
	R(CLD);	// 12120 cld
	R(PUSHF);	// 12121 pushf
	R(POP(edx));	// 12122 pop     edx
#undef esi_0
#define esi_0 esi	// 12123 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12124 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12125 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12126 eflags = edx
	R(AND(eflags, 0x8D5));	// 12127 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12128 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12129 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12130 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12131 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12132 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepLodsl)));	// 12133 mov     dword ptr [esp+4], offset aRepLodsl ; "rep lodsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12134 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12135 call    printf
	R(MOV(esi_0, ebx));	// 12136 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12137 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12138 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12139 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12140 mov     ecx, 11h
	R(PUSH(0));	// 12141 push    0
	R(POPF);	// 12142 popf
MOVSB;	// 12143 movsb
	R(CLD);	// 12144 cld
	R(PUSHF);	// 12145 pushf
	R(POP(edx));	// 12146 pop     edx
#undef esi_0
#define esi_0 esi	// 12147 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12148 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12149 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12150 eflags = edx
	R(AND(eflags, 0x8D5));	// 12151 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12152 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12153 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12154 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12155 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12156 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsb)));	// 12157 mov     dword ptr [esp+4], offset aMovsb ; "movsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12158 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12159 call    printf
	R(MOV(esi_0, ebx));	// 12160 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12161 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12162 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12163 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12164 mov     ecx, 11h
	R(PUSH(0));	// 12165 push    0
	R(POPF);	// 12166 popf
MOVSW;	// 12167 movsw
	R(CLD);	// 12168 cld
	R(PUSHF);	// 12169 pushf
	R(POP(edx));	// 12170 pop     edx
#undef esi_0
#define esi_0 esi	// 12171 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12172 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12173 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12174 eflags = edx
	R(AND(eflags, 0x8D5));	// 12175 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12176 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12177 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12178 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12179 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12180 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsw)));	// 12181 mov     dword ptr [esp+4], offset aMovsw ; "movsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12182 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12183 call    printf
	R(MOV(esi_0, ebx));	// 12184 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12185 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12186 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12187 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12188 mov     ecx, 11h
	R(PUSH(0));	// 12189 push    0
	R(POPF);	// 12190 popf
MOVSD;	// 12191 movsd
	R(CLD);	// 12192 cld
	R(PUSHF);	// 12193 pushf
	R(POP(edx));	// 12194 pop     edx
#undef esi_0
#define esi_0 esi	// 12195 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12196 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12197 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12198 eflags = edx
	R(AND(eflags, 0x8D5));	// 12199 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12200 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12201 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12202 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12203 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12204 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsl)));	// 12205 mov     dword ptr [esp+4], offset aMovsl ; "movsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12206 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12207 call    printf
	R(MOV(esi_0, ebx));	// 12208 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12209 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12210 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12211 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12212 mov     ecx, 11h
	R(PUSH(0));	// 12213 push    0
	R(POPF);	// 12214 popf
	R(STD);	// 12215 std
MOVSB;	// 12216 movsb
	R(CLD);	// 12217 cld
	R(PUSHF);	// 12218 pushf
	R(POP(edx));	// 12219 pop     edx
#undef esi_0
#define esi_0 esi	// 12220 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12221 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12222 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12223 eflags = edx
	R(AND(eflags, 0x8D5));	// 12224 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12225 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12226 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12227 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12228 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12229 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsb)));	// 12230 mov     dword ptr [esp+4], offset aMovsb ; "movsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12231 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12232 call    printf
	R(MOV(esi_0, ebx));	// 12233 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12234 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12235 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12236 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12237 mov     ecx, 11h
	R(PUSH(0));	// 12238 push    0
	R(POPF);	// 12239 popf
	R(STD);	// 12240 std
MOVSW;	// 12241 movsw
	R(CLD);	// 12242 cld
	R(PUSHF);	// 12243 pushf
	R(POP(edx));	// 12244 pop     edx
#undef esi_0
#define esi_0 esi	// 12245 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12246 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12247 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12248 eflags = edx
	R(AND(eflags, 0x8D5));	// 12249 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12250 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12251 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12252 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12253 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12254 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsw)));	// 12255 mov     dword ptr [esp+4], offset aMovsw ; "movsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12256 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12257 call    printf
	R(MOV(esi_0, ebx));	// 12258 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12259 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12260 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12261 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12262 mov     ecx, 11h
	R(PUSH(0));	// 12263 push    0
	R(POPF);	// 12264 popf
	R(STD);	// 12265 std
MOVSD;	// 12266 movsd
	R(CLD);	// 12267 cld
	R(PUSHF);	// 12268 pushf
	R(POP(edx));	// 12269 pop     edx
#undef esi_0
#define esi_0 esi	// 12270 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12271 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12272 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12273 eflags = edx
	R(AND(eflags, 0x8D5));	// 12274 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12275 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12276 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12277 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12278 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12279 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aMovsl)));	// 12280 mov     dword ptr [esp+4], offset aMovsl ; "movsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12281 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12282 call    printf
	R(MOV(esi_0, ebx));	// 12283 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12284 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12285 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12286 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12287 mov     ecx, 11h
	R(PUSH(0));	// 12288 push    0
	R(POPF);	// 12289 popf
	REP	// 0 rep
MOVSB;	// 0 movsb
	R(CLD);	// 12291 cld
	R(PUSHF);	// 12292 pushf
	R(POP(edx));	// 12293 pop     edx
#undef esi_0
#define esi_0 esi	// 12294 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12295 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12296 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12297 eflags = edx
	R(AND(eflags, 0x8D5));	// 12298 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12299 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12300 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12301 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12302 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12303 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsb)));	// 12304 mov     dword ptr [esp+4], offset aRepMovsb ; "rep movsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12305 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12306 call    printf
	R(MOV(esi_0, ebx));	// 12307 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12308 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12309 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12310 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12311 mov     ecx, 11h
	R(PUSH(0));	// 12312 push    0
	R(POPF);	// 12313 popf
	REP	// 0 rep
MOVSW;	// 0 movsw
	R(CLD);	// 12315 cld
	R(PUSHF);	// 12316 pushf
	R(POP(edx));	// 12317 pop     edx
#undef esi_0
#define esi_0 esi	// 12318 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12319 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12320 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12321 eflags = edx
	R(AND(eflags, 0x8D5));	// 12322 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12323 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12324 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12325 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12326 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12327 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsw)));	// 12328 mov     dword ptr [esp+4], offset aRepMovsw ; "rep movsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12329 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12330 call    printf
	R(MOV(esi_0, ebx));	// 12331 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12332 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12333 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12334 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12335 mov     ecx, 11h
	R(PUSH(0));	// 12336 push    0
	R(POPF);	// 12337 popf
	REP	// 0 rep
MOVSD;	// 0 movsd
	R(CLD);	// 12339 cld
	R(PUSHF);	// 12340 pushf
	R(POP(edx));	// 12341 pop     edx
#undef esi_0
#define esi_0 esi	// 12342 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12343 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12344 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12345 eflags = edx
	R(AND(eflags, 0x8D5));	// 12346 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12347 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12348 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12349 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12350 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12351 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsl)));	// 12352 mov     dword ptr [esp+4], offset aRepMovsl ; "rep movsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12353 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12354 call    printf
	R(MOV(esi_0, ebx));	// 12355 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12356 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12357 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12358 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12359 mov     ecx, 11h
	R(PUSH(0));	// 12360 push    0
	R(POPF);	// 12361 popf
	R(STD);	// 12362 std
	REP	// 0 rep
MOVSB;	// 0 movsb
	R(CLD);	// 12364 cld
	R(PUSHF);	// 12365 pushf
	R(POP(edx));	// 12366 pop     edx
#undef esi_0
#define esi_0 esi	// 12367 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12368 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12369 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12370 eflags = edx
	R(AND(eflags, 0x8D5));	// 12371 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12372 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12373 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12374 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12375 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12376 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsb)));	// 12377 mov     dword ptr [esp+4], offset aRepMovsb ; "rep movsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12378 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12379 call    printf
	R(MOV(esi_0, ebx));	// 12380 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12381 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12382 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12383 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12384 mov     ecx, 11h
	R(PUSH(0));	// 12385 push    0
	R(POPF);	// 12386 popf
	R(STD);	// 12387 std
	REP	// 0 rep
MOVSW;	// 0 movsw
	R(CLD);	// 12389 cld
	R(PUSHF);	// 12390 pushf
	R(POP(edx));	// 12391 pop     edx
#undef esi_0
#define esi_0 esi	// 12392 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12393 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12394 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12395 eflags = edx
	R(AND(eflags, 0x8D5));	// 12396 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12397 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12398 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12399 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12400 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12401 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsw)));	// 12402 mov     dword ptr [esp+4], offset aRepMovsw ; "rep movsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12403 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12404 call    printf
	R(MOV(esi_0, ebx));	// 12405 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12406 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12407 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12408 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12409 mov     ecx, 11h
	R(PUSH(0));	// 12410 push    0
	R(POPF);	// 12411 popf
	R(STD);	// 12412 std
	REP	// 0 rep
MOVSD;	// 0 movsd
	R(CLD);	// 12414 cld
	R(PUSHF);	// 12415 pushf
	R(POP(edx));	// 12416 pop     edx
#undef esi_0
#define esi_0 esi	// 12417 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12418 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12419 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12420 eflags = edx
	R(AND(eflags, 0x8D5));	// 12421 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12422 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12423 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12424 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12425 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12426 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepMovsl)));	// 12427 mov     dword ptr [esp+4], offset aRepMovsl ; "rep movsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12428 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12429 call    printf
	R(MOV(esi_0, ebx));	// 12430 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12431 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12432 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12433 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12434 mov     ecx, 11h
	R(PUSH(0));	// 12435 push    0
	R(POPF);	// 12436 popf
LODSB;	// 12437 lodsb
	R(CLD);	// 12438 cld
	R(PUSHF);	// 12439 pushf
	R(POP(edx));	// 12440 pop     edx
#undef esi_0
#define esi_0 esi	// 12441 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12442 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12443 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12444 eflags = edx
	R(AND(eflags, 0x8D5));	// 12445 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12446 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12447 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12448 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12449 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12450 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsb)));	// 12451 mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12452 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12453 call    printf
	R(MOV(esi_0, ebx));	// 12454 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12455 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12456 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12457 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12458 mov     ecx, 11h
	R(PUSH(0));	// 12459 push    0
	R(POPF);	// 12460 popf
LODSW;	// 12461 lodsw
	R(CLD);	// 12462 cld
	R(PUSHF);	// 12463 pushf
	R(POP(edx));	// 12464 pop     edx
#undef esi_0
#define esi_0 esi	// 12465 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12466 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12467 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12468 eflags = edx
	R(AND(eflags, 0x8D5));	// 12469 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12470 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12471 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12472 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12473 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12474 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsw)));	// 12475 mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12476 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12477 call    printf
	R(MOV(esi_0, ebx));	// 12478 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12479 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12480 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12481 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12482 mov     ecx, 11h
	R(PUSH(0));	// 12483 push    0
	R(POPF);	// 12484 popf
LODSD;	// 12485 lodsd
	R(CLD);	// 12486 cld
	R(PUSHF);	// 12487 pushf
	R(POP(edx));	// 12488 pop     edx
#undef esi_0
#define esi_0 esi	// 12489 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12490 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12491 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12492 eflags = edx
	R(AND(eflags, 0x8D5));	// 12493 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12494 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12495 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12496 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12497 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12498 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsl)));	// 12499 mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12500 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12501 call    printf
	R(MOV(esi_0, ebx));	// 12502 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12503 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12504 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12505 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12506 mov     ecx, 11h
	R(PUSH(0));	// 12507 push    0
	R(POPF);	// 12508 popf
	R(STD);	// 12509 std
LODSB;	// 12510 lodsb
	R(CLD);	// 12511 cld
	R(PUSHF);	// 12512 pushf
	R(POP(edx));	// 12513 pop     edx
#undef esi_0
#define esi_0 esi	// 12514 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12515 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12516 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12517 eflags = edx
	R(AND(eflags, 0x8D5));	// 12518 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12519 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12520 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12521 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12522 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12523 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsb)));	// 12524 mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12525 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12526 call    printf
	R(MOV(esi_0, ebx));	// 12527 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12528 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12529 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12530 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12531 mov     ecx, 11h
	R(PUSH(0));	// 12532 push    0
	R(POPF);	// 12533 popf
	R(STD);	// 12534 std
LODSW;	// 12535 lodsw
	R(CLD);	// 12536 cld
	R(PUSHF);	// 12537 pushf
	R(POP(edx));	// 12538 pop     edx
#undef esi_0
#define esi_0 esi	// 12539 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12540 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12541 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12542 eflags = edx
	R(AND(eflags, 0x8D5));	// 12543 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12544 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12545 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12546 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12547 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12548 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsw)));	// 12549 mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12550 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12551 call    printf
	R(MOV(esi_0, ebx));	// 12552 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12553 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12554 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12555 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12556 mov     ecx, 11h
	R(PUSH(0));	// 12557 push    0
	R(POPF);	// 12558 popf
	R(STD);	// 12559 std
LODSD;	// 12560 lodsd
	R(CLD);	// 12561 cld
	R(PUSHF);	// 12562 pushf
	R(POP(edx));	// 12563 pop     edx
#undef esi_0
#define esi_0 esi	// 12564 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12565 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12566 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12567 eflags = edx
	R(AND(eflags, 0x8D5));	// 12568 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12569 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12570 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12571 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12572 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12573 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aLodsl)));	// 12574 mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12575 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12576 call    printf
	R(MOV(esi_0, ebx));	// 12577 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12578 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12579 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12580 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12581 mov     ecx, 11h
	R(PUSH(0));	// 12582 push    0
	R(POPF);	// 12583 popf
	R(SCASB);	// 12584 scasb
	R(CLD);	// 12585 cld
	R(PUSHF);	// 12586 pushf
	R(POP(edx));	// 12587 pop     edx
#undef esi_0
#define esi_0 esi	// 12588 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12589 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12590 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12591 eflags = edx
	R(AND(eflags, 0x8D5));	// 12592 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12593 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12594 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12595 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12596 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12597 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasb)));	// 12598 mov     dword ptr [esp+4], offset aScasb ; "scasb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12599 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12600 call    printf
	R(MOV(esi_0, ebx));	// 12601 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12602 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12603 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12604 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12605 mov     ecx, 11h
	R(PUSH(0));	// 12606 push    0
	R(POPF);	// 12607 popf
	R(SCASW);	// 12608 scasw
	R(CLD);	// 12609 cld
	R(PUSHF);	// 12610 pushf
	R(POP(edx));	// 12611 pop     edx
#undef esi_0
#define esi_0 esi	// 12612 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12613 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12614 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12615 eflags = edx
	R(AND(eflags, 0x8D5));	// 12616 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12617 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12618 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12619 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12620 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12621 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasw)));	// 12622 mov     dword ptr [esp+4], offset aScasw ; "scasw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12623 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12624 call    printf
	R(MOV(esi_0, ebx));	// 12625 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12626 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12627 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12628 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12629 mov     ecx, 11h
	R(PUSH(0));	// 12630 push    0
	R(POPF);	// 12631 popf
	R(SCASD);	// 12632 scasd
	R(CLD);	// 12633 cld
	R(PUSHF);	// 12634 pushf
	R(POP(edx));	// 12635 pop     edx
#undef esi_0
#define esi_0 esi	// 12636 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12637 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12638 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12639 eflags = edx
	R(AND(eflags, 0x8D5));	// 12640 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12641 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12642 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12643 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12644 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12645 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasl)));	// 12646 mov     dword ptr [esp+4], offset aScasl ; "scasl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12647 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12648 call    printf
	R(MOV(esi_0, ebx));	// 12649 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12650 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12651 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12652 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12653 mov     ecx, 11h
	R(PUSH(0));	// 12654 push    0
	R(POPF);	// 12655 popf
	R(STD);	// 12656 std
	R(SCASB);	// 12657 scasb
	R(CLD);	// 12658 cld
	R(PUSHF);	// 12659 pushf
	R(POP(edx));	// 12660 pop     edx
#undef esi_0
#define esi_0 esi	// 12661 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12662 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12663 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12664 eflags = edx
	R(AND(eflags, 0x8D5));	// 12665 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12666 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12667 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12668 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12669 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12670 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasb)));	// 12671 mov     dword ptr [esp+4], offset aScasb ; "scasb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12672 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12673 call    printf
	R(MOV(esi_0, ebx));	// 12674 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12675 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12676 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12677 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12678 mov     ecx, 11h
	R(PUSH(0));	// 12679 push    0
	R(POPF);	// 12680 popf
	R(STD);	// 12681 std
	R(SCASW);	// 12682 scasw
	R(CLD);	// 12683 cld
	R(PUSHF);	// 12684 pushf
	R(POP(edx));	// 12685 pop     edx
#undef esi_0
#define esi_0 esi	// 12686 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12687 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12688 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12689 eflags = edx
	R(AND(eflags, 0x8D5));	// 12690 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12691 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12692 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12693 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12694 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12695 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasw)));	// 12696 mov     dword ptr [esp+4], offset aScasw ; "scasw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12697 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12698 call    printf
	R(MOV(esi_0, ebx));	// 12699 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12700 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12701 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12702 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12703 mov     ecx, 11h
	R(PUSH(0));	// 12704 push    0
	R(POPF);	// 12705 popf
	R(STD);	// 12706 std
	R(SCASD);	// 12707 scasd
	R(CLD);	// 12708 cld
	R(PUSHF);	// 12709 pushf
	R(POP(edx));	// 12710 pop     edx
#undef esi_0
#define esi_0 esi	// 12711 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12712 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12713 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12714 eflags = edx
	R(AND(eflags, 0x8D5));	// 12715 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12716 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12717 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12718 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12719 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12720 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aScasl)));	// 12721 mov     dword ptr [esp+4], offset aScasl ; "scasl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12722 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12723 call    printf
	R(MOV(esi_0, ebx));	// 12724 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12725 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12726 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12727 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12728 mov     ecx, 11h
	R(PUSH(0));	// 12729 push    0
	R(POPF);	// 12730 popf
	REPE	// 0 repe
	R(SCASB);	// 0 scasb
	R(CLD);	// 12732 cld
	R(PUSHF);	// 12733 pushf
	R(POP(edx));	// 12734 pop     edx
#undef esi_0
#define esi_0 esi	// 12735 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12736 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12737 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12738 eflags = edx
	R(AND(eflags, 0x8D5));	// 12739 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12740 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12741 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12742 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12743 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12744 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasb)));	// 12745 mov     dword ptr [esp+4], offset aRepzScasb ; "repz scasb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12746 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12747 call    printf
	R(MOV(esi_0, ebx));	// 12748 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12749 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12750 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12751 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12752 mov     ecx, 11h
	R(PUSH(0));	// 12753 push    0
	R(POPF);	// 12754 popf
	REPE	// 0 repe
	R(SCASW);	// 0 scasw
	R(CLD);	// 12756 cld
	R(PUSHF);	// 12757 pushf
	R(POP(edx));	// 12758 pop     edx
#undef esi_0
#define esi_0 esi	// 12759 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12760 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12761 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12762 eflags = edx
	R(AND(eflags, 0x8D5));	// 12763 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12764 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12765 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12766 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12767 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12768 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasw)));	// 12769 mov     dword ptr [esp+4], offset aRepzScasw ; "repz scasw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12770 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12771 call    printf
	R(MOV(esi_0, ebx));	// 12772 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12773 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12774 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12775 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12776 mov     ecx, 11h
	R(PUSH(0));	// 12777 push    0
	R(POPF);	// 12778 popf
	REPE	// 0 repe
	R(SCASD);	// 0 scasd
	R(CLD);	// 12780 cld
	R(PUSHF);	// 12781 pushf
	R(POP(edx));	// 12782 pop     edx
#undef esi_0
#define esi_0 esi	// 12783 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12784 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12785 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12786 eflags = edx
	R(AND(eflags, 0x8D5));	// 12787 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12788 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12789 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12790 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12791 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12792 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasl)));	// 12793 mov     dword ptr [esp+4], offset aRepzScasl ; "repz scasl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12794 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12795 call    printf
	R(MOV(esi_0, ebx));	// 12796 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12797 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12798 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12799 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12800 mov     ecx, 11h
	R(PUSH(0));	// 12801 push    0
	R(POPF);	// 12802 popf
	R(STD);	// 12803 std
	REPE	// 0 repe
	R(SCASB);	// 0 scasb
	R(CLD);	// 12805 cld
	R(PUSHF);	// 12806 pushf
	R(POP(edx));	// 12807 pop     edx
#undef esi_0
#define esi_0 esi	// 12808 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12809 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12810 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12811 eflags = edx
	R(AND(eflags, 0x8D5));	// 12812 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12813 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12814 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12815 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12816 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12817 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasb)));	// 12818 mov     dword ptr [esp+4], offset aRepzScasb ; "repz scasb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12819 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12820 call    printf
	R(MOV(esi_0, ebx));	// 12821 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12822 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12823 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12824 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12825 mov     ecx, 11h
	R(PUSH(0));	// 12826 push    0
	R(POPF);	// 12827 popf
	R(STD);	// 12828 std
	REPE	// 0 repe
	R(SCASW);	// 0 scasw
	R(CLD);	// 12830 cld
	R(PUSHF);	// 12831 pushf
	R(POP(edx));	// 12832 pop     edx
#undef esi_0
#define esi_0 esi	// 12833 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12834 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12835 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12836 eflags = edx
	R(AND(eflags, 0x8D5));	// 12837 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12838 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12839 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12840 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12841 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12842 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasw)));	// 12843 mov     dword ptr [esp+4], offset aRepzScasw ; "repz scasw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12844 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12845 call    printf
	R(MOV(esi_0, ebx));	// 12846 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12847 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12848 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12849 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12850 mov     ecx, 11h
	R(PUSH(0));	// 12851 push    0
	R(POPF);	// 12852 popf
	R(STD);	// 12853 std
	REPE	// 0 repe
	R(SCASD);	// 0 scasd
	R(CLD);	// 12855 cld
	R(PUSHF);	// 12856 pushf
	R(POP(edx));	// 12857 pop     edx
#undef esi_0
#define esi_0 esi	// 12858 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12859 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12860 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12861 eflags = edx
	R(AND(eflags, 0x8D5));	// 12862 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12863 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12864 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12865 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12866 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12867 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzScasl)));	// 12868 mov     dword ptr [esp+4], offset aRepzScasl ; "repz scasl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12869 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12870 call    printf
	R(MOV(esi_0, ebx));	// 12871 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12872 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12873 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12874 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12875 mov     ecx, 11h
	R(PUSH(0));	// 12876 push    0
	R(POPF);	// 12877 popf
	REPNE	// 0 repne
	R(SCASB);	// 0 scasb
	R(CLD);	// 12879 cld
	R(PUSHF);	// 12880 pushf
	R(POP(edx));	// 12881 pop     edx
#undef esi_0
#define esi_0 esi	// 12882 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12883 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12884 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12885 eflags = edx
	R(AND(eflags, 0x8D5));	// 12886 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12887 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12888 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12889 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12890 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12891 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasb)));	// 12892 mov     dword ptr [esp+4], offset aRepnzScasb ; "repnz scasb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12893 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12894 call    printf
	R(MOV(esi_0, ebx));	// 12895 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12896 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12897 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12898 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12899 mov     ecx, 11h
	R(PUSH(0));	// 12900 push    0
	R(POPF);	// 12901 popf
	REPNE	// 0 repne
	R(SCASW);	// 0 scasw
	R(CLD);	// 12903 cld
	R(PUSHF);	// 12904 pushf
	R(POP(edx));	// 12905 pop     edx
#undef esi_0
#define esi_0 esi	// 12906 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12907 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12908 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12909 eflags = edx
	R(AND(eflags, 0x8D5));	// 12910 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12911 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12912 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12913 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12914 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12915 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasw)));	// 12916 mov     dword ptr [esp+4], offset aRepnzScasw ; "repnz scasw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12917 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12918 call    printf
	R(MOV(esi_0, ebx));	// 12919 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12920 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12921 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12922 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12923 mov     ecx, 11h
	R(PUSH(0));	// 12924 push    0
	R(POPF);	// 12925 popf
	REPNE	// 0 repne
	R(SCASD);	// 0 scasd
	R(CLD);	// 12927 cld
	R(PUSHF);	// 12928 pushf
	R(POP(edx));	// 12929 pop     edx
#undef esi_0
#define esi_0 esi	// 12930 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12931 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12932 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12933 eflags = edx
	R(AND(eflags, 0x8D5));	// 12934 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12935 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12936 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12937 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12938 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12939 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasl)));	// 12940 mov     dword ptr [esp+4], offset aRepnzScasl ; "repnz scasl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12941 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12942 call    printf
	R(MOV(esi_0, ebx));	// 12943 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12944 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12945 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12946 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12947 mov     ecx, 11h
	R(PUSH(0));	// 12948 push    0
	R(POPF);	// 12949 popf
	R(STD);	// 12950 std
	REPNE	// 0 repne
	R(SCASB);	// 0 scasb
	R(CLD);	// 12952 cld
	R(PUSHF);	// 12953 pushf
	R(POP(edx));	// 12954 pop     edx
#undef esi_0
#define esi_0 esi	// 12955 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12956 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12957 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12958 eflags = edx
	R(AND(eflags, 0x8D5));	// 12959 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12960 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12961 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12962 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12963 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12964 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasb)));	// 12965 mov     dword ptr [esp+4], offset aRepnzScasb ; "repnz scasb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12966 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12967 call    printf
	R(MOV(esi_0, ebx));	// 12968 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12969 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12970 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12971 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12972 mov     ecx, 11h
	R(PUSH(0));	// 12973 push    0
	R(POPF);	// 12974 popf
	R(STD);	// 12975 std
	REPNE	// 0 repne
	R(SCASW);	// 0 scasw
	R(CLD);	// 12977 cld
	R(PUSHF);	// 12978 pushf
	R(POP(edx));	// 12979 pop     edx
#undef esi_0
#define esi_0 esi	// 12980 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 12981 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 12982 ecx_0 = ecx
#undef eflags
#define eflags edx	// 12983 eflags = edx
	R(AND(eflags, 0x8D5));	// 12984 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 12985 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 12986 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 12987 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 12988 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 12989 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasw)));	// 12990 mov     dword ptr [esp+4], offset aRepnzScasw ; "repnz scasw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 12991 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 12992 call    printf
	R(MOV(esi_0, ebx));	// 12993 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 12994 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 12995 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 12996 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 12997 mov     ecx, 11h
	R(PUSH(0));	// 12998 push    0
	R(POPF);	// 12999 popf
	R(STD);	// 13000 std
	REPNE	// 0 repne
	R(SCASD);	// 0 scasd
	R(CLD);	// 13002 cld
	R(PUSHF);	// 13003 pushf
	R(POP(edx));	// 13004 pop     edx
#undef esi_0
#define esi_0 esi	// 13005 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13006 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13007 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13008 eflags = edx
	R(AND(eflags, 0x8D5));	// 13009 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13010 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13011 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13012 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13013 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13014 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzScasl)));	// 13015 mov     dword ptr [esp+4], offset aRepnzScasl ; "repnz scasl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13016 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13017 call    printf
	R(MOV(esi_0, ebx));	// 13018 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13019 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13020 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13021 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13022 mov     ecx, 11h
	R(PUSH(0));	// 13023 push    0
	R(POPF);	// 13024 popf
CMPSB;	// 13025 cmpsb
	R(CLD);	// 13026 cld
	R(PUSHF);	// 13027 pushf
	R(POP(edx));	// 13028 pop     edx
#undef esi_0
#define esi_0 esi	// 13029 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13030 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13031 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13032 eflags = edx
	R(AND(eflags, 0x8D5));	// 13033 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13034 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13035 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13036 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13037 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13038 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsb)));	// 13039 mov     dword ptr [esp+4], offset aCmpsb ; "cmpsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13040 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13041 call    printf
	R(MOV(esi_0, ebx));	// 13042 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13043 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13044 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13045 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13046 mov     ecx, 11h
	R(PUSH(0));	// 13047 push    0
	R(POPF);	// 13048 popf
	R(CMPSW);	// 13049 cmpsw
	R(CLD);	// 13050 cld
	R(PUSHF);	// 13051 pushf
	R(POP(edx));	// 13052 pop     edx
#undef esi_0
#define esi_0 esi	// 13053 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13054 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13055 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13056 eflags = edx
	R(AND(eflags, 0x8D5));	// 13057 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13058 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13059 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13060 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13061 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13062 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsw)));	// 13063 mov     dword ptr [esp+4], offset aCmpsw ; "cmpsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13064 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13065 call    printf
	R(MOV(esi_0, ebx));	// 13066 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13067 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13068 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13069 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13070 mov     ecx, 11h
	R(PUSH(0));	// 13071 push    0
	R(POPF);	// 13072 popf
	R(CMPSD);	// 13073 cmpsd
	R(CLD);	// 13074 cld
	R(PUSHF);	// 13075 pushf
	R(POP(edx));	// 13076 pop     edx
#undef esi_0
#define esi_0 esi	// 13077 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13078 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13079 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13080 eflags = edx
	R(AND(eflags, 0x8D5));	// 13081 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13082 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13083 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13084 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13085 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13086 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsl)));	// 13087 mov     dword ptr [esp+4], offset aCmpsl ; "cmpsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13088 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13089 call    printf
	R(MOV(esi_0, ebx));	// 13090 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13091 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13092 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13093 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13094 mov     ecx, 11h
	R(PUSH(0));	// 13095 push    0
	R(POPF);	// 13096 popf
	R(STD);	// 13097 std
CMPSB;	// 13098 cmpsb
	R(CLD);	// 13099 cld
	R(PUSHF);	// 13100 pushf
	R(POP(edx));	// 13101 pop     edx
#undef esi_0
#define esi_0 esi	// 13102 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13103 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13104 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13105 eflags = edx
	R(AND(eflags, 0x8D5));	// 13106 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13107 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13108 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13109 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13110 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13111 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsb)));	// 13112 mov     dword ptr [esp+4], offset aCmpsb ; "cmpsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13113 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13114 call    printf
	R(MOV(esi_0, ebx));	// 13115 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13116 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13117 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13118 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13119 mov     ecx, 11h
	R(PUSH(0));	// 13120 push    0
	R(POPF);	// 13121 popf
	R(STD);	// 13122 std
	R(CMPSW);	// 13123 cmpsw
	R(CLD);	// 13124 cld
	R(PUSHF);	// 13125 pushf
	R(POP(edx));	// 13126 pop     edx
#undef esi_0
#define esi_0 esi	// 13127 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13128 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13129 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13130 eflags = edx
	R(AND(eflags, 0x8D5));	// 13131 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13132 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13133 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13134 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13135 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13136 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsw)));	// 13137 mov     dword ptr [esp+4], offset aCmpsw ; "cmpsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13138 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13139 call    printf
	R(MOV(esi_0, ebx));	// 13140 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13141 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13142 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13143 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13144 mov     ecx, 11h
	R(PUSH(0));	// 13145 push    0
	R(POPF);	// 13146 popf
	R(STD);	// 13147 std
	R(CMPSD);	// 13148 cmpsd
	R(CLD);	// 13149 cld
	R(PUSHF);	// 13150 pushf
	R(POP(edx));	// 13151 pop     edx
#undef esi_0
#define esi_0 esi	// 13152 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13153 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13154 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13155 eflags = edx
	R(AND(eflags, 0x8D5));	// 13156 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13157 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13158 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13159 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13160 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13161 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCmpsl)));	// 13162 mov     dword ptr [esp+4], offset aCmpsl ; "cmpsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13163 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13164 call    printf
	R(MOV(esi_0, ebx));	// 13165 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13166 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13167 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13168 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13169 mov     ecx, 11h
	R(PUSH(0));	// 13170 push    0
	R(POPF);	// 13171 popf
	REPE	// 0 repe
CMPSB;	// 0 cmpsb
	R(CLD);	// 13173 cld
	R(PUSHF);	// 13174 pushf
	R(POP(edx));	// 13175 pop     edx
#undef esi_0
#define esi_0 esi	// 13176 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13177 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13178 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13179 eflags = edx
	R(AND(eflags, 0x8D5));	// 13180 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13181 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13182 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13183 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13184 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13185 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsb)));	// 13186 mov     dword ptr [esp+4], offset aRepzCmpsb ; "repz cmpsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13187 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13188 call    printf
	R(MOV(esi_0, ebx));	// 13189 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13190 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13191 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13192 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13193 mov     ecx, 11h
	R(PUSH(0));	// 13194 push    0
	R(POPF);	// 13195 popf
	REPE	// 0 repe
	R(CMPSW);	// 0 cmpsw
	R(CLD);	// 13197 cld
	R(PUSHF);	// 13198 pushf
	R(POP(edx));	// 13199 pop     edx
#undef esi_0
#define esi_0 esi	// 13200 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13201 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13202 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13203 eflags = edx
	R(AND(eflags, 0x8D5));	// 13204 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13205 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13206 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13207 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13208 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13209 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsw)));	// 13210 mov     dword ptr [esp+4], offset aRepzCmpsw ; "repz cmpsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13211 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13212 call    printf
	R(MOV(esi_0, ebx));	// 13213 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13214 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13215 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13216 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13217 mov     ecx, 11h
	R(PUSH(0));	// 13218 push    0
	R(POPF);	// 13219 popf
	REPE	// 0 repe
	R(CMPSD);	// 0 cmpsd
	R(CLD);	// 13221 cld
	R(PUSHF);	// 13222 pushf
	R(POP(edx));	// 13223 pop     edx
#undef esi_0
#define esi_0 esi	// 13224 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13225 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13226 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13227 eflags = edx
	R(AND(eflags, 0x8D5));	// 13228 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13229 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13230 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13231 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13232 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13233 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsl)));	// 13234 mov     dword ptr [esp+4], offset aRepzCmpsl ; "repz cmpsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13235 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13236 call    printf
	R(MOV(esi_0, ebx));	// 13237 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13238 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13239 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13240 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13241 mov     ecx, 11h
	R(PUSH(0));	// 13242 push    0
	R(POPF);	// 13243 popf
	R(STD);	// 13244 std
	REPE	// 0 repe
CMPSB;	// 0 cmpsb
	R(CLD);	// 13246 cld
	R(PUSHF);	// 13247 pushf
	R(POP(edx));	// 13248 pop     edx
#undef esi_0
#define esi_0 esi	// 13249 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13250 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13251 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13252 eflags = edx
	R(AND(eflags, 0x8D5));	// 13253 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13254 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13255 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13256 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13257 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13258 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsb)));	// 13259 mov     dword ptr [esp+4], offset aRepzCmpsb ; "repz cmpsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13260 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13261 call    printf
	R(MOV(esi_0, ebx));	// 13262 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13263 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13264 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13265 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13266 mov     ecx, 11h
	R(PUSH(0));	// 13267 push    0
	R(POPF);	// 13268 popf
	R(STD);	// 13269 std
	REPE	// 0 repe
	R(CMPSW);	// 0 cmpsw
	R(CLD);	// 13271 cld
	R(PUSHF);	// 13272 pushf
	R(POP(edx));	// 13273 pop     edx
#undef esi_0
#define esi_0 esi	// 13274 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13275 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13276 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13277 eflags = edx
	R(AND(eflags, 0x8D5));	// 13278 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13279 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13280 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13281 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13282 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13283 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsw)));	// 13284 mov     dword ptr [esp+4], offset aRepzCmpsw ; "repz cmpsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13285 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13286 call    printf
	R(MOV(esi_0, ebx));	// 13287 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13288 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13289 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13290 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13291 mov     ecx, 11h
	R(PUSH(0));	// 13292 push    0
	R(POPF);	// 13293 popf
	R(STD);	// 13294 std
	REPE	// 0 repe
	R(CMPSD);	// 0 cmpsd
	R(CLD);	// 13296 cld
	R(PUSHF);	// 13297 pushf
	R(POP(edx));	// 13298 pop     edx
#undef esi_0
#define esi_0 esi	// 13299 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13300 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13301 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13302 eflags = edx
	R(AND(eflags, 0x8D5));	// 13303 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13304 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13305 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13306 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13307 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13308 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepzCmpsl)));	// 13309 mov     dword ptr [esp+4], offset aRepzCmpsl ; "repz cmpsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13310 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13311 call    printf
	R(MOV(esi_0, ebx));	// 13312 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13313 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13314 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13315 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13316 mov     ecx, 11h
	R(PUSH(0));	// 13317 push    0
	R(POPF);	// 13318 popf
	REPNE	// 0 repne
CMPSB;	// 0 cmpsb
	R(CLD);	// 13320 cld
	R(PUSHF);	// 13321 pushf
	R(POP(edx));	// 13322 pop     edx
#undef esi_0
#define esi_0 esi	// 13323 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13324 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13325 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13326 eflags = edx
	R(AND(eflags, 0x8D5));	// 13327 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13328 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13329 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13330 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13331 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13332 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsb)));	// 13333 mov     dword ptr [esp+4], offset aRepnzCmpsb ; "repnz cmpsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13334 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13335 call    printf
	R(MOV(esi_0, ebx));	// 13336 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13337 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13338 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13339 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13340 mov     ecx, 11h
	R(PUSH(0));	// 13341 push    0
	R(POPF);	// 13342 popf
	REPNE	// 0 repne
	R(CMPSW);	// 0 cmpsw
	R(CLD);	// 13344 cld
	R(PUSHF);	// 13345 pushf
	R(POP(edx));	// 13346 pop     edx
#undef esi_0
#define esi_0 esi	// 13347 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13348 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13349 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13350 eflags = edx
	R(AND(eflags, 0x8D5));	// 13351 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13352 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13353 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13354 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13355 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13356 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsw)));	// 13357 mov     dword ptr [esp+4], offset aRepnzCmpsw ; "repnz cmpsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13358 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13359 call    printf
	R(MOV(esi_0, ebx));	// 13360 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13361 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13362 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13363 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13364 mov     ecx, 11h
	R(PUSH(0));	// 13365 push    0
	R(POPF);	// 13366 popf
	REPNE	// 0 repne
	R(CMPSD);	// 0 cmpsd
	R(CLD);	// 13368 cld
	R(PUSHF);	// 13369 pushf
	R(POP(edx));	// 13370 pop     edx
#undef esi_0
#define esi_0 esi	// 13371 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13372 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13373 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13374 eflags = edx
	R(AND(eflags, 0x8D5));	// 13375 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13376 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13377 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13378 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13379 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13380 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsl)));	// 13381 mov     dword ptr [esp+4], offset aRepnzCmpsl ; "repnz cmpsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13382 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13383 call    printf
	R(MOV(esi_0, ebx));	// 13384 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13385 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13386 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13387 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13388 mov     ecx, 11h
	R(PUSH(0));	// 13389 push    0
	R(POPF);	// 13390 popf
	R(STD);	// 13391 std
	REPNE	// 0 repne
CMPSB;	// 0 cmpsb
	R(CLD);	// 13393 cld
	R(PUSHF);	// 13394 pushf
	R(POP(edx));	// 13395 pop     edx
#undef esi_0
#define esi_0 esi	// 13396 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13397 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13398 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13399 eflags = edx
	R(AND(eflags, 0x8D5));	// 13400 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13401 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13402 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13403 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13404 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13405 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsb)));	// 13406 mov     dword ptr [esp+4], offset aRepnzCmpsb ; "repnz cmpsb"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13407 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13408 call    printf
	R(MOV(esi_0, ebx));	// 13409 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13410 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13411 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13412 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13413 mov     ecx, 11h
	R(PUSH(0));	// 13414 push    0
	R(POPF);	// 13415 popf
	R(STD);	// 13416 std
	REPNE	// 0 repne
	R(CMPSW);	// 0 cmpsw
	R(CLD);	// 13418 cld
	R(PUSHF);	// 13419 pushf
	R(POP(edx));	// 13420 pop     edx
#undef esi_0
#define esi_0 esi	// 13421 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13422 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13423 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13424 eflags = edx
	R(AND(eflags, 0x8D5));	// 13425 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13426 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13427 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13428 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13429 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13430 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsw)));	// 13431 mov     dword ptr [esp+4], offset aRepnzCmpsw ; "repnz cmpsw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13432 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13433 call    printf
	R(MOV(esi_0, ebx));	// 13434 mov     esi_0, ebx
	R(MOV(edi_0, offset(_bss,str_buffer)+0x810));	// 13435 mov     edi_0, (offset str_buffer+810h)
#undef edi_0
#define edi_0 edi	// 13436 edi_0 = edi
	R(MOV(eax, 0x12345678));	// 13437 mov     eax, 12345678h
	R(MOV(ecx, 0x11));	// 13438 mov     ecx, 11h
	R(PUSH(0));	// 13439 push    0
	R(POPF);	// 13440 popf
	R(STD);	// 13441 std
	REPNE	// 0 repne
	R(CMPSD);	// 0 cmpsd
	R(CLD);	// 13443 cld
	R(PUSHF);	// 13444 pushf
	R(POP(edx));	// 13445 pop     edx
#undef esi_0
#define esi_0 esi	// 13446 esi_0 = esi
#undef eax_0
#define eax_0 eax	// 13447 eax_0 = eax
#undef ecx_0
#define ecx_0 ecx	// 13448 ecx_0 = ecx
#undef eflags
#define eflags edx	// 13449 eflags = edx
	R(AND(eflags, 0x8D5));	// 13450 and     eflags, 8D5h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), edi_0));	// 13451 mov     [esp+0Ch], edi_0
	R(MOV(*(dd*)(raddr(ds,esp+8)), esi_0));	// 13452 mov     [esp+8], esi_0
	R(MOV(*(dd*)(raddr(ds,esp+0x18)), edx));	// 13453 mov     [esp+18h], edx
	R(MOV(*(dd*)(raddr(ds,esp+0x14)), ecx_0));	// 13454 mov     [esp+14h], ecx_0
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), eax_0));	// 13455 mov     [esp+10h], eax_0
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aRepnzCmpsl)));	// 13456 mov     dword ptr [esp+4], offset aRepnzCmpsl ; "repnz cmpsl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sEsi08lxEdi0)));	// 13457 mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13458 call    printf
	R(ADD(esp, 0x2C));	// 13459 add     esp, 2Ch
	R(POP(ebx));	// 13460 pop     ebx
	R(POP(esi_0));	// 13461 pop     esi_0
	R(POP(edi_0));	// 13462 pop     edi_0
	R(POP(ebp));	// 13463 pop     ebp
	R(RETN);	// 13464 retn
 // Procedure test_conv() start
test_conv:
	R(PUSH(ebp));	// 13476 push    ebp
	R(MOV(ebp, esp));	// 13477 mov     ebp, esp
	R(PUSH(esi));	// 13478 push    esi
	R(PUSH(ebx));	// 13479 push    ebx
	R(MOV(ebx, 0x8234A6F8));	// 13480 mov     ebx, 8234A6F8h
	R(SUB(esp, 0x20));	// 13481 sub     esp, 20h
	R(MOV(eax, ebx));	// 13482 mov     eax, ebx
	R(CBW);	// 13483 cbw
#undef r
#define r eax	// 13484 r = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), r));	// 13485 mov     [esp+0Ch], r
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8234A6F8));	// 13486 mov     dword ptr [esp+8], 8234A6F8h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCbw)));	// 13487 mov     dword ptr [esp+4], offset aCbw ; "cbw"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx)));	// 13488 mov     dword ptr [esp], offset a10sA08lxR08lx ; "%-10s A=%08lx R=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13489 call    printf
	R(MOV(eax, ebx));	// 13490 mov     eax, ebx
	R(CWDE);	// 13491 cwde
#undef r
#define r eax	// 13492 r = eax
	R(MOV(esi, 0x8345A1F2));	// 13493 mov     esi, 8345A1F2h
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), r));	// 13494 mov     [esp+0Ch], r
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8234A6F8));	// 13495 mov     dword ptr [esp+8], 8234A6F8h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCwde)));	// 13496 mov     dword ptr [esp+4], offset aCwde ; "cwde"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx)));	// 13497 mov     dword ptr [esp], offset a10sA08lxR08lx ; "%-10s A=%08lx R=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13498 call    printf
	R(MOV(eax, ebx));	// 13499 mov     eax, ebx
	R(MOV(edx, esi));	// 13500 mov     edx, esi
	R(CWD);	// 13501 cwd
#undef r
#define r eax	// 13502 r = eax
#undef rh
#define rh edx	// 13503 rh = edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), rh));	// 13504 mov     [esp+10h], rh
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), r));	// 13505 mov     [esp+0Ch], r
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8234A6F8));	// 13506 mov     dword ptr [esp+8], 8234A6F8h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCwd)));	// 13507 mov     dword ptr [esp+4], offset aCwd ; "cwd"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx0)));	// 13508 mov     dword ptr [esp], offset a10sA08lxR08lx0 ; "%-10s A=%08lx R=%08lx:%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13509 call    printf
	R(MOV(eax, ebx));	// 13510 mov     eax, ebx
	R(MOV(edx, esi));	// 13511 mov     edx, esi
	R(CDQ);	// 13512 cdq
#undef r
#define r eax	// 13513 r = eax
#undef rh
#define rh edx	// 13514 rh = edx
	R(MOV(*(dd*)(raddr(ds,esp+0x10)), rh));	// 13515 mov     [esp+10h], rh
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), r));	// 13516 mov     [esp+0Ch], r
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x8234A6F8));	// 13517 mov     dword ptr [esp+8], 8234A6F8h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aCdq)));	// 13518 mov     dword ptr [esp+4], offset aCdq ; "cdq"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx0)));	// 13519 mov     dword ptr [esp], offset a10sA08lxR08lx0 ; "%-10s A=%08lx R=%08lx:%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13520 call    printf
	R(MOV(eax, 0x12345678));	// 13521 mov     eax, 12345678h
	R(BSWAP(eax));	// 13522 bswap   eax
#undef r
#define r eax	// 13523 r = eax
	R(MOV(*(dd*)(raddr(ds,esp+0x0C)), r));	// 13524 mov     [esp+0Ch], r
	R(MOV(*(dd*)(raddr(ds,esp+8)), 0x12345678));	// 13525 mov     dword ptr [esp+8], 12345678h
	R(MOV(*(dd*)(raddr(ds,esp+4)), offset(_rdata,aBswapl)));	// 13526 mov     dword ptr [esp+4], offset aBswapl ; "bswapl"
	R(MOV(*(dd*)(raddr(ds,esp)), offset(_rdata,a10sA08lxR08lx_0)));	// 13527 mov     dword ptr [esp], offset a10sA08lxR08lx_0 ; "%-10s: A=%08lx R=%08lx\n"
__disp = (_offsets)kprintf;
	R(CALL(__disp));	// 13528 call    printf
	R(ADD(esp, 0x20));	// 13529 add     esp, 20h
	R(POP(ebx));	// 13530 pop     ebx
	R(POP(esi));	// 13531 pop     esi
	R(POP(ebp));	// 13532 pop     ebp
	R(RETN);	// 13533 retn
 // Procedure main() start
main:
#undef var_4
#define var_4 -4	// 13544 var_4 = -4
#undef argc
#define argc 8	// 13545 argc = 8
#undef argv
#define argv 0x0C	// 13546 argv = 0x0C
	R(PUSH(ebp));	// 13549 push    ebp
	R(MOV(ebp, esp));	// 13550 mov     ebp, esp
	R(PUSH(ebx));	// 13551 push    ebx
	R(AND(esp, 0x0FFFFFFF0));	// 13552 and     esp, 0FFFFFFF0h
	R(MOV(ebx, offset(initcall,_test_btc)));	// 13553 mov     ebx, offset _test_btc
loc_40d571:
	R(CMP(ebx, offset(initcall,unk_40F064)));	// 13558 cmp     ebx, offset unk_40F064
		R(JZ(loc_40d581));	// 13559 jz      short loc_40D581
	R(ADD(ebx, 2));	// 13560 add     ebx, 4
__disp = (dw)(*(dd*)(raddr(ds,ebx-2)));
	R(CALL(__disp));	// 13561 call    dword ptr [ebx-4]
		R(JMP(loc_40d571));	// 13562 jmp     short loc_40D571
loc_40d581:
	R(CALL(ktest_bsx));	// 13566 call    test_bsx
	R(CALL(ktest_popcnt));	// 13567 call    test_popcnt
	R(CALL(ktest_mul));	// 13568 call    test_mul
	R(CALL(ktest_jcc));	// 13569 call    test_jcc
	R(CALL(ktest_loop));	// 13570 call    test_loop
	R(CALL(ktest_bcd));	// 13571 call    test_bcd
	R(CALL(ktest_xchg));	// 13572 call    test_xchg
	R(CALL(ktest_string));	// 13573 call    test_string
	R(CALL(ktest_misc));	// 13574 call    test_misc
	R(CALL(ktest_lea));	// 13575 call    test_lea
	R(CALL(ktest_conv));	// 13576 call    test_conv
	eax = 0;AFFECT_ZF(0); AFFECT_SF(eax,0);	// 13577 xor     eax, eax
	R(MOV(ebx, *(dd*)(raddr(ds,ebp+var_4))));	// 13578 mov     ebx, [ebp+var_4]
	R(MOV(esp, ebp));
R(POP(ebp));	// 13579 leave
	R(RETN);	// 13580 retn
 // Procedure sub_40d5c0() start
sub_40d5c0:
	R(PUSH(ebp));	// 13593 push    ebp
	R(MOV(ebp, esp));	// 13594 mov     ebp, esp
	R(POP(ebp));	// 13595 pop     ebp


return;
__dispatch_call:
__disp=(_offsets) (((int)__disp)&0x0ffff);
switch (__disp) {
case kprintf: 	goto __printf;
case kexec_adc: 	goto exec_adc;
case kexec_adcb: 	goto exec_adcb;
case kexec_adcl: 	goto exec_adcl;
case kexec_adcw: 	goto exec_adcw;
case kexec_add: 	goto exec_add;
case kexec_addb: 	goto exec_addb;
case kexec_addl: 	goto exec_addl;
case kexec_addw: 	goto exec_addw;
case kexec_and: 	goto exec_and;
case kexec_andb: 	goto exec_andb;
case kexec_andl: 	goto exec_andl;
case kexec_andw: 	goto exec_andw;
case kexec_bt: 	goto exec_bt;
case kexec_btc: 	goto exec_btc;
case kexec_btcl: 	goto exec_btcl;
case kexec_btcw: 	goto exec_btcw;
case kexec_btl: 	goto exec_btl;
case kexec_btr: 	goto exec_btr;
case kexec_btrl: 	goto exec_btrl;
case kexec_btrw: 	goto exec_btrw;
case kexec_bts: 	goto exec_bts;
case kexec_btsl: 	goto exec_btsl;
case kexec_btsw: 	goto exec_btsw;
case kexec_btw: 	goto exec_btw;
case kexec_cmp: 	goto exec_cmp;
case kexec_cmpb: 	goto exec_cmpb;
case kexec_cmpl: 	goto exec_cmpl;
case kexec_cmpw: 	goto exec_cmpw;
case kexec_dec: 	goto exec_dec;
case kexec_decb: 	goto exec_decb;
case kexec_decl: 	goto exec_decl;
case kexec_decw: 	goto exec_decw;
case kexec_inc: 	goto exec_inc;
case kexec_incb: 	goto exec_incb;
case kexec_incl: 	goto exec_incl;
case kexec_incw: 	goto exec_incw;
case kexec_neg: 	goto exec_neg;
case kexec_negb: 	goto exec_negb;
case kexec_negl: 	goto exec_negl;
case kexec_negw: 	goto exec_negw;
case kexec_not: 	goto exec_not;
case kexec_notb: 	goto exec_notb;
case kexec_notl: 	goto exec_notl;
case kexec_notw: 	goto exec_notw;
case kexec_or: 	goto exec_or;
case kexec_orb: 	goto exec_orb;
case kexec_orl: 	goto exec_orl;
case kexec_orw: 	goto exec_orw;
case kexec_rcl: 	goto exec_rcl;
case kexec_rclb: 	goto exec_rclb;
case kexec_rcll: 	goto exec_rcll;
case kexec_rclw: 	goto exec_rclw;
case kexec_rcr: 	goto exec_rcr;
case kexec_rcrb: 	goto exec_rcrb;
case kexec_rcrl: 	goto exec_rcrl;
case kexec_rcrw: 	goto exec_rcrw;
case kexec_rol: 	goto exec_rol;
case kexec_rolb: 	goto exec_rolb;
case kexec_roll: 	goto exec_roll;
case kexec_rolw: 	goto exec_rolw;
case kexec_ror: 	goto exec_ror;
case kexec_rorb: 	goto exec_rorb;
case kexec_rorl: 	goto exec_rorl;
case kexec_rorw: 	goto exec_rorw;
case kexec_sar: 	goto exec_sar;
case kexec_sarb: 	goto exec_sarb;
case kexec_sarl: 	goto exec_sarl;
case kexec_sarw: 	goto exec_sarw;
case kexec_sbb: 	goto exec_sbb;
case kexec_sbbb: 	goto exec_sbbb;
case kexec_sbbl: 	goto exec_sbbl;
case kexec_sbbw: 	goto exec_sbbw;
case kexec_shl: 	goto exec_shl;
case kexec_shlb: 	goto exec_shlb;
case kexec_shld: 	goto exec_shld;
case kexec_shldl: 	goto exec_shldl;
case kexec_shldw: 	goto exec_shldw;
case kexec_shll: 	goto exec_shll;
case kexec_shlw: 	goto exec_shlw;
case kexec_shr: 	goto exec_shr;
case kexec_shrb: 	goto exec_shrb;
case kexec_shrd: 	goto exec_shrd;
case kexec_shrdl: 	goto exec_shrdl;
case kexec_shrdw: 	goto exec_shrdw;
case kexec_shrl: 	goto exec_shrl;
case kexec_shrw: 	goto exec_shrw;
case kexec_sub: 	goto exec_sub;
case kexec_subb: 	goto exec_subb;
case kexec_subl: 	goto exec_subl;
case kexec_subw: 	goto exec_subw;
case kexec_xor: 	goto exec_xor;
case kexec_xorb: 	goto exec_xorb;
case kexec_xorl: 	goto exec_xorl;
case kexec_xorw: 	goto exec_xorw;
case kloc_40458f: 	goto loc_40458f;
case kloc_4045e7: 	goto loc_4045e7;
case kloc_40463e: 	goto loc_40463e;
case kloc_4046d6: 	goto loc_4046d6;
case kloc_4046f6: 	goto loc_4046f6;
case kloc_404716: 	goto loc_404716;
case kloc_404736: 	goto loc_404736;
case kloc_404756: 	goto loc_404756;
case kloc_404776: 	goto loc_404776;
case kloc_404796: 	goto loc_404796;
case kloc_4047dd: 	goto loc_4047dd;
case kloc_404835: 	goto loc_404835;
case kloc_40488c: 	goto loc_40488c;
case kloc_404924: 	goto loc_404924;
case kloc_404944: 	goto loc_404944;
case kloc_404964: 	goto loc_404964;
case kloc_404984: 	goto loc_404984;
case kloc_4049a4: 	goto loc_4049a4;
case kloc_4049c4: 	goto loc_4049c4;
case kloc_4049e4: 	goto loc_4049e4;
case kloc_404a2b: 	goto loc_404a2b;
case kloc_404a83: 	goto loc_404a83;
case kloc_404ada: 	goto loc_404ada;
case kloc_404b72: 	goto loc_404b72;
case kloc_404b92: 	goto loc_404b92;
case kloc_404bb2: 	goto loc_404bb2;
case kloc_404bd2: 	goto loc_404bd2;
case kloc_404bf2: 	goto loc_404bf2;
case kloc_404c12: 	goto loc_404c12;
case kloc_404c32: 	goto loc_404c32;
case kloc_404c79: 	goto loc_404c79;
case kloc_404cd1: 	goto loc_404cd1;
case kloc_404d28: 	goto loc_404d28;
case kloc_404dc0: 	goto loc_404dc0;
case kloc_404de0: 	goto loc_404de0;
case kloc_404e00: 	goto loc_404e00;
case kloc_404e20: 	goto loc_404e20;
case kloc_404e40: 	goto loc_404e40;
case kloc_404e60: 	goto loc_404e60;
case kloc_404e80: 	goto loc_404e80;
case kloc_404ec7: 	goto loc_404ec7;
case kloc_404f1f: 	goto loc_404f1f;
case kloc_404f76: 	goto loc_404f76;
case kloc_40500e: 	goto loc_40500e;
case kloc_40502e: 	goto loc_40502e;
case kloc_40504e: 	goto loc_40504e;
case kloc_40506e: 	goto loc_40506e;
case kloc_40508e: 	goto loc_40508e;
case kloc_4050ae: 	goto loc_4050ae;
case kloc_4050ce: 	goto loc_4050ce;
case kloc_405115: 	goto loc_405115;
case kloc_40516d: 	goto loc_40516d;
case kloc_4051c4: 	goto loc_4051c4;
case kloc_4052a0: 	goto loc_4052a0;
case kloc_4052c0: 	goto loc_4052c0;
case kloc_4052e0: 	goto loc_4052e0;
case kloc_405300: 	goto loc_405300;
case kloc_405320: 	goto loc_405320;
case kloc_405340: 	goto loc_405340;
case kloc_405360: 	goto loc_405360;
case kloc_4053a7: 	goto loc_4053a7;
case kloc_4053ff: 	goto loc_4053ff;
case kloc_405456: 	goto loc_405456;
case kloc_405532: 	goto loc_405532;
case kloc_405552: 	goto loc_405552;
case kloc_405572: 	goto loc_405572;
case kloc_405592: 	goto loc_405592;
case kloc_4055b2: 	goto loc_4055b2;
case kloc_4055d2: 	goto loc_4055d2;
case kloc_4055f2: 	goto loc_4055f2;
case kloc_40563e: 	goto loc_40563e;
case kloc_4056a0: 	goto loc_4056a0;
case kloc_40572c: 	goto loc_40572c;
case kloc_40574c: 	goto loc_40574c;
case kloc_40576c: 	goto loc_40576c;
case kloc_40578c: 	goto loc_40578c;
case kloc_4057ac: 	goto loc_4057ac;
case kloc_4057cc: 	goto loc_4057cc;
case kloc_4057ec: 	goto loc_4057ec;
case kloc_405838: 	goto loc_405838;
case kloc_40589a: 	goto loc_40589a;
case kloc_405926: 	goto loc_405926;
case kloc_405946: 	goto loc_405946;
case kloc_405966: 	goto loc_405966;
case kloc_405986: 	goto loc_405986;
case kloc_4059a6: 	goto loc_4059a6;
case kloc_4059c6: 	goto loc_4059c6;
case kloc_4059e6: 	goto loc_4059e6;
case kloc_405a2e: 	goto loc_405a2e;
case kloc_405a85: 	goto loc_405a85;
case kloc_405b0a: 	goto loc_405b0a;
case kloc_405b2a: 	goto loc_405b2a;
case kloc_405b4a: 	goto loc_405b4a;
case kloc_405b6a: 	goto loc_405b6a;
case kloc_405b8a: 	goto loc_405b8a;
case kloc_405baa: 	goto loc_405baa;
case kloc_405bca: 	goto loc_405bca;
case kloc_405c12: 	goto loc_405c12;
case kloc_405c69: 	goto loc_405c69;
case kloc_405cee: 	goto loc_405cee;
case kloc_405d0e: 	goto loc_405d0e;
case kloc_405d2e: 	goto loc_405d2e;
case kloc_405d4e: 	goto loc_405d4e;
case kloc_405d6e: 	goto loc_405d6e;
case kloc_405d8e: 	goto loc_405d8e;
case kloc_405dae: 	goto loc_405dae;
case kloc_405df6: 	goto loc_405df6;
case kloc_405e4d: 	goto loc_405e4d;
case kloc_405ed2: 	goto loc_405ed2;
case kloc_405ef2: 	goto loc_405ef2;
case kloc_405f12: 	goto loc_405f12;
case kloc_405f32: 	goto loc_405f32;
case kloc_405f52: 	goto loc_405f52;
case kloc_405f72: 	goto loc_405f72;
case kloc_405f92: 	goto loc_405f92;
case kloc_405fda: 	goto loc_405fda;
case kloc_406031: 	goto loc_406031;
case kloc_4060b6: 	goto loc_4060b6;
case kloc_4060d6: 	goto loc_4060d6;
case kloc_4060f6: 	goto loc_4060f6;
case kloc_406116: 	goto loc_406116;
case kloc_406136: 	goto loc_406136;
case kloc_406156: 	goto loc_406156;
case kloc_406176: 	goto loc_406176;
case kloc_4068f5: 	goto loc_4068f5;
case kloc_40698c: 	goto loc_40698c;
case kloc_406a1f: 	goto loc_406a1f;
case kloc_406aaf: 	goto loc_406aaf;
case kloc_406b3f: 	goto loc_406b3f;
case kloc_406bcf: 	goto loc_406bcf;
case kloc_406c5a: 	goto loc_406c5a;
case kloc_406cf8: 	goto loc_406cf8;
case kloc_406d8e: 	goto loc_406d8e;
case kloc_406e24: 	goto loc_406e24;
case kloc_406eba: 	goto loc_406eba;
case kloc_406f50: 	goto loc_406f50;
case kloc_406fe6: 	goto loc_406fe6;
case kloc_40707c: 	goto loc_40707c;
case kloc_407112: 	goto loc_407112;
case kloc_4071a8: 	goto loc_4071a8;
case kloc_40723e: 	goto loc_40723e;
case kloc_4072d4: 	goto loc_4072d4;
case kloc_40736a: 	goto loc_40736a;
case kloc_407400: 	goto loc_407400;
case kloc_407496: 	goto loc_407496;
case kloc_40752c: 	goto loc_40752c;
case kloc_4075c2: 	goto loc_4075c2;
case kloc_407658: 	goto loc_407658;
case kloc_4076ee: 	goto loc_4076ee;
case kloc_407784: 	goto loc_407784;
case kloc_40781a: 	goto loc_40781a;
case kloc_4078b0: 	goto loc_4078b0;
case kloc_407e46: 	goto loc_407e46;
case kloc_407f72: 	goto loc_407f72;
case kloc_408008: 	goto loc_408008;
case kloc_40809e: 	goto loc_40809e;
case kloc_408139: 	goto loc_408139;
case kloc_4081d5: 	goto loc_4081d5;
case kloc_4081f6: 	goto loc_4081f6;
case kloc_408229: 	goto loc_408229;
case kloc_408252: 	goto loc_408252;
case kloc_4082cf: 	goto loc_4082cf;
case kloc_40834c: 	goto loc_40834c;
case kloc_4083c9: 	goto loc_4083c9;
case kloc_4083e9: 	goto loc_4083e9;
case kloc_40841b: 	goto loc_40841b;
case kloc_408444: 	goto loc_408444;
case kloc_408464: 	goto loc_408464;
case kloc_408496: 	goto loc_408496;
case kloc_4084bf: 	goto loc_4084bf;
case kloc_4084df: 	goto loc_4084df;
case kloc_408511: 	goto loc_408511;
case kloc_40853a: 	goto loc_40853a;
case kloc_40855a: 	goto loc_40855a;
case kloc_40858c: 	goto loc_40858c;
case kloc_409652: 	goto loc_409652;
case kloc_40b72a: 	goto loc_40b72a;
case kloc_40b7ad: 	goto loc_40b7ad;
case kloc_40d571: 	goto loc_40d571;
case kloc_40d581: 	goto loc_40d581;
case kmain: 	goto main;
case ksub_40d5c0: 	goto sub_40d5c0;
case ktest_adc: 	goto test_adc;
case ktest_add: 	goto test_add;
case ktest_and: 	goto test_and;
case ktest_bcd: 	goto test_bcd;
case ktest_bsx: 	goto test_bsx;
case ktest_bt: 	goto test_bt;
case ktest_btc: 	goto test_btc;
case ktest_btr: 	goto test_btr;
case ktest_bts: 	goto test_bts;
case ktest_cmp: 	goto test_cmp;
case ktest_conv: 	goto test_conv;
case ktest_dec: 	goto test_dec;
case ktest_divb: 	goto test_divb;
case ktest_divl: 	goto test_divl;
case ktest_divw: 	goto test_divw;
case ktest_idivb: 	goto test_idivb;
case ktest_idivl: 	goto test_idivl;
case ktest_idivw: 	goto test_idivw;
case ktest_imulb: 	goto test_imulb;
case ktest_imull: 	goto test_imull;
case ktest_imull2: 	goto test_imull2;
case ktest_imulw: 	goto test_imulw;
case ktest_imulw2: 	goto test_imulw2;
case ktest_inc: 	goto test_inc;
case ktest_jcc: 	goto test_jcc;
case ktest_lea: 	goto test_lea;
case ktest_loop: 	goto test_loop;
case ktest_misc: 	goto test_misc;
case ktest_mul: 	goto test_mul;
case ktest_mulb: 	goto test_mulb;
case ktest_mull: 	goto test_mull;
case ktest_mulw: 	goto test_mulw;
case ktest_neg: 	goto test_neg;
case ktest_not: 	goto test_not;
case ktest_or: 	goto test_or;
case ktest_popcnt: 	goto test_popcnt;
case ktest_rcl: 	goto test_rcl;
case ktest_rcr: 	goto test_rcr;
case ktest_rol: 	goto test_rol;
case ktest_ror: 	goto test_ror;
case ktest_sar: 	goto test_sar;
case ktest_sbb: 	goto test_sbb;
case ktest_shl: 	goto test_shl;
case ktest_shld: 	goto test_shld;
case ktest_shr: 	goto test_shr;
case ktest_shrd: 	goto test_shrd;
case ktest_string: 	goto test_string;
case ktest_sub: 	goto test_sub;
case ktest_xchg: 	goto test_xchg;
case ktest_xor: 	goto test_xor;
default: log_error("Jump/call to nothere %d\n", __disp);stackDump(_state); abort();
};
}

 
struct Memory m = {
{0}, // padding
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // segment _text
{4294967295,4249024,0}, // dword_40D5D0
{4294967295,0,0,0,0,0,0,0,0}, // dword_40D5DC
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // dummy2
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // segment _data
0, // dword_40E000
0, // unk_40E004
0, // dummy3
0, // dummy4
0, // dummy5
0, // unk_40E008
0, // dummy6
0, // dummy7
0, // dummy8
1, // dummy9
0, // dummy10
0, // dummy11
0, // dummy12
0, // dummy13
0, // dummy14
1, // dummy15
0, // dummy16
1, // dummy17
0, // dummy18
1, // dummy19
0, // dummy20
0, // unk_40E060
0, // dummy21
0, // dummy22
0, // dummy23
0, // dummy24
0, // dummy25
0, // dummy26
0, // dummy27
0, // dummy28
0, // dummy29
0, // dummy30
0, // dummy31
0, // dummy32
0, // dummy33
0, // dummy34
0, // dummy35
0, // dummy36
0, // dummy37
0, // dummy38
0, // dummy39
0, // dummy40
0, // dummy41
0, // dummy42
0, // dummy43
0, // dummy44
0, // dummy45
0, // dummy46
0, // dummy47
0, // dummy48
0, // dummy49
0, // dummy50
0, // dummy51
0, // dummy52
0, // dummy53
0, // dummy54
0, // dummy55
0, // dummy56
0, // dummy57
0, // dummy58
0, // dummy59
0, // dummy60
0, // dummy61
0, // dummy62
0, // dummy63
0, // dummy64
0, // dummy65
0, // dummy66
0, // dummy67
0, // dummy68
0, // dummy69
0, // dummy70
0, // dummy71
0, // dummy72
0, // dummy73
0, // dummy74
0, // dummy75
0, // dummy76
0, // dummy77
0, // dummy78
0, // dummy79
0, // dummy80
0, // dummy81
0, // dummy82
0, // dummy83
0, // dummy84
0, // dummy85
0, // dummy86
0, // dummy87
0, // dummy88
0, // dummy89
0, // dummy90
0, // dummy91
0, // dummy92
0, // dummy93
0, // dummy94
0, // dummy95
0, // dummy96
0, // dummy97
0, // dummy98
0, // dummy99
0, // dummy100
0, // dummy101
0, // dummy102
0, // dummy103
0, // dummy104
0, // dummy105
0, // dummy106
0, // dummy107
0, // dummy108
0, // dummy109
0, // dummy110
0, // dummy111
0, // dummy112
0, // dummy113
0, // dummy114
0, // dummy115
0, // dummy116
0, // dummy117
0, // dummy118
0, // dummy119
0, // dummy120
0, // dummy121
0, // dummy122
0, // dummy123
0, // dummy124
0, // dummy125
0, // dummy126
0, // dummy127
0, // dummy128
0, // dummy129
0, // dummy130
0, // dummy131
0, // dummy132
0, // dummy133
0, // dummy134
0, // dummy135
0, // dummy136
0, // dummy137
0, // dummy138
0, // dummy139
0, // dummy140
0, // dummy141
0, // dummy142
0, // dummy143
0, // dummy144
0, // dummy145
0, // dummy146
0, // dummy147
0, // dummy148
0, // dummy149
0, // dummy150
0, // dummy151
0, // dummy152
0, // dummy153
0, // dummy154
0, // dummy155
0, // dummy156
0, // dummy157
0, // dummy158
0, // dummy159
0, // dummy160
0, // dummy161
0, // dummy162
0, // dummy163
0, // dummy164
0, // dummy165
0, // dummy166
0, // dummy167
0, // dummy168
0, // dummy169
0, // dummy170
0, // dummy171
0, // dummy172
0, // dummy173
0, // dummy174
0, // dummy175
0, // dummy176
0, // dummy177
0, // dummy178
0, // dummy179
0, // dummy180
0, // dummy181
0, // dummy182
0, // dummy183
0, // dummy184
0, // dummy185
0, // dummy186
0, // dummy187
0, // dummy188
0, // dummy189
0, // dummy190
0, // dummy191
0, // dummy192
0, // dummy193
0, // dummy194
0, // dummy195
0, // dummy196
0, // dummy197
0, // dummy198
0, // dummy199
0, // dummy200
0, // dummy201
0, // dummy202
0, // dummy203
0, // dummy204
0, // dummy205
0, // dummy206
0, // dummy207
0, // dummy208
0, // dummy209
0, // dummy210
0, // dummy211
0, // dummy212
0, // dummy213
0, // dummy214
0, // dummy215
0, // dummy216
0, // dummy217
0, // dummy218
0, // dummy219
0, // dummy220
0, // dummy221
0, // dummy222
0, // dummy223
0, // dummy224
0, // dummy225
0, // dummy226
0, // dummy227
0, // dummy228
0, // dummy229
0, // dummy230
0, // dummy231
0, // dummy232
0, // dummy233
0, // dummy234
0, // dummy235
0, // dummy236
0, // dummy237
0, // dummy238
0, // dummy239
0, // dummy240
0, // dummy241
0, // dummy242
0, // dummy243
0, // dummy244
0, // dummy245
0, // dummy246
0, // dummy247
0, // dummy248
0, // dummy249
0, // dummy250
0, // dummy251
0, // dummy252
0, // dummy253
0, // dummy254
0, // dummy255
0, // dummy256
0, // dummy257
0, // dummy258
0, // dummy259
0, // dummy260
0, // dummy261
0, // dummy262
0, // dummy263
0, // dummy264
0, // dummy265
0, // dummy266
0, // dummy267
0, // dummy268
0, // dummy269
0, // dummy270
0, // dummy271
0, // dummy272
0, // dummy273
0, // dummy274
0, // dummy275
0, // dummy276
0, // dummy277
0, // dummy278
0, // dummy279
0, // dummy280
0, // dummy281
0, // dummy282
0, // dummy283
0, // dummy284
0, // dummy285
0, // dummy286
0, // dummy287
0, // dummy288
0, // dummy289
0, // dummy290
0, // dummy291
0, // dummy292
0, // dummy293
0, // dummy294
0, // dummy295
0, // dummy296
0, // dummy297
0, // dummy298
0, // dummy299
0, // dummy300
0, // dummy301
0, // dummy302
0, // dummy303
0, // dummy304
0, // dummy305
0, // dummy306
0, // dummy307
0, // dummy308
0, // dummy309
0, // dummy310
0, // dummy311
0, // dummy312
0, // dummy313
0, // dummy314
0, // dummy315
0, // dummy316
0, // dummy317
0, // dummy318
0, // dummy319
0, // dummy320
0, // dummy321
0, // dummy322
0, // dummy323
0, // dummy324
0, // dummy325
0, // dummy326
0, // dummy327
0, // dummy328
0, // dummy329
0, // dummy330
0, // dummy331
0, // dummy332
0, // dummy333
0, // dummy334
0, // dummy335
0, // dummy336
0, // dummy337
0, // dummy338
0, // dummy339
0, // dummy340
0, // dummy341
0, // dummy342
0, // dummy343
0, // dummy344
0, // dummy345
0, // dummy346
0, // dummy347
0, // dummy348
0, // dummy349
0, // dummy350
0, // dummy351
0, // dummy352
0, // dummy353
0, // dummy354
0, // dummy355
0, // dummy356
0, // dummy357
0, // dummy358
0, // dummy359
0, // dummy360
0, // dummy361
0, // dummy362
0, // dummy363
0, // dummy364
0, // dummy365
0, // dummy366
0, // dummy367
0, // dummy368
0, // dummy369
0, // dummy370
0, // dummy371
0, // dummy372
0, // dummy373
0, // dummy374
0, // dummy375
0, // dummy376
0, // dummy377
0, // dummy378
0, // dummy379
0, // dummy380
0, // dummy381
0, // dummy382
0, // dummy383
0, // dummy384
0, // dummy385
0, // dummy386
0, // dummy387
0, // dummy388
0, // dummy389
0, // dummy390
0, // dummy391
0, // dummy392
0, // dummy393
0, // dummy394
0, // dummy395
0, // dummy396
0, // dummy397
0, // dummy398
0, // dummy399
0, // dummy400
0, // dummy401
0, // dummy402
0, // dummy403
0, // dummy404
0, // dummy405
0, // dummy406
0, // dummy407
0, // dummy408
0, // dummy409
0, // dummy410
0, // dummy411
0, // dummy412
0, // dummy413
0, // dummy414
0, // dummy415
0, // dummy416
0, // dummy417
0, // dummy418
0, // dummy419
0, // dummy420
0, // dummy421
0, // dummy422
0, // dummy423
0, // dummy424
0, // dummy425
0, // dummy426
0, // dummy427
0, // dummy428
0, // dummy429
0, // dummy430
0, // dummy431
0, // dummy432
0, // dummy433
0, // dummy434
0, // dummy435
0, // dummy436
0, // dummy437
0, // dummy438
0, // dummy439
0, // dummy440
0, // dummy441
0, // dummy442
0, // dummy443
0, // dummy444
0, // dummy445
0, // dummy446
0, // dummy447
0, // dummy448
0, // dummy449
0, // dummy450
0, // dummy451
0, // dummy452
0, // dummy453
0, // dummy454
0, // dummy455
0, // dummy456
0, // dummy457
0, // dummy458
0, // dummy459
0, // dummy460
0, // dummy461
0, // dummy462
0, // dummy463
0, // dummy464
0, // dummy465
0, // dummy466
0, // dummy467
0, // dummy468
0, // dummy469
0, // dummy470
0, // dummy471
0, // dummy472
0, // dummy473
0, // dummy474
0, // dummy475
0, // dummy476
0, // dummy477
0, // dummy478
0, // dummy479
0, // dummy480
0, // dummy481
0, // dummy482
0, // dummy483
0, // dummy484
0, // dummy485
0, // dummy486
0, // dummy487
0, // dummy488
0, // dummy489
0, // dummy490
0, // dummy491
0, // dummy492
0, // dummy493
0, // dummy494
0, // dummy495
0, // dummy496
0, // dummy497
0, // dummy498
0, // dummy499
0, // dummy500
0, // dummy501
0, // dummy502
0, // dummy503
0, // dummy504
0, // dummy505
0, // dummy506
0, // dummy507
0, // dummy508
0, // dummy509
0, // dummy510
0, // dummy511
0, // dummy512
0, // dummy513
0, // dummy514
0, // dummy515
0, // dummy516
0, // dummy517
0, // dummy518
0, // dummy519
0, // dummy520
0, // dummy521
0, // dummy522
0, // dummy523
0, // dummy524
0, // dummy525
0, // dummy526
0, // dummy527
0, // dummy528
0, // dummy529
0, // dummy530
0, // dummy531
0, // dummy532
0, // dummy533
0, // dummy534
0, // dummy535
0, // dummy536
0, // dummy537
0, // dummy538
0, // dummy539
0, // dummy540
0, // dummy541
0, // dummy542
0, // dummy543
0, // dummy544
0, // dummy545
0, // dummy546
0, // dummy547
0, // dummy548
0, // dummy549
0, // dummy550
0, // dummy551
0, // dummy552
0, // dummy553
0, // dummy554
0, // dummy555
0, // dummy556
0, // dummy557
0, // dummy558
0, // dummy559
0, // dummy560
0, // dummy561
0, // dummy562
0, // dummy563
0, // dummy564
0, // dummy565
0, // dummy566
0, // dummy567
0, // dummy568
0, // dummy569
0, // dummy570
0, // dummy571
0, // dummy572
0, // dummy573
0, // dummy574
0, // dummy575
0, // dummy576
0, // dummy577
0, // dummy578
0, // dummy579
0, // dummy580
0, // dummy581
0, // dummy582
0, // dummy583
0, // dummy584
0, // dummy585
0, // dummy586
0, // dummy587
0, // dummy588
0, // dummy589
0, // dummy590
0, // dummy591
0, // dummy592
0, // dummy593
0, // dummy594
0, // dummy595
0, // dummy596
0, // dummy597
0, // dummy598
0, // dummy599
0, // dummy600
0, // dummy601
0, // dummy602
0, // dummy603
0, // dummy604
0, // dummy605
0, // dummy606
0, // dummy607
0, // dummy608
0, // dummy609
0, // dummy610
0, // dummy611
0, // dummy612
0, // dummy613
0, // dummy614
0, // dummy615
0, // dummy616
0, // dummy617
0, // dummy618
0, // dummy619
0, // dummy620
0, // dummy621
0, // dummy622
0, // dummy623
0, // dummy624
0, // dummy625
0, // dummy626
0, // dummy627
0, // dummy628
0, // dummy629
0, // dummy630
0, // dummy631
0, // dummy632
0, // dummy633
0, // dummy634
0, // dummy635
0, // dummy636
0, // dummy637
0, // dummy638
0, // dummy639
0, // dummy640
0, // dummy641
0, // dummy642
0, // dummy643
0, // dummy644
0, // dummy645
0, // dummy646
0, // dummy647
0, // dummy648
0, // dummy649
0, // dummy650
0, // dummy651
0, // dummy652
0, // dummy653
0, // dummy654
0, // dummy655
0, // dummy656
0, // dummy657
0, // dummy658
0, // dummy659
0, // dummy660
0, // dummy661
0, // dummy662
0, // dummy663
0, // dummy664
0, // dummy665
0, // dummy666
0, // dummy667
0, // dummy668
0, // dummy669
0, // dummy670
0, // dummy671
0, // dummy672
0, // dummy673
0, // dummy674
0, // dummy675
0, // dummy676
0, // dummy677
0, // dummy678
0, // dummy679
0, // dummy680
0, // dummy681
0, // dummy682
0, // dummy683
0, // dummy684
0, // dummy685
0, // dummy686
0, // dummy687
0, // dummy688
0, // dummy689
0, // dummy690
0, // dummy691
0, // dummy692
0, // dummy693
0, // dummy694
0, // dummy695
0, // dummy696
0, // dummy697
0, // dummy698
0, // dummy699
0, // dummy700
0, // dummy701
0, // dummy702
0, // dummy703
0, // dummy704
0, // dummy705
0, // dummy706
0, // dummy707
0, // dummy708
0, // dummy709
0, // dummy710
0, // dummy711
0, // dummy712
0, // dummy713
0, // dummy714
0, // dummy715
0, // dummy716
0, // dummy717
0, // dummy718
0, // dummy719
0, // dummy720
0, // dummy721
0, // dummy722
0, // dummy723
0, // dummy724
0, // dummy725
0, // dummy726
0, // dummy727
0, // dummy728
0, // dummy729
0, // dummy730
0, // dummy731
0, // dummy732
0, // dummy733
0, // dummy734
0, // dummy735
0, // dummy736
0, // dummy737
0, // dummy738
0, // dummy739
0, // dummy740
0, // dummy741
0, // dummy742
0, // dummy743
0, // dummy744
0, // dummy745
0, // dummy746
0, // dummy747
0, // dummy748
0, // dummy749
0, // dummy750
0, // dummy751
0, // dummy752
0, // dummy753
0, // dummy754
0, // dummy755
0, // dummy756
0, // dummy757
0, // dummy758
0, // dummy759
0, // dummy760
0, // dummy761
0, // dummy762
0, // dummy763
0, // dummy764
0, // dummy765
0, // dummy766
0, // dummy767
0, // dummy768
0, // dummy769
0, // dummy770
0, // dummy771
0, // dummy772
0, // dummy773
0, // dummy774
0, // dummy775
0, // dummy776
0, // dummy777
0, // dummy778
0, // dummy779
0, // dummy780
0, // dummy781
0, // dummy782
0, // dummy783
0, // dummy784
0, // dummy785
0, // dummy786
0, // dummy787
0, // dummy788
0, // dummy789
0, // dummy790
0, // dummy791
0, // dummy792
0, // dummy793
0, // dummy794
0, // dummy795
0, // dummy796
0, // dummy797
0, // dummy798
0, // dummy799
0, // dummy800
0, // dummy801
0, // dummy802
0, // dummy803
0, // dummy804
0, // dummy805
0, // dummy806
0, // dummy807
0, // dummy808
0, // dummy809
0, // dummy810
0, // dummy811
0, // dummy812
0, // dummy813
0, // dummy814
0, // dummy815
0, // dummy816
0, // dummy817
0, // dummy818
0, // dummy819
0, // dummy820
0, // dummy821
0, // dummy822
0, // dummy823
0, // dummy824
0, // dummy825
0, // dummy826
0, // dummy827
0, // dummy828
0, // dummy829
0, // dummy830
0, // dummy831
0, // dummy832
0, // dummy833
0, // dummy834
0, // dummy835
0, // dummy836
0, // dummy837
0, // dummy838
0, // dummy839
0, // dummy840
0, // dummy841
0, // dummy842
0, // dummy843
0, // dummy844
0, // dummy845
0, // dummy846
0, // dummy847
0, // dummy848
0, // dummy849
0, // dummy850
0, // dummy851
0, // dummy852
0, // dummy853
0, // dummy854
0, // dummy855
0, // dummy856
0, // dummy857
0, // dummy858
0, // dummy859
0, // dummy860
0, // dummy861
0, // dummy862
0, // dummy863
0, // dummy864
0, // dummy865
0, // dummy866
0, // dummy867
0, // dummy868
0, // dummy869
0, // dummy870
0, // dummy871
0, // dummy872
0, // dummy873
0, // dummy874
0, // dummy875
0, // dummy876
0, // dummy877
0, // dummy878
0, // dummy879
0, // dummy880
0, // dummy881
0, // dummy882
0, // dummy883
0, // dummy884
0, // dummy885
0, // dummy886
0, // dummy887
0, // dummy888
0, // dummy889
0, // dummy890
0, // dummy891
0, // dummy892
0, // dummy893
0, // dummy894
0, // dummy895
0, // dummy896
0, // dummy897
0, // dummy898
0, // dummy899
0, // dummy900
0, // dummy901
0, // dummy902
0, // dummy903
0, // dummy904
0, // dummy905
0, // dummy906
0, // dummy907
0, // dummy908
0, // dummy909
0, // dummy910
0, // dummy911
0, // dummy912
0, // dummy913
0, // dummy914
0, // dummy915
0, // dummy916
0, // dummy917
0, // dummy918
0, // dummy919
0, // dummy920
0, // dummy921
0, // dummy922
0, // dummy923
0, // dummy924
0, // dummy925
0, // dummy926
0, // dummy927
0, // dummy928
0, // dummy929
0, // dummy930
0, // dummy931
0, // dummy932
0, // dummy933
0, // dummy934
0, // dummy935
0, // dummy936
0, // dummy937
0, // dummy938
0, // dummy939
0, // dummy940
0, // dummy941
0, // dummy942
0, // dummy943
0, // dummy944
0, // dummy945
0, // dummy946
0, // dummy947
0, // dummy948
0, // dummy949
0, // dummy950
0, // dummy951
0, // dummy952
0, // dummy953
0, // dummy954
0, // dummy955
0, // dummy956
0, // dummy957
0, // dummy958
0, // dummy959
0, // dummy960
0, // dummy961
0, // dummy962
0, // dummy963
0, // dummy964
0, // dummy965
0, // dummy966
0, // dummy967
0, // dummy968
0, // dummy969
0, // dummy970
0, // dummy971
0, // dummy972
0, // dummy973
0, // dummy974
0, // dummy975
0, // dummy976
0, // dummy977
0, // dummy978
0, // dummy979
0, // dummy980
0, // dummy981
0, // dummy982
0, // dummy983
0, // dummy984
0, // dummy985
0, // dummy986
0, // dummy987
0, // dummy988
0, // dummy989
0, // dummy990
0, // dummy991
0, // dummy992
0, // dummy993
0, // dummy994
0, // dummy995
0, // dummy996
0, // dummy997
0, // dummy998
0, // dummy999
0, // dummy1000
0, // dummy1001
0, // dummy1002
0, // dummy1003
0, // dummy1004
0, // dummy1005
0, // dummy1006
0, // dummy1007
0, // dummy1008
0, // dummy1009
0, // dummy1010
0, // dummy1011
0, // dummy1012
0, // dummy1013
0, // dummy1014
0, // dummy1015
0, // dummy1016
0, // dummy1017
0, // dummy1018
0, // dummy1019
0, // dummy1020
0, // dummy1021
0, // dummy1022
0, // dummy1023
0, // dummy1024
0, // dummy1025
0, // dummy1026
0, // dummy1027
0, // dummy1028
0, // dummy1029
0, // dummy1030
0, // dummy1031
0, // dummy1032
0, // dummy1033
0, // dummy1034
0, // dummy1035
0, // dummy1036
0, // dummy1037
0, // dummy1038
0, // dummy1039
0, // dummy1040
0, // dummy1041
0, // dummy1042
0, // dummy1043
0, // dummy1044
0, // dummy1045
0, // dummy1046
0, // dummy1047
0, // dummy1048
0, // dummy1049
0, // dummy1050
0, // dummy1051
0, // dummy1052
0, // dummy1053
0, // dummy1054
0, // dummy1055
0, // dummy1056
0, // dummy1057
0, // dummy1058
0, // dummy1059
0, // dummy1060
0, // dummy1061
0, // dummy1062
0, // dummy1063
0, // dummy1064
0, // dummy1065
0, // dummy1066
0, // dummy1067
0, // dummy1068
0, // dummy1069
0, // dummy1070
0, // dummy1071
0, // dummy1072
0, // dummy1073
0, // dummy1074
0, // dummy1075
0, // dummy1076
0, // dummy1077
0, // dummy1078
0, // dummy1079
0, // dummy1080
0, // dummy1081
0, // dummy1082
0, // dummy1083
0, // dummy1084
0, // dummy1085
0, // dummy1086
0, // dummy1087
0, // dummy1088
0, // dummy1089
0, // dummy1090
0, // dummy1091
0, // dummy1092
0, // dummy1093
0, // dummy1094
0, // dummy1095
0, // dummy1096
0, // dummy1097
0, // dummy1098
0, // dummy1099
0, // dummy1100
0, // dummy1101
0, // dummy1102
0, // dummy1103
0, // dummy1104
0, // dummy1105
0, // dummy1106
0, // dummy1107
0, // dummy1108
0, // dummy1109
0, // dummy1110
0, // dummy1111
0, // dummy1112
0, // dummy1113
0, // dummy1114
0, // dummy1115
0, // dummy1116
0, // dummy1117
0, // dummy1118
0, // dummy1119
0, // dummy1120
0, // dummy1121
0, // dummy1122
0, // dummy1123
0, // dummy1124
0, // dummy1125
0, // dummy1126
0, // dummy1127
0, // dummy1128
0, // dummy1129
0, // dummy1130
0, // dummy1131
0, // dummy1132
0, // dummy1133
0, // dummy1134
0, // dummy1135
0, // dummy1136
0, // dummy1137
0, // dummy1138
0, // dummy1139
0, // dummy1140
0, // dummy1141
0, // dummy1142
0, // dummy1143
0, // dummy1144
0, // dummy1145
0, // dummy1146
0, // dummy1147
0, // dummy1148
0, // dummy1149
0, // dummy1150
0, // dummy1151
0, // dummy1152
0, // dummy1153
0, // dummy1154
0, // dummy1155
0, // dummy1156
0, // dummy1157
0, // dummy1158
0, // dummy1159
0, // dummy1160
0, // dummy1161
0, // dummy1162
0, // dummy1163
0, // dummy1164
0, // dummy1165
0, // dummy1166
0, // dummy1167
0, // dummy1168
0, // dummy1169
0, // dummy1170
0, // dummy1171
0, // dummy1172
0, // dummy1173
0, // dummy1174
0, // dummy1175
0, // dummy1176
0, // dummy1177
0, // dummy1178
0, // dummy1179
0, // dummy1180
0, // dummy1181
0, // dummy1182
0, // dummy1183
0, // dummy1184
0, // dummy1185
0, // dummy1186
0, // dummy1187
0, // dummy1188
0, // dummy1189
0, // dummy1190
0, // dummy1191
0, // dummy1192
0, // dummy1193
0, // dummy1194
0, // dummy1195
0, // dummy1196
0, // dummy1197
0, // dummy1198
0, // dummy1199
0, // dummy1200
0, // dummy1201
0, // dummy1202
0, // dummy1203
0, // dummy1204
0, // dummy1205
0, // dummy1206
0, // dummy1207
0, // dummy1208
0, // dummy1209
0, // dummy1210
0, // dummy1211
0, // dummy1212
0, // dummy1213
0, // dummy1214
0, // dummy1215
0, // dummy1216
0, // dummy1217
0, // dummy1218
0, // dummy1219
0, // dummy1220
0, // dummy1221
0, // dummy1222
0, // dummy1223
0, // dummy1224
0, // dummy1225
0, // dummy1226
0, // dummy1227
0, // dummy1228
0, // dummy1229
0, // dummy1230
0, // dummy1231
0, // dummy1232
0, // dummy1233
0, // dummy1234
0, // dummy1235
0, // dummy1236
0, // dummy1237
0, // dummy1238
0, // dummy1239
0, // dummy1240
0, // dummy1241
0, // dummy1242
0, // dummy1243
0, // dummy1244
0, // dummy1245
0, // dummy1246
0, // dummy1247
0, // dummy1248
0, // dummy1249
0, // dummy1250
0, // dummy1251
0, // dummy1252
0, // dummy1253
0, // dummy1254
0, // dummy1255
0, // dummy1256
0, // dummy1257
0, // dummy1258
0, // dummy1259
0, // dummy1260
0, // dummy1261
0, // dummy1262
0, // dummy1263
0, // dummy1264
0, // dummy1265
0, // dummy1266
0, // dummy1267
0, // dummy1268
0, // dummy1269
0, // dummy1270
0, // dummy1271
0, // dummy1272
0, // dummy1273
0, // dummy1274
0, // dummy1275
0, // dummy1276
0, // dummy1277
0, // dummy1278
0, // dummy1279
0, // dummy1280
0, // dummy1281
0, // dummy1282
0, // dummy1283
0, // dummy1284
0, // dummy1285
0, // dummy1286
0, // dummy1287
0, // dummy1288
0, // dummy1289
0, // dummy1290
0, // dummy1291
0, // dummy1292
0, // dummy1293
0, // dummy1294
0, // dummy1295
0, // dummy1296
0, // dummy1297
0, // dummy1298
0, // dummy1299
0, // dummy1300
0, // dummy1301
0, // dummy1302
0, // dummy1303
0, // dummy1304
0, // dummy1305
0, // dummy1306
0, // dummy1307
0, // dummy1308
0, // dummy1309
0, // dummy1310
0, // dummy1311
0, // dummy1312
0, // dummy1313
0, // dummy1314
0, // dummy1315
0, // dummy1316
0, // dummy1317
0, // dummy1318
0, // dummy1319
0, // dummy1320
0, // dummy1321
0, // dummy1322
0, // dummy1323
0, // dummy1324
0, // dummy1325
0, // dummy1326
0, // dummy1327
0, // dummy1328
0, // dummy1329
0, // dummy1330
0, // dummy1331
0, // dummy1332
0, // dummy1333
0, // dummy1334
0, // dummy1335
0, // dummy1336
0, // dummy1337
0, // dummy1338
0, // dummy1339
0, // dummy1340
0, // dummy1341
0, // dummy1342
0, // dummy1343
0, // dummy1344
0, // dummy1345
0, // dummy1346
0, // dummy1347
0, // dummy1348
0, // dummy1349
0, // dummy1350
0, // dummy1351
0, // dummy1352
0, // dummy1353
0, // dummy1354
0, // dummy1355
0, // dummy1356
0, // dummy1357
0, // dummy1358
0, // dummy1359
0, // dummy1360
0, // dummy1361
0, // dummy1362
0, // dummy1363
0, // dummy1364
0, // dummy1365
0, // dummy1366
0, // dummy1367
0, // dummy1368
0, // dummy1369
0, // dummy1370
0, // dummy1371
0, // dummy1372
0, // dummy1373
0, // dummy1374
0, // dummy1375
0, // dummy1376
0, // dummy1377
0, // dummy1378
0, // dummy1379
0, // dummy1380
0, // dummy1381
0, // dummy1382
0, // dummy1383
0, // dummy1384
0, // dummy1385
0, // dummy1386
0, // dummy1387
0, // dummy1388
0, // dummy1389
0, // dummy1390
0, // dummy1391
0, // dummy1392
0, // dummy1393
0, // dummy1394
0, // dummy1395
0, // dummy1396
0, // dummy1397
0, // dummy1398
0, // dummy1399
0, // dummy1400
0, // dummy1401
0, // dummy1402
0, // dummy1403
0, // dummy1404
0, // dummy1405
0, // dummy1406
0, // dummy1407
0, // dummy1408
0, // dummy1409
0, // dummy1410
0, // dummy1411
0, // dummy1412
0, // dummy1413
0, // dummy1414
0, // dummy1415
0, // dummy1416
0, // dummy1417
0, // dummy1418
0, // dummy1419
0, // dummy1420
0, // dummy1421
0, // dummy1422
0, // dummy1423
0, // dummy1424
0, // dummy1425
0, // dummy1426
0, // dummy1427
0, // dummy1428
0, // dummy1429
0, // dummy1430
0, // dummy1431
0, // dummy1432
0, // dummy1433
0, // dummy1434
0, // dummy1435
0, // dummy1436
0, // dummy1437
0, // dummy1438
0, // dummy1439
0, // dummy1440
0, // dummy1441
0, // dummy1442
0, // dummy1443
0, // dummy1444
0, // dummy1445
0, // dummy1446
0, // dummy1447
0, // dummy1448
0, // dummy1449
0, // dummy1450
0, // dummy1451
0, // dummy1452
0, // dummy1453
0, // dummy1454
0, // dummy1455
0, // dummy1456
0, // dummy1457
0, // dummy1458
0, // dummy1459
0, // dummy1460
0, // dummy1461
0, // dummy1462
0, // dummy1463
0, // dummy1464
0, // dummy1465
0, // dummy1466
0, // dummy1467
0, // dummy1468
0, // dummy1469
0, // dummy1470
0, // dummy1471
0, // dummy1472
0, // dummy1473
0, // dummy1474
0, // dummy1475
0, // dummy1476
0, // dummy1477
0, // dummy1478
0, // dummy1479
0, // dummy1480
0, // dummy1481
0, // dummy1482
0, // dummy1483
0, // dummy1484
0, // dummy1485
0, // dummy1486
0, // dummy1487
0, // dummy1488
0, // dummy1489
0, // dummy1490
0, // dummy1491
0, // dummy1492
0, // dummy1493
0, // dummy1494
0, // dummy1495
0, // dummy1496
0, // dummy1497
0, // dummy1498
0, // dummy1499
0, // dummy1500
0, // dummy1501
0, // dummy1502
0, // dummy1503
0, // dummy1504
0, // dummy1505
0, // dummy1506
0, // dummy1507
0, // dummy1508
0, // dummy1509
0, // dummy1510
0, // dummy1511
0, // dummy1512
0, // dummy1513
0, // dummy1514
0, // dummy1515
0, // dummy1516
0, // dummy1517
0, // dummy1518
0, // dummy1519
0, // dummy1520
0, // dummy1521
0, // dummy1522
0, // dummy1523
0, // dummy1524
0, // dummy1525
0, // dummy1526
0, // dummy1527
0, // dummy1528
0, // dummy1529
0, // dummy1530
0, // dummy1531
0, // dummy1532
0, // dummy1533
0, // dummy1534
0, // dummy1535
0, // dummy1536
0, // dummy1537
0, // dummy1538
0, // dummy1539
0, // dummy1540
0, // dummy1541
0, // dummy1542
0, // dummy1543
0, // dummy1544
0, // dummy1545
0, // dummy1546
0, // dummy1547
0, // dummy1548
0, // dummy1549
0, // dummy1550
0, // dummy1551
0, // dummy1552
0, // dummy1553
0, // dummy1554
0, // dummy1555
0, // dummy1556
0, // dummy1557
0, // dummy1558
0, // dummy1559
0, // dummy1560
0, // dummy1561
0, // dummy1562
0, // dummy1563
0, // dummy1564
0, // dummy1565
0, // dummy1566
0, // dummy1567
0, // dummy1568
0, // dummy1569
0, // dummy1570
0, // dummy1571
0, // dummy1572
0, // dummy1573
0, // dummy1574
0, // dummy1575
0, // dummy1576
0, // dummy1577
0, // dummy1578
0, // dummy1579
0, // dummy1580
0, // dummy1581
0, // dummy1582
0, // dummy1583
0, // dummy1584
0, // dummy1585
0, // dummy1586
0, // dummy1587
0, // dummy1588
0, // dummy1589
0, // dummy1590
0, // dummy1591
0, // dummy1592
0, // dummy1593
0, // dummy1594
0, // dummy1595
0, // dummy1596
0, // dummy1597
0, // dummy1598
0, // dummy1599
0, // dummy1600
0, // dummy1601
0, // dummy1602
0, // dummy1603
0, // dummy1604
0, // dummy1605
0, // dummy1606
0, // dummy1607
0, // dummy1608
0, // dummy1609
0, // dummy1610
0, // dummy1611
0, // dummy1612
0, // dummy1613
0, // dummy1614
0, // dummy1615
0, // dummy1616
0, // dummy1617
0, // dummy1618
0, // dummy1619
0, // dummy1620
0, // dummy1621
0, // dummy1622
0, // dummy1623
0, // dummy1624
0, // dummy1625
0, // dummy1626
0, // dummy1627
0, // dummy1628
0, // dummy1629
0, // dummy1630
0, // dummy1631
0, // dummy1632
0, // dummy1633
0, // dummy1634
0, // dummy1635
0, // dummy1636
0, // dummy1637
0, // dummy1638
0, // dummy1639
0, // dummy1640
0, // dummy1641
0, // dummy1642
0, // dummy1643
0, // dummy1644
0, // dummy1645
0, // dummy1646
0, // dummy1647
0, // dummy1648
0, // dummy1649
0, // dummy1650
0, // dummy1651
0, // dummy1652
0, // dummy1653
0, // dummy1654
0, // dummy1655
0, // dummy1656
0, // dummy1657
0, // dummy1658
0, // dummy1659
0, // dummy1660
0, // dummy1661
0, // dummy1662
0, // dummy1663
0, // dummy1664
0, // dummy1665
0, // dummy1666
0, // dummy1667
0, // dummy1668
0, // dummy1669
0, // dummy1670
0, // dummy1671
0, // dummy1672
0, // dummy1673
0, // dummy1674
0, // dummy1675
0, // dummy1676
0, // dummy1677
0, // dummy1678
0, // dummy1679
0, // dummy1680
0, // dummy1681
0, // dummy1682
0, // dummy1683
0, // dummy1684
0, // dummy1685
0, // dummy1686
0, // dummy1687
0, // dummy1688
0, // dummy1689
0, // dummy1690
0, // dummy1691
0, // dummy1692
0, // dummy1693
0, // dummy1694
0, // dummy1695
0, // dummy1696
0, // dummy1697
0, // dummy1698
0, // dummy1699
0, // dummy1700
0, // dummy1701
0, // dummy1702
0, // dummy1703
0, // dummy1704
0, // dummy1705
0, // dummy1706
0, // dummy1707
0, // dummy1708
0, // dummy1709
0, // dummy1710
0, // dummy1711
0, // dummy1712
0, // dummy1713
0, // dummy1714
0, // dummy1715
0, // dummy1716
0, // dummy1717
0, // dummy1718
0, // dummy1719
0, // dummy1720
0, // dummy1721
0, // dummy1722
0, // dummy1723
0, // dummy1724
0, // dummy1725
0, // dummy1726
0, // dummy1727
0, // dummy1728
0, // dummy1729
0, // dummy1730
0, // dummy1731
0, // dummy1732
0, // dummy1733
0, // dummy1734
0, // dummy1735
0, // dummy1736
0, // dummy1737
0, // dummy1738
0, // dummy1739
0, // dummy1740
0, // dummy1741
0, // dummy1742
0, // dummy1743
0, // dummy1744
0, // dummy1745
0, // dummy1746
0, // dummy1747
0, // dummy1748
0, // dummy1749
0, // dummy1750
0, // dummy1751
0, // dummy1752
0, // dummy1753
0, // dummy1754
0, // dummy1755
0, // dummy1756
0, // dummy1757
0, // dummy1758
0, // dummy1759
0, // dummy1760
0, // dummy1761
0, // dummy1762
0, // dummy1763
0, // dummy1764
0, // dummy1765
0, // dummy1766
0, // dummy1767
0, // dummy1768
0, // dummy1769
0, // dummy1770
0, // dummy1771
0, // dummy1772
0, // dummy1773
0, // dummy1774
0, // dummy1775
0, // dummy1776
0, // dummy1777
0, // dummy1778
0, // dummy1779
0, // dummy1780
0, // dummy1781
0, // dummy1782
0, // dummy1783
0, // dummy1784
0, // dummy1785
0, // dummy1786
0, // dummy1787
0, // dummy1788
0, // dummy1789
0, // dummy1790
0, // dummy1791
0, // dummy1792
0, // dummy1793
0, // dummy1794
0, // dummy1795
0, // dummy1796
0, // dummy1797
0, // dummy1798
0, // dummy1799
0, // dummy1800
0, // dummy1801
0, // dummy1802
0, // dummy1803
0, // dummy1804
0, // dummy1805
0, // dummy1806
0, // dummy1807
0, // dummy1808
0, // dummy1809
0, // dummy1810
0, // dummy1811
0, // dummy1812
0, // dummy1813
0, // dummy1814
0, // dummy1815
0, // dummy1816
0, // dummy1817
0, // dummy1818
0, // dummy1819
0, // dummy1820
0, // dummy1821
0, // dummy1822
0, // dummy1823
0, // dummy1824
0, // dummy1825
0, // dummy1826
0, // dummy1827
0, // dummy1828
0, // dummy1829
0, // dummy1830
0, // dummy1831
0, // dummy1832
0, // dummy1833
0, // dummy1834
0, // dummy1835
0, // dummy1836
0, // dummy1837
0, // dummy1838
0, // dummy1839
0, // dummy1840
0, // dummy1841
0, // dummy1842
0, // dummy1843
0, // dummy1844
0, // dummy1845
0, // dummy1846
0, // dummy1847
0, // dummy1848
0, // dummy1849
0, // dummy1850
0, // dummy1851
0, // dummy1852
0, // dummy1853
0, // dummy1854
0, // dummy1855
0, // dummy1856
0, // dummy1857
0, // dummy1858
0, // dummy1859
0, // dummy1860
0, // dummy1861
0, // dummy1862
0, // dummy1863
0, // dummy1864
0, // dummy1865
0, // dummy1866
0, // dummy1867
0, // dummy1868
0, // dummy1869
0, // dummy1870
0, // dummy1871
0, // dummy1872
0, // dummy1873
0, // dummy1874
0, // dummy1875
0, // dummy1876
0, // dummy1877
0, // dummy1878
0, // dummy1879
0, // dummy1880
0, // dummy1881
0, // dummy1882
0, // dummy1883
0, // dummy1884
0, // dummy1885
0, // dummy1886
0, // dummy1887
0, // dummy1888
0, // dummy1889
0, // dummy1890
0, // dummy1891
0, // dummy1892
0, // dummy1893
0, // dummy1894
0, // dummy1895
0, // dummy1896
0, // dummy1897
0, // dummy1898
0, // dummy1899
0, // dummy1900
0, // dummy1901
0, // dummy1902
0, // dummy1903
0, // dummy1904
0, // dummy1905
0, // dummy1906
0, // dummy1907
0, // dummy1908
0, // dummy1909
0, // dummy1910
0, // dummy1911
0, // dummy1912
0, // dummy1913
0, // dummy1914
0, // dummy1915
0, // dummy1916
0, // dummy1917
0, // dummy1918
0, // dummy1919
0, // dummy1920
0, // dummy1921
0, // dummy1922
0, // dummy1923
0, // dummy1924
0, // dummy1925
0, // dummy1926
0, // dummy1927
0, // dummy1928
0, // dummy1929
0, // dummy1930
0, // dummy1931
0, // dummy1932
0, // dummy1933
0, // dummy1934
0, // dummy1935
0, // dummy1936
0, // dummy1937
0, // dummy1938
0, // dummy1939
0, // dummy1940
0, // dummy1941
0, // dummy1942
0, // dummy1943
0, // dummy1944
0, // dummy1945
0, // dummy1946
0, // dummy1947
0, // dummy1948
0, // dummy1949
0, // dummy1950
0, // dummy1951
0, // dummy1952
0, // dummy1953
0, // dummy1954
0, // dummy1955
0, // dummy1956
0, // dummy1957
0, // dummy1958
0, // dummy1959
0, // dummy1960
0, // dummy1961
0, // dummy1962
0, // dummy1963
0, // dummy1964
0, // dummy1965
0, // dummy1966
0, // dummy1967
0, // dummy1968
0, // dummy1969
0, // dummy1970
0, // dummy1971
0, // dummy1972
0, // dummy1973
0, // dummy1974
0, // dummy1975
0, // dummy1976
0, // dummy1977
0, // dummy1978
0, // dummy1979
0, // dummy1980
0, // dummy1981
0, // dummy1982
0, // dummy1983
0, // dummy1984
0, // dummy1985
0, // dummy1986
0, // dummy1987
0, // dummy1988
0, // dummy1989
0, // dummy1990
0, // dummy1991
0, // dummy1992
0, // dummy1993
0, // dummy1994
0, // dummy1995
0, // dummy1996
0, // dummy1997
0, // dummy1998
0, // dummy1999
0, // dummy2000
0, // dummy2001
0, // dummy2002
0, // dummy2003
0, // dummy2004
0, // dummy2005
0, // dummy2006
0, // dummy2007
0, // dummy2008
0, // dummy2009
0, // dummy2010
0, // dummy2011
0, // dummy2012
0, // dummy2013
0, // dummy2014
0, // dummy2015
0, // dummy2016
0, // dummy2017
0, // dummy2018
0, // dummy2019
0, // dummy2020
0, // dummy2021
0, // dummy2022
0, // dummy2023
0, // dummy2024
0, // dummy2025
0, // dummy2026
0, // dummy2027
0, // dummy2028
0, // dummy2029
0, // dummy2030
0, // dummy2031
0, // dummy2032
0, // dummy2033
0, // dummy2034
0, // dummy2035
0, // dummy2036
0, // dummy2037
0, // dummy2038
0, // dummy2039
0, // dummy2040
0, // dummy2041
0, // dummy2042
0, // dummy2043
0, // dummy2044
0, // dummy2045
0, // dummy2046
0, // dummy2047
0, // dummy2048
0, // dummy2049
0, // dummy2050
0, // dummy2051
0, // dummy2052
0, // dummy2053
0, // dummy2054
0, // dummy2055
0, // dummy2056
0, // dummy2057
0, // dummy2058
0, // dummy2059
0, // dummy2060
0, // dummy2061
0, // dummy2062
0, // dummy2063
0, // dummy2064
0, // dummy2065
0, // dummy2066
0, // dummy2067
0, // dummy2068
0, // dummy2069
0, // dummy2070
0, // dummy2071
0, // dummy2072
0, // dummy2073
0, // dummy2074
0, // dummy2075
0, // dummy2076
0, // dummy2077
0, // dummy2078
0, // dummy2079
0, // dummy2080
0, // dummy2081
0, // dummy2082
0, // dummy2083
0, // dummy2084
0, // dummy2085
0, // dummy2086
0, // dummy2087
0, // dummy2088
0, // dummy2089
0, // dummy2090
0, // dummy2091
0, // dummy2092
0, // dummy2093
0, // dummy2094
0, // dummy2095
0, // dummy2096
0, // dummy2097
0, // dummy2098
0, // dummy2099
0, // dummy2100
0, // dummy2101
0, // dummy2102
0, // dummy2103
0, // dummy2104
0, // dummy2105
0, // dummy2106
0, // dummy2107
0, // dummy2108
0, // dummy2109
0, // dummy2110
0, // dummy2111
0, // dummy2112
0, // dummy2113
0, // dummy2114
0, // dummy2115
0, // dummy2116
0, // dummy2117
0, // dummy2118
0, // dummy2119
0, // dummy2120
0, // dummy2121
0, // dummy2122
0, // dummy2123
0, // dummy2124
0, // dummy2125
0, // dummy2126
0, // dummy2127
0, // dummy2128
0, // dummy2129
0, // dummy2130
0, // dummy2131
0, // dummy2132
0, // dummy2133
0, // dummy2134
0, // dummy2135
0, // dummy2136
0, // dummy2137
0, // dummy2138
0, // dummy2139
0, // dummy2140
0, // dummy2141
0, // dummy2142
0, // dummy2143
0, // dummy2144
0, // dummy2145
0, // dummy2146
0, // dummy2147
0, // dummy2148
0, // dummy2149
0, // dummy2150
0, // dummy2151
0, // dummy2152
0, // dummy2153
0, // dummy2154
0, // dummy2155
0, // dummy2156
0, // dummy2157
0, // dummy2158
0, // dummy2159
0, // dummy2160
0, // dummy2161
0, // dummy2162
0, // dummy2163
0, // dummy2164
0, // dummy2165
0, // dummy2166
0, // dummy2167
0, // dummy2168
0, // dummy2169
0, // dummy2170
0, // dummy2171
0, // dummy2172
0, // dummy2173
0, // dummy2174
0, // dummy2175
0, // dummy2176
0, // dummy2177
0, // dummy2178
0, // dummy2179
0, // dummy2180
0, // dummy2181
0, // dummy2182
0, // dummy2183
0, // dummy2184
0, // dummy2185
0, // dummy2186
0, // dummy2187
0, // dummy2188
0, // dummy2189
0, // dummy2190
0, // dummy2191
0, // dummy2192
0, // dummy2193
0, // dummy2194
0, // dummy2195
0, // dummy2196
0, // dummy2197
0, // dummy2198
0, // dummy2199
0, // dummy2200
0, // dummy2201
0, // dummy2202
0, // dummy2203
0, // dummy2204
0, // dummy2205
0, // dummy2206
0, // dummy2207
0, // dummy2208
0, // dummy2209
0, // dummy2210
0, // dummy2211
0, // dummy2212
0, // dummy2213
0, // dummy2214
0, // dummy2215
0, // dummy2216
0, // dummy2217
0, // dummy2218
0, // dummy2219
0, // dummy2220
0, // dummy2221
0, // dummy2222
0, // dummy2223
0, // dummy2224
0, // dummy2225
0, // dummy2226
0, // dummy2227
0, // dummy2228
0, // dummy2229
0, // dummy2230
0, // dummy2231
0, // dummy2232
0, // dummy2233
0, // dummy2234
0, // dummy2235
0, // dummy2236
0, // dummy2237
0, // dummy2238
0, // dummy2239
0, // dummy2240
0, // dummy2241
0, // dummy2242
0, // dummy2243
0, // dummy2244
0, // dummy2245
0, // dummy2246
0, // dummy2247
0, // dummy2248
0, // dummy2249
0, // dummy2250
0, // dummy2251
0, // dummy2252
0, // dummy2253
0, // dummy2254
0, // dummy2255
0, // dummy2256
0, // dummy2257
0, // dummy2258
0, // dummy2259
0, // dummy2260
0, // dummy2261
0, // dummy2262
0, // dummy2263
0, // dummy2264
0, // dummy2265
0, // dummy2266
0, // dummy2267
0, // dummy2268
0, // dummy2269
0, // dummy2270
0, // dummy2271
0, // dummy2272
0, // dummy2273
0, // dummy2274
0, // dummy2275
0, // dummy2276
0, // dummy2277
0, // dummy2278
0, // dummy2279
0, // dummy2280
0, // dummy2281
0, // dummy2282
0, // dummy2283
0, // dummy2284
0, // dummy2285
0, // dummy2286
0, // dummy2287
0, // dummy2288
0, // dummy2289
0, // dummy2290
0, // dummy2291
0, // dummy2292
0, // dummy2293
0, // dummy2294
0, // dummy2295
0, // dummy2296
0, // dummy2297
0, // dummy2298
0, // dummy2299
0, // dummy2300
0, // dummy2301
0, // dummy2302
0, // dummy2303
0, // dummy2304
0, // dummy2305
0, // dummy2306
0, // dummy2307
0, // dummy2308
0, // dummy2309
0, // dummy2310
0, // dummy2311
0, // dummy2312
0, // dummy2313
0, // dummy2314
0, // dummy2315
0, // dummy2316
0, // dummy2317
0, // dummy2318
0, // dummy2319
0, // dummy2320
0, // dummy2321
0, // dummy2322
0, // dummy2323
0, // dummy2324
0, // dummy2325
0, // dummy2326
0, // dummy2327
0, // dummy2328
0, // dummy2329
0, // dummy2330
0, // dummy2331
0, // dummy2332
0, // dummy2333
0, // dummy2334
0, // dummy2335
0, // dummy2336
0, // dummy2337
0, // dummy2338
0, // dummy2339
0, // dummy2340
0, // dummy2341
0, // dummy2342
0, // dummy2343
0, // dummy2344
0, // dummy2345
0, // dummy2346
0, // dummy2347
0, // dummy2348
0, // dummy2349
0, // dummy2350
0, // dummy2351
0, // dummy2352
0, // dummy2353
0, // dummy2354
0, // dummy2355
0, // dummy2356
0, // dummy2357
0, // dummy2358
0, // dummy2359
0, // dummy2360
0, // dummy2361
0, // dummy2362
0, // dummy2363
0, // dummy2364
0, // dummy2365
0, // dummy2366
0, // dummy2367
0, // dummy2368
0, // dummy2369
0, // dummy2370
0, // dummy2371
0, // dummy2372
0, // dummy2373
0, // dummy2374
0, // dummy2375
0, // dummy2376
0, // dummy2377
0, // dummy2378
0, // dummy2379
0, // dummy2380
0, // dummy2381
0, // dummy2382
0, // dummy2383
0, // dummy2384
0, // dummy2385
0, // dummy2386
0, // dummy2387
0, // dummy2388
0, // dummy2389
0, // dummy2390
0, // dummy2391
0, // dummy2392
0, // dummy2393
0, // dummy2394
0, // dummy2395
0, // dummy2396
0, // dummy2397
0, // dummy2398
0, // dummy2399
0, // dummy2400
0, // dummy2401
0, // dummy2402
0, // dummy2403
0, // dummy2404
0, // dummy2405
0, // dummy2406
0, // dummy2407
0, // dummy2408
0, // dummy2409
0, // dummy2410
0, // dummy2411
0, // dummy2412
0, // dummy2413
0, // dummy2414
0, // dummy2415
0, // dummy2416
0, // dummy2417
0, // dummy2418
0, // dummy2419
0, // dummy2420
0, // dummy2421
0, // dummy2422
0, // dummy2423
0, // dummy2424
0, // dummy2425
0, // dummy2426
0, // dummy2427
0, // dummy2428
0, // dummy2429
0, // dummy2430
0, // dummy2431
0, // dummy2432
0, // dummy2433
0, // dummy2434
0, // dummy2435
0, // dummy2436
0, // dummy2437
0, // dummy2438
0, // dummy2439
0, // dummy2440
0, // dummy2441
0, // dummy2442
0, // dummy2443
0, // dummy2444
0, // dummy2445
0, // dummy2446
0, // dummy2447
0, // dummy2448
0, // dummy2449
0, // dummy2450
0, // dummy2451
0, // dummy2452
0, // dummy2453
0, // dummy2454
0, // dummy2455
0, // dummy2456
0, // dummy2457
0, // dummy2458
0, // dummy2459
0, // dummy2460
0, // dummy2461
0, // dummy2462
0, // dummy2463
0, // dummy2464
0, // dummy2465
0, // dummy2466
0, // dummy2467
0, // dummy2468
0, // dummy2469
0, // dummy2470
0, // dummy2471
0, // dummy2472
0, // dummy2473
0, // dummy2474
0, // dummy2475
0, // dummy2476
0, // dummy2477
0, // dummy2478
0, // dummy2479
0, // dummy2480
0, // dummy2481
0, // dummy2482
0, // dummy2483
0, // dummy2484
0, // dummy2485
0, // dummy2486
0, // dummy2487
0, // dummy2488
0, // dummy2489
0, // dummy2490
0, // dummy2491
0, // dummy2492
0, // dummy2493
0, // dummy2494
0, // dummy2495
0, // dummy2496
0, // dummy2497
0, // dummy2498
0, // dummy2499
0, // dummy2500
0, // dummy2501
0, // dummy2502
0, // dummy2503
0, // dummy2504
0, // dummy2505
0, // dummy2506
0, // dummy2507
0, // dummy2508
0, // dummy2509
0, // dummy2510
0, // dummy2511
0, // dummy2512
0, // dummy2513
0, // dummy2514
0, // dummy2515
0, // dummy2516
0, // dummy2517
0, // dummy2518
0, // dummy2519
0, // dummy2520
0, // dummy2521
0, // dummy2522
0, // dummy2523
0, // dummy2524
0, // dummy2525
0, // dummy2526
0, // dummy2527
0, // dummy2528
0, // dummy2529
0, // dummy2530
0, // dummy2531
0, // dummy2532
0, // dummy2533
0, // dummy2534
0, // dummy2535
0, // dummy2536
0, // dummy2537
0, // dummy2538
0, // dummy2539
0, // dummy2540
0, // dummy2541
0, // dummy2542
0, // dummy2543
0, // dummy2544
0, // dummy2545
0, // dummy2546
0, // dummy2547
0, // dummy2548
0, // dummy2549
0, // dummy2550
0, // dummy2551
0, // dummy2552
0, // dummy2553
0, // dummy2554
0, // dummy2555
0, // dummy2556
0, // dummy2557
0, // dummy2558
0, // dummy2559
0, // dummy2560
0, // dummy2561
0, // dummy2562
0, // dummy2563
0, // dummy2564
0, // dummy2565
0, // dummy2566
0, // dummy2567
0, // dummy2568
0, // dummy2569
0, // dummy2570
0, // dummy2571
0, // dummy2572
0, // dummy2573
0, // dummy2574
0, // dummy2575
0, // dummy2576
0, // dummy2577
0, // dummy2578
0, // dummy2579
0, // dummy2580
0, // dummy2581
0, // dummy2582
0, // dummy2583
0, // dummy2584
0, // dummy2585
0, // dummy2586
0, // dummy2587
0, // dummy2588
0, // dummy2589
0, // dummy2590
0, // dummy2591
0, // dummy2592
0, // dummy2593
0, // dummy2594
0, // dummy2595
0, // dummy2596
0, // dummy2597
0, // dummy2598
0, // dummy2599
0, // dummy2600
0, // dummy2601
0, // dummy2602
0, // dummy2603
0, // dummy2604
0, // dummy2605
0, // dummy2606
0, // dummy2607
0, // dummy2608
0, // dummy2609
0, // dummy2610
0, // dummy2611
0, // dummy2612
0, // dummy2613
0, // dummy2614
0, // dummy2615
0, // dummy2616
0, // dummy2617
0, // dummy2618
0, // dummy2619
0, // dummy2620
0, // dummy2621
0, // dummy2622
0, // dummy2623
0, // dummy2624
0, // dummy2625
0, // dummy2626
0, // dummy2627
0, // dummy2628
0, // dummy2629
0, // dummy2630
0, // dummy2631
0, // dummy2632
0, // dummy2633
0, // dummy2634
0, // dummy2635
0, // dummy2636
0, // dummy2637
0, // dummy2638
0, // dummy2639
0, // dummy2640
0, // dummy2641
0, // dummy2642
0, // dummy2643
0, // dummy2644
0, // dummy2645
0, // dummy2646
0, // dummy2647
0, // dummy2648
0, // dummy2649
0, // dummy2650
0, // dummy2651
0, // dummy2652
0, // dummy2653
0, // dummy2654
0, // dummy2655
0, // dummy2656
0, // dummy2657
0, // dummy2658
0, // dummy2659
0, // dummy2660
0, // dummy2661
0, // dummy2662
0, // dummy2663
0, // dummy2664
0, // dummy2665
0, // dummy2666
0, // dummy2667
0, // dummy2668
0, // dummy2669
0, // dummy2670
0, // dummy2671
0, // dummy2672
0, // dummy2673
0, // dummy2674
0, // dummy2675
0, // dummy2676
0, // dummy2677
0, // dummy2678
0, // dummy2679
0, // dummy2680
0, // dummy2681
0, // dummy2682
0, // dummy2683
0, // dummy2684
0, // dummy2685
0, // dummy2686
0, // dummy2687
0, // dummy2688
0, // dummy2689
0, // dummy2690
0, // dummy2691
0, // dummy2692
0, // dummy2693
0, // dummy2694
0, // dummy2695
0, // dummy2696
0, // dummy2697
0, // dummy2698
0, // dummy2699
0, // dummy2700
0, // dummy2701
0, // dummy2702
0, // dummy2703
0, // dummy2704
0, // dummy2705
0, // dummy2706
0, // dummy2707
0, // dummy2708
0, // dummy2709
0, // dummy2710
0, // dummy2711
0, // dummy2712
0, // dummy2713
0, // dummy2714
0, // dummy2715
0, // dummy2716
0, // dummy2717
0, // dummy2718
0, // dummy2719
0, // dummy2720
0, // dummy2721
0, // dummy2722
0, // dummy2723
0, // dummy2724
0, // dummy2725
0, // dummy2726
0, // dummy2727
0, // dummy2728
0, // dummy2729
0, // dummy2730
0, // dummy2731
0, // dummy2732
0, // dummy2733
0, // dummy2734
0, // dummy2735
0, // dummy2736
0, // dummy2737
0, // dummy2738
0, // dummy2739
0, // dummy2740
0, // dummy2741
0, // dummy2742
0, // dummy2743
0, // dummy2744
0, // dummy2745
0, // dummy2746
0, // dummy2747
0, // dummy2748
0, // dummy2749
0, // dummy2750
0, // dummy2751
0, // dummy2752
0, // dummy2753
0, // dummy2754
0, // dummy2755
0, // dummy2756
0, // dummy2757
0, // dummy2758
0, // dummy2759
0, // dummy2760
0, // dummy2761
0, // dummy2762
0, // dummy2763
0, // dummy2764
0, // dummy2765
0, // dummy2766
0, // dummy2767
0, // dummy2768
0, // dummy2769
0, // dummy2770
0, // dummy2771
0, // dummy2772
0, // dummy2773
0, // dummy2774
0, // dummy2775
0, // dummy2776
0, // dummy2777
0, // dummy2778
0, // dummy2779
0, // dummy2780
0, // dummy2781
0, // dummy2782
0, // dummy2783
0, // dummy2784
0, // dummy2785
0, // dummy2786
0, // dummy2787
0, // dummy2788
0, // dummy2789
0, // dummy2790
0, // dummy2791
0, // dummy2792
0, // dummy2793
0, // dummy2794
0, // dummy2795
0, // dummy2796
0, // dummy2797
0, // dummy2798
0, // dummy2799
0, // dummy2800
0, // dummy2801
0, // dummy2802
0, // dummy2803
0, // dummy2804
0, // dummy2805
0, // dummy2806
0, // dummy2807
0, // dummy2808
0, // dummy2809
0, // dummy2810
0, // dummy2811
0, // dummy2812
0, // dummy2813
0, // dummy2814
0, // dummy2815
0, // dummy2816
0, // dummy2817
0, // dummy2818
0, // dummy2819
0, // dummy2820
0, // dummy2821
0, // dummy2822
0, // dummy2823
0, // dummy2824
0, // dummy2825
0, // dummy2826
0, // dummy2827
0, // dummy2828
0, // dummy2829
0, // dummy2830
0, // dummy2831
0, // dummy2832
0, // dummy2833
0, // dummy2834
0, // dummy2835
0, // dummy2836
0, // dummy2837
0, // dummy2838
0, // dummy2839
0, // dummy2840
0, // dummy2841
0, // dummy2842
0, // dummy2843
0, // dummy2844
0, // dummy2845
0, // dummy2846
0, // dummy2847
0, // dummy2848
0, // dummy2849
0, // dummy2850
0, // dummy2851
0, // dummy2852
0, // dummy2853
0, // dummy2854
0, // dummy2855
0, // dummy2856
0, // dummy2857
0, // dummy2858
0, // dummy2859
0, // dummy2860
0, // dummy2861
0, // dummy2862
0, // dummy2863
0, // dummy2864
0, // dummy2865
0, // dummy2866
0, // dummy2867
0, // dummy2868
0, // dummy2869
0, // dummy2870
0, // dummy2871
0, // dummy2872
0, // dummy2873
0, // dummy2874
0, // dummy2875
0, // dummy2876
0, // dummy2877
0, // dummy2878
0, // dummy2879
0, // dummy2880
0, // dummy2881
0, // dummy2882
0, // dummy2883
0, // dummy2884
0, // dummy2885
0, // dummy2886
0, // dummy2887
0, // dummy2888
0, // dummy2889
0, // dummy2890
0, // dummy2891
0, // dummy2892
0, // dummy2893
0, // dummy2894
0, // dummy2895
0, // dummy2896
0, // dummy2897
0, // dummy2898
0, // dummy2899
0, // dummy2900
0, // dummy2901
0, // dummy2902
0, // dummy2903
0, // dummy2904
0, // dummy2905
0, // dummy2906
0, // dummy2907
0, // dummy2908
0, // dummy2909
0, // dummy2910
0, // dummy2911
0, // dummy2912
0, // dummy2913
0, // dummy2914
0, // dummy2915
0, // dummy2916
0, // dummy2917
0, // dummy2918
0, // dummy2919
0, // dummy2920
0, // dummy2921
0, // dummy2922
0, // dummy2923
0, // dummy2924
0, // dummy2925
0, // dummy2926
0, // dummy2927
0, // dummy2928
0, // dummy2929
0, // dummy2930
0, // dummy2931
0, // dummy2932
0, // dummy2933
0, // dummy2934
0, // dummy2935
0, // dummy2936
0, // dummy2937
0, // dummy2938
0, // dummy2939
0, // dummy2940
0, // dummy2941
0, // dummy2942
0, // dummy2943
0, // dummy2944
0, // dummy2945
0, // dummy2946
0, // dummy2947
0, // dummy2948
0, // dummy2949
0, // dummy2950
0, // dummy2951
0, // dummy2952
0, // dummy2953
0, // dummy2954
0, // dummy2955
0, // dummy2956
0, // dummy2957
0, // dummy2958
0, // dummy2959
0, // dummy2960
0, // dummy2961
0, // dummy2962
0, // dummy2963
0, // dummy2964
0, // dummy2965
0, // dummy2966
0, // dummy2967
0, // dummy2968
0, // dummy2969
0, // dummy2970
0, // dummy2971
0, // dummy2972
0, // dummy2973
0, // dummy2974
0, // dummy2975
0, // dummy2976
0, // dummy2977
0, // dummy2978
0, // dummy2979
0, // dummy2980
0, // dummy2981
0, // dummy2982
0, // dummy2983
0, // dummy2984
0, // dummy2985
0, // dummy2986
0, // dummy2987
0, // dummy2988
0, // dummy2989
0, // dummy2990
0, // dummy2991
0, // dummy2992
0, // dummy2993
0, // dummy2994
0, // dummy2995
0, // dummy2996
0, // dummy2997
0, // dummy2998
0, // dummy2999
0, // dummy3000
0, // dummy3001
0, // dummy3002
0, // dummy3003
0, // dummy3004
0, // dummy3005
0, // dummy3006
0, // dummy3007
0, // dummy3008
0, // dummy3009
0, // dummy3010
0, // dummy3011
0, // dummy3012
0, // dummy3013
0, // dummy3014
0, // dummy3015
0, // dummy3016
0, // dummy3017
0, // dummy3018
0, // dummy3019
0, // dummy3020
0, // dummy3021
0, // dummy3022
0, // dummy3023
0, // dummy3024
0, // dummy3025
0, // dummy3026
0, // dummy3027
0, // dummy3028
0, // dummy3029
0, // dummy3030
0, // dummy3031
0, // dummy3032
0, // dummy3033
0, // dummy3034
0, // dummy3035
0, // dummy3036
0, // dummy3037
0, // dummy3038
0, // dummy3039
0, // dummy3040
0, // dummy3041
0, // dummy3042
0, // dummy3043
0, // dummy3044
0, // dummy3045
0, // dummy3046
0, // dummy3047
0, // dummy3048
0, // dummy3049
0, // dummy3050
0, // dummy3051
0, // dummy3052
0, // dummy3053
0, // dummy3054
0, // dummy3055
0, // dummy3056
0, // dummy3057
0, // dummy3058
0, // dummy3059
0, // dummy3060
0, // dummy3061
0, // dummy3062
0, // dummy3063
0, // dummy3064
0, // dummy3065
0, // dummy3066
0, // dummy3067
0, // dummy3068
0, // dummy3069
0, // dummy3070
0, // dummy3071
0, // dummy3072
0, // dummy3073
0, // dummy3074
0, // dummy3075
0, // dummy3076
0, // dummy3077
0, // dummy3078
0, // dummy3079
0, // dummy3080
0, // dummy3081
0, // dummy3082
0, // dummy3083
0, // dummy3084
0, // dummy3085
0, // dummy3086
0, // dummy3087
0, // dummy3088
0, // dummy3089
0, // dummy3090
0, // dummy3091
0, // dummy3092
0, // dummy3093
0, // dummy3094
0, // dummy3095
0, // dummy3096
0, // dummy3097
0, // dummy3098
0, // dummy3099
0, // dummy3100
0, // dummy3101
0, // dummy3102
0, // dummy3103
0, // dummy3104
0, // dummy3105
0, // dummy3106
0, // dummy3107
0, // dummy3108
0, // dummy3109
0, // dummy3110
0, // dummy3111
0, // dummy3112
0, // dummy3113
0, // dummy3114
0, // dummy3115
0, // dummy3116
0, // dummy3117
0, // dummy3118
0, // dummy3119
0, // dummy3120
0, // dummy3121
0, // dummy3122
0, // dummy3123
0, // dummy3124
0, // dummy3125
0, // dummy3126
0, // dummy3127
0, // dummy3128
0, // dummy3129
0, // dummy3130
0, // dummy3131
0, // dummy3132
0, // dummy3133
0, // dummy3134
0, // dummy3135
0, // dummy3136
0, // dummy3137
0, // dummy3138
0, // dummy3139
0, // dummy3140
0, // dummy3141
0, // dummy3142
0, // dummy3143
0, // dummy3144
0, // dummy3145
0, // dummy3146
0, // dummy3147
0, // dummy3148
0, // dummy3149
0, // dummy3150
0, // dummy3151
0, // dummy3152
0, // dummy3153
0, // dummy3154
0, // dummy3155
0, // dummy3156
0, // dummy3157
0, // dummy3158
0, // dummy3159
0, // dummy3160
0, // dummy3161
0, // dummy3162
0, // dummy3163
0, // dummy3164
0, // dummy3165
0, // dummy3166
0, // dummy3167
0, // dummy3168
0, // dummy3169
0, // dummy3170
0, // dummy3171
0, // dummy3172
0, // dummy3173
0, // dummy3174
0, // dummy3175
0, // dummy3176
0, // dummy3177
0, // dummy3178
0, // dummy3179
0, // dummy3180
0, // dummy3181
0, // dummy3182
0, // dummy3183
0, // dummy3184
0, // dummy3185
0, // dummy3186
0, // dummy3187
0, // dummy3188
0, // dummy3189
0, // dummy3190
0, // dummy3191
0, // dummy3192
0, // dummy3193
0, // dummy3194
0, // dummy3195
0, // dummy3196
0, // dummy3197
0, // dummy3198
0, // dummy3199
0, // dummy3200
0, // dummy3201
0, // dummy3202
0, // dummy3203
0, // dummy3204
0, // dummy3205
0, // dummy3206
0, // dummy3207
0, // dummy3208
0, // dummy3209
0, // dummy3210
0, // dummy3211
0, // dummy3212
0, // dummy3213
0, // dummy3214
0, // dummy3215
0, // dummy3216
0, // dummy3217
0, // dummy3218
0, // dummy3219
0, // dummy3220
0, // dummy3221
0, // dummy3222
0, // dummy3223
0, // dummy3224
0, // dummy3225
0, // dummy3226
0, // dummy3227
0, // dummy3228
0, // dummy3229
0, // dummy3230
0, // dummy3231
0, // dummy3232
0, // dummy3233
0, // dummy3234
0, // dummy3235
0, // dummy3236
0, // dummy3237
0, // dummy3238
0, // dummy3239
0, // dummy3240
0, // dummy3241
0, // dummy3242
0, // dummy3243
0, // dummy3244
0, // dummy3245
0, // dummy3246
0, // dummy3247
0, // dummy3248
0, // dummy3249
0, // dummy3250
0, // dummy3251
0, // dummy3252
0, // dummy3253
0, // dummy3254
0, // dummy3255
0, // dummy3256
0, // dummy3257
0, // dummy3258
0, // dummy3259
0, // dummy3260
0, // dummy3261
0, // dummy3262
0, // dummy3263
0, // dummy3264
0, // dummy3265
0, // dummy3266
0, // dummy3267
0, // dummy3268
0, // dummy3269
0, // dummy3270
0, // dummy3271
0, // dummy3272
0, // dummy3273
0, // dummy3274
0, // dummy3275
0, // dummy3276
0, // dummy3277
0, // dummy3278
0, // dummy3279
0, // dummy3280
0, // dummy3281
0, // dummy3282
0, // dummy3283
0, // dummy3284
0, // dummy3285
0, // dummy3286
0, // dummy3287
0, // dummy3288
0, // dummy3289
0, // dummy3290
0, // dummy3291
0, // dummy3292
0, // dummy3293
0, // dummy3294
0, // dummy3295
0, // dummy3296
0, // dummy3297
0, // dummy3298
0, // dummy3299
0, // dummy3300
0, // dummy3301
0, // dummy3302
0, // dummy3303
0, // dummy3304
0, // dummy3305
0, // dummy3306
0, // dummy3307
0, // dummy3308
0, // dummy3309
0, // dummy3310
0, // dummy3311
0, // dummy3312
0, // dummy3313
0, // dummy3314
0, // dummy3315
0, // dummy3316
0, // dummy3317
0, // dummy3318
0, // dummy3319
0, // dummy3320
0, // dummy3321
0, // dummy3322
0, // dummy3323
0, // dummy3324
0, // dummy3325
0, // dummy3326
0, // dummy3327
0, // dummy3328
0, // dummy3329
0, // dummy3330
0, // dummy3331
0, // dummy3332
0, // dummy3333
0, // dummy3334
0, // dummy3335
0, // dummy3336
0, // dummy3337
0, // dummy3338
0, // dummy3339
0, // dummy3340
0, // dummy3341
0, // dummy3342
0, // dummy3343
0, // dummy3344
0, // dummy3345
0, // dummy3346
0, // dummy3347
0, // dummy3348
0, // dummy3349
0, // dummy3350
0, // dummy3351
0, // dummy3352
0, // dummy3353
0, // dummy3354
0, // dummy3355
0, // dummy3356
0, // dummy3357
0, // dummy3358
0, // dummy3359
0, // dummy3360
0, // dummy3361
0, // dummy3362
0, // dummy3363
0, // dummy3364
0, // dummy3365
0, // dummy3366
0, // dummy3367
0, // dummy3368
0, // dummy3369
0, // dummy3370
0, // dummy3371
0, // dummy3372
0, // dummy3373
0, // dummy3374
0, // dummy3375
0, // dummy3376
0, // dummy3377
0, // dummy3378
0, // dummy3379
0, // dummy3380
0, // dummy3381
0, // dummy3382
0, // dummy3383
0, // dummy3384
0, // dummy3385
0, // dummy3386
0, // dummy3387
0, // dummy3388
0, // dummy3389
0, // dummy3390
0, // dummy3391
0, // dummy3392
0, // dummy3393
0, // dummy3394
0, // dummy3395
0, // dummy3396
0, // dummy3397
0, // dummy3398
0, // dummy3399
0, // dummy3400
0, // dummy3401
0, // dummy3402
0, // dummy3403
0, // dummy3404
0, // dummy3405
0, // dummy3406
0, // dummy3407
0, // dummy3408
0, // dummy3409
0, // dummy3410
0, // dummy3411
0, // dummy3412
0, // dummy3413
0, // dummy3414
0, // dummy3415
0, // dummy3416
0, // dummy3417
0, // dummy3418
0, // dummy3419
0, // dummy3420
0, // dummy3421
0, // dummy3422
0, // dummy3423
0, // dummy3424
0, // dummy3425
0, // dummy3426
0, // dummy3427
0, // dummy3428
0, // dummy3429
0, // dummy3430
0, // dummy3431
0, // dummy3432
0, // dummy3433
0, // dummy3434
0, // dummy3435
0, // dummy3436
0, // dummy3437
0, // dummy3438
0, // dummy3439
0, // dummy3440
0, // dummy3441
0, // dummy3442
0, // dummy3443
0, // dummy3444
0, // dummy3445
0, // dummy3446
0, // dummy3447
0, // dummy3448
0, // dummy3449
0, // dummy3450
0, // dummy3451
0, // dummy3452
0, // dummy3453
0, // dummy3454
0, // dummy3455
0, // dummy3456
0, // dummy3457
0, // dummy3458
0, // dummy3459
0, // dummy3460
0, // dummy3461
0, // dummy3462
0, // dummy3463
0, // dummy3464
0, // dummy3465
0, // dummy3466
0, // dummy3467
0, // dummy3468
0, // dummy3469
0, // dummy3470
0, // dummy3471
0, // dummy3472
0, // dummy3473
0, // dummy3474
0, // dummy3475
0, // dummy3476
0, // dummy3477
0, // dummy3478
0, // dummy3479
0, // dummy3480
0, // dummy3481
0, // dummy3482
0, // dummy3483
0, // dummy3484
0, // dummy3485
0, // dummy3486
0, // dummy3487
0, // dummy3488
0, // dummy3489
0, // dummy3490
0, // dummy3491
0, // dummy3492
0, // dummy3493
0, // dummy3494
0, // dummy3495
0, // dummy3496
0, // dummy3497
0, // dummy3498
0, // dummy3499
0, // dummy3500
0, // dummy3501
0, // dummy3502
0, // dummy3503
0, // dummy3504
0, // dummy3505
0, // dummy3506
0, // dummy3507
0, // dummy3508
0, // dummy3509
0, // dummy3510
0, // dummy3511
0, // dummy3512
0, // dummy3513
0, // dummy3514
0, // dummy3515
0, // dummy3516
0, // dummy3517
0, // dummy3518
0, // dummy3519
0, // dummy3520
0, // dummy3521
0, // dummy3522
0, // dummy3523
0, // dummy3524
0, // dummy3525
0, // dummy3526
0, // dummy3527
0, // dummy3528
0, // dummy3529
0, // dummy3530
0, // dummy3531
0, // dummy3532
0, // dummy3533
0, // dummy3534
0, // dummy3535
0, // dummy3536
0, // dummy3537
0, // dummy3538
0, // dummy3539
0, // dummy3540
0, // dummy3541
0, // dummy3542
0, // dummy3543
0, // dummy3544
0, // dummy3545
0, // dummy3546
0, // dummy3547
0, // dummy3548
0, // dummy3549
0, // dummy3550
0, // dummy3551
0, // dummy3552
0, // dummy3553
0, // dummy3554
0, // dummy3555
0, // dummy3556
0, // dummy3557
0, // dummy3558
0, // dummy3559
0, // dummy3560
0, // dummy3561
0, // dummy3562
0, // dummy3563
0, // dummy3564
0, // dummy3565
0, // dummy3566
0, // dummy3567
0, // dummy3568
0, // dummy3569
0, // dummy3570
0, // dummy3571
0, // dummy3572
0, // dummy3573
0, // dummy3574
0, // dummy3575
0, // dummy3576
0, // dummy3577
0, // dummy3578
0, // dummy3579
0, // dummy3580
0, // dummy3581
0, // dummy3582
0, // dummy3583
0, // dummy3584
0, // dummy3585
0, // dummy3586
0, // dummy3587
0, // dummy3588
0, // dummy3589
0, // dummy3590
0, // dummy3591
0, // dummy3592
0, // dummy3593
0, // dummy3594
0, // dummy3595
0, // dummy3596
0, // dummy3597
0, // dummy3598
0, // dummy3599
0, // dummy3600
0, // dummy3601
0, // dummy3602
0, // dummy3603
0, // dummy3604
0, // dummy3605
0, // dummy3606
0, // dummy3607
0, // dummy3608
0, // dummy3609
0, // dummy3610
0, // dummy3611
0, // dummy3612
0, // dummy3613
0, // dummy3614
0, // dummy3615
0, // dummy3616
0, // dummy3617
0, // dummy3618
0, // dummy3619
0, // dummy3620
0, // dummy3621
0, // dummy3622
0, // dummy3623
0, // dummy3624
0, // dummy3625
0, // dummy3626
0, // dummy3627
0, // dummy3628
0, // dummy3629
0, // dummy3630
0, // dummy3631
0, // dummy3632
0, // dummy3633
0, // dummy3634
0, // dummy3635
0, // dummy3636
0, // dummy3637
0, // dummy3638
0, // dummy3639
0, // dummy3640
0, // dummy3641
0, // dummy3642
0, // dummy3643
0, // dummy3644
0, // dummy3645
0, // dummy3646
0, // dummy3647
0, // dummy3648
0, // dummy3649
0, // dummy3650
0, // dummy3651
0, // dummy3652
0, // dummy3653
0, // dummy3654
0, // dummy3655
0, // dummy3656
0, // dummy3657
0, // dummy3658
0, // dummy3659
0, // dummy3660
0, // dummy3661
0, // dummy3662
0, // dummy3663
0, // dummy3664
0, // dummy3665
0, // dummy3666
0, // dummy3667
0, // dummy3668
0, // dummy3669
0, // dummy3670
0, // dummy3671
0, // dummy3672
0, // dummy3673
0, // dummy3674
0, // dummy3675
0, // dummy3676
0, // dummy3677
0, // dummy3678
0, // dummy3679
0, // dummy3680
0, // dummy3681
0, // dummy3682
0, // dummy3683
0, // dummy3684
0, // dummy3685
0, // dummy3686
0, // dummy3687
0, // dummy3688
0, // dummy3689
0, // dummy3690
0, // dummy3691
0, // dummy3692
0, // dummy3693
0, // dummy3694
0, // dummy3695
0, // dummy3696
0, // dummy3697
0, // dummy3698
0, // dummy3699
0, // dummy3700
0, // dummy3701
0, // dummy3702
0, // dummy3703
0, // dummy3704
0, // dummy3705
0, // dummy3706
0, // dummy3707
0, // dummy3708
0, // dummy3709
0, // dummy3710
0, // dummy3711
0, // dummy3712
0, // dummy3713
0, // dummy3714
0, // dummy3715
0, // dummy3716
0, // dummy3717
0, // dummy3718
0, // dummy3719
0, // dummy3720
0, // dummy3721
0, // dummy3722
0, // dummy3723
0, // dummy3724
0, // dummy3725
0, // dummy3726
0, // dummy3727
0, // dummy3728
0, // dummy3729
0, // dummy3730
0, // dummy3731
0, // dummy3732
0, // dummy3733
0, // dummy3734
0, // dummy3735
0, // dummy3736
0, // dummy3737
0, // dummy3738
0, // dummy3739
0, // dummy3740
0, // dummy3741
0, // dummy3742
0, // dummy3743
0, // dummy3744
0, // dummy3745
0, // dummy3746
0, // dummy3747
0, // dummy3748
0, // dummy3749
0, // dummy3750
0, // dummy3751
0, // dummy3752
0, // dummy3753
0, // dummy3754
0, // dummy3755
0, // dummy3756
0, // dummy3757
0, // dummy3758
0, // dummy3759
0, // dummy3760
0, // dummy3761
0, // dummy3762
0, // dummy3763
0, // dummy3764
0, // dummy3765
0, // dummy3766
0, // dummy3767
0, // dummy3768
0, // dummy3769
0, // dummy3770
0, // dummy3771
0, // dummy3772
0, // dummy3773
0, // dummy3774
0, // dummy3775
0, // dummy3776
0, // dummy3777
0, // dummy3778
0, // dummy3779
0, // dummy3780
0, // dummy3781
0, // dummy3782
0, // dummy3783
0, // dummy3784
0, // dummy3785
0, // dummy3786
0, // dummy3787
0, // dummy3788
0, // dummy3789
0, // dummy3790
0, // dummy3791
0, // dummy3792
0, // dummy3793
0, // dummy3794
0, // dummy3795
0, // dummy3796
0, // dummy3797
0, // dummy3798
0, // dummy3799
0, // dummy3800
0, // dummy3801
0, // dummy3802
0, // dummy3803
0, // dummy3804
0, // dummy3805
0, // dummy3806
0, // dummy3807
0, // dummy3808
0, // dummy3809
0, // dummy3810
0, // dummy3811
0, // dummy3812
0, // dummy3813
0, // dummy3814
0, // dummy3815
0, // dummy3816
0, // dummy3817
0, // dummy3818
0, // dummy3819
0, // dummy3820
0, // dummy3821
0, // dummy3822
0, // dummy3823
0, // dummy3824
0, // dummy3825
0, // dummy3826
0, // dummy3827
0, // dummy3828
0, // dummy3829
0, // dummy3830
0, // dummy3831
0, // dummy3832
0, // dummy3833
0, // dummy3834
0, // dummy3835
0, // dummy3836
0, // dummy3837
0, // dummy3838
0, // dummy3839
0, // dummy3840
0, // dummy3841
0, // dummy3842
0, // dummy3843
0, // dummy3844
0, // dummy3845
0, // dummy3846
0, // dummy3847
0, // dummy3848
0, // dummy3849
0, // dummy3850
0, // dummy3851
0, // dummy3852
0, // dummy3853
0, // dummy3854
0, // dummy3855
0, // dummy3856
0, // dummy3857
0, // dummy3858
0, // dummy3859
0, // dummy3860
0, // dummy3861
0, // dummy3862
0, // dummy3863
0, // dummy3864
0, // dummy3865
0, // dummy3866
0, // dummy3867
0, // dummy3868
0, // dummy3869
0, // dummy3870
0, // dummy3871
0, // dummy3872
0, // dummy3873
0, // dummy3874
0, // dummy3875
0, // dummy3876
0, // dummy3877
0, // dummy3878
0, // dummy3879
0, // dummy3880
0, // dummy3881
0, // dummy3882
0, // dummy3883
0, // dummy3884
0, // dummy3885
0, // dummy3886
0, // dummy3887
0, // dummy3888
0, // dummy3889
0, // dummy3890
0, // dummy3891
0, // dummy3892
0, // dummy3893
0, // dummy3894
0, // dummy3895
0, // dummy3896
0, // dummy3897
0, // dummy3898
0, // dummy3899
0, // dummy3900
0, // dummy3901
0, // dummy3902
0, // dummy3903
0, // dummy3904
0, // dummy3905
0, // dummy3906
0, // dummy3907
0, // dummy3908
0, // dummy3909
0, // dummy3910
0, // dummy3911
0, // dummy3912
0, // dummy3913
0, // dummy3914
0, // dummy3915
0, // dummy3916
0, // dummy3917
0, // dummy3918
0, // dummy3919
0, // dummy3920
0, // dummy3921
0, // dummy3922
0, // dummy3923
0, // dummy3924
0, // dummy3925
0, // dummy3926
0, // dummy3927
0, // dummy3928
0, // dummy3929
0, // dummy3930
0, // dummy3931
0, // dummy3932
0, // dummy3933
0, // dummy3934
0, // dummy3935
0, // dummy3936
0, // dummy3937
0, // dummy3938
0, // dummy3939
0, // dummy3940
0, // dummy3941
0, // dummy3942
0, // dummy3943
0, // dummy3944
0, // dummy3945
0, // dummy3946
0, // dummy3947
0, // dummy3948
0, // dummy3949
0, // dummy3950
0, // dummy3951
0, // dummy3952
0, // dummy3953
0, // dummy3954
0, // dummy3955
0, // dummy3956
0, // dummy3957
0, // dummy3958
0, // dummy3959
0, // dummy3960
0, // dummy3961
0, // dummy3962
0, // dummy3963
0, // dummy3964
0, // dummy3965
0, // dummy3966
0, // dummy3967
0, // dummy3968
0, // dummy3969
0, // dummy3970
0, // dummy3971
0, // dummy3972
0, // dummy3973
0, // dummy3974
0, // dummy3975
0, // dummy3976
0, // dummy3977
0, // dummy3978
0, // dummy3979
0, // dummy3980
0, // dummy3981
0, // dummy3982
0, // dummy3983
0, // dummy3984
0, // dummy3985
0, // dummy3986
0, // dummy3987
0, // dummy3988
0, // dummy3989
0, // dummy3990
0, // dummy3991
0, // dummy3992
0, // dummy3993
0, // dummy3994
0, // dummy3995
0, // dummy3996
0, // dummy3997
0, // dummy3998
0, // dummy3999
0, // dummy4000
0, // dummy4001
0, // dummy4002
0, // dummy4003
0, // dummy4004
0, // dummy4005
0, // dummy4006
0, // dummy4007
0, // dummy4008
0, // dummy4009
0, // dummy4010
0, // dummy4011
0, // dummy4012
0, // dummy4013
0, // dummy4014
0, // dummy4015
0, // dummy4016
0, // dummy4017
0, // dummy4018
0, // dummy4019
{0,0,0,0,0,0,0,0}, // padding
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // segment initcall
ktest_btc, // _test_btc
ktest_btr, // _test_btr
ktest_bts, // _test_bts
ktest_bt, // _test_bt
ktest_shrd, // _test_shrd
ktest_shld, // _test_shld
ktest_rcl, // _test_rcl
ktest_rcr, // _test_rcr
ktest_ror, // _test_ror
ktest_rol, // _test_rol
ktest_sar, // _test_sar
ktest_shr, // _test_shr
ktest_shl, // _test_shl
ktest_not, // _test_not
ktest_neg, // _test_neg
ktest_dec, // _test_dec
ktest_inc, // _test_inc
ktest_sbb, // _test_sbb
ktest_adc, // _test_adc
ktest_cmp, // _test_cmp
ktest_or, // _test_or
ktest_and, // _test_and
ktest_xor, // _test_xor
ktest_sub, // _test_sub
ktest_add, // _test_add
0, // unk_40F064
0, // dummy4021
0, // dummy4022
0, // dummy4023
0, // dummy4024
0, // dummy4025
0, // dummy4026
0, // dummy4027
0, // dummy4028
0, // dummy4029
0, // dummy4030
0, // dummy4031
0, // dummy4032
0, // dummy4033
0, // dummy4034
0, // dummy4035
0, // dummy4036
0, // dummy4037
0, // dummy4038
0, // dummy4039
0, // dummy4040
0, // dummy4041
0, // dummy4042
0, // dummy4043
0, // dummy4044
0, // dummy4045
0, // dummy4046
0, // dummy4047
0, // dummy4048
0, // dummy4049
0, // dummy4050
0, // dummy4051
0, // dummy4052
0, // dummy4053
0, // dummy4054
0, // dummy4055
0, // dummy4056
0, // dummy4057
0, // dummy4058
0, // dummy4059
0, // dummy4060
0, // dummy4061
0, // dummy4062
0, // dummy4063
0, // dummy4064
0, // dummy4065
0, // dummy4066
0, // dummy4067
0, // dummy4068
0, // dummy4069
0, // dummy4070
0, // dummy4071
0, // dummy4072
0, // dummy4073
0, // dummy4074
0, // dummy4075
0, // dummy4076
0, // dummy4077
0, // dummy4078
0, // dummy4079
0, // dummy4080
0, // dummy4081
0, // dummy4082
0, // dummy4083
0, // dummy4084
0, // dummy4085
0, // dummy4086
0, // dummy4087
0, // dummy4088
0, // dummy4089
0, // dummy4090
0, // dummy4091
0, // dummy4092
0, // dummy4093
0, // dummy4094
0, // dummy4095
0, // dummy4096
0, // dummy4097
0, // dummy4098
0, // dummy4099
0, // dummy4100
0, // dummy4101
0, // dummy4102
0, // dummy4103
0, // dummy4104
0, // dummy4105
0, // dummy4106
0, // dummy4107
0, // dummy4108
0, // dummy4109
0, // dummy4110
0, // dummy4111
0, // dummy4112
0, // dummy4113
0, // dummy4114
0, // dummy4115
0, // dummy4116
0, // dummy4117
0, // dummy4118
0, // dummy4119
0, // dummy4120
0, // dummy4121
0, // dummy4122
0, // dummy4123
0, // dummy4124
0, // dummy4125
0, // dummy4126
0, // dummy4127
0, // dummy4128
0, // dummy4129
0, // dummy4130
0, // dummy4131
0, // dummy4132
0, // dummy4133
0, // dummy4134
0, // dummy4135
0, // dummy4136
0, // dummy4137
0, // dummy4138
0, // dummy4139
0, // dummy4140
0, // dummy4141
0, // dummy4142
0, // dummy4143
0, // dummy4144
0, // dummy4145
0, // dummy4146
0, // dummy4147
0, // dummy4148
0, // dummy4149
0, // dummy4150
0, // dummy4151
0, // dummy4152
0, // dummy4153
0, // dummy4154
0, // dummy4155
0, // dummy4156
0, // dummy4157
0, // dummy4158
0, // dummy4159
0, // dummy4160
0, // dummy4161
0, // dummy4162
0, // dummy4163
0, // dummy4164
0, // dummy4165
0, // dummy4166
0, // dummy4167
0, // dummy4168
0, // dummy4169
0, // dummy4170
0, // dummy4171
0, // dummy4172
0, // dummy4173
0, // dummy4174
0, // dummy4175
0, // dummy4176
0, // dummy4177
0, // dummy4178
0, // dummy4179
0, // dummy4180
0, // dummy4181
0, // dummy4182
0, // dummy4183
0, // dummy4184
0, // dummy4185
0, // dummy4186
0, // dummy4187
0, // dummy4188
0, // dummy4189
0, // dummy4190
0, // dummy4191
0, // dummy4192
0, // dummy4193
0, // dummy4194
0, // dummy4195
0, // dummy4196
0, // dummy4197
0, // dummy4198
0, // dummy4199
0, // dummy4200
0, // dummy4201
0, // dummy4202
0, // dummy4203
0, // dummy4204
0, // dummy4205
0, // dummy4206
0, // dummy4207
0, // dummy4208
0, // dummy4209
0, // dummy4210
0, // dummy4211
0, // dummy4212
0, // dummy4213
0, // dummy4214
0, // dummy4215
0, // dummy4216
0, // dummy4217
0, // dummy4218
0, // dummy4219
0, // dummy4220
0, // dummy4221
0, // dummy4222
0, // dummy4223
0, // dummy4224
0, // dummy4225
0, // dummy4226
0, // dummy4227
0, // dummy4228
0, // dummy4229
0, // dummy4230
0, // dummy4231
0, // dummy4232
0, // dummy4233
0, // dummy4234
0, // dummy4235
0, // dummy4236
0, // dummy4237
0, // dummy4238
0, // dummy4239
0, // dummy4240
0, // dummy4241
0, // dummy4242
0, // dummy4243
0, // dummy4244
0, // dummy4245
0, // dummy4246
0, // dummy4247
0, // dummy4248
0, // dummy4249
0, // dummy4250
0, // dummy4251
0, // dummy4252
0, // dummy4253
0, // dummy4254
0, // dummy4255
0, // dummy4256
0, // dummy4257
0, // dummy4258
0, // dummy4259
0, // dummy4260
0, // dummy4261
0, // dummy4262
0, // dummy4263
0, // dummy4264
0, // dummy4265
0, // dummy4266
0, // dummy4267
0, // dummy4268
0, // dummy4269
0, // dummy4270
0, // dummy4271
0, // dummy4272
0, // dummy4273
0, // dummy4274
0, // dummy4275
0, // dummy4276
0, // dummy4277
0, // dummy4278
0, // dummy4279
0, // dummy4280
0, // dummy4281
0, // dummy4282
0, // dummy4283
0, // dummy4284
0, // dummy4285
0, // dummy4286
0, // dummy4287
0, // dummy4288
0, // dummy4289
0, // dummy4290
0, // dummy4291
0, // dummy4292
0, // dummy4293
0, // dummy4294
0, // dummy4295
0, // dummy4296
0, // dummy4297
0, // dummy4298
0, // dummy4299
0, // dummy4300
0, // dummy4301
0, // dummy4302
0, // dummy4303
0, // dummy4304
0, // dummy4305
0, // dummy4306
0, // dummy4307
0, // dummy4308
0, // dummy4309
0, // dummy4310
0, // dummy4311
0, // dummy4312
0, // dummy4313
0, // dummy4314
0, // dummy4315
0, // dummy4316
0, // dummy4317
0, // dummy4318
0, // dummy4319
0, // dummy4320
0, // dummy4321
0, // dummy4322
0, // dummy4323
0, // dummy4324
0, // dummy4325
0, // dummy4326
0, // dummy4327
0, // dummy4328
0, // dummy4329
0, // dummy4330
0, // dummy4331
0, // dummy4332
0, // dummy4333
0, // dummy4334
0, // dummy4335
0, // dummy4336
0, // dummy4337
0, // dummy4338
0, // dummy4339
0, // dummy4340
0, // dummy4341
0, // dummy4342
0, // dummy4343
0, // dummy4344
0, // dummy4345
0, // dummy4346
0, // dummy4347
0, // dummy4348
0, // dummy4349
0, // dummy4350
0, // dummy4351
0, // dummy4352
0, // dummy4353
0, // dummy4354
0, // dummy4355
0, // dummy4356
0, // dummy4357
0, // dummy4358
0, // dummy4359
0, // dummy4360
0, // dummy4361
0, // dummy4362
0, // dummy4363
0, // dummy4364
0, // dummy4365
0, // dummy4366
0, // dummy4367
0, // dummy4368
0, // dummy4369
0, // dummy4370
0, // dummy4371
0, // dummy4372
0, // dummy4373
0, // dummy4374
0, // dummy4375
0, // dummy4376
0, // dummy4377
0, // dummy4378
0, // dummy4379
0, // dummy4380
0, // dummy4381
0, // dummy4382
0, // dummy4383
0, // dummy4384
0, // dummy4385
0, // dummy4386
0, // dummy4387
0, // dummy4388
0, // dummy4389
0, // dummy4390
0, // dummy4391
0, // dummy4392
0, // dummy4393
0, // dummy4394
0, // dummy4395
0, // dummy4396
0, // dummy4397
0, // dummy4398
0, // dummy4399
0, // dummy4400
0, // dummy4401
0, // dummy4402
0, // dummy4403
0, // dummy4404
0, // dummy4405
0, // dummy4406
0, // dummy4407
0, // dummy4408
0, // dummy4409
0, // dummy4410
0, // dummy4411
0, // dummy4412
0, // dummy4413
0, // dummy4414
0, // dummy4415
0, // dummy4416
0, // dummy4417
0, // dummy4418
0, // dummy4419
0, // dummy4420
0, // dummy4421
0, // dummy4422
0, // dummy4423
0, // dummy4424
0, // dummy4425
0, // dummy4426
0, // dummy4427
0, // dummy4428
0, // dummy4429
0, // dummy4430
0, // dummy4431
0, // dummy4432
0, // dummy4433
0, // dummy4434
0, // dummy4435
0, // dummy4436
0, // dummy4437
0, // dummy4438
0, // dummy4439
0, // dummy4440
0, // dummy4441
0, // dummy4442
0, // dummy4443
0, // dummy4444
0, // dummy4445
0, // dummy4446
0, // dummy4447
0, // dummy4448
0, // dummy4449
0, // dummy4450
0, // dummy4451
0, // dummy4452
0, // dummy4453
0, // dummy4454
0, // dummy4455
0, // dummy4456
0, // dummy4457
0, // dummy4458
0, // dummy4459
0, // dummy4460
0, // dummy4461
0, // dummy4462
0, // dummy4463
0, // dummy4464
0, // dummy4465
0, // dummy4466
0, // dummy4467
0, // dummy4468
0, // dummy4469
0, // dummy4470
0, // dummy4471
0, // dummy4472
0, // dummy4473
0, // dummy4474
0, // dummy4475
0, // dummy4476
0, // dummy4477
0, // dummy4478
0, // dummy4479
0, // dummy4480
0, // dummy4481
0, // dummy4482
0, // dummy4483
0, // dummy4484
0, // dummy4485
0, // dummy4486
0, // dummy4487
0, // dummy4488
0, // dummy4489
0, // dummy4490
0, // dummy4491
0, // dummy4492
0, // dummy4493
0, // dummy4494
0, // dummy4495
0, // dummy4496
0, // dummy4497
0, // dummy4498
0, // dummy4499
0, // dummy4500
0, // dummy4501
0, // dummy4502
0, // dummy4503
0, // dummy4504
0, // dummy4505
0, // dummy4506
0, // dummy4507
0, // dummy4508
0, // dummy4509
0, // dummy4510
0, // dummy4511
0, // dummy4512
0, // dummy4513
0, // dummy4514
0, // dummy4515
0, // dummy4516
0, // dummy4517
0, // dummy4518
0, // dummy4519
0, // dummy4520
0, // dummy4521
0, // dummy4522
0, // dummy4523
0, // dummy4524
0, // dummy4525
0, // dummy4526
0, // dummy4527
0, // dummy4528
0, // dummy4529
0, // dummy4530
0, // dummy4531
0, // dummy4532
0, // dummy4533
0, // dummy4534
0, // dummy4535
0, // dummy4536
0, // dummy4537
0, // dummy4538
0, // dummy4539
0, // dummy4540
0, // dummy4541
0, // dummy4542
0, // dummy4543
0, // dummy4544
0, // dummy4545
0, // dummy4546
0, // dummy4547
0, // dummy4548
0, // dummy4549
0, // dummy4550
0, // dummy4551
0, // dummy4552
0, // dummy4553
0, // dummy4554
0, // dummy4555
0, // dummy4556
0, // dummy4557
0, // dummy4558
0, // dummy4559
0, // dummy4560
0, // dummy4561
0, // dummy4562
0, // dummy4563
0, // dummy4564
0, // dummy4565
0, // dummy4566
0, // dummy4567
0, // dummy4568
0, // dummy4569
0, // dummy4570
0, // dummy4571
0, // dummy4572
0, // dummy4573
0, // dummy4574
0, // dummy4575
0, // dummy4576
0, // dummy4577
0, // dummy4578
0, // dummy4579
0, // dummy4580
0, // dummy4581
0, // dummy4582
0, // dummy4583
0, // dummy4584
0, // dummy4585
0, // dummy4586
0, // dummy4587
0, // dummy4588
0, // dummy4589
0, // dummy4590
0, // dummy4591
0, // dummy4592
0, // dummy4593
0, // dummy4594
0, // dummy4595
0, // dummy4596
0, // dummy4597
0, // dummy4598
0, // dummy4599
0, // dummy4600
0, // dummy4601
0, // dummy4602
0, // dummy4603
0, // dummy4604
0, // dummy4605
0, // dummy4606
0, // dummy4607
0, // dummy4608
0, // dummy4609
0, // dummy4610
0, // dummy4611
0, // dummy4612
0, // dummy4613
0, // dummy4614
0, // dummy4615
0, // dummy4616
0, // dummy4617
0, // dummy4618
0, // dummy4619
0, // dummy4620
0, // dummy4621
0, // dummy4622
0, // dummy4623
0, // dummy4624
0, // dummy4625
0, // dummy4626
0, // dummy4627
0, // dummy4628
0, // dummy4629
0, // dummy4630
0, // dummy4631
0, // dummy4632
0, // dummy4633
0, // dummy4634
0, // dummy4635
0, // dummy4636
0, // dummy4637
0, // dummy4638
0, // dummy4639
0, // dummy4640
0, // dummy4641
0, // dummy4642
0, // dummy4643
0, // dummy4644
0, // dummy4645
0, // dummy4646
0, // dummy4647
0, // dummy4648
0, // dummy4649
0, // dummy4650
0, // dummy4651
0, // dummy4652
0, // dummy4653
0, // dummy4654
0, // dummy4655
0, // dummy4656
0, // dummy4657
0, // dummy4658
0, // dummy4659
0, // dummy4660
0, // dummy4661
0, // dummy4662
0, // dummy4663
0, // dummy4664
0, // dummy4665
0, // dummy4666
0, // dummy4667
0, // dummy4668
0, // dummy4669
0, // dummy4670
0, // dummy4671
0, // dummy4672
0, // dummy4673
0, // dummy4674
0, // dummy4675
0, // dummy4676
0, // dummy4677
0, // dummy4678
0, // dummy4679
0, // dummy4680
0, // dummy4681
0, // dummy4682
0, // dummy4683
0, // dummy4684
0, // dummy4685
0, // dummy4686
0, // dummy4687
0, // dummy4688
0, // dummy4689
0, // dummy4690
0, // dummy4691
0, // dummy4692
0, // dummy4693
0, // dummy4694
0, // dummy4695
0, // dummy4696
0, // dummy4697
0, // dummy4698
0, // dummy4699
0, // dummy4700
0, // dummy4701
0, // dummy4702
0, // dummy4703
0, // dummy4704
0, // dummy4705
0, // dummy4706
0, // dummy4707
0, // dummy4708
0, // dummy4709
0, // dummy4710
0, // dummy4711
0, // dummy4712
0, // dummy4713
0, // dummy4714
0, // dummy4715
0, // dummy4716
0, // dummy4717
0, // dummy4718
0, // dummy4719
0, // dummy4720
0, // dummy4721
0, // dummy4722
0, // dummy4723
0, // dummy4724
0, // dummy4725
0, // dummy4726
0, // dummy4727
0, // dummy4728
0, // dummy4729
0, // dummy4730
0, // dummy4731
0, // dummy4732
0, // dummy4733
0, // dummy4734
0, // dummy4735
0, // dummy4736
0, // dummy4737
0, // dummy4738
0, // dummy4739
0, // dummy4740
0, // dummy4741
0, // dummy4742
0, // dummy4743
0, // dummy4744
0, // dummy4745
0, // dummy4746
0, // dummy4747
0, // dummy4748
0, // dummy4749
0, // dummy4750
0, // dummy4751
0, // dummy4752
0, // dummy4753
0, // dummy4754
0, // dummy4755
0, // dummy4756
0, // dummy4757
0, // dummy4758
0, // dummy4759
0, // dummy4760
0, // dummy4761
0, // dummy4762
0, // dummy4763
0, // dummy4764
0, // dummy4765
0, // dummy4766
0, // dummy4767
0, // dummy4768
0, // dummy4769
0, // dummy4770
0, // dummy4771
0, // dummy4772
0, // dummy4773
0, // dummy4774
0, // dummy4775
0, // dummy4776
0, // dummy4777
0, // dummy4778
0, // dummy4779
0, // dummy4780
0, // dummy4781
0, // dummy4782
0, // dummy4783
0, // dummy4784
0, // dummy4785
0, // dummy4786
0, // dummy4787
0, // dummy4788
0, // dummy4789
0, // dummy4790
0, // dummy4791
0, // dummy4792
0, // dummy4793
0, // dummy4794
0, // dummy4795
0, // dummy4796
0, // dummy4797
0, // dummy4798
0, // dummy4799
0, // dummy4800
0, // dummy4801
0, // dummy4802
0, // dummy4803
0, // dummy4804
0, // dummy4805
0, // dummy4806
0, // dummy4807
0, // dummy4808
0, // dummy4809
0, // dummy4810
0, // dummy4811
0, // dummy4812
0, // dummy4813
0, // dummy4814
0, // dummy4815
0, // dummy4816
0, // dummy4817
0, // dummy4818
0, // dummy4819
0, // dummy4820
0, // dummy4821
0, // dummy4822
0, // dummy4823
0, // dummy4824
0, // dummy4825
0, // dummy4826
0, // dummy4827
0, // dummy4828
0, // dummy4829
0, // dummy4830
0, // dummy4831
0, // dummy4832
0, // dummy4833
0, // dummy4834
0, // dummy4835
0, // dummy4836
0, // dummy4837
0, // dummy4838
0, // dummy4839
0, // dummy4840
0, // dummy4841
0, // dummy4842
0, // dummy4843
0, // dummy4844
0, // dummy4845
0, // dummy4846
0, // dummy4847
0, // dummy4848
0, // dummy4849
0, // dummy4850
0, // dummy4851
0, // dummy4852
0, // dummy4853
0, // dummy4854
0, // dummy4855
0, // dummy4856
0, // dummy4857
0, // dummy4858
0, // dummy4859
0, // dummy4860
0, // dummy4861
0, // dummy4862
0, // dummy4863
0, // dummy4864
0, // dummy4865
0, // dummy4866
0, // dummy4867
0, // dummy4868
0, // dummy4869
0, // dummy4870
0, // dummy4871
0, // dummy4872
0, // dummy4873
0, // dummy4874
0, // dummy4875
0, // dummy4876
0, // dummy4877
0, // dummy4878
0, // dummy4879
0, // dummy4880
0, // dummy4881
0, // dummy4882
0, // dummy4883
0, // dummy4884
0, // dummy4885
0, // dummy4886
0, // dummy4887
0, // dummy4888
0, // dummy4889
0, // dummy4890
0, // dummy4891
0, // dummy4892
0, // dummy4893
0, // dummy4894
0, // dummy4895
0, // dummy4896
0, // dummy4897
0, // dummy4898
0, // dummy4899
0, // dummy4900
0, // dummy4901
0, // dummy4902
0, // dummy4903
0, // dummy4904
0, // dummy4905
0, // dummy4906
0, // dummy4907
0, // dummy4908
0, // dummy4909
0, // dummy4910
0, // dummy4911
0, // dummy4912
0, // dummy4913
0, // dummy4914
0, // dummy4915
0, // dummy4916
0, // dummy4917
0, // dummy4918
0, // dummy4919
0, // dummy4920
0, // dummy4921
0, // dummy4922
0, // dummy4923
0, // dummy4924
0, // dummy4925
0, // dummy4926
0, // dummy4927
0, // dummy4928
0, // dummy4929
0, // dummy4930
0, // dummy4931
0, // dummy4932
0, // dummy4933
0, // dummy4934
0, // dummy4935
0, // dummy4936
0, // dummy4937
0, // dummy4938
0, // dummy4939
0, // dummy4940
0, // dummy4941
0, // dummy4942
0, // dummy4943
0, // dummy4944
0, // dummy4945
0, // dummy4946
0, // dummy4947
0, // dummy4948
0, // dummy4949
0, // dummy4950
0, // dummy4951
0, // dummy4952
0, // dummy4953
0, // dummy4954
0, // dummy4955
0, // dummy4956
0, // dummy4957
0, // dummy4958
0, // dummy4959
0, // dummy4960
0, // dummy4961
0, // dummy4962
0, // dummy4963
0, // dummy4964
0, // dummy4965
0, // dummy4966
0, // dummy4967
0, // dummy4968
0, // dummy4969
0, // dummy4970
0, // dummy4971
0, // dummy4972
0, // dummy4973
0, // dummy4974
0, // dummy4975
0, // dummy4976
0, // dummy4977
0, // dummy4978
0, // dummy4979
0, // dummy4980
0, // dummy4981
0, // dummy4982
0, // dummy4983
0, // dummy4984
0, // dummy4985
0, // dummy4986
0, // dummy4987
0, // dummy4988
0, // dummy4989
0, // dummy4990
0, // dummy4991
0, // dummy4992
0, // dummy4993
0, // dummy4994
0, // dummy4995
0, // dummy4996
0, // dummy4997
0, // dummy4998
0, // dummy4999
0, // dummy5000
0, // dummy5001
0, // dummy5002
0, // dummy5003
0, // dummy5004
0, // dummy5005
0, // dummy5006
0, // dummy5007
0, // dummy5008
0, // dummy5009
0, // dummy5010
0, // dummy5011
0, // dummy5012
0, // dummy5013
0, // dummy5014
0, // dummy5015
0, // dummy5016
0, // dummy5017
0, // dummy5018
0, // dummy5019
0, // dummy5020
0, // dummy5021
0, // dummy5022
0, // dummy5023
0, // dummy5024
0, // dummy5025
0, // dummy5026
0, // dummy5027
0, // dummy5028
0, // dummy5029
0, // dummy5030
0, // dummy5031
0, // dummy5032
0, // dummy5033
0, // dummy5034
0, // dummy5035
0, // dummy5036
0, // dummy5037
0, // dummy5038
0, // dummy5039
0, // dummy5040
0, // dummy5041
0, // dummy5042
0, // dummy5043
0, // dummy5044
0, // dummy5045
0, // dummy5046
0, // dummy5047
0, // dummy5048
0, // dummy5049
0, // dummy5050
0, // dummy5051
0, // dummy5052
0, // dummy5053
0, // dummy5054
0, // dummy5055
0, // dummy5056
0, // dummy5057
0, // dummy5058
0, // dummy5059
0, // dummy5060
0, // dummy5061
0, // dummy5062
0, // dummy5063
0, // dummy5064
0, // dummy5065
0, // dummy5066
0, // dummy5067
0, // dummy5068
0, // dummy5069
0, // dummy5070
0, // dummy5071
0, // dummy5072
0, // dummy5073
0, // dummy5074
0, // dummy5075
0, // dummy5076
0, // dummy5077
0, // dummy5078
0, // dummy5079
0, // dummy5080
0, // dummy5081
0, // dummy5082
0, // dummy5083
0, // dummy5084
0, // dummy5085
0, // dummy5086
0, // dummy5087
0, // dummy5088
0, // dummy5089
0, // dummy5090
0, // dummy5091
0, // dummy5092
0, // dummy5093
0, // dummy5094
0, // dummy5095
0, // dummy5096
0, // dummy5097
0, // dummy5098
0, // dummy5099
0, // dummy5100
0, // dummy5101
0, // dummy5102
0, // dummy5103
0, // dummy5104
0, // dummy5105
0, // dummy5106
0, // dummy5107
0, // dummy5108
0, // dummy5109
0, // dummy5110
0, // dummy5111
0, // dummy5112
0, // dummy5113
0, // dummy5114
0, // dummy5115
0, // dummy5116
0, // dummy5117
0, // dummy5118
0, // dummy5119
0, // dummy5120
0, // dummy5121
0, // dummy5122
0, // dummy5123
0, // dummy5124
0, // dummy5125
0, // dummy5126
0, // dummy5127
0, // dummy5128
0, // dummy5129
0, // dummy5130
0, // dummy5131
0, // dummy5132
0, // dummy5133
0, // dummy5134
0, // dummy5135
0, // dummy5136
0, // dummy5137
0, // dummy5138
0, // dummy5139
0, // dummy5140
0, // dummy5141
0, // dummy5142
0, // dummy5143
0, // dummy5144
0, // dummy5145
0, // dummy5146
0, // dummy5147
0, // dummy5148
0, // dummy5149
0, // dummy5150
0, // dummy5151
0, // dummy5152
0, // dummy5153
0, // dummy5154
0, // dummy5155
0, // dummy5156
0, // dummy5157
0, // dummy5158
0, // dummy5159
0, // dummy5160
0, // dummy5161
0, // dummy5162
0, // dummy5163
0, // dummy5164
0, // dummy5165
0, // dummy5166
0, // dummy5167
0, // dummy5168
0, // dummy5169
0, // dummy5170
0, // dummy5171
0, // dummy5172
0, // dummy5173
0, // dummy5174
0, // dummy5175
0, // dummy5176
0, // dummy5177
0, // dummy5178
0, // dummy5179
0, // dummy5180
0, // dummy5181
0, // dummy5182
0, // dummy5183
0, // dummy5184
0, // dummy5185
0, // dummy5186
0, // dummy5187
0, // dummy5188
0, // dummy5189
0, // dummy5190
0, // dummy5191
0, // dummy5192
0, // dummy5193
0, // dummy5194
0, // dummy5195
0, // dummy5196
0, // dummy5197
0, // dummy5198
0, // dummy5199
0, // dummy5200
0, // dummy5201
0, // dummy5202
0, // dummy5203
0, // dummy5204
0, // dummy5205
0, // dummy5206
0, // dummy5207
0, // dummy5208
0, // dummy5209
0, // dummy5210
0, // dummy5211
0, // dummy5212
0, // dummy5213
0, // dummy5214
0, // dummy5215
0, // dummy5216
0, // dummy5217
0, // dummy5218
0, // dummy5219
0, // dummy5220
0, // dummy5221
0, // dummy5222
0, // dummy5223
0, // dummy5224
0, // dummy5225
0, // dummy5226
0, // dummy5227
0, // dummy5228
0, // dummy5229
0, // dummy5230
0, // dummy5231
0, // dummy5232
0, // dummy5233
0, // dummy5234
0, // dummy5235
0, // dummy5236
0, // dummy5237
0, // dummy5238
0, // dummy5239
0, // dummy5240
0, // dummy5241
0, // dummy5242
0, // dummy5243
0, // dummy5244
0, // dummy5245
0, // dummy5246
0, // dummy5247
0, // dummy5248
0, // dummy5249
0, // dummy5250
0, // dummy5251
0, // dummy5252
0, // dummy5253
0, // dummy5254
0, // dummy5255
0, // dummy5256
0, // dummy5257
0, // dummy5258
0, // dummy5259
0, // dummy5260
0, // dummy5261
0, // dummy5262
0, // dummy5263
0, // dummy5264
0, // dummy5265
0, // dummy5266
0, // dummy5267
0, // dummy5268
0, // dummy5269
0, // dummy5270
0, // dummy5271
0, // dummy5272
0, // dummy5273
0, // dummy5274
0, // dummy5275
0, // dummy5276
0, // dummy5277
0, // dummy5278
0, // dummy5279
0, // dummy5280
0, // dummy5281
0, // dummy5282
0, // dummy5283
0, // dummy5284
0, // dummy5285
0, // dummy5286
0, // dummy5287
0, // dummy5288
0, // dummy5289
0, // dummy5290
0, // dummy5291
0, // dummy5292
0, // dummy5293
0, // dummy5294
0, // dummy5295
0, // dummy5296
0, // dummy5297
0, // dummy5298
0, // dummy5299
0, // dummy5300
0, // dummy5301
0, // dummy5302
0, // dummy5303
0, // dummy5304
0, // dummy5305
0, // dummy5306
0, // dummy5307
0, // dummy5308
0, // dummy5309
0, // dummy5310
0, // dummy5311
0, // dummy5312
0, // dummy5313
0, // dummy5314
0, // dummy5315
0, // dummy5316
0, // dummy5317
0, // dummy5318
0, // dummy5319
0, // dummy5320
0, // dummy5321
0, // dummy5322
0, // dummy5323
0, // dummy5324
0, // dummy5325
0, // dummy5326
0, // dummy5327
0, // dummy5328
0, // dummy5329
0, // dummy5330
0, // dummy5331
0, // dummy5332
0, // dummy5333
0, // dummy5334
0, // dummy5335
0, // dummy5336
0, // dummy5337
0, // dummy5338
0, // dummy5339
0, // dummy5340
0, // dummy5341
0, // dummy5342
0, // dummy5343
0, // dummy5344
0, // dummy5345
0, // dummy5346
0, // dummy5347
0, // dummy5348
0, // dummy5349
0, // dummy5350
0, // dummy5351
0, // dummy5352
0, // dummy5353
0, // dummy5354
0, // dummy5355
0, // dummy5356
0, // dummy5357
0, // dummy5358
0, // dummy5359
0, // dummy5360
0, // dummy5361
0, // dummy5362
0, // dummy5363
0, // dummy5364
0, // dummy5365
0, // dummy5366
0, // dummy5367
0, // dummy5368
0, // dummy5369
0, // dummy5370
0, // dummy5371
0, // dummy5372
0, // dummy5373
0, // dummy5374
0, // dummy5375
0, // dummy5376
0, // dummy5377
0, // dummy5378
0, // dummy5379
0, // dummy5380
0, // dummy5381
0, // dummy5382
0, // dummy5383
0, // dummy5384
0, // dummy5385
0, // dummy5386
0, // dummy5387
0, // dummy5388
0, // dummy5389
0, // dummy5390
0, // dummy5391
0, // dummy5392
0, // dummy5393
0, // dummy5394
0, // dummy5395
0, // dummy5396
0, // dummy5397
0, // dummy5398
0, // dummy5399
0, // dummy5400
0, // dummy5401
0, // dummy5402
0, // dummy5403
0, // dummy5404
0, // dummy5405
0, // dummy5406
0, // dummy5407
0, // dummy5408
0, // dummy5409
0, // dummy5410
0, // dummy5411
0, // dummy5412
0, // dummy5413
0, // dummy5414
0, // dummy5415
0, // dummy5416
0, // dummy5417
0, // dummy5418
0, // dummy5419
0, // dummy5420
0, // dummy5421
0, // dummy5422
0, // dummy5423
0, // dummy5424
0, // dummy5425
0, // dummy5426
0, // dummy5427
0, // dummy5428
0, // dummy5429
0, // dummy5430
0, // dummy5431
0, // dummy5432
0, // dummy5433
0, // dummy5434
0, // dummy5435
0, // dummy5436
0, // dummy5437
0, // dummy5438
0, // dummy5439
0, // dummy5440
0, // dummy5441
0, // dummy5442
0, // dummy5443
0, // dummy5444
0, // dummy5445
0, // dummy5446
0, // dummy5447
0, // dummy5448
0, // dummy5449
0, // dummy5450
0, // dummy5451
0, // dummy5452
0, // dummy5453
0, // dummy5454
0, // dummy5455
0, // dummy5456
0, // dummy5457
0, // dummy5458
0, // dummy5459
0, // dummy5460
0, // dummy5461
0, // dummy5462
0, // dummy5463
0, // dummy5464
0, // dummy5465
0, // dummy5466
0, // dummy5467
0, // dummy5468
0, // dummy5469
0, // dummy5470
0, // dummy5471
0, // dummy5472
0, // dummy5473
0, // dummy5474
0, // dummy5475
0, // dummy5476
0, // dummy5477
0, // dummy5478
0, // dummy5479
0, // dummy5480
0, // dummy5481
0, // dummy5482
0, // dummy5483
0, // dummy5484
0, // dummy5485
0, // dummy5486
0, // dummy5487
0, // dummy5488
0, // dummy5489
0, // dummy5490
0, // dummy5491
0, // dummy5492
0, // dummy5493
0, // dummy5494
0, // dummy5495
0, // dummy5496
0, // dummy5497
0, // dummy5498
0, // dummy5499
0, // dummy5500
0, // dummy5501
0, // dummy5502
0, // dummy5503
0, // dummy5504
0, // dummy5505
0, // dummy5506
0, // dummy5507
0, // dummy5508
0, // dummy5509
0, // dummy5510
0, // dummy5511
0, // dummy5512
0, // dummy5513
0, // dummy5514
0, // dummy5515
0, // dummy5516
0, // dummy5517
0, // dummy5518
0, // dummy5519
0, // dummy5520
0, // dummy5521
0, // dummy5522
0, // dummy5523
0, // dummy5524
0, // dummy5525
0, // dummy5526
0, // dummy5527
0, // dummy5528
0, // dummy5529
0, // dummy5530
0, // dummy5531
0, // dummy5532
0, // dummy5533
0, // dummy5534
0, // dummy5535
0, // dummy5536
0, // dummy5537
0, // dummy5538
0, // dummy5539
0, // dummy5540
0, // dummy5541
0, // dummy5542
0, // dummy5543
0, // dummy5544
0, // dummy5545
0, // dummy5546
0, // dummy5547
0, // dummy5548
0, // dummy5549
0, // dummy5550
0, // dummy5551
0, // dummy5552
0, // dummy5553
0, // dummy5554
0, // dummy5555
0, // dummy5556
0, // dummy5557
0, // dummy5558
0, // dummy5559
0, // dummy5560
0, // dummy5561
0, // dummy5562
0, // dummy5563
0, // dummy5564
0, // dummy5565
0, // dummy5566
0, // dummy5567
0, // dummy5568
0, // dummy5569
0, // dummy5570
0, // dummy5571
0, // dummy5572
0, // dummy5573
0, // dummy5574
0, // dummy5575
0, // dummy5576
0, // dummy5577
0, // dummy5578
0, // dummy5579
0, // dummy5580
0, // dummy5581
0, // dummy5582
0, // dummy5583
0, // dummy5584
0, // dummy5585
0, // dummy5586
0, // dummy5587
0, // dummy5588
0, // dummy5589
0, // dummy5590
0, // dummy5591
0, // dummy5592
0, // dummy5593
0, // dummy5594
0, // dummy5595
0, // dummy5596
0, // dummy5597
0, // dummy5598
0, // dummy5599
0, // dummy5600
0, // dummy5601
0, // dummy5602
0, // dummy5603
0, // dummy5604
0, // dummy5605
0, // dummy5606
0, // dummy5607
0, // dummy5608
0, // dummy5609
0, // dummy5610
0, // dummy5611
0, // dummy5612
0, // dummy5613
0, // dummy5614
0, // dummy5615
0, // dummy5616
0, // dummy5617
0, // dummy5618
0, // dummy5619
0, // dummy5620
0, // dummy5621
0, // dummy5622
0, // dummy5623
0, // dummy5624
0, // dummy5625
0, // dummy5626
0, // dummy5627
0, // dummy5628
0, // dummy5629
0, // dummy5630
0, // dummy5631
0, // dummy5632
0, // dummy5633
0, // dummy5634
0, // dummy5635
0, // dummy5636
0, // dummy5637
0, // dummy5638
0, // dummy5639
0, // dummy5640
0, // dummy5641
0, // dummy5642
0, // dummy5643
0, // dummy5644
0, // dummy5645
0, // dummy5646
0, // dummy5647
0, // dummy5648
0, // dummy5649
0, // dummy5650
0, // dummy5651
0, // dummy5652
0, // dummy5653
0, // dummy5654
0, // dummy5655
0, // dummy5656
0, // dummy5657
0, // dummy5658
0, // dummy5659
0, // dummy5660
0, // dummy5661
0, // dummy5662
0, // dummy5663
0, // dummy5664
0, // dummy5665
0, // dummy5666
0, // dummy5667
0, // dummy5668
0, // dummy5669
0, // dummy5670
0, // dummy5671
0, // dummy5672
0, // dummy5673
0, // dummy5674
0, // dummy5675
0, // dummy5676
0, // dummy5677
0, // dummy5678
0, // dummy5679
0, // dummy5680
0, // dummy5681
0, // dummy5682
0, // dummy5683
0, // dummy5684
0, // dummy5685
0, // dummy5686
0, // dummy5687
0, // dummy5688
0, // dummy5689
0, // dummy5690
0, // dummy5691
0, // dummy5692
0, // dummy5693
0, // dummy5694
0, // dummy5695
0, // dummy5696
0, // dummy5697
0, // dummy5698
0, // dummy5699
0, // dummy5700
0, // dummy5701
0, // dummy5702
0, // dummy5703
0, // dummy5704
0, // dummy5705
0, // dummy5706
0, // dummy5707
0, // dummy5708
0, // dummy5709
0, // dummy5710
0, // dummy5711
0, // dummy5712
0, // dummy5713
0, // dummy5714
0, // dummy5715
0, // dummy5716
0, // dummy5717
0, // dummy5718
0, // dummy5719
0, // dummy5720
0, // dummy5721
0, // dummy5722
0, // dummy5723
0, // dummy5724
0, // dummy5725
0, // dummy5726
0, // dummy5727
0, // dummy5728
0, // dummy5729
0, // dummy5730
0, // dummy5731
0, // dummy5732
0, // dummy5733
0, // dummy5734
0, // dummy5735
0, // dummy5736
0, // dummy5737
0, // dummy5738
0, // dummy5739
0, // dummy5740
0, // dummy5741
0, // dummy5742
0, // dummy5743
0, // dummy5744
0, // dummy5745
0, // dummy5746
0, // dummy5747
0, // dummy5748
0, // dummy5749
0, // dummy5750
0, // dummy5751
0, // dummy5752
0, // dummy5753
0, // dummy5754
0, // dummy5755
0, // dummy5756
0, // dummy5757
0, // dummy5758
0, // dummy5759
0, // dummy5760
0, // dummy5761
0, // dummy5762
0, // dummy5763
0, // dummy5764
0, // dummy5765
0, // dummy5766
0, // dummy5767
0, // dummy5768
0, // dummy5769
0, // dummy5770
0, // dummy5771
0, // dummy5772
0, // dummy5773
0, // dummy5774
0, // dummy5775
0, // dummy5776
0, // dummy5777
0, // dummy5778
0, // dummy5779
0, // dummy5780
0, // dummy5781
0, // dummy5782
0, // dummy5783
0, // dummy5784
0, // dummy5785
0, // dummy5786
0, // dummy5787
0, // dummy5788
0, // dummy5789
0, // dummy5790
0, // dummy5791
0, // dummy5792
0, // dummy5793
0, // dummy5794
0, // dummy5795
0, // dummy5796
0, // dummy5797
0, // dummy5798
0, // dummy5799
0, // dummy5800
0, // dummy5801
0, // dummy5802
0, // dummy5803
0, // dummy5804
0, // dummy5805
0, // dummy5806
0, // dummy5807
0, // dummy5808
0, // dummy5809
0, // dummy5810
0, // dummy5811
0, // dummy5812
0, // dummy5813
0, // dummy5814
0, // dummy5815
0, // dummy5816
0, // dummy5817
0, // dummy5818
0, // dummy5819
0, // dummy5820
0, // dummy5821
0, // dummy5822
0, // dummy5823
0, // dummy5824
0, // dummy5825
0, // dummy5826
0, // dummy5827
0, // dummy5828
0, // dummy5829
0, // dummy5830
0, // dummy5831
0, // dummy5832
0, // dummy5833
0, // dummy5834
0, // dummy5835
0, // dummy5836
0, // dummy5837
0, // dummy5838
0, // dummy5839
0, // dummy5840
0, // dummy5841
0, // dummy5842
0, // dummy5843
0, // dummy5844
0, // dummy5845
0, // dummy5846
0, // dummy5847
0, // dummy5848
0, // dummy5849
0, // dummy5850
0, // dummy5851
0, // dummy5852
0, // dummy5853
0, // dummy5854
0, // dummy5855
0, // dummy5856
0, // dummy5857
0, // dummy5858
0, // dummy5859
0, // dummy5860
0, // dummy5861
0, // dummy5862
0, // dummy5863
0, // dummy5864
0, // dummy5865
0, // dummy5866
0, // dummy5867
0, // dummy5868
0, // dummy5869
0, // dummy5870
0, // dummy5871
0, // dummy5872
0, // dummy5873
0, // dummy5874
0, // dummy5875
0, // dummy5876
0, // dummy5877
0, // dummy5878
0, // dummy5879
0, // dummy5880
0, // dummy5881
0, // dummy5882
0, // dummy5883
0, // dummy5884
0, // dummy5885
0, // dummy5886
0, // dummy5887
0, // dummy5888
0, // dummy5889
0, // dummy5890
0, // dummy5891
0, // dummy5892
0, // dummy5893
0, // dummy5894
0, // dummy5895
0, // dummy5896
0, // dummy5897
0, // dummy5898
0, // dummy5899
0, // dummy5900
0, // dummy5901
0, // dummy5902
0, // dummy5903
0, // dummy5904
0, // dummy5905
0, // dummy5906
0, // dummy5907
0, // dummy5908
0, // dummy5909
0, // dummy5910
0, // dummy5911
0, // dummy5912
0, // dummy5913
0, // dummy5914
0, // dummy5915
0, // dummy5916
0, // dummy5917
0, // dummy5918
0, // dummy5919
0, // dummy5920
0, // dummy5921
0, // dummy5922
0, // dummy5923
0, // dummy5924
0, // dummy5925
0, // dummy5926
0, // dummy5927
0, // dummy5928
0, // dummy5929
0, // dummy5930
0, // dummy5931
0, // dummy5932
0, // dummy5933
0, // dummy5934
0, // dummy5935
0, // dummy5936
0, // dummy5937
0, // dummy5938
0, // dummy5939
0, // dummy5940
0, // dummy5941
0, // dummy5942
0, // dummy5943
0, // dummy5944
0, // dummy5945
0, // dummy5946
0, // dummy5947
0, // dummy5948
0, // dummy5949
0, // dummy5950
0, // dummy5951
0, // dummy5952
0, // dummy5953
0, // dummy5954
0, // dummy5955
0, // dummy5956
0, // dummy5957
0, // dummy5958
0, // dummy5959
0, // dummy5960
0, // dummy5961
0, // dummy5962
0, // dummy5963
0, // dummy5964
0, // dummy5965
0, // dummy5966
0, // dummy5967
0, // dummy5968
0, // dummy5969
0, // dummy5970
0, // dummy5971
0, // dummy5972
0, // dummy5973
0, // dummy5974
0, // dummy5975
0, // dummy5976
0, // dummy5977
0, // dummy5978
0, // dummy5979
0, // dummy5980
0, // dummy5981
0, // dummy5982
0, // dummy5983
0, // dummy5984
0, // dummy5985
0, // dummy5986
0, // dummy5987
0, // dummy5988
0, // dummy5989
0, // dummy5990
0, // dummy5991
0, // dummy5992
0, // dummy5993
0, // dummy5994
0, // dummy5995
0, // dummy5996
0, // dummy5997
0, // dummy5998
0, // dummy5999
0, // dummy6000
0, // dummy6001
0, // dummy6002
0, // dummy6003
0, // dummy6004
0, // dummy6005
0, // dummy6006
0, // dummy6007
0, // dummy6008
0, // dummy6009
0, // dummy6010
0, // dummy6011
0, // dummy6012
0, // dummy6013
0, // dummy6014
0, // dummy6015
0, // dummy6016
0, // dummy6017
0, // dummy6018
0, // dummy6019
0, // dummy6020
0, // dummy6021
0, // dummy6022
0, // dummy6023
0, // dummy6024
0, // dummy6025
0, // dummy6026
0, // dummy6027
0, // dummy6028
0, // dummy6029
0, // dummy6030
0, // dummy6031
0, // dummy6032
0, // dummy6033
0, // dummy6034
0, // dummy6035
0, // dummy6036
0, // dummy6037
0, // dummy6038
0, // dummy6039
0, // dummy6040
0, // dummy6041
0, // dummy6042
0, // dummy6043
0, // dummy6044
0, // dummy6045
0, // dummy6046
0, // dummy6047
0, // dummy6048
0, // dummy6049
0, // dummy6050
0, // dummy6051
0, // dummy6052
0, // dummy6053
0, // dummy6054
0, // dummy6055
0, // dummy6056
0, // dummy6057
0, // dummy6058
0, // dummy6059
0, // dummy6060
0, // dummy6061
0, // dummy6062
0, // dummy6063
0, // dummy6064
0, // dummy6065
0, // dummy6066
0, // dummy6067
0, // dummy6068
0, // dummy6069
0, // dummy6070
0, // dummy6071
0, // dummy6072
0, // dummy6073
0, // dummy6074
0, // dummy6075
0, // dummy6076
0, // dummy6077
0, // dummy6078
0, // dummy6079
0, // dummy6080
0, // dummy6081
0, // dummy6082
0, // dummy6083
0, // dummy6084
0, // dummy6085
0, // dummy6086
0, // dummy6087
0, // dummy6088
0, // dummy6089
0, // dummy6090
0, // dummy6091
0, // dummy6092
0, // dummy6093
0, // dummy6094
0, // dummy6095
0, // dummy6096
0, // dummy6097
0, // dummy6098
0, // dummy6099
0, // dummy6100
0, // dummy6101
0, // dummy6102
0, // dummy6103
0, // dummy6104
0, // dummy6105
0, // dummy6106
0, // dummy6107
0, // dummy6108
0, // dummy6109
0, // dummy6110
0, // dummy6111
0, // dummy6112
0, // dummy6113
0, // dummy6114
0, // dummy6115
0, // dummy6116
0, // dummy6117
0, // dummy6118
0, // dummy6119
0, // dummy6120
0, // dummy6121
0, // dummy6122
0, // dummy6123
0, // dummy6124
0, // dummy6125
0, // dummy6126
0, // dummy6127
0, // dummy6128
0, // dummy6129
0, // dummy6130
0, // dummy6131
0, // dummy6132
0, // dummy6133
0, // dummy6134
0, // dummy6135
0, // dummy6136
0, // dummy6137
0, // dummy6138
0, // dummy6139
0, // dummy6140
0, // dummy6141
0, // dummy6142
0, // dummy6143
0, // dummy6144
0, // dummy6145
0, // dummy6146
0, // dummy6147
0, // dummy6148
0, // dummy6149
0, // dummy6150
0, // dummy6151
0, // dummy6152
0, // dummy6153
0, // dummy6154
0, // dummy6155
0, // dummy6156
0, // dummy6157
0, // dummy6158
0, // dummy6159
0, // dummy6160
0, // dummy6161
0, // dummy6162
0, // dummy6163
0, // dummy6164
0, // dummy6165
0, // dummy6166
0, // dummy6167
0, // dummy6168
0, // dummy6169
0, // dummy6170
0, // dummy6171
0, // dummy6172
0, // dummy6173
0, // dummy6174
0, // dummy6175
0, // dummy6176
0, // dummy6177
0, // dummy6178
0, // dummy6179
0, // dummy6180
0, // dummy6181
0, // dummy6182
0, // dummy6183
0, // dummy6184
0, // dummy6185
0, // dummy6186
0, // dummy6187
0, // dummy6188
0, // dummy6189
0, // dummy6190
0, // dummy6191
0, // dummy6192
0, // dummy6193
0, // dummy6194
0, // dummy6195
0, // dummy6196
0, // dummy6197
0, // dummy6198
0, // dummy6199
0, // dummy6200
0, // dummy6201
0, // dummy6202
0, // dummy6203
0, // dummy6204
0, // dummy6205
0, // dummy6206
0, // dummy6207
0, // dummy6208
0, // dummy6209
0, // dummy6210
0, // dummy6211
0, // dummy6212
0, // dummy6213
0, // dummy6214
0, // dummy6215
0, // dummy6216
0, // dummy6217
0, // dummy6218
0, // dummy6219
0, // dummy6220
0, // dummy6221
0, // dummy6222
0, // dummy6223
0, // dummy6224
0, // dummy6225
0, // dummy6226
0, // dummy6227
0, // dummy6228
0, // dummy6229
0, // dummy6230
0, // dummy6231
0, // dummy6232
0, // dummy6233
0, // dummy6234
0, // dummy6235
0, // dummy6236
0, // dummy6237
0, // dummy6238
0, // dummy6239
0, // dummy6240
0, // dummy6241
0, // dummy6242
0, // dummy6243
0, // dummy6244
0, // dummy6245
0, // dummy6246
0, // dummy6247
0, // dummy6248
0, // dummy6249
0, // dummy6250
0, // dummy6251
0, // dummy6252
0, // dummy6253
0, // dummy6254
0, // dummy6255
0, // dummy6256
0, // dummy6257
0, // dummy6258
0, // dummy6259
0, // dummy6260
0, // dummy6261
0, // dummy6262
0, // dummy6263
0, // dummy6264
0, // dummy6265
0, // dummy6266
0, // dummy6267
0, // dummy6268
0, // dummy6269
0, // dummy6270
0, // dummy6271
0, // dummy6272
0, // dummy6273
0, // dummy6274
0, // dummy6275
0, // dummy6276
0, // dummy6277
0, // dummy6278
0, // dummy6279
0, // dummy6280
0, // dummy6281
0, // dummy6282
0, // dummy6283
0, // dummy6284
0, // dummy6285
0, // dummy6286
0, // dummy6287
0, // dummy6288
0, // dummy6289
0, // dummy6290
0, // dummy6291
0, // dummy6292
0, // dummy6293
0, // dummy6294
0, // dummy6295
0, // dummy6296
0, // dummy6297
0, // dummy6298
0, // dummy6299
0, // dummy6300
0, // dummy6301
0, // dummy6302
0, // dummy6303
0, // dummy6304
0, // dummy6305
0, // dummy6306
0, // dummy6307
0, // dummy6308
0, // dummy6309
0, // dummy6310
0, // dummy6311
0, // dummy6312
0, // dummy6313
0, // dummy6314
0, // dummy6315
0, // dummy6316
0, // dummy6317
0, // dummy6318
0, // dummy6319
0, // dummy6320
0, // dummy6321
0, // dummy6322
0, // dummy6323
0, // dummy6324
0, // dummy6325
0, // dummy6326
0, // dummy6327
0, // dummy6328
0, // dummy6329
0, // dummy6330
0, // dummy6331
0, // dummy6332
0, // dummy6333
0, // dummy6334
0, // dummy6335
0, // dummy6336
0, // dummy6337
0, // dummy6338
0, // dummy6339
0, // dummy6340
0, // dummy6341
0, // dummy6342
0, // dummy6343
0, // dummy6344
0, // dummy6345
0, // dummy6346
0, // dummy6347
0, // dummy6348
0, // dummy6349
0, // dummy6350
0, // dummy6351
0, // dummy6352
0, // dummy6353
0, // dummy6354
0, // dummy6355
0, // dummy6356
0, // dummy6357
0, // dummy6358
0, // dummy6359
0, // dummy6360
0, // dummy6361
0, // dummy6362
0, // dummy6363
0, // dummy6364
0, // dummy6365
0, // dummy6366
0, // dummy6367
0, // dummy6368
0, // dummy6369
0, // dummy6370
0, // dummy6371
0, // dummy6372
0, // dummy6373
0, // dummy6374
0, // dummy6375
0, // dummy6376
0, // dummy6377
0, // dummy6378
0, // dummy6379
0, // dummy6380
0, // dummy6381
0, // dummy6382
0, // dummy6383
0, // dummy6384
0, // dummy6385
0, // dummy6386
0, // dummy6387
0, // dummy6388
0, // dummy6389
0, // dummy6390
0, // dummy6391
0, // dummy6392
0, // dummy6393
0, // dummy6394
0, // dummy6395
0, // dummy6396
0, // dummy6397
0, // dummy6398
0, // dummy6399
0, // dummy6400
0, // dummy6401
0, // dummy6402
0, // dummy6403
0, // dummy6404
0, // dummy6405
0, // dummy6406
0, // dummy6407
0, // dummy6408
0, // dummy6409
0, // dummy6410
0, // dummy6411
0, // dummy6412
0, // dummy6413
0, // dummy6414
0, // dummy6415
0, // dummy6416
0, // dummy6417
0, // dummy6418
0, // dummy6419
0, // dummy6420
0, // dummy6421
0, // dummy6422
0, // dummy6423
0, // dummy6424
0, // dummy6425
0, // dummy6426
0, // dummy6427
0, // dummy6428
0, // dummy6429
0, // dummy6430
0, // dummy6431
0, // dummy6432
0, // dummy6433
0, // dummy6434
0, // dummy6435
0, // dummy6436
0, // dummy6437
0, // dummy6438
0, // dummy6439
0, // dummy6440
0, // dummy6441
0, // dummy6442
0, // dummy6443
0, // dummy6444
0, // dummy6445
0, // dummy6446
0, // dummy6447
0, // dummy6448
0, // dummy6449
0, // dummy6450
0, // dummy6451
0, // dummy6452
0, // dummy6453
0, // dummy6454
0, // dummy6455
0, // dummy6456
0, // dummy6457
0, // dummy6458
0, // dummy6459
0, // dummy6460
0, // dummy6461
0, // dummy6462
0, // dummy6463
0, // dummy6464
0, // dummy6465
0, // dummy6466
0, // dummy6467
0, // dummy6468
0, // dummy6469
0, // dummy6470
0, // dummy6471
0, // dummy6472
0, // dummy6473
0, // dummy6474
0, // dummy6475
0, // dummy6476
0, // dummy6477
0, // dummy6478
0, // dummy6479
0, // dummy6480
0, // dummy6481
0, // dummy6482
0, // dummy6483
0, // dummy6484
0, // dummy6485
0, // dummy6486
0, // dummy6487
0, // dummy6488
0, // dummy6489
0, // dummy6490
0, // dummy6491
0, // dummy6492
0, // dummy6493
0, // dummy6494
0, // dummy6495
0, // dummy6496
0, // dummy6497
0, // dummy6498
0, // dummy6499
0, // dummy6500
0, // dummy6501
0, // dummy6502
0, // dummy6503
0, // dummy6504
0, // dummy6505
0, // dummy6506
0, // dummy6507
0, // dummy6508
0, // dummy6509
0, // dummy6510
0, // dummy6511
0, // dummy6512
0, // dummy6513
0, // dummy6514
0, // dummy6515
0, // dummy6516
0, // dummy6517
0, // dummy6518
0, // dummy6519
0, // dummy6520
0, // dummy6521
0, // dummy6522
0, // dummy6523
0, // dummy6524
0, // dummy6525
0, // dummy6526
0, // dummy6527
0, // dummy6528
0, // dummy6529
0, // dummy6530
0, // dummy6531
0, // dummy6532
0, // dummy6533
0, // dummy6534
0, // dummy6535
0, // dummy6536
0, // dummy6537
0, // dummy6538
0, // dummy6539
0, // dummy6540
0, // dummy6541
0, // dummy6542
0, // dummy6543
0, // dummy6544
0, // dummy6545
0, // dummy6546
0, // dummy6547
0, // dummy6548
0, // dummy6549
0, // dummy6550
0, // dummy6551
0, // dummy6552
0, // dummy6553
0, // dummy6554
0, // dummy6555
0, // dummy6556
0, // dummy6557
0, // dummy6558
0, // dummy6559
0, // dummy6560
0, // dummy6561
0, // dummy6562
0, // dummy6563
0, // dummy6564
0, // dummy6565
0, // dummy6566
0, // dummy6567
0, // dummy6568
0, // dummy6569
0, // dummy6570
0, // dummy6571
0, // dummy6572
0, // dummy6573
0, // dummy6574
0, // dummy6575
0, // dummy6576
0, // dummy6577
0, // dummy6578
0, // dummy6579
0, // dummy6580
0, // dummy6581
0, // dummy6582
0, // dummy6583
0, // dummy6584
0, // dummy6585
0, // dummy6586
0, // dummy6587
0, // dummy6588
0, // dummy6589
0, // dummy6590
0, // dummy6591
0, // dummy6592
0, // dummy6593
0, // dummy6594
0, // dummy6595
0, // dummy6596
0, // dummy6597
0, // dummy6598
0, // dummy6599
0, // dummy6600
0, // dummy6601
0, // dummy6602
0, // dummy6603
0, // dummy6604
0, // dummy6605
0, // dummy6606
0, // dummy6607
0, // dummy6608
0, // dummy6609
0, // dummy6610
0, // dummy6611
0, // dummy6612
0, // dummy6613
0, // dummy6614
0, // dummy6615
0, // dummy6616
0, // dummy6617
0, // dummy6618
0, // dummy6619
0, // dummy6620
0, // dummy6621
0, // dummy6622
0, // dummy6623
0, // dummy6624
0, // dummy6625
0, // dummy6626
0, // dummy6627
0, // dummy6628
0, // dummy6629
0, // dummy6630
0, // dummy6631
0, // dummy6632
0, // dummy6633
0, // dummy6634
0, // dummy6635
0, // dummy6636
0, // dummy6637
0, // dummy6638
0, // dummy6639
0, // dummy6640
0, // dummy6641
0, // dummy6642
0, // dummy6643
0, // dummy6644
0, // dummy6645
0, // dummy6646
0, // dummy6647
0, // dummy6648
0, // dummy6649
0, // dummy6650
0, // dummy6651
0, // dummy6652
0, // dummy6653
0, // dummy6654
0, // dummy6655
0, // dummy6656
0, // dummy6657
0, // dummy6658
0, // dummy6659
0, // dummy6660
0, // dummy6661
0, // dummy6662
0, // dummy6663
0, // dummy6664
0, // dummy6665
0, // dummy6666
0, // dummy6667
0, // dummy6668
0, // dummy6669
0, // dummy6670
0, // dummy6671
0, // dummy6672
0, // dummy6673
0, // dummy6674
0, // dummy6675
0, // dummy6676
0, // dummy6677
0, // dummy6678
0, // dummy6679
0, // dummy6680
0, // dummy6681
0, // dummy6682
0, // dummy6683
0, // dummy6684
0, // dummy6685
0, // dummy6686
0, // dummy6687
0, // dummy6688
0, // dummy6689
0, // dummy6690
0, // dummy6691
0, // dummy6692
0, // dummy6693
0, // dummy6694
0, // dummy6695
0, // dummy6696
0, // dummy6697
0, // dummy6698
0, // dummy6699
0, // dummy6700
0, // dummy6701
0, // dummy6702
0, // dummy6703
0, // dummy6704
0, // dummy6705
0, // dummy6706
0, // dummy6707
0, // dummy6708
0, // dummy6709
0, // dummy6710
0, // dummy6711
0, // dummy6712
0, // dummy6713
0, // dummy6714
0, // dummy6715
0, // dummy6716
0, // dummy6717
0, // dummy6718
0, // dummy6719
0, // dummy6720
0, // dummy6721
0, // dummy6722
0, // dummy6723
0, // dummy6724
0, // dummy6725
0, // dummy6726
0, // dummy6727
0, // dummy6728
0, // dummy6729
0, // dummy6730
0, // dummy6731
0, // dummy6732
0, // dummy6733
0, // dummy6734
0, // dummy6735
0, // dummy6736
0, // dummy6737
0, // dummy6738
0, // dummy6739
0, // dummy6740
0, // dummy6741
0, // dummy6742
0, // dummy6743
0, // dummy6744
0, // dummy6745
0, // dummy6746
0, // dummy6747
0, // dummy6748
0, // dummy6749
0, // dummy6750
0, // dummy6751
0, // dummy6752
0, // dummy6753
0, // dummy6754
0, // dummy6755
0, // dummy6756
0, // dummy6757
0, // dummy6758
0, // dummy6759
0, // dummy6760
0, // dummy6761
0, // dummy6762
0, // dummy6763
0, // dummy6764
0, // dummy6765
0, // dummy6766
0, // dummy6767
0, // dummy6768
0, // dummy6769
0, // dummy6770
0, // dummy6771
0, // dummy6772
0, // dummy6773
0, // dummy6774
0, // dummy6775
0, // dummy6776
0, // dummy6777
0, // dummy6778
0, // dummy6779
0, // dummy6780
0, // dummy6781
0, // dummy6782
0, // dummy6783
0, // dummy6784
0, // dummy6785
0, // dummy6786
0, // dummy6787
0, // dummy6788
0, // dummy6789
0, // dummy6790
0, // dummy6791
0, // dummy6792
0, // dummy6793
0, // dummy6794
0, // dummy6795
0, // dummy6796
0, // dummy6797
0, // dummy6798
0, // dummy6799
0, // dummy6800
0, // dummy6801
0, // dummy6802
0, // dummy6803
0, // dummy6804
0, // dummy6805
0, // dummy6806
0, // dummy6807
0, // dummy6808
0, // dummy6809
0, // dummy6810
0, // dummy6811
0, // dummy6812
0, // dummy6813
0, // dummy6814
0, // dummy6815
0, // dummy6816
0, // dummy6817
0, // dummy6818
0, // dummy6819
0, // dummy6820
0, // dummy6821
0, // dummy6822
0, // dummy6823
0, // dummy6824
0, // dummy6825
0, // dummy6826
0, // dummy6827
0, // dummy6828
0, // dummy6829
0, // dummy6830
0, // dummy6831
0, // dummy6832
0, // dummy6833
0, // dummy6834
0, // dummy6835
0, // dummy6836
0, // dummy6837
0, // dummy6838
0, // dummy6839
0, // dummy6840
0, // dummy6841
0, // dummy6842
0, // dummy6843
0, // dummy6844
0, // dummy6845
0, // dummy6846
0, // dummy6847
0, // dummy6848
0, // dummy6849
0, // dummy6850
0, // dummy6851
0, // dummy6852
0, // dummy6853
0, // dummy6854
0, // dummy6855
0, // dummy6856
0, // dummy6857
0, // dummy6858
0, // dummy6859
0, // dummy6860
0, // dummy6861
0, // dummy6862
0, // dummy6863
0, // dummy6864
0, // dummy6865
0, // dummy6866
0, // dummy6867
0, // dummy6868
0, // dummy6869
0, // dummy6870
0, // dummy6871
0, // dummy6872
0, // dummy6873
0, // dummy6874
0, // dummy6875
0, // dummy6876
0, // dummy6877
0, // dummy6878
0, // dummy6879
0, // dummy6880
0, // dummy6881
0, // dummy6882
0, // dummy6883
0, // dummy6884
0, // dummy6885
0, // dummy6886
0, // dummy6887
0, // dummy6888
0, // dummy6889
0, // dummy6890
0, // dummy6891
0, // dummy6892
0, // dummy6893
0, // dummy6894
0, // dummy6895
0, // dummy6896
0, // dummy6897
0, // dummy6898
0, // dummy6899
0, // dummy6900
0, // dummy6901
0, // dummy6902
0, // dummy6903
0, // dummy6904
0, // dummy6905
0, // dummy6906
0, // dummy6907
0, // dummy6908
0, // dummy6909
0, // dummy6910
0, // dummy6911
0, // dummy6912
0, // dummy6913
0, // dummy6914
0, // dummy6915
0, // dummy6916
0, // dummy6917
0, // dummy6918
0, // dummy6919
0, // dummy6920
0, // dummy6921
0, // dummy6922
0, // dummy6923
0, // dummy6924
0, // dummy6925
0, // dummy6926
0, // dummy6927
0, // dummy6928
0, // dummy6929
0, // dummy6930
0, // dummy6931
0, // dummy6932
0, // dummy6933
0, // dummy6934
0, // dummy6935
0, // dummy6936
0, // dummy6937
0, // dummy6938
0, // dummy6939
0, // dummy6940
0, // dummy6941
0, // dummy6942
0, // dummy6943
0, // dummy6944
0, // dummy6945
0, // dummy6946
0, // dummy6947
0, // dummy6948
0, // dummy6949
0, // dummy6950
0, // dummy6951
0, // dummy6952
0, // dummy6953
0, // dummy6954
0, // dummy6955
0, // dummy6956
0, // dummy6957
0, // dummy6958
0, // dummy6959
0, // dummy6960
0, // dummy6961
0, // dummy6962
0, // dummy6963
0, // dummy6964
0, // dummy6965
0, // dummy6966
0, // dummy6967
0, // dummy6968
0, // dummy6969
0, // dummy6970
0, // dummy6971
0, // dummy6972
0, // dummy6973
0, // dummy6974
0, // dummy6975
0, // dummy6976
0, // dummy6977
0, // dummy6978
0, // dummy6979
0, // dummy6980
0, // dummy6981
0, // dummy6982
0, // dummy6983
0, // dummy6984
0, // dummy6985
0, // dummy6986
0, // dummy6987
0, // dummy6988
0, // dummy6989
0, // dummy6990
0, // dummy6991
0, // dummy6992
0, // dummy6993
0, // dummy6994
0, // dummy6995
0, // dummy6996
0, // dummy6997
0, // dummy6998
0, // dummy6999
0, // dummy7000
0, // dummy7001
0, // dummy7002
0, // dummy7003
0, // dummy7004
0, // dummy7005
0, // dummy7006
0, // dummy7007
0, // dummy7008
0, // dummy7009
0, // dummy7010
0, // dummy7011
0, // dummy7012
0, // dummy7013
0, // dummy7014
0, // dummy7015
0, // dummy7016
0, // dummy7017
0, // dummy7018
0, // dummy7019
0, // dummy7020
0, // dummy7021
0, // dummy7022
0, // dummy7023
0, // dummy7024
0, // dummy7025
0, // dummy7026
0, // dummy7027
0, // dummy7028
0, // dummy7029
0, // dummy7030
0, // dummy7031
0, // dummy7032
0, // dummy7033
0, // dummy7034
0, // dummy7035
0, // dummy7036
0, // dummy7037
0, // dummy7038
0, // dummy7039
0, // dummy7040
0, // dummy7041
0, // dummy7042
0, // dummy7043
0, // dummy7044
0, // dummy7045
0, // dummy7046
0, // dummy7047
0, // dummy7048
0, // dummy7049
0, // dummy7050
0, // dummy7051
0, // dummy7052
0, // dummy7053
0, // dummy7054
0, // dummy7055
0, // dummy7056
0, // dummy7057
0, // dummy7058
0, // dummy7059
0, // dummy7060
0, // dummy7061
0, // dummy7062
0, // dummy7063
0, // dummy7064
0, // dummy7065
0, // dummy7066
0, // dummy7067
0, // dummy7068
0, // dummy7069
0, // dummy7070
0, // dummy7071
0, // dummy7072
0, // dummy7073
0, // dummy7074
0, // dummy7075
0, // dummy7076
0, // dummy7077
0, // dummy7078
0, // dummy7079
0, // dummy7080
0, // dummy7081
0, // dummy7082
0, // dummy7083
0, // dummy7084
0, // dummy7085
0, // dummy7086
0, // dummy7087
0, // dummy7088
0, // dummy7089
0, // dummy7090
0, // dummy7091
0, // dummy7092
0, // dummy7093
0, // dummy7094
0, // dummy7095
0, // dummy7096
0, // dummy7097
0, // dummy7098
0, // dummy7099
0, // dummy7100
0, // dummy7101
0, // dummy7102
0, // dummy7103
0, // dummy7104
0, // dummy7105
0, // dummy7106
0, // dummy7107
0, // dummy7108
0, // dummy7109
0, // dummy7110
0, // dummy7111
0, // dummy7112
0, // dummy7113
0, // dummy7114
0, // dummy7115
0, // dummy7116
0, // dummy7117
0, // dummy7118
0, // dummy7119
0, // dummy7120
0, // dummy7121
0, // dummy7122
0, // dummy7123
0, // dummy7124
0, // dummy7125
0, // dummy7126
0, // dummy7127
0, // dummy7128
0, // dummy7129
0, // dummy7130
0, // dummy7131
0, // dummy7132
0, // dummy7133
0, // dummy7134
0, // dummy7135
0, // dummy7136
0, // dummy7137
0, // dummy7138
0, // dummy7139
0, // dummy7140
0, // dummy7141
0, // dummy7142
0, // dummy7143
0, // dummy7144
0, // dummy7145
0, // dummy7146
0, // dummy7147
0, // dummy7148
0, // dummy7149
0, // dummy7150
0, // dummy7151
0, // dummy7152
0, // dummy7153
0, // dummy7154
0, // dummy7155
0, // dummy7156
0, // dummy7157
0, // dummy7158
0, // dummy7159
0, // dummy7160
0, // dummy7161
0, // dummy7162
0, // dummy7163
0, // dummy7164
0, // dummy7165
0, // dummy7166
0, // dummy7167
0, // dummy7168
0, // dummy7169
0, // dummy7170
0, // dummy7171
0, // dummy7172
0, // dummy7173
0, // dummy7174
0, // dummy7175
0, // dummy7176
0, // dummy7177
0, // dummy7178
0, // dummy7179
0, // dummy7180
0, // dummy7181
0, // dummy7182
0, // dummy7183
0, // dummy7184
0, // dummy7185
0, // dummy7186
0, // dummy7187
0, // dummy7188
0, // dummy7189
0, // dummy7190
0, // dummy7191
0, // dummy7192
0, // dummy7193
0, // dummy7194
0, // dummy7195
0, // dummy7196
0, // dummy7197
0, // dummy7198
0, // dummy7199
0, // dummy7200
0, // dummy7201
0, // dummy7202
0, // dummy7203
0, // dummy7204
0, // dummy7205
0, // dummy7206
0, // dummy7207
0, // dummy7208
0, // dummy7209
0, // dummy7210
0, // dummy7211
0, // dummy7212
0, // dummy7213
0, // dummy7214
0, // dummy7215
0, // dummy7216
0, // dummy7217
0, // dummy7218
0, // dummy7219
0, // dummy7220
0, // dummy7221
0, // dummy7222
0, // dummy7223
0, // dummy7224
0, // dummy7225
0, // dummy7226
0, // dummy7227
0, // dummy7228
0, // dummy7229
0, // dummy7230
0, // dummy7231
0, // dummy7232
0, // dummy7233
0, // dummy7234
0, // dummy7235
0, // dummy7236
0, // dummy7237
0, // dummy7238
0, // dummy7239
0, // dummy7240
0, // dummy7241
0, // dummy7242
0, // dummy7243
0, // dummy7244
0, // dummy7245
0, // dummy7246
0, // dummy7247
0, // dummy7248
0, // dummy7249
0, // dummy7250
0, // dummy7251
0, // dummy7252
0, // dummy7253
0, // dummy7254
0, // dummy7255
0, // dummy7256
0, // dummy7257
0, // dummy7258
0, // dummy7259
0, // dummy7260
0, // dummy7261
0, // dummy7262
0, // dummy7263
0, // dummy7264
0, // dummy7265
0, // dummy7266
0, // dummy7267
0, // dummy7268
0, // dummy7269
0, // dummy7270
0, // dummy7271
0, // dummy7272
0, // dummy7273
0, // dummy7274
0, // dummy7275
0, // dummy7276
0, // dummy7277
0, // dummy7278
0, // dummy7279
0, // dummy7280
0, // dummy7281
0, // dummy7282
0, // dummy7283
0, // dummy7284
0, // dummy7285
0, // dummy7286
0, // dummy7287
0, // dummy7288
0, // dummy7289
0, // dummy7290
0, // dummy7291
0, // dummy7292
0, // dummy7293
0, // dummy7294
0, // dummy7295
0, // dummy7296
0, // dummy7297
0, // dummy7298
0, // dummy7299
0, // dummy7300
0, // dummy7301
0, // dummy7302
0, // dummy7303
0, // dummy7304
0, // dummy7305
0, // dummy7306
0, // dummy7307
0, // dummy7308
0, // dummy7309
0, // dummy7310
0, // dummy7311
0, // dummy7312
0, // dummy7313
0, // dummy7314
0, // dummy7315
0, // dummy7316
0, // dummy7317
0, // dummy7318
0, // dummy7319
0, // dummy7320
0, // dummy7321
0, // dummy7322
0, // dummy7323
0, // dummy7324
0, // dummy7325
0, // dummy7326
0, // dummy7327
0, // dummy7328
0, // dummy7329
0, // dummy7330
0, // dummy7331
0, // dummy7332
0, // dummy7333
0, // dummy7334
0, // dummy7335
0, // dummy7336
0, // dummy7337
0, // dummy7338
0, // dummy7339
0, // dummy7340
0, // dummy7341
0, // dummy7342
0, // dummy7343
0, // dummy7344
0, // dummy7345
0, // dummy7346
0, // dummy7347
0, // dummy7348
0, // dummy7349
0, // dummy7350
0, // dummy7351
0, // dummy7352
0, // dummy7353
0, // dummy7354
0, // dummy7355
0, // dummy7356
0, // dummy7357
0, // dummy7358
0, // dummy7359
0, // dummy7360
0, // dummy7361
0, // dummy7362
0, // dummy7363
0, // dummy7364
0, // dummy7365
0, // dummy7366
0, // dummy7367
0, // dummy7368
0, // dummy7369
0, // dummy7370
0, // dummy7371
0, // dummy7372
0, // dummy7373
0, // dummy7374
0, // dummy7375
0, // dummy7376
0, // dummy7377
0, // dummy7378
0, // dummy7379
0, // dummy7380
0, // dummy7381
0, // dummy7382
0, // dummy7383
0, // dummy7384
0, // dummy7385
0, // dummy7386
0, // dummy7387
0, // dummy7388
0, // dummy7389
0, // dummy7390
0, // dummy7391
0, // dummy7392
0, // dummy7393
0, // dummy7394
0, // dummy7395
0, // dummy7396
0, // dummy7397
0, // dummy7398
0, // dummy7399
0, // dummy7400
0, // dummy7401
0, // dummy7402
0, // dummy7403
0, // dummy7404
0, // dummy7405
0, // dummy7406
0, // dummy7407
0, // dummy7408
0, // dummy7409
0, // dummy7410
0, // dummy7411
0, // dummy7412
0, // dummy7413
0, // dummy7414
0, // dummy7415
0, // dummy7416
0, // dummy7417
0, // dummy7418
0, // dummy7419
0, // dummy7420
0, // dummy7421
0, // dummy7422
0, // dummy7423
0, // dummy7424
0, // dummy7425
0, // dummy7426
0, // dummy7427
0, // dummy7428
0, // dummy7429
0, // dummy7430
0, // dummy7431
0, // dummy7432
0, // dummy7433
0, // dummy7434
0, // dummy7435
0, // dummy7436
0, // dummy7437
0, // dummy7438
0, // dummy7439
0, // dummy7440
0, // dummy7441
0, // dummy7442
0, // dummy7443
0, // dummy7444
0, // dummy7445
0, // dummy7446
0, // dummy7447
0, // dummy7448
0, // dummy7449
0, // dummy7450
0, // dummy7451
0, // dummy7452
0, // dummy7453
0, // dummy7454
0, // dummy7455
0, // dummy7456
0, // dummy7457
0, // dummy7458
0, // dummy7459
0, // dummy7460
0, // dummy7461
0, // dummy7462
0, // dummy7463
0, // dummy7464
0, // dummy7465
0, // dummy7466
0, // dummy7467
0, // dummy7468
0, // dummy7469
0, // dummy7470
0, // dummy7471
0, // dummy7472
0, // dummy7473
0, // dummy7474
0, // dummy7475
0, // dummy7476
0, // dummy7477
0, // dummy7478
0, // dummy7479
0, // dummy7480
0, // dummy7481
0, // dummy7482
0, // dummy7483
0, // dummy7484
0, // dummy7485
0, // dummy7486
0, // dummy7487
0, // dummy7488
0, // dummy7489
0, // dummy7490
0, // dummy7491
0, // dummy7492
0, // dummy7493
0, // dummy7494
0, // dummy7495
0, // dummy7496
0, // dummy7497
0, // dummy7498
0, // dummy7499
0, // dummy7500
0, // dummy7501
0, // dummy7502
0, // dummy7503
0, // dummy7504
0, // dummy7505
0, // dummy7506
0, // dummy7507
0, // dummy7508
0, // dummy7509
0, // dummy7510
0, // dummy7511
0, // dummy7512
0, // dummy7513
0, // dummy7514
0, // dummy7515
0, // dummy7516
0, // dummy7517
0, // dummy7518
0, // dummy7519
0, // dummy7520
0, // dummy7521
0, // dummy7522
0, // dummy7523
0, // dummy7524
0, // dummy7525
0, // dummy7526
0, // dummy7527
0, // dummy7528
0, // dummy7529
0, // dummy7530
0, // dummy7531
0, // dummy7532
0, // dummy7533
0, // dummy7534
0, // dummy7535
0, // dummy7536
0, // dummy7537
0, // dummy7538
0, // dummy7539
0, // dummy7540
0, // dummy7541
0, // dummy7542
0, // dummy7543
0, // dummy7544
0, // dummy7545
0, // dummy7546
0, // dummy7547
0, // dummy7548
0, // dummy7549
0, // dummy7550
0, // dummy7551
0, // dummy7552
0, // dummy7553
0, // dummy7554
0, // dummy7555
0, // dummy7556
0, // dummy7557
0, // dummy7558
0, // dummy7559
0, // dummy7560
0, // dummy7561
0, // dummy7562
0, // dummy7563
0, // dummy7564
0, // dummy7565
0, // dummy7566
0, // dummy7567
0, // dummy7568
0, // dummy7569
0, // dummy7570
0, // dummy7571
0, // dummy7572
0, // dummy7573
0, // dummy7574
0, // dummy7575
0, // dummy7576
0, // dummy7577
0, // dummy7578
0, // dummy7579
0, // dummy7580
0, // dummy7581
0, // dummy7582
0, // dummy7583
0, // dummy7584
0, // dummy7585
0, // dummy7586
0, // dummy7587
0, // dummy7588
0, // dummy7589
0, // dummy7590
0, // dummy7591
0, // dummy7592
0, // dummy7593
0, // dummy7594
0, // dummy7595
0, // dummy7596
0, // dummy7597
0, // dummy7598
0, // dummy7599
0, // dummy7600
0, // dummy7601
0, // dummy7602
0, // dummy7603
0, // dummy7604
0, // dummy7605
0, // dummy7606
0, // dummy7607
0, // dummy7608
0, // dummy7609
0, // dummy7610
0, // dummy7611
0, // dummy7612
0, // dummy7613
0, // dummy7614
0, // dummy7615
0, // dummy7616
0, // dummy7617
0, // dummy7618
0, // dummy7619
0, // dummy7620
0, // dummy7621
0, // dummy7622
0, // dummy7623
0, // dummy7624
0, // dummy7625
0, // dummy7626
0, // dummy7627
0, // dummy7628
0, // dummy7629
0, // dummy7630
0, // dummy7631
0, // dummy7632
0, // dummy7633
0, // dummy7634
0, // dummy7635
0, // dummy7636
0, // dummy7637
0, // dummy7638
0, // dummy7639
0, // dummy7640
0, // dummy7641
0, // dummy7642
0, // dummy7643
0, // dummy7644
0, // dummy7645
0, // dummy7646
0, // dummy7647
0, // dummy7648
0, // dummy7649
0, // dummy7650
0, // dummy7651
0, // dummy7652
0, // dummy7653
0, // dummy7654
0, // dummy7655
0, // dummy7656
0, // dummy7657
0, // dummy7658
0, // dummy7659
0, // dummy7660
0, // dummy7661
0, // dummy7662
0, // dummy7663
0, // dummy7664
0, // dummy7665
0, // dummy7666
0, // dummy7667
0, // dummy7668
0, // dummy7669
0, // dummy7670
0, // dummy7671
0, // dummy7672
0, // dummy7673
0, // dummy7674
0, // dummy7675
0, // dummy7676
0, // dummy7677
0, // dummy7678
0, // dummy7679
0, // dummy7680
0, // dummy7681
0, // dummy7682
0, // dummy7683
0, // dummy7684
0, // dummy7685
0, // dummy7686
0, // dummy7687
0, // dummy7688
0, // dummy7689
0, // dummy7690
0, // dummy7691
0, // dummy7692
0, // dummy7693
0, // dummy7694
0, // dummy7695
0, // dummy7696
0, // dummy7697
0, // dummy7698
0, // dummy7699
0, // dummy7700
0, // dummy7701
0, // dummy7702
0, // dummy7703
0, // dummy7704
0, // dummy7705
0, // dummy7706
0, // dummy7707
0, // dummy7708
0, // dummy7709
0, // dummy7710
0, // dummy7711
0, // dummy7712
0, // dummy7713
0, // dummy7714
0, // dummy7715
0, // dummy7716
0, // dummy7717
0, // dummy7718
0, // dummy7719
0, // dummy7720
0, // dummy7721
0, // dummy7722
0, // dummy7723
0, // dummy7724
0, // dummy7725
0, // dummy7726
0, // dummy7727
0, // dummy7728
0, // dummy7729
0, // dummy7730
0, // dummy7731
0, // dummy7732
0, // dummy7733
0, // dummy7734
0, // dummy7735
0, // dummy7736
0, // dummy7737
0, // dummy7738
0, // dummy7739
0, // dummy7740
0, // dummy7741
0, // dummy7742
0, // dummy7743
0, // dummy7744
0, // dummy7745
0, // dummy7746
0, // dummy7747
0, // dummy7748
0, // dummy7749
0, // dummy7750
0, // dummy7751
0, // dummy7752
0, // dummy7753
0, // dummy7754
0, // dummy7755
0, // dummy7756
0, // dummy7757
0, // dummy7758
0, // dummy7759
0, // dummy7760
0, // dummy7761
0, // dummy7762
0, // dummy7763
0, // dummy7764
0, // dummy7765
0, // dummy7766
0, // dummy7767
0, // dummy7768
0, // dummy7769
0, // dummy7770
0, // dummy7771
0, // dummy7772
0, // dummy7773
0, // dummy7774
0, // dummy7775
0, // dummy7776
0, // dummy7777
0, // dummy7778
0, // dummy7779
0, // dummy7780
0, // dummy7781
0, // dummy7782
0, // dummy7783
0, // dummy7784
0, // dummy7785
0, // dummy7786
0, // dummy7787
0, // dummy7788
0, // dummy7789
0, // dummy7790
0, // dummy7791
0, // dummy7792
0, // dummy7793
0, // dummy7794
0, // dummy7795
0, // dummy7796
0, // dummy7797
0, // dummy7798
0, // dummy7799
0, // dummy7800
0, // dummy7801
0, // dummy7802
0, // dummy7803
0, // dummy7804
0, // dummy7805
0, // dummy7806
0, // dummy7807
0, // dummy7808
0, // dummy7809
0, // dummy7810
0, // dummy7811
0, // dummy7812
0, // dummy7813
0, // dummy7814
0, // dummy7815
0, // dummy7816
0, // dummy7817
0, // dummy7818
0, // dummy7819
0, // dummy7820
0, // dummy7821
0, // dummy7822
0, // dummy7823
0, // dummy7824
0, // dummy7825
0, // dummy7826
0, // dummy7827
0, // dummy7828
0, // dummy7829
0, // dummy7830
0, // dummy7831
0, // dummy7832
0, // dummy7833
0, // dummy7834
0, // dummy7835
0, // dummy7836
0, // dummy7837
0, // dummy7838
0, // dummy7839
0, // dummy7840
0, // dummy7841
0, // dummy7842
0, // dummy7843
0, // dummy7844
0, // dummy7845
0, // dummy7846
0, // dummy7847
0, // dummy7848
0, // dummy7849
0, // dummy7850
0, // dummy7851
0, // dummy7852
0, // dummy7853
0, // dummy7854
0, // dummy7855
0, // dummy7856
0, // dummy7857
0, // dummy7858
0, // dummy7859
0, // dummy7860
0, // dummy7861
0, // dummy7862
0, // dummy7863
0, // dummy7864
0, // dummy7865
0, // dummy7866
0, // dummy7867
0, // dummy7868
0, // dummy7869
0, // dummy7870
0, // dummy7871
0, // dummy7872
0, // dummy7873
0, // dummy7874
0, // dummy7875
0, // dummy7876
0, // dummy7877
0, // dummy7878
0, // dummy7879
0, // dummy7880
0, // dummy7881
0, // dummy7882
0, // dummy7883
0, // dummy7884
0, // dummy7885
0, // dummy7886
0, // dummy7887
0, // dummy7888
0, // dummy7889
0, // dummy7890
0, // dummy7891
0, // dummy7892
0, // dummy7893
0, // dummy7894
0, // dummy7895
0, // dummy7896
0, // dummy7897
0, // dummy7898
0, // dummy7899
0, // dummy7900
0, // dummy7901
0, // dummy7902
0, // dummy7903
0, // dummy7904
0, // dummy7905
0, // dummy7906
0, // dummy7907
0, // dummy7908
0, // dummy7909
0, // dummy7910
0, // dummy7911
0, // dummy7912
0, // dummy7913
0, // dummy7914
0, // dummy7915
0, // dummy7916
0, // dummy7917
0, // dummy7918
0, // dummy7919
0, // dummy7920
0, // dummy7921
0, // dummy7922
0, // dummy7923
0, // dummy7924
0, // dummy7925
0, // dummy7926
0, // dummy7927
0, // dummy7928
0, // dummy7929
0, // dummy7930
0, // dummy7931
0, // dummy7932
0, // dummy7933
0, // dummy7934
0, // dummy7935
0, // dummy7936
0, // dummy7937
0, // dummy7938
0, // dummy7939
0, // dummy7940
0, // dummy7941
0, // dummy7942
0, // dummy7943
0, // dummy7944
0, // dummy7945
0, // dummy7946
0, // dummy7947
0, // dummy7948
0, // dummy7949
0, // dummy7950
0, // dummy7951
0, // dummy7952
0, // dummy7953
0, // dummy7954
0, // dummy7955
0, // dummy7956
0, // dummy7957
0, // dummy7958
0, // dummy7959
0, // dummy7960
0, // dummy7961
0, // dummy7962
0, // dummy7963
0, // dummy7964
0, // dummy7965
0, // dummy7966
0, // dummy7967
0, // dummy7968
0, // dummy7969
0, // dummy7970
0, // dummy7971
0, // dummy7972
0, // dummy7973
0, // dummy7974
0, // dummy7975
0, // dummy7976
0, // dummy7977
0, // dummy7978
0, // dummy7979
0, // dummy7980
0, // dummy7981
0, // dummy7982
0, // dummy7983
0, // dummy7984
0, // dummy7985
0, // dummy7986
0, // dummy7987
0, // dummy7988
0, // dummy7989
0, // dummy7990
0, // dummy7991
0, // dummy7992
0, // dummy7993
0, // dummy7994
0, // dummy7995
0, // dummy7996
0, // dummy7997
0, // dummy7998
0, // dummy7999
0, // dummy8000
0, // dummy8001
0, // dummy8002
0, // dummy8003
0, // dummy8004
0, // dummy8005
0, // dummy8006
0, // dummy8007
0, // dummy8008
0, // dummy8009
0, // dummy8010
0, // dummy8011
0, // dummy8012
0, // dummy8013
0, // dummy8014
0, // dummy8015
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // segment _rdata
"cyggcc_s-1.dll", // LibFileName
"__register_frame_info", // ProcName
"__deregister_frame_info", // aDeregisterFram
"addl", // aAddl
"%-10s A=%08lx B=%08lx R=%08lx CCIN=%04lx CC=%04lx\n", // a10sA08lxB08lxR_0
"addw", // aAddw
"addb", // aAddb
"subl", // aSubl
"subw", // aSubw
"subb", // aSubb
"xorl", // aXorl
"xorw", // aXorw
"xorb", // aXorb
"andl", // aAndl
"andw", // aAndw
"andb", // aAndb
"orl", // aOrl
"orw", // aOrw
"orb", // aOrb
"cmpl", // aCmpl
"cmpw", // aCmpw
"cmpb", // aCmpb
"adcl", // aAdcl
"adcw", // aAdcw
"adcb", // aAdcb
"sbbl", // aSbbl
"sbbw", // aSbbw
"sbbb", // aSbbb
"incl", // aIncl
"%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04lx\n", // a10sA08lxR08lxC
"incw", // aIncw
"incb", // aIncb
"decl", // aDecl
"decw", // aDecw
"decb", // aDecb
"negl", // aNegl
"negw", // aNegw
"negb", // aNegb
"notl", // aNotl
"notw", // aNotw
"notb", // aNotb
"shll", // aShll
"shlw", // aShlw
"shlb", // aShlb
"shrl", // aShrl
"shrw", // aShrw
"shrb", // aShrb
"sarl", // aSarl
"sarw", // aSarw
"sarb", // aSarb
"roll", // aRoll
"rolw", // aRolw
"rolb", // aRolb
"rorl", // aRorl
"rorw", // aRorw
"rorb", // aRorb
"rcrl", // aRcrl
"rcrw", // aRcrw
"rcrb", // aRcrb
"rcll", // aRcll
"rclw", // aRclw
"rclb", // aRclb
"shldl", // aShldl
"%-10s A=%08lx B=%08lx C=%08lx R=%08lx CCIN=%04lx CC=%04lx\n", // a10sA08lxB08lxC
"shldw", // aShldw
"shrdl", // aShrdl
"shrdw", // aShrdw
"btl", // aBtl
"btw", // aBtw
"btsl", // aBtsl
"btsw", // aBtsw
"btrl", // aBtrl
"btrw", // aBtrw
"btcl", // aBtcl
"btcw", // aBtcw
"0x4000", // a0x4000
"lea %s = %08lx\n", // aLeaS08lx
"(%%eax)", // aEax
"(%%ebx)", // aEbx
"(%%ecx)", // aEcx
"(%%edx)", // aEdx
"(%%esi)", // aEsi
"(%%edi)", // aEdi
"0x40(%%eax)", // a0x40Eax
"0x40(%%ebx)", // a0x40Ebx
"0x40(%%ecx)", // a0x40Ecx
"0x40(%%edx)", // a0x40Edx
"0x40(%%esi)", // a0x40Esi
"0x40(%%edi)", // a0x40Edi
"0x4000(%%eax)", // a0x4000Eax
"0x4000(%%ebx)", // a0x4000Ebx
"0x4000(%%ecx)", // a0x4000Ecx
"0x4000(%%edx)", // a0x4000Edx
"0x4000(%%esi)", // a0x4000Esi
"0x4000(%%edi)", // a0x4000Edi
"(%%eax, %%ecx)", // aEaxEcx
"(%%ebx, %%edx)", // aEbxEdx
"(%%ecx, %%ecx)", // aEcxEcx
"(%%edx, %%ecx)", // aEdxEcx
"(%%esi, %%ecx)", // aEsiEcx
"(%%edi, %%ecx)", // aEdiEcx
"0x40(%%eax, %%ecx)", // a0x40EaxEcx
"0x4000(%%ebx, %%edx)", // a0x4000EbxEdx
"(%%ecx, %%ecx, 2)", // aEcxEcx2
"(%%edx, %%ecx, 4)", // aEdxEcx4
"(%%esi, %%ecx, 8)", // aEsiEcx8
"(,%%eax, 2)", // aEax2
"(,%%ebx, 4)", // aEbx4
"(,%%ecx, 8)", // aEcx8
"0x40(,%%eax, 2)", // a0x40Eax2
"0x40(,%%ebx, 4)", // a0x40Ebx4
"0x40(,%%ecx, 8)", // a0x40Ecx8
"-10(%%ecx, %%ecx, 2)", // a10EcxEcx2
"-10(%%edx, %%ecx, 4)", // a10EdxEcx4
"-10(%%esi, %%ecx, 8)", // a10EsiEcx8
"0x4000(%%ecx, %%ecx, 2)", // a0x4000EcxEcx2
"0x4000(%%edx, %%ecx, 4)", // a0x4000EdxEcx4
"0x4000(%%esi, %%ecx, 8)", // a0x4000EsiEcx8
"jne", // aJne
"%-10s %d\n", // a10sD
"setne", // aSetne
"cmovnel", // aCmovnel
"%-10s R=%08lx\n", // a10sR08lx
"cmovnew", // aCmovnew
"je", // aJe
"sete", // aSete
"cmovel", // aCmovel
"cmovew", // aCmovew
"jl", // aJl
"setl", // aSetl
"cmovll", // aCmovll
"cmovlw", // aCmovlw
"jle", // aJle
"setle", // aSetle
"cmovlel", // aCmovlel
"cmovlew", // aCmovlew
"jge", // aJge
"setge", // aSetge
"cmovgel", // aCmovgel
"cmovgew", // aCmovgew
"jg", // aJg
"setg", // aSetg
"cmovgl", // aCmovgl
"cmovgw", // aCmovgw
"jb", // aJb
"setb", // aSetb
"cmovbl", // aCmovbl
"cmovbw", // aCmovbw
"jbe", // aJbe
"setbe", // aSetbe
"cmovbel", // aCmovbel
"cmovbew", // aCmovbew
"jae", // aJae
"setae", // aSetae
"cmovael", // aCmovael
"cmovaew", // aCmovaew
"ja", // aJa
"seta", // aSeta
"cmoval", // aCmoval
"cmovaw", // aCmovaw
"jp", // aJp
"setp", // aSetp
"cmovpl", // aCmovpl
"cmovpw", // aCmovpw
"jnp", // aJnp
"setnp", // aSetnp
"cmovnpl", // aCmovnpl
"cmovnpw", // aCmovnpw
"jo", // aJo
"seto", // aSeto
"cmovol", // aCmovol
"cmovow", // aCmovow
"jno", // aJno
"setno", // aSetno
"cmovnol", // aCmovnol
"cmovnow", // aCmovnow
"js", // aJs
"sets", // aSets
"cmovsl", // aCmovsl
"cmovsw", // aCmovsw
"jns", // aJns
"setns", // aSetns
"cmovnsl", // aCmovnsl
"cmovnsw", // aCmovnsw
"jcxz", // aJcxz
"%-10s ECX=%08lx ZF=%ld r=%d\n", // a10sEcx08lxZfLd
"loopw", // aLoopw
"loopzw", // aLoopzw
"loopnzw", // aLoopnzw
"jecxz", // aJecxz
"loopl", // aLoopl
"loopzl", // aLoopzl
"loopnzl", // aLoopnzl
"mulb", // aMulb
"%-10s A=%08lx B=%08lx R=%08lx CC=%04lx\n", // a10sA08lxB08lxR
"mulw", // aMulw
"%-10s AH=%08lx AL=%08lx B=%08lx RH=%08lx RL=%08lx CC=%04lx\n", // a10sAh08lxAl08l
"mull", // aMull
"imulb", // aImulb
"imulw", // aImulw
"imull", // aImull
"divb", // aDivb
"divw", // aDivw
"divl", // aDivl
"idivb", // aIdivb
"idivw", // aIdivw
"idivl", // aIdivl
"imulw im", // aImulwIm
"imull im", // aImullIm
"bsrw", // aBsrw
"%-10s A=%08lx R=%08lx %ld\n", // a10sA08lxR08lxL
"bsfw", // aBsfw
"bsrl", // aBsrl
"bsfl", // aBsfl
"popcnt A=%08lx R=%08lx flags=%lx\n", // aPopcntA08lxR08
"a=%f b=%f a+b=%f\n", // aAFBFABF
"a=%f b=%f a-b=%f\n", // aAFBFABF_0
"a=%f b=%f a*b=%f\n", // aAFBFABF_1
"a=%f b=%f a/b=%f\n", // aAFBFABF_2
"a=%f b=%f =%f\n", // aAFBFF
"a=%f b=%f fmod(a, b)=%f\n", // aAFBFFmodABF
"a=%f copysign(a,b)=%f\n", // aAFCopysignABF
"a=%f sqrt(a)=%f\n", // aAFSqrtAF
"a=%f exp(a)=%f\n", // aAFExpAF
"fcom(%f %f)=%04lx\n", // aFcomFF04lx
"fucom(%f %f)=%04lx\n", // aFucomFF04lx
"fcomi(%f %f)=%04lx %02lx\n", // aFcomiFF04lx02l
"fucomi(%f %f)=%04lx %02lx\n", // aFucomiFF04lx02
"fxam(%f)=%04lx\n", // aFxamF04lx
"(float)%f = %f\n", // aFloatFF
"(long double)%f = %Lf\n", // aLongDoubleFLf
"a=%016llx\n", // aA016llx
"la=%016llx %04x\n", // aLa016llx04x
"(short)a = %d\n", // aShortAD
"(int)a = %d\n", // aIntAD
"(int64_t)a = %016llx\n", // aInt64TA016llx
"rint(a) = %f\n", // aRintAF
"fld1= %f\n", // aFld1F
"fldl2t= %f\n", // aFldl2tF
"fldl2e= %f\n", // aFldl2eF
"fldpi= %f\n", // aFldpiF
"fldlg2= %f\n", // aFldlg2F
"fldln2= %f\n", // aFldln2F
"fldz= %f\n", // aFldzF
"a=%f bcd=%04x%04x%04x%04x%04x b=%f\n", // aAFBcd04x04x04x
"res[%d]=%f\n", // aResDF
"fpuc=%04x fpus=%04x fptag=%04x\n", // aFpuc04xFpus04x
"fptag=%04x\n", // aFptag04x
"b", // aB
"fcmov%s eflags=0x%04lx-> %f\n", // aFcmovSEflags0x
"e", // aE
"be", // aBe
"nb", // aNb
"ne", // aNe
"nbe", // aNbe
"u", // aU
"nu", // aNu
"daa", // aDaa
"%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n", // a10sA08xR08xCci
"das", // aDas
"aaa", // aAaa
"aas", // aAas
"aam", // aAam
"aad", // aAad
"xchgl", // aXchgl
"%-10s A=%08lx B=%08lx\n", // a10sA08lxB08lx
"xchgw", // aXchgw
"xchgb", // aXchgb
"xaddl", // aXaddl
"xaddw", // aXaddw
"xaddb", // aXaddb
"xaddl same res=%08x\n", // aXaddlSameRes08
"cmpxchgl", // aCmpxchgl
"%-10s EAX=%08lx A=%08lx C=%08lx CC=%02lx\n", // a10sEax08lxA08l
"cmpxchgw", // aCmpxchgw
"cmpxchgb", // aCmpxchgb
"cmpxchg8b: eax=%08lx edx=%08lx op1=%016llx CC=%02lx\n", // aCmpxchg8bEax08
"xlat: EAX=%08lx\n", // aXlatEax08lx
"popl esp=%08lx\n", // aPoplEsp08lx
"popw esp=%08lx\n", // aPopwEsp08lx
"stosb", // aStosb
"%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX=%08lx EFL=%04x\n", // a10sEsi08lxEdi0
"stosw", // aStosw
"stosl", // aStosl
"rep stosb", // aRepStosb
"rep stosw", // aRepStosw
"rep stosl", // aRepStosl
"lodsb", // aLodsb
"lodsw", // aLodsw
"lodsl", // aLodsl
"rep lodsb", // aRepLodsb
"rep lodsw", // aRepLodsw
"rep lodsl", // aRepLodsl
"movsb", // aMovsb
"movsw", // aMovsw
"movsl", // aMovsl
"rep movsb", // aRepMovsb
"rep movsw", // aRepMovsw
"rep movsl", // aRepMovsl
"scasb", // aScasb
"scasw", // aScasw
"scasl", // aScasl
"repz scasb", // aRepzScasb
"repz scasw", // aRepzScasw
"repz scasl", // aRepzScasl
"repnz scasb", // aRepnzScasb
"repnz scasw", // aRepnzScasw
"repnz scasl", // aRepnzScasl
"cmpsb", // aCmpsb
"cmpsw", // aCmpsw
"cmpsl", // aCmpsl
"repz cmpsb", // aRepzCmpsb
"repz cmpsw", // aRepzCmpsw
"repz cmpsl", // aRepzCmpsl
"repnz cmpsb", // aRepnzCmpsb
"repnz cmpsw", // aRepnzCmpsw
"repnz cmpsl", // aRepnzCmpsl
"cbw", // aCbw
"%-10s A=%08lx R=%08lx\n", // a10sA08lxR08lx
"cwde", // aCwde
"cwd", // aCwd
"%-10s A=%08lx R=%08lx:%08lx\n", // a10sA08lxR08lx0
"cdq", // aCdq
"bswapl", // aBswapl
"%-10s: A=%08lx R=%08lx\n", // a10sA08lxR08lx_0
0, // flt_410D24
0, // dbl_410D28
0, // flt_410D30
0, // flt_410D34
0, // flt_410D38
0, // flt_410D3C
0, // dbl_410D40
0, // flt_410D48
0, // flt_410D4C
0, // flt_410D50
0, // flt_410D54
0, // flt_410D58
0, // flt_410D5C
0, // flt_410D60
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170
"GCC: (GNU) 7.3.0", // aGccGnu730
"GCC: (GNU) 7.3.0", // aGccGnu730_0
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_0
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_1
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_2
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_3
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_4
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_5
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_6
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_7
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_8
"GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)", // aGccGnu64020170_9
"GCC: (GNU) 7.3.0", // aGccGnu730_1
"GCC: (GNU) 7.3.0", // aGccGnu730_2
0, // unk_410FF4
0, // dummy8016
0, // dummy8017
0, // dummy8018
0, // dummy8019
0, // dummy8020
0, // dummy8021
0, // dummy8022
0, // dummy8023
0, // dummy8024
0, // dummy8025
0, // dummy8026
{0,0,0,0,0,0,0,0,0}, // padding
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // segment _eh_frame
20, // dummy8028
0, // dummy8029
0, // dummy8030
0, // dummy8031
0, // dummy8032
0, // dummy8033
0, // dummy8034
0, // dummy8035
1, // dummy8036
122, // dummy8037
82, // dummy8038
0, // dummy8039
1, // dummy8040
124, // dummy8041
8, // dummy8042
1, // dummy8043
27, // dummy8044
12, // dummy8045
4, // dummy8046
4, // dummy8047
136, // dummy8048
1, // dummy8049
0, // dummy8050
0, // dummy8051
28, // dummy8052
0, // dummy8053
0, // dummy8054
0, // dummy8055
28, // dummy8056
0, // dummy8057
0, // dummy8058
0, // dummy8059
224, // dummy8060
239, // dummy8061
254, // dummy8062
255, // dummy8063
135, // dummy8064
0, // dummy8065
0, // dummy8066
0, // dummy8067
0, // dummy8068
65, // dummy8069
14, // dummy8070
8, // dummy8071
133, // dummy8072
2, // dummy8073
66, // dummy8074
13, // dummy8075
5, // dummy8076
2, // dummy8077
131, // dummy8078
197, // dummy8079
12, // dummy8080
4, // dummy8081
4, // dummy8082
0, // dummy8083
20, // unk_412038
0, // dummy8084
0, // dummy8085
0, // dummy8086
0, // dummy8087
0, // dummy8088
0, // dummy8089
0, // dummy8090
1, // dummy8091
122, // dummy8092
82, // dummy8093
0, // dummy8094
1, // dummy8095
124, // dummy8096
8, // dummy8097
1, // dummy8098
27, // dummy8099
12, // dummy8100
4, // dummy8101
4, // dummy8102
136, // dummy8103
1, // dummy8104
0, // dummy8105
0, // dummy8106
44, // dummy8107
0, // dummy8108
0, // dummy8109
0, // dummy8110
28, // dummy8111
0, // dummy8112
0, // dummy8113
0, // dummy8114
56, // dummy8115
240, // dummy8116
254, // dummy8117
255, // dummy8118
177, // dummy8119
0, // dummy8120
0, // dummy8121
0, // dummy8122
0, // dummy8123
65, // dummy8124
14, // dummy8125
8, // dummy8126
133, // dummy8127
2, // dummy8128
66, // dummy8129
13, // dummy8130
5, // dummy8131
70, // dummy8132
135, // dummy8133
3, // dummy8134
134, // dummy8135
4, // dummy8136
131, // dummy8137
5, // dummy8138
2, // dummy8139
145, // dummy8140
10, // dummy8141
195, // dummy8142
65, // dummy8143
198, // dummy8144
65, // dummy8145
199, // dummy8146
65, // dummy8147
197, // dummy8148
12, // dummy8149
4, // dummy8150
4, // dummy8151
67, // dummy8152
11, // dummy8153
0, // dummy8154
28, // dummy8155
0, // dummy8156
0, // dummy8157
0, // dummy8158
76, // dummy8159
0, // dummy8160
0, // dummy8161
0, // dummy8162
200, // dummy8163
240, // dummy8164
254, // dummy8165
255, // dummy8166
47, // dummy8167
0, // dummy8168
0, // dummy8169
0, // dummy8170
0, // dummy8171
65, // dummy8172
14, // dummy8173
8, // dummy8174
133, // dummy8175
2, // dummy8176
66, // dummy8177
13, // dummy8178
5, // dummy8179
107, // dummy8180
197, // dummy8181
12, // dummy8182
4, // dummy8183
4, // dummy8184
0, // dummy8185
0, // dummy8186
20, // dummy8187
0, // dummy8188
0, // dummy8189
0, // dummy8190
0, // dummy8191
0, // dummy8192
0, // dummy8193
0, // dummy8194
1, // dummy8195
122, // dummy8196
82, // dummy8197
0, // dummy8198
1, // dummy8199
124, // dummy8200
8, // dummy8201
1, // dummy8202
27, // dummy8203
12, // dummy8204
4, // dummy8205
4, // dummy8206
136, // dummy8207
1, // dummy8208
0, // dummy8209
0, // dummy8210
36, // dummy8211
0, // dummy8212
0, // dummy8213
0, // dummy8214
28, // dummy8215
0, // dummy8216
0, // dummy8217
0, // dummy8218
192, // dummy8219
240, // dummy8220
254, // dummy8221
255, // dummy8222
79, // dummy8223
0, // dummy8224
0, // dummy8225
0, // dummy8226
0, // dummy8227
65, // dummy8228
14, // dummy8229
8, // dummy8230
133, // dummy8231
2, // dummy8232
66, // dummy8233
13, // dummy8234
5, // dummy8235
69, // dummy8236
134, // dummy8237
3, // dummy8238
131, // dummy8239
4, // dummy8240
2, // dummy8241
68, // dummy8242
195, // dummy8243
65, // dummy8244
198, // dummy8245
65, // dummy8246
197, // dummy8247
12, // dummy8248
4, // dummy8249
4, // dummy8250
36, // dummy8251
0, // dummy8252
0, // dummy8253
0, // dummy8254
68, // dummy8255
0, // dummy8256
0, // dummy8257
0, // dummy8258
231, // dummy8259
240, // dummy8260
254, // dummy8261
255, // dummy8262
80, // dummy8263
0, // dummy8264
0, // dummy8265
0, // dummy8266
0, // dummy8267
65, // dummy8268
14, // dummy8269
8, // dummy8270
133, // dummy8271
2, // dummy8272
66, // dummy8273
13, // dummy8274
5, // dummy8275
69, // dummy8276
134, // dummy8277
3, // dummy8278
131, // dummy8279
4, // dummy8280
2, // dummy8281
69, // dummy8282
195, // dummy8283
65, // dummy8284
198, // dummy8285
65, // dummy8286
197, // dummy8287
12, // dummy8288
4, // dummy8289
4, // dummy8290
36, // dummy8291
0, // dummy8292
0, // dummy8293
0, // dummy8294
108, // dummy8295
0, // dummy8296
0, // dummy8297
0, // dummy8298
15, // dummy8299
241, // dummy8300
254, // dummy8301
255, // dummy8302
79, // dummy8303
0, // dummy8304
0, // dummy8305
0, // dummy8306
0, // dummy8307
65, // dummy8308
14, // dummy8309
8, // dummy8310
133, // dummy8311
2, // dummy8312
66, // dummy8313
13, // dummy8314
5, // dummy8315
69, // dummy8316
134, // dummy8317
3, // dummy8318
131, // dummy8319
4, // dummy8320
2, // dummy8321
68, // dummy8322
195, // dummy8323
65, // dummy8324
198, // dummy8325
65, // dummy8326
197, // dummy8327
12, // dummy8328
4, // dummy8329
4, // dummy8330
36, // dummy8331
0, // dummy8332
0, // dummy8333
0, // dummy8334
148, // dummy8335
0, // dummy8336
0, // dummy8337
0, // dummy8338
54, // dummy8339
241, // dummy8340
254, // dummy8341
255, // dummy8342
81, // dummy8343
0, // dummy8344
0, // dummy8345
0, // dummy8346
0, // dummy8347
65, // dummy8348
14, // dummy8349
8, // dummy8350
133, // dummy8351
2, // dummy8352
66, // dummy8353
13, // dummy8354
5, // dummy8355
69, // dummy8356
134, // dummy8357
3, // dummy8358
131, // dummy8359
4, // dummy8360
2, // dummy8361
70, // dummy8362
195, // dummy8363
65, // dummy8364
198, // dummy8365
65, // dummy8366
197, // dummy8367
12, // dummy8368
4, // dummy8369
4, // dummy8370
28, // dummy8371
0, // dummy8372
0, // dummy8373
0, // dummy8374
188, // dummy8375
0, // dummy8376
0, // dummy8377
0, // dummy8378
95, // dummy8379
241, // dummy8380
254, // dummy8381
255, // dummy8382
0, // dummy8383
3, // dummy8384
0, // dummy8385
0, // dummy8386
0, // dummy8387
65, // dummy8388
14, // dummy8389
8, // dummy8390
133, // dummy8391
2, // dummy8392
66, // dummy8393
13, // dummy8394
5, // dummy8395
3, // dummy8396
252, // dummy8397
2, // dummy8398
197, // dummy8399
12, // dummy8400
4, // dummy8401
4, // dummy8402
36, // dummy8403
0, // dummy8404
0, // dummy8405
0, // dummy8406
220, // dummy8407
0, // dummy8408
0, // dummy8409
0, // dummy8410
63, // dummy8411
244, // dummy8412
254, // dummy8413
255, // dummy8414
79, // dummy8415
0, // dummy8416
0, // dummy8417
0, // dummy8418
0, // dummy8419
65, // dummy8420
14, // dummy8421
8, // dummy8422
133, // dummy8423
2, // dummy8424
66, // dummy8425
13, // dummy8426
5, // dummy8427
69, // dummy8428
134, // dummy8429
3, // dummy8430
131, // dummy8431
4, // dummy8432
2, // dummy8433
68, // dummy8434
195, // dummy8435
65, // dummy8436
198, // dummy8437
65, // dummy8438
197, // dummy8439
12, // dummy8440
4, // dummy8441
4, // dummy8442
36, // dummy8443
0, // dummy8444
0, // dummy8445
0, // dummy8446
4, // dummy8447
1, // dummy8448
0, // dummy8449
0, // dummy8450
102, // dummy8451
244, // dummy8452
254, // dummy8453
255, // dummy8454
80, // dummy8455
0, // dummy8456
0, // dummy8457
0, // dummy8458
0, // dummy8459
65, // dummy8460
14, // dummy8461
8, // dummy8462
133, // dummy8463
2, // dummy8464
66, // dummy8465
13, // dummy8466
5, // dummy8467
69, // dummy8468
134, // dummy8469
3, // dummy8470
131, // dummy8471
4, // dummy8472
2, // dummy8473
69, // dummy8474
195, // dummy8475
65, // dummy8476
198, // dummy8477
65, // dummy8478
197, // dummy8479
12, // dummy8480
4, // dummy8481
4, // dummy8482
36, // dummy8483
0, // dummy8484
0, // dummy8485
0, // dummy8486
44, // dummy8487
1, // dummy8488
0, // dummy8489
0, // dummy8490
142, // dummy8491
244, // dummy8492
254, // dummy8493
255, // dummy8494
79, // dummy8495
0, // dummy8496
0, // dummy8497
0, // dummy8498
0, // dummy8499
65, // dummy8500
14, // dummy8501
8, // dummy8502
133, // dummy8503
2, // dummy8504
66, // dummy8505
13, // dummy8506
5, // dummy8507
69, // dummy8508
134, // dummy8509
3, // dummy8510
131, // dummy8511
4, // dummy8512
2, // dummy8513
68, // dummy8514
195, // dummy8515
65, // dummy8516
198, // dummy8517
65, // dummy8518
197, // dummy8519
12, // dummy8520
4, // dummy8521
4, // dummy8522
36, // dummy8523
0, // dummy8524
0, // dummy8525
0, // dummy8526
84, // dummy8527
1, // dummy8528
0, // dummy8529
0, // dummy8530
181, // dummy8531
244, // dummy8532
254, // dummy8533
255, // dummy8534
81, // dummy8535
0, // dummy8536
0, // dummy8537
0, // dummy8538
0, // dummy8539
65, // dummy8540
14, // dummy8541
8, // dummy8542
133, // dummy8543
2, // dummy8544
66, // dummy8545
13, // dummy8546
5, // dummy8547
69, // dummy8548
134, // dummy8549
3, // dummy8550
131, // dummy8551
4, // dummy8552
2, // dummy8553
70, // dummy8554
195, // dummy8555
65, // dummy8556
198, // dummy8557
65, // dummy8558
197, // dummy8559
12, // dummy8560
4, // dummy8561
4, // dummy8562
28, // dummy8563
0, // dummy8564
0, // dummy8565
0, // dummy8566
124, // dummy8567
1, // dummy8568
0, // dummy8569
0, // dummy8570
222, // dummy8571
244, // dummy8572
254, // dummy8573
255, // dummy8574
0, // dummy8575
3, // dummy8576
0, // dummy8577
0, // dummy8578
0, // dummy8579
65, // dummy8580
14, // dummy8581
8, // dummy8582
133, // dummy8583
2, // dummy8584
66, // dummy8585
13, // dummy8586
5, // dummy8587
3, // dummy8588
252, // dummy8589
2, // dummy8590
197, // dummy8591
12, // dummy8592
4, // dummy8593
4, // dummy8594
36, // dummy8595
0, // dummy8596
0, // dummy8597
0, // dummy8598
156, // dummy8599
1, // dummy8600
0, // dummy8601
0, // dummy8602
190, // dummy8603
247, // dummy8604
254, // dummy8605
255, // dummy8606
79, // dummy8607
0, // dummy8608
0, // dummy8609
0, // dummy8610
0, // dummy8611
65, // dummy8612
14, // dummy8613
8, // dummy8614
133, // dummy8615
2, // dummy8616
66, // dummy8617
13, // dummy8618
5, // dummy8619
69, // dummy8620
134, // dummy8621
3, // dummy8622
131, // dummy8623
4, // dummy8624
2, // dummy8625
68, // dummy8626
195, // dummy8627
65, // dummy8628
198, // dummy8629
65, // dummy8630
197, // dummy8631
12, // dummy8632
4, // dummy8633
4, // dummy8634
36, // dummy8635
0, // dummy8636
0, // dummy8637
0, // dummy8638
196, // dummy8639
1, // dummy8640
0, // dummy8641
0, // dummy8642
229, // dummy8643
247, // dummy8644
254, // dummy8645
255, // dummy8646
80, // dummy8647
0, // dummy8648
0, // dummy8649
0, // dummy8650
0, // dummy8651
65, // dummy8652
14, // dummy8653
8, // dummy8654
133, // dummy8655
2, // dummy8656
66, // dummy8657
13, // dummy8658
5, // dummy8659
69, // dummy8660
134, // dummy8661
3, // dummy8662
131, // dummy8663
4, // dummy8664
2, // dummy8665
69, // dummy8666
195, // dummy8667
65, // dummy8668
198, // dummy8669
65, // dummy8670
197, // dummy8671
12, // dummy8672
4, // dummy8673
4, // dummy8674
36, // dummy8675
0, // dummy8676
0, // dummy8677
0, // dummy8678
236, // dummy8679
1, // dummy8680
0, // dummy8681
0, // dummy8682
13, // dummy8683
248, // dummy8684
254, // dummy8685
255, // dummy8686
79, // dummy8687
0, // dummy8688
0, // dummy8689
0, // dummy8690
0, // dummy8691
65, // dummy8692
14, // dummy8693
8, // dummy8694
133, // dummy8695
2, // dummy8696
66, // dummy8697
13, // dummy8698
5, // dummy8699
69, // dummy8700
134, // dummy8701
3, // dummy8702
131, // dummy8703
4, // dummy8704
2, // dummy8705
68, // dummy8706
195, // dummy8707
65, // dummy8708
198, // dummy8709
65, // dummy8710
197, // dummy8711
12, // dummy8712
4, // dummy8713
4, // dummy8714
36, // dummy8715
0, // dummy8716
0, // dummy8717
0, // dummy8718
20, // dummy8719
2, // dummy8720
0, // dummy8721
0, // dummy8722
52, // dummy8723
248, // dummy8724
254, // dummy8725
255, // dummy8726
81, // dummy8727
0, // dummy8728
0, // dummy8729
0, // dummy8730
0, // dummy8731
65, // dummy8732
14, // dummy8733
8, // dummy8734
133, // dummy8735
2, // dummy8736
66, // dummy8737
13, // dummy8738
5, // dummy8739
69, // dummy8740
134, // dummy8741
3, // dummy8742
131, // dummy8743
4, // dummy8744
2, // dummy8745
70, // dummy8746
195, // dummy8747
65, // dummy8748
198, // dummy8749
65, // dummy8750
197, // dummy8751
12, // dummy8752
4, // dummy8753
4, // dummy8754
28, // dummy8755
0, // dummy8756
0, // dummy8757
0, // dummy8758
60, // dummy8759
2, // dummy8760
0, // dummy8761
0, // dummy8762
93, // dummy8763
248, // dummy8764
254, // dummy8765
255, // dummy8766
0, // dummy8767
3, // dummy8768
0, // dummy8769
0, // dummy8770
0, // dummy8771
65, // dummy8772
14, // dummy8773
8, // dummy8774
133, // dummy8775
2, // dummy8776
66, // dummy8777
13, // dummy8778
5, // dummy8779
3, // dummy8780
252, // dummy8781
2, // dummy8782
197, // dummy8783
12, // dummy8784
4, // dummy8785
4, // dummy8786
36, // dummy8787
0, // dummy8788
0, // dummy8789
0, // dummy8790
92, // dummy8791
2, // dummy8792
0, // dummy8793
0, // dummy8794
61, // dummy8795
251, // dummy8796
254, // dummy8797
255, // dummy8798
79, // dummy8799
0, // dummy8800
0, // dummy8801
0, // dummy8802
0, // dummy8803
65, // dummy8804
14, // dummy8805
8, // dummy8806
133, // dummy8807
2, // dummy8808
66, // dummy8809
13, // dummy8810
5, // dummy8811
69, // dummy8812
134, // dummy8813
3, // dummy8814
131, // dummy8815
4, // dummy8816
2, // dummy8817
68, // dummy8818
195, // dummy8819
65, // dummy8820
198, // dummy8821
65, // dummy8822
197, // dummy8823
12, // dummy8824
4, // dummy8825
4, // dummy8826
36, // dummy8827
0, // dummy8828
0, // dummy8829
0, // dummy8830
132, // dummy8831
2, // dummy8832
0, // dummy8833
0, // dummy8834
100, // dummy8835
251, // dummy8836
254, // dummy8837
255, // dummy8838
80, // dummy8839
0, // dummy8840
0, // dummy8841
0, // dummy8842
0, // dummy8843
65, // dummy8844
14, // dummy8845
8, // dummy8846
133, // dummy8847
2, // dummy8848
66, // dummy8849
13, // dummy8850
5, // dummy8851
69, // dummy8852
134, // dummy8853
3, // dummy8854
131, // dummy8855
4, // dummy8856
2, // dummy8857
69, // dummy8858
195, // dummy8859
65, // dummy8860
198, // dummy8861
65, // dummy8862
197, // dummy8863
12, // dummy8864
4, // dummy8865
4, // dummy8866
36, // dummy8867
0, // dummy8868
0, // dummy8869
0, // dummy8870
172, // dummy8871
2, // dummy8872
0, // dummy8873
0, // dummy8874
140, // dummy8875
251, // dummy8876
254, // dummy8877
255, // dummy8878
79, // dummy8879
0, // dummy8880
0, // dummy8881
0, // dummy8882
0, // dummy8883
65, // dummy8884
14, // dummy8885
8, // dummy8886
133, // dummy8887
2, // dummy8888
66, // dummy8889
13, // dummy8890
5, // dummy8891
69, // dummy8892
134, // dummy8893
3, // dummy8894
131, // dummy8895
4, // dummy8896
2, // dummy8897
68, // dummy8898
195, // dummy8899
65, // dummy8900
198, // dummy8901
65, // dummy8902
197, // dummy8903
12, // dummy8904
4, // dummy8905
4, // dummy8906
36, // dummy8907
0, // dummy8908
0, // dummy8909
0, // dummy8910
212, // dummy8911
2, // dummy8912
0, // dummy8913
0, // dummy8914
179, // dummy8915
251, // dummy8916
254, // dummy8917
255, // dummy8918
81, // dummy8919
0, // dummy8920
0, // dummy8921
0, // dummy8922
0, // dummy8923
65, // dummy8924
14, // dummy8925
8, // dummy8926
133, // dummy8927
2, // dummy8928
66, // dummy8929
13, // dummy8930
5, // dummy8931
69, // dummy8932
134, // dummy8933
3, // dummy8934
131, // dummy8935
4, // dummy8936
2, // dummy8937
70, // dummy8938
195, // dummy8939
65, // dummy8940
198, // dummy8941
65, // dummy8942
197, // dummy8943
12, // dummy8944
4, // dummy8945
4, // dummy8946
28, // dummy8947
0, // dummy8948
0, // dummy8949
0, // dummy8950
252, // dummy8951
2, // dummy8952
0, // dummy8953
0, // dummy8954
220, // dummy8955
251, // dummy8956
254, // dummy8957
255, // dummy8958
0, // dummy8959
3, // dummy8960
0, // dummy8961
0, // dummy8962
0, // dummy8963
65, // dummy8964
14, // dummy8965
8, // dummy8966
133, // dummy8967
2, // dummy8968
66, // dummy8969
13, // dummy8970
5, // dummy8971
3, // dummy8972
252, // dummy8973
2, // dummy8974
197, // dummy8975
12, // dummy8976
4, // dummy8977
4, // dummy8978
36, // dummy8979
0, // dummy8980
0, // dummy8981
0, // dummy8982
28, // dummy8983
3, // dummy8984
0, // dummy8985
0, // dummy8986
188, // dummy8987
254, // dummy8988
254, // dummy8989
255, // dummy8990
79, // dummy8991
0, // dummy8992
0, // dummy8993
0, // dummy8994
0, // dummy8995
65, // dummy8996
14, // dummy8997
8, // dummy8998
133, // dummy8999
2, // dummy9000
66, // dummy9001
13, // dummy9002
5, // dummy9003
69, // dummy9004
134, // dummy9005
3, // dummy9006
131, // dummy9007
4, // dummy9008
2, // dummy9009
68, // dummy9010
195, // dummy9011
65, // dummy9012
198, // dummy9013
65, // dummy9014
197, // dummy9015
12, // dummy9016
4, // dummy9017
4, // dummy9018
36, // dummy9019
0, // dummy9020
0, // dummy9021
0, // dummy9022
68, // dummy9023
3, // dummy9024
0, // dummy9025
0, // dummy9026
227, // dummy9027
254, // dummy9028
254, // dummy9029
255, // dummy9030
80, // dummy9031
0, // dummy9032
0, // dummy9033
0, // dummy9034
0, // dummy9035
65, // dummy9036
14, // dummy9037
8, // dummy9038
133, // dummy9039
2, // dummy9040
66, // dummy9041
13, // dummy9042
5, // dummy9043
69, // dummy9044
134, // dummy9045
3, // dummy9046
131, // dummy9047
4, // dummy9048
2, // dummy9049
69, // dummy9050
195, // dummy9051
65, // dummy9052
198, // dummy9053
65, // dummy9054
197, // dummy9055
12, // dummy9056
4, // dummy9057
4, // dummy9058
36, // dummy9059
0, // dummy9060
0, // dummy9061
0, // dummy9062
108, // dummy9063
3, // dummy9064
0, // dummy9065
0, // dummy9066
11, // dummy9067
255, // dummy9068
254, // dummy9069
255, // dummy9070
79, // dummy9071
0, // dummy9072
0, // dummy9073
0, // dummy9074
0, // dummy9075
65, // dummy9076
14, // dummy9077
8, // dummy9078
133, // dummy9079
2, // dummy9080
66, // dummy9081
13, // dummy9082
5, // dummy9083
69, // dummy9084
134, // dummy9085
3, // dummy9086
131, // dummy9087
4, // dummy9088
2, // dummy9089
68, // dummy9090
195, // dummy9091
65, // dummy9092
198, // dummy9093
65, // dummy9094
197, // dummy9095
12, // dummy9096
4, // dummy9097
4, // dummy9098
36, // dummy9099
0, // dummy9100
0, // dummy9101
0, // dummy9102
148, // dummy9103
3, // dummy9104
0, // dummy9105
0, // dummy9106
50, // dummy9107
255, // dummy9108
254, // dummy9109
255, // dummy9110
81, // dummy9111
0, // dummy9112
0, // dummy9113
0, // dummy9114
0, // dummy9115
65, // dummy9116
14, // dummy9117
8, // dummy9118
133, // dummy9119
2, // dummy9120
66, // dummy9121
13, // dummy9122
5, // dummy9123
69, // dummy9124
134, // dummy9125
3, // dummy9126
131, // dummy9127
4, // dummy9128
2, // dummy9129
70, // dummy9130
195, // dummy9131
65, // dummy9132
198, // dummy9133
65, // dummy9134
197, // dummy9135
12, // dummy9136
4, // dummy9137
4, // dummy9138
28, // dummy9139
0, // dummy9140
0, // dummy9141
0, // dummy9142
188, // dummy9143
3, // dummy9144
0, // dummy9145
0, // dummy9146
91, // dummy9147
255, // dummy9148
254, // dummy9149
255, // dummy9150
0, // dummy9151
3, // dummy9152
0, // dummy9153
0, // dummy9154
0, // dummy9155
65, // dummy9156
14, // dummy9157
8, // dummy9158
133, // dummy9159
2, // dummy9160
66, // dummy9161
13, // dummy9162
5, // dummy9163
3, // dummy9164
252, // dummy9165
2, // dummy9166
197, // dummy9167
12, // dummy9168
4, // dummy9169
4, // dummy9170
36, // dummy9171
0, // dummy9172
0, // dummy9173
0, // dummy9174
220, // dummy9175
3, // dummy9176
0, // dummy9177
0, // dummy9178
59, // dummy9179
2, // dummy9180
255, // dummy9181
255, // dummy9182
79, // dummy9183
0, // dummy9184
0, // dummy9185
0, // dummy9186
0, // dummy9187
65, // dummy9188
14, // dummy9189
8, // dummy9190
133, // dummy9191
2, // dummy9192
66, // dummy9193
13, // dummy9194
5, // dummy9195
69, // dummy9196
134, // dummy9197
3, // dummy9198
131, // dummy9199
4, // dummy9200
2, // dummy9201
68, // dummy9202
195, // dummy9203
65, // dummy9204
198, // dummy9205
65, // dummy9206
197, // dummy9207
12, // dummy9208
4, // dummy9209
4, // dummy9210
36, // dummy9211
0, // dummy9212
0, // dummy9213
0, // dummy9214
4, // dummy9215
4, // dummy9216
0, // dummy9217
0, // dummy9218
98, // dummy9219
2, // dummy9220
255, // dummy9221
255, // dummy9222
80, // dummy9223
0, // dummy9224
0, // dummy9225
0, // dummy9226
0, // dummy9227
65, // dummy9228
14, // dummy9229
8, // dummy9230
133, // dummy9231
2, // dummy9232
66, // dummy9233
13, // dummy9234
5, // dummy9235
69, // dummy9236
134, // dummy9237
3, // dummy9238
131, // dummy9239
4, // dummy9240
2, // dummy9241
69, // dummy9242
195, // dummy9243
65, // dummy9244
198, // dummy9245
65, // dummy9246
197, // dummy9247
12, // dummy9248
4, // dummy9249
4, // dummy9250
36, // dummy9251
0, // dummy9252
0, // dummy9253
0, // dummy9254
44, // dummy9255
4, // dummy9256
0, // dummy9257
0, // dummy9258
138, // dummy9259
2, // dummy9260
255, // dummy9261
255, // dummy9262
79, // dummy9263
0, // dummy9264
0, // dummy9265
0, // dummy9266
0, // dummy9267
65, // dummy9268
14, // dummy9269
8, // dummy9270
133, // dummy9271
2, // dummy9272
66, // dummy9273
13, // dummy9274
5, // dummy9275
69, // dummy9276
134, // dummy9277
3, // dummy9278
131, // dummy9279
4, // dummy9280
2, // dummy9281
68, // dummy9282
195, // dummy9283
65, // dummy9284
198, // dummy9285
65, // dummy9286
197, // dummy9287
12, // dummy9288
4, // dummy9289
4, // dummy9290
36, // dummy9291
0, // dummy9292
0, // dummy9293
0, // dummy9294
84, // dummy9295
4, // dummy9296
0, // dummy9297
0, // dummy9298
177, // dummy9299
2, // dummy9300
255, // dummy9301
255, // dummy9302
81, // dummy9303
0, // dummy9304
0, // dummy9305
0, // dummy9306
0, // dummy9307
65, // dummy9308
14, // dummy9309
8, // dummy9310
133, // dummy9311
2, // dummy9312
66, // dummy9313
13, // dummy9314
5, // dummy9315
69, // dummy9316
134, // dummy9317
3, // dummy9318
131, // dummy9319
4, // dummy9320
2, // dummy9321
70, // dummy9322
195, // dummy9323
65, // dummy9324
198, // dummy9325
65, // dummy9326
197, // dummy9327
12, // dummy9328
4, // dummy9329
4, // dummy9330
28, // dummy9331
0, // dummy9332
0, // dummy9333
0, // dummy9334
124, // dummy9335
4, // dummy9336
0, // dummy9337
0, // dummy9338
218, // dummy9339
2, // dummy9340
255, // dummy9341
255, // dummy9342
0, // dummy9343
3, // dummy9344
0, // dummy9345
0, // dummy9346
0, // dummy9347
65, // dummy9348
14, // dummy9349
8, // dummy9350
133, // dummy9351
2, // dummy9352
66, // dummy9353
13, // dummy9354
5, // dummy9355
3, // dummy9356
252, // dummy9357
2, // dummy9358
197, // dummy9359
12, // dummy9360
4, // dummy9361
4, // dummy9362
36, // dummy9363
0, // dummy9364
0, // dummy9365
0, // dummy9366
156, // dummy9367
4, // dummy9368
0, // dummy9369
0, // dummy9370
186, // dummy9371
5, // dummy9372
255, // dummy9373
255, // dummy9374
79, // dummy9375
0, // dummy9376
0, // dummy9377
0, // dummy9378
0, // dummy9379
65, // dummy9380
14, // dummy9381
8, // dummy9382
133, // dummy9383
2, // dummy9384
66, // dummy9385
13, // dummy9386
5, // dummy9387
69, // dummy9388
134, // dummy9389
3, // dummy9390
131, // dummy9391
4, // dummy9392
2, // dummy9393
68, // dummy9394
195, // dummy9395
65, // dummy9396
198, // dummy9397
65, // dummy9398
197, // dummy9399
12, // dummy9400
4, // dummy9401
4, // dummy9402
36, // dummy9403
0, // dummy9404
0, // dummy9405
0, // dummy9406
196, // dummy9407
4, // dummy9408
0, // dummy9409
0, // dummy9410
225, // dummy9411
5, // dummy9412
255, // dummy9413
255, // dummy9414
80, // dummy9415
0, // dummy9416
0, // dummy9417
0, // dummy9418
0, // dummy9419
65, // dummy9420
14, // dummy9421
8, // dummy9422
133, // dummy9423
2, // dummy9424
66, // dummy9425
13, // dummy9426
5, // dummy9427
69, // dummy9428
134, // dummy9429
3, // dummy9430
131, // dummy9431
4, // dummy9432
2, // dummy9433
69, // dummy9434
195, // dummy9435
65, // dummy9436
198, // dummy9437
65, // dummy9438
197, // dummy9439
12, // dummy9440
4, // dummy9441
4, // dummy9442
36, // dummy9443
0, // dummy9444
0, // dummy9445
0, // dummy9446
236, // dummy9447
4, // dummy9448
0, // dummy9449
0, // dummy9450
9, // dummy9451
6, // dummy9452
255, // dummy9453
255, // dummy9454
79, // dummy9455
0, // dummy9456
0, // dummy9457
0, // dummy9458
0, // dummy9459
65, // dummy9460
14, // dummy9461
8, // dummy9462
133, // dummy9463
2, // dummy9464
66, // dummy9465
13, // dummy9466
5, // dummy9467
69, // dummy9468
134, // dummy9469
3, // dummy9470
131, // dummy9471
4, // dummy9472
2, // dummy9473
68, // dummy9474
195, // dummy9475
65, // dummy9476
198, // dummy9477
65, // dummy9478
197, // dummy9479
12, // dummy9480
4, // dummy9481
4, // dummy9482
36, // dummy9483
0, // dummy9484
0, // dummy9485
0, // dummy9486
20, // dummy9487
5, // dummy9488
0, // dummy9489
0, // dummy9490
48, // dummy9491
6, // dummy9492
255, // dummy9493
255, // dummy9494
141, // dummy9495
0, // dummy9496
0, // dummy9497
0, // dummy9498
0, // dummy9499
65, // dummy9500
14, // dummy9501
8, // dummy9502
133, // dummy9503
2, // dummy9504
66, // dummy9505
13, // dummy9506
5, // dummy9507
69, // dummy9508
134, // dummy9509
3, // dummy9510
131, // dummy9511
4, // dummy9512
2, // dummy9513
130, // dummy9514
195, // dummy9515
65, // dummy9516
198, // dummy9517
65, // dummy9518
197, // dummy9519
12, // dummy9520
4, // dummy9521
4, // dummy9522
28, // dummy9523
0, // dummy9524
0, // dummy9525
0, // dummy9526
60, // dummy9527
5, // dummy9528
0, // dummy9529
0, // dummy9530
149, // dummy9531
6, // dummy9532
255, // dummy9533
255, // dummy9534
0, // dummy9535
3, // dummy9536
0, // dummy9537
0, // dummy9538
0, // dummy9539
65, // dummy9540
14, // dummy9541
8, // dummy9542
133, // dummy9543
2, // dummy9544
66, // dummy9545
13, // dummy9546
5, // dummy9547
3, // dummy9548
252, // dummy9549
2, // dummy9550
197, // dummy9551
12, // dummy9552
4, // dummy9553
4, // dummy9554
36, // dummy9555
0, // dummy9556
0, // dummy9557
0, // dummy9558
92, // dummy9559
5, // dummy9560
0, // dummy9561
0, // dummy9562
117, // dummy9563
9, // dummy9564
255, // dummy9565
255, // dummy9566
79, // dummy9567
0, // dummy9568
0, // dummy9569
0, // dummy9570
0, // dummy9571
65, // dummy9572
14, // dummy9573
8, // dummy9574
133, // dummy9575
2, // dummy9576
66, // dummy9577
13, // dummy9578
5, // dummy9579
69, // dummy9580
134, // dummy9581
3, // dummy9582
131, // dummy9583
4, // dummy9584
2, // dummy9585
68, // dummy9586
195, // dummy9587
65, // dummy9588
198, // dummy9589
65, // dummy9590
197, // dummy9591
12, // dummy9592
4, // dummy9593
4, // dummy9594
36, // dummy9595
0, // dummy9596
0, // dummy9597
0, // dummy9598
132, // dummy9599
5, // dummy9600
0, // dummy9601
0, // dummy9602
156, // dummy9603
9, // dummy9604
255, // dummy9605
255, // dummy9606
80, // dummy9607
0, // dummy9608
0, // dummy9609
0, // dummy9610
0, // dummy9611
65, // dummy9612
14, // dummy9613
8, // dummy9614
133, // dummy9615
2, // dummy9616
66, // dummy9617
13, // dummy9618
5, // dummy9619
69, // dummy9620
134, // dummy9621
3, // dummy9622
131, // dummy9623
4, // dummy9624
2, // dummy9625
69, // dummy9626
195, // dummy9627
65, // dummy9628
198, // dummy9629
65, // dummy9630
197, // dummy9631
12, // dummy9632
4, // dummy9633
4, // dummy9634
36, // dummy9635
0, // dummy9636
0, // dummy9637
0, // dummy9638
172, // dummy9639
5, // dummy9640
0, // dummy9641
0, // dummy9642
196, // dummy9643
9, // dummy9644
255, // dummy9645
255, // dummy9646
79, // dummy9647
0, // dummy9648
0, // dummy9649
0, // dummy9650
0, // dummy9651
65, // dummy9652
14, // dummy9653
8, // dummy9654
133, // dummy9655
2, // dummy9656
66, // dummy9657
13, // dummy9658
5, // dummy9659
69, // dummy9660
134, // dummy9661
3, // dummy9662
131, // dummy9663
4, // dummy9664
2, // dummy9665
68, // dummy9666
195, // dummy9667
65, // dummy9668
198, // dummy9669
65, // dummy9670
197, // dummy9671
12, // dummy9672
4, // dummy9673
4, // dummy9674
36, // dummy9675
0, // dummy9676
0, // dummy9677
0, // dummy9678
212, // dummy9679
5, // dummy9680
0, // dummy9681
0, // dummy9682
235, // dummy9683
9, // dummy9684
255, // dummy9685
255, // dummy9686
141, // dummy9687
0, // dummy9688
0, // dummy9689
0, // dummy9690
0, // dummy9691
65, // dummy9692
14, // dummy9693
8, // dummy9694
133, // dummy9695
2, // dummy9696
66, // dummy9697
13, // dummy9698
5, // dummy9699
69, // dummy9700
134, // dummy9701
3, // dummy9702
131, // dummy9703
4, // dummy9704
2, // dummy9705
130, // dummy9706
195, // dummy9707
65, // dummy9708
198, // dummy9709
65, // dummy9710
197, // dummy9711
12, // dummy9712
4, // dummy9713
4, // dummy9714
28, // dummy9715
0, // dummy9716
0, // dummy9717
0, // dummy9718
252, // dummy9719
5, // dummy9720
0, // dummy9721
0, // dummy9722
80, // dummy9723
10, // dummy9724
255, // dummy9725
255, // dummy9726
0, // dummy9727
3, // dummy9728
0, // dummy9729
0, // dummy9730
0, // dummy9731
65, // dummy9732
14, // dummy9733
8, // dummy9734
133, // dummy9735
2, // dummy9736
66, // dummy9737
13, // dummy9738
5, // dummy9739
3, // dummy9740
252, // dummy9741
2, // dummy9742
197, // dummy9743
12, // dummy9744
4, // dummy9745
4, // dummy9746
32, // dummy9747
0, // dummy9748
0, // dummy9749
0, // dummy9750
28, // dummy9751
6, // dummy9752
0, // dummy9753
0, // dummy9754
48, // dummy9755
13, // dummy9756
255, // dummy9757
255, // dummy9758
69, // dummy9759
0, // dummy9760
0, // dummy9761
0, // dummy9762
0, // dummy9763
65, // dummy9764
14, // dummy9765
8, // dummy9766
133, // dummy9767
2, // dummy9768
66, // dummy9769
13, // dummy9770
5, // dummy9771
68, // dummy9772
131, // dummy9773
3, // dummy9774
124, // dummy9775
195, // dummy9776
65, // dummy9777
197, // dummy9778
12, // dummy9779
4, // dummy9780
4, // dummy9781
0, // dummy9782
32, // dummy9783
0, // dummy9784
0, // dummy9785
0, // dummy9786
64, // dummy9787
6, // dummy9788
0, // dummy9789
0, // dummy9790
81, // dummy9791
13, // dummy9792
255, // dummy9793
255, // dummy9794
70, // dummy9795
0, // dummy9796
0, // dummy9797
0, // dummy9798
0, // dummy9799
65, // dummy9800
14, // dummy9801
8, // dummy9802
133, // dummy9803
2, // dummy9804
66, // dummy9805
13, // dummy9806
5, // dummy9807
68, // dummy9808
131, // dummy9809
3, // dummy9810
125, // dummy9811
195, // dummy9812
65, // dummy9813
197, // dummy9814
12, // dummy9815
4, // dummy9816
4, // dummy9817
0, // dummy9818
32, // dummy9819
0, // dummy9820
0, // dummy9821
0, // dummy9822
100, // dummy9823
6, // dummy9824
0, // dummy9825
0, // dummy9826
115, // dummy9827
13, // dummy9828
255, // dummy9829
255, // dummy9830
70, // dummy9831
0, // dummy9832
0, // dummy9833
0, // dummy9834
0, // dummy9835
65, // dummy9836
14, // dummy9837
8, // dummy9838
133, // dummy9839
2, // dummy9840
66, // dummy9841
13, // dummy9842
5, // dummy9843
68, // dummy9844
131, // dummy9845
3, // dummy9846
125, // dummy9847
195, // dummy9848
65, // dummy9849
197, // dummy9850
12, // dummy9851
4, // dummy9852
4, // dummy9853
0, // dummy9854
36, // dummy9855
0, // dummy9856
0, // dummy9857
0, // dummy9858
136, // dummy9859
6, // dummy9860
0, // dummy9861
0, // dummy9862
149, // dummy9863
13, // dummy9864
255, // dummy9865
255, // dummy9866
141, // dummy9867
0, // dummy9868
0, // dummy9869
0, // dummy9870
0, // dummy9871
65, // dummy9872
14, // dummy9873
8, // dummy9874
133, // dummy9875
2, // dummy9876
66, // dummy9877
13, // dummy9878
5, // dummy9879
69, // dummy9880
134, // dummy9881
3, // dummy9882
131, // dummy9883
4, // dummy9884
2, // dummy9885
130, // dummy9886
195, // dummy9887
65, // dummy9888
198, // dummy9889
65, // dummy9890
197, // dummy9891
12, // dummy9892
4, // dummy9893
4, // dummy9894
28, // dummy9895
0, // dummy9896
0, // dummy9897
0, // dummy9898
176, // dummy9899
6, // dummy9900
0, // dummy9901
0, // dummy9902
250, // dummy9903
13, // dummy9904
255, // dummy9905
255, // dummy9906
0, // dummy9907
3, // dummy9908
0, // dummy9909
0, // dummy9910
0, // dummy9911
65, // dummy9912
14, // dummy9913
8, // dummy9914
133, // dummy9915
2, // dummy9916
66, // dummy9917
13, // dummy9918
5, // dummy9919
3, // dummy9920
252, // dummy9921
2, // dummy9922
197, // dummy9923
12, // dummy9924
4, // dummy9925
4, // dummy9926
32, // dummy9927
0, // dummy9928
0, // dummy9929
0, // dummy9930
208, // dummy9931
6, // dummy9932
0, // dummy9933
0, // dummy9934
218, // dummy9935
16, // dummy9936
255, // dummy9937
255, // dummy9938
69, // dummy9939
0, // dummy9940
0, // dummy9941
0, // dummy9942
0, // dummy9943
65, // dummy9944
14, // dummy9945
8, // dummy9946
133, // dummy9947
2, // dummy9948
66, // dummy9949
13, // dummy9950
5, // dummy9951
68, // dummy9952
131, // dummy9953
3, // dummy9954
124, // dummy9955
195, // dummy9956
65, // dummy9957
197, // dummy9958
12, // dummy9959
4, // dummy9960
4, // dummy9961
0, // dummy9962
32, // dummy9963
0, // dummy9964
0, // dummy9965
0, // dummy9966
244, // dummy9967
6, // dummy9968
0, // dummy9969
0, // dummy9970
251, // dummy9971
16, // dummy9972
255, // dummy9973
255, // dummy9974
70, // dummy9975
0, // dummy9976
0, // dummy9977
0, // dummy9978
0, // dummy9979
65, // dummy9980
14, // dummy9981
8, // dummy9982
133, // dummy9983
2, // dummy9984
66, // dummy9985
13, // dummy9986
5, // dummy9987
68, // dummy9988
131, // dummy9989
3, // dummy9990
125, // dummy9991
195, // dummy9992
65, // dummy9993
197, // dummy9994
12, // dummy9995
4, // dummy9996
4, // dummy9997
0, // dummy9998
32, // dummy9999
0, // dummy10000
0, // dummy10001
0, // dummy10002
24, // dummy10003
7, // dummy10004
0, // dummy10005
0, // dummy10006
29, // dummy10007
17, // dummy10008
255, // dummy10009
255, // dummy10010
70, // dummy10011
0, // dummy10012
0, // dummy10013
0, // dummy10014
0, // dummy10015
65, // dummy10016
14, // dummy10017
8, // dummy10018
133, // dummy10019
2, // dummy10020
66, // dummy10021
13, // dummy10022
5, // dummy10023
68, // dummy10024
131, // dummy10025
3, // dummy10026
125, // dummy10027
195, // dummy10028
65, // dummy10029
197, // dummy10030
12, // dummy10031
4, // dummy10032
4, // dummy10033
0, // dummy10034
36, // dummy10035
0, // dummy10036
0, // dummy10037
0, // dummy10038
60, // dummy10039
7, // dummy10040
0, // dummy10041
0, // dummy10042
63, // dummy10043
17, // dummy10044
255, // dummy10045
255, // dummy10046
141, // dummy10047
0, // dummy10048
0, // dummy10049
0, // dummy10050
0, // dummy10051
65, // dummy10052
14, // dummy10053
8, // dummy10054
133, // dummy10055
2, // dummy10056
66, // dummy10057
13, // dummy10058
5, // dummy10059
69, // dummy10060
134, // dummy10061
3, // dummy10062
131, // dummy10063
4, // dummy10064
2, // dummy10065
130, // dummy10066
195, // dummy10067
65, // dummy10068
198, // dummy10069
65, // dummy10070
197, // dummy10071
12, // dummy10072
4, // dummy10073
4, // dummy10074
28, // dummy10075
0, // dummy10076
0, // dummy10077
0, // dummy10078
100, // dummy10079
7, // dummy10080
0, // dummy10081
0, // dummy10082
164, // dummy10083
17, // dummy10084
255, // dummy10085
255, // dummy10086
0, // dummy10087
3, // dummy10088
0, // dummy10089
0, // dummy10090
0, // dummy10091
65, // dummy10092
14, // dummy10093
8, // dummy10094
133, // dummy10095
2, // dummy10096
66, // dummy10097
13, // dummy10098
5, // dummy10099
3, // dummy10100
252, // dummy10101
2, // dummy10102
197, // dummy10103
12, // dummy10104
4, // dummy10105
4, // dummy10106
32, // dummy10107
0, // dummy10108
0, // dummy10109
0, // dummy10110
132, // dummy10111
7, // dummy10112
0, // dummy10113
0, // dummy10114
132, // dummy10115
20, // dummy10116
255, // dummy10117
255, // dummy10118
70, // dummy10119
0, // dummy10120
0, // dummy10121
0, // dummy10122
0, // dummy10123
65, // dummy10124
14, // dummy10125
8, // dummy10126
133, // dummy10127
2, // dummy10128
66, // dummy10129
13, // dummy10130
5, // dummy10131
68, // dummy10132
131, // dummy10133
3, // dummy10134
125, // dummy10135
195, // dummy10136
65, // dummy10137
197, // dummy10138
12, // dummy10139
4, // dummy10140
4, // dummy10141
0, // dummy10142
32, // dummy10143
0, // dummy10144
0, // dummy10145
0, // dummy10146
168, // dummy10147
7, // dummy10148
0, // dummy10149
0, // dummy10150
166, // dummy10151
20, // dummy10152
255, // dummy10153
255, // dummy10154
71, // dummy10155
0, // dummy10156
0, // dummy10157
0, // dummy10158
0, // dummy10159
65, // dummy10160
14, // dummy10161
8, // dummy10162
133, // dummy10163
2, // dummy10164
66, // dummy10165
13, // dummy10166
5, // dummy10167
68, // dummy10168
131, // dummy10169
3, // dummy10170
126, // dummy10171
195, // dummy10172
65, // dummy10173
197, // dummy10174
12, // dummy10175
4, // dummy10176
4, // dummy10177
0, // dummy10178
32, // dummy10179
0, // dummy10180
0, // dummy10181
0, // dummy10182
204, // dummy10183
7, // dummy10184
0, // dummy10185
0, // dummy10186
201, // dummy10187
20, // dummy10188
255, // dummy10189
255, // dummy10190
70, // dummy10191
0, // dummy10192
0, // dummy10193
0, // dummy10194
0, // dummy10195
65, // dummy10196
14, // dummy10197
8, // dummy10198
133, // dummy10199
2, // dummy10200
66, // dummy10201
13, // dummy10202
5, // dummy10203
68, // dummy10204
131, // dummy10205
3, // dummy10206
125, // dummy10207
195, // dummy10208
65, // dummy10209
197, // dummy10210
12, // dummy10211
4, // dummy10212
4, // dummy10213
0, // dummy10214
36, // dummy10215
0, // dummy10216
0, // dummy10217
0, // dummy10218
240, // dummy10219
7, // dummy10220
0, // dummy10221
0, // dummy10222
235, // dummy10223
20, // dummy10224
255, // dummy10225
255, // dummy10226
141, // dummy10227
0, // dummy10228
0, // dummy10229
0, // dummy10230
0, // dummy10231
65, // dummy10232
14, // dummy10233
8, // dummy10234
133, // dummy10235
2, // dummy10236
66, // dummy10237
13, // dummy10238
5, // dummy10239
69, // dummy10240
134, // dummy10241
3, // dummy10242
131, // dummy10243
4, // dummy10244
2, // dummy10245
130, // dummy10246
195, // dummy10247
65, // dummy10248
198, // dummy10249
65, // dummy10250
197, // dummy10251
12, // dummy10252
4, // dummy10253
4, // dummy10254
28, // dummy10255
0, // dummy10256
0, // dummy10257
0, // dummy10258
24, // dummy10259
8, // dummy10260
0, // dummy10261
0, // dummy10262
80, // dummy10263
21, // dummy10264
255, // dummy10265
255, // dummy10266
0, // dummy10267
3, // dummy10268
0, // dummy10269
0, // dummy10270
0, // dummy10271
65, // dummy10272
14, // dummy10273
8, // dummy10274
133, // dummy10275
2, // dummy10276
66, // dummy10277
13, // dummy10278
5, // dummy10279
3, // dummy10280
252, // dummy10281
2, // dummy10282
197, // dummy10283
12, // dummy10284
4, // dummy10285
4, // dummy10286
32, // dummy10287
0, // dummy10288
0, // dummy10289
0, // dummy10290
56, // dummy10291
8, // dummy10292
0, // dummy10293
0, // dummy10294
48, // dummy10295
24, // dummy10296
255, // dummy10297
255, // dummy10298
70, // dummy10299
0, // dummy10300
0, // dummy10301
0, // dummy10302
0, // dummy10303
65, // dummy10304
14, // dummy10305
8, // dummy10306
133, // dummy10307
2, // dummy10308
66, // dummy10309
13, // dummy10310
5, // dummy10311
68, // dummy10312
131, // dummy10313
3, // dummy10314
125, // dummy10315
195, // dummy10316
65, // dummy10317
197, // dummy10318
12, // dummy10319
4, // dummy10320
4, // dummy10321
0, // dummy10322
32, // dummy10323
0, // dummy10324
0, // dummy10325
0, // dummy10326
92, // dummy10327
8, // dummy10328
0, // dummy10329
0, // dummy10330
82, // dummy10331
24, // dummy10332
255, // dummy10333
255, // dummy10334
71, // dummy10335
0, // dummy10336
0, // dummy10337
0, // dummy10338
0, // dummy10339
65, // dummy10340
14, // dummy10341
8, // dummy10342
133, // dummy10343
2, // dummy10344
66, // dummy10345
13, // dummy10346
5, // dummy10347
68, // dummy10348
131, // dummy10349
3, // dummy10350
126, // dummy10351
195, // dummy10352
65, // dummy10353
197, // dummy10354
12, // dummy10355
4, // dummy10356
4, // dummy10357
0, // dummy10358
32, // dummy10359
0, // dummy10360
0, // dummy10361
0, // dummy10362
128, // dummy10363
8, // dummy10364
0, // dummy10365
0, // dummy10366
117, // dummy10367
24, // dummy10368
255, // dummy10369
255, // dummy10370
70, // dummy10371
0, // dummy10372
0, // dummy10373
0, // dummy10374
0, // dummy10375
65, // dummy10376
14, // dummy10377
8, // dummy10378
133, // dummy10379
2, // dummy10380
66, // dummy10381
13, // dummy10382
5, // dummy10383
68, // dummy10384
131, // dummy10385
3, // dummy10386
125, // dummy10387
195, // dummy10388
65, // dummy10389
197, // dummy10390
12, // dummy10391
4, // dummy10392
4, // dummy10393
0, // dummy10394
36, // dummy10395
0, // dummy10396
0, // dummy10397
0, // dummy10398
164, // dummy10399
8, // dummy10400
0, // dummy10401
0, // dummy10402
151, // dummy10403
24, // dummy10404
255, // dummy10405
255, // dummy10406
141, // dummy10407
0, // dummy10408
0, // dummy10409
0, // dummy10410
0, // dummy10411
65, // dummy10412
14, // dummy10413
8, // dummy10414
133, // dummy10415
2, // dummy10416
66, // dummy10417
13, // dummy10418
5, // dummy10419
69, // dummy10420
134, // dummy10421
3, // dummy10422
131, // dummy10423
4, // dummy10424
2, // dummy10425
130, // dummy10426
195, // dummy10427
65, // dummy10428
198, // dummy10429
65, // dummy10430
197, // dummy10431
12, // dummy10432
4, // dummy10433
4, // dummy10434
28, // dummy10435
0, // dummy10436
0, // dummy10437
0, // dummy10438
204, // dummy10439
8, // dummy10440
0, // dummy10441
0, // dummy10442
252, // dummy10443
24, // dummy10444
255, // dummy10445
255, // dummy10446
0, // dummy10447
3, // dummy10448
0, // dummy10449
0, // dummy10450
0, // dummy10451
65, // dummy10452
14, // dummy10453
8, // dummy10454
133, // dummy10455
2, // dummy10456
66, // dummy10457
13, // dummy10458
5, // dummy10459
3, // dummy10460
252, // dummy10461
2, // dummy10462
197, // dummy10463
12, // dummy10464
4, // dummy10465
4, // dummy10466
36, // dummy10467
0, // dummy10468
0, // dummy10469
0, // dummy10470
236, // dummy10471
8, // dummy10472
0, // dummy10473
0, // dummy10474
220, // dummy10475
27, // dummy10476
255, // dummy10477
255, // dummy10478
87, // dummy10479
0, // dummy10480
0, // dummy10481
0, // dummy10482
0, // dummy10483
65, // dummy10484
14, // dummy10485
8, // dummy10486
133, // dummy10487
2, // dummy10488
66, // dummy10489
13, // dummy10490
5, // dummy10491
69, // dummy10492
134, // dummy10493
3, // dummy10494
131, // dummy10495
4, // dummy10496
2, // dummy10497
76, // dummy10498
195, // dummy10499
65, // dummy10500
198, // dummy10501
65, // dummy10502
197, // dummy10503
12, // dummy10504
4, // dummy10505
4, // dummy10506
36, // dummy10507
0, // dummy10508
0, // dummy10509
0, // dummy10510
20, // dummy10511
9, // dummy10512
0, // dummy10513
0, // dummy10514
11, // dummy10515
28, // dummy10516
255, // dummy10517
255, // dummy10518
88, // dummy10519
0, // dummy10520
0, // dummy10521
0, // dummy10522
0, // dummy10523
65, // dummy10524
14, // dummy10525
8, // dummy10526
133, // dummy10527
2, // dummy10528
66, // dummy10529
13, // dummy10530
5, // dummy10531
69, // dummy10532
134, // dummy10533
3, // dummy10534
131, // dummy10535
4, // dummy10536
2, // dummy10537
77, // dummy10538
195, // dummy10539
65, // dummy10540
198, // dummy10541
65, // dummy10542
197, // dummy10543
12, // dummy10544
4, // dummy10545
4, // dummy10546
36, // dummy10547
0, // dummy10548
0, // dummy10549
0, // dummy10550
60, // dummy10551
9, // dummy10552
0, // dummy10553
0, // dummy10554
59, // dummy10555
28, // dummy10556
255, // dummy10557
255, // dummy10558
87, // dummy10559
0, // dummy10560
0, // dummy10561
0, // dummy10562
0, // dummy10563
65, // dummy10564
14, // dummy10565
8, // dummy10566
133, // dummy10567
2, // dummy10568
66, // dummy10569
13, // dummy10570
5, // dummy10571
69, // dummy10572
134, // dummy10573
3, // dummy10574
131, // dummy10575
4, // dummy10576
2, // dummy10577
76, // dummy10578
195, // dummy10579
65, // dummy10580
198, // dummy10581
65, // dummy10582
197, // dummy10583
12, // dummy10584
4, // dummy10585
4, // dummy10586
40, // dummy10587
0, // dummy10588
0, // dummy10589
0, // dummy10590
100, // dummy10591
9, // dummy10592
0, // dummy10593
0, // dummy10594
106, // dummy10595
28, // dummy10596
255, // dummy10597
255, // dummy10598
91, // dummy10599
0, // dummy10600
0, // dummy10601
0, // dummy10602
0, // dummy10603
65, // dummy10604
14, // dummy10605
8, // dummy10606
133, // dummy10607
2, // dummy10608
66, // dummy10609
13, // dummy10610
5, // dummy10611
70, // dummy10612
135, // dummy10613
3, // dummy10614
134, // dummy10615
4, // dummy10616
131, // dummy10617
5, // dummy10618
2, // dummy10619
74, // dummy10620
195, // dummy10621
65, // dummy10622
198, // dummy10623
65, // dummy10624
199, // dummy10625
65, // dummy10626
197, // dummy10627
12, // dummy10628
4, // dummy10629
4, // dummy10630
32, // dummy10631
0, // dummy10632
0, // dummy10633
0, // dummy10634
144, // dummy10635
9, // dummy10636
0, // dummy10637
0, // dummy10638
153, // dummy10639
28, // dummy10640
255, // dummy10641
255, // dummy10642
237, // dummy10643
0, // dummy10644
0, // dummy10645
0, // dummy10646
0, // dummy10647
65, // dummy10648
14, // dummy10649
8, // dummy10650
133, // dummy10651
2, // dummy10652
66, // dummy10653
13, // dummy10654
5, // dummy10655
68, // dummy10656
131, // dummy10657
3, // dummy10658
2, // dummy10659
228, // dummy10660
195, // dummy10661
65, // dummy10662
197, // dummy10663
12, // dummy10664
4, // dummy10665
4, // dummy10666
36, // dummy10667
0, // dummy10668
0, // dummy10669
0, // dummy10670
180, // dummy10671
9, // dummy10672
0, // dummy10673
0, // dummy10674
98, // dummy10675
29, // dummy10676
255, // dummy10677
255, // dummy10678
87, // dummy10679
0, // dummy10680
0, // dummy10681
0, // dummy10682
0, // dummy10683
65, // dummy10684
14, // dummy10685
8, // dummy10686
133, // dummy10687
2, // dummy10688
66, // dummy10689
13, // dummy10690
5, // dummy10691
69, // dummy10692
134, // dummy10693
3, // dummy10694
131, // dummy10695
4, // dummy10696
2, // dummy10697
76, // dummy10698
195, // dummy10699
65, // dummy10700
198, // dummy10701
65, // dummy10702
197, // dummy10703
12, // dummy10704
4, // dummy10705
4, // dummy10706
36, // dummy10707
0, // dummy10708
0, // dummy10709
0, // dummy10710
220, // dummy10711
9, // dummy10712
0, // dummy10713
0, // dummy10714
145, // dummy10715
29, // dummy10716
255, // dummy10717
255, // dummy10718
88, // dummy10719
0, // dummy10720
0, // dummy10721
0, // dummy10722
0, // dummy10723
65, // dummy10724
14, // dummy10725
8, // dummy10726
133, // dummy10727
2, // dummy10728
66, // dummy10729
13, // dummy10730
5, // dummy10731
69, // dummy10732
134, // dummy10733
3, // dummy10734
131, // dummy10735
4, // dummy10736
2, // dummy10737
77, // dummy10738
195, // dummy10739
65, // dummy10740
198, // dummy10741
65, // dummy10742
197, // dummy10743
12, // dummy10744
4, // dummy10745
4, // dummy10746
36, // dummy10747
0, // dummy10748
0, // dummy10749
0, // dummy10750
4, // dummy10751
10, // dummy10752
0, // dummy10753
0, // dummy10754
193, // dummy10755
29, // dummy10756
255, // dummy10757
255, // dummy10758
87, // dummy10759
0, // dummy10760
0, // dummy10761
0, // dummy10762
0, // dummy10763
65, // dummy10764
14, // dummy10765
8, // dummy10766
133, // dummy10767
2, // dummy10768
66, // dummy10769
13, // dummy10770
5, // dummy10771
69, // dummy10772
134, // dummy10773
3, // dummy10774
131, // dummy10775
4, // dummy10776
2, // dummy10777
76, // dummy10778
195, // dummy10779
65, // dummy10780
198, // dummy10781
65, // dummy10782
197, // dummy10783
12, // dummy10784
4, // dummy10785
4, // dummy10786
40, // dummy10787
0, // dummy10788
0, // dummy10789
0, // dummy10790
44, // dummy10791
10, // dummy10792
0, // dummy10793
0, // dummy10794
240, // dummy10795
29, // dummy10796
255, // dummy10797
255, // dummy10798
91, // dummy10799
0, // dummy10800
0, // dummy10801
0, // dummy10802
0, // dummy10803
65, // dummy10804
14, // dummy10805
8, // dummy10806
133, // dummy10807
2, // dummy10808
66, // dummy10809
13, // dummy10810
5, // dummy10811
70, // dummy10812
135, // dummy10813
3, // dummy10814
134, // dummy10815
4, // dummy10816
131, // dummy10817
5, // dummy10818
2, // dummy10819
74, // dummy10820
195, // dummy10821
65, // dummy10822
198, // dummy10823
65, // dummy10824
199, // dummy10825
65, // dummy10826
197, // dummy10827
12, // dummy10828
4, // dummy10829
4, // dummy10830
32, // dummy10831
0, // dummy10832
0, // dummy10833
0, // dummy10834
88, // dummy10835
10, // dummy10836
0, // dummy10837
0, // dummy10838
31, // dummy10839
30, // dummy10840
255, // dummy10841
255, // dummy10842
237, // dummy10843
0, // dummy10844
0, // dummy10845
0, // dummy10846
0, // dummy10847
65, // dummy10848
14, // dummy10849
8, // dummy10850
133, // dummy10851
2, // dummy10852
66, // dummy10853
13, // dummy10854
5, // dummy10855
68, // dummy10856
131, // dummy10857
3, // dummy10858
2, // dummy10859
228, // dummy10860
195, // dummy10861
65, // dummy10862
197, // dummy10863
12, // dummy10864
4, // dummy10865
4, // dummy10866
36, // dummy10867
0, // dummy10868
0, // dummy10869
0, // dummy10870
124, // dummy10871
10, // dummy10872
0, // dummy10873
0, // dummy10874
232, // dummy10875
30, // dummy10876
255, // dummy10877
255, // dummy10878
87, // dummy10879
0, // dummy10880
0, // dummy10881
0, // dummy10882
0, // dummy10883
65, // dummy10884
14, // dummy10885
8, // dummy10886
133, // dummy10887
2, // dummy10888
66, // dummy10889
13, // dummy10890
5, // dummy10891
69, // dummy10892
134, // dummy10893
3, // dummy10894
131, // dummy10895
4, // dummy10896
2, // dummy10897
76, // dummy10898
195, // dummy10899
65, // dummy10900
198, // dummy10901
65, // dummy10902
197, // dummy10903
12, // dummy10904
4, // dummy10905
4, // dummy10906
36, // dummy10907
0, // dummy10908
0, // dummy10909
0, // dummy10910
164, // dummy10911
10, // dummy10912
0, // dummy10913
0, // dummy10914
23, // dummy10915
31, // dummy10916
255, // dummy10917
255, // dummy10918
88, // dummy10919
0, // dummy10920
0, // dummy10921
0, // dummy10922
0, // dummy10923
65, // dummy10924
14, // dummy10925
8, // dummy10926
133, // dummy10927
2, // dummy10928
66, // dummy10929
13, // dummy10930
5, // dummy10931
69, // dummy10932
134, // dummy10933
3, // dummy10934
131, // dummy10935
4, // dummy10936
2, // dummy10937
77, // dummy10938
195, // dummy10939
65, // dummy10940
198, // dummy10941
65, // dummy10942
197, // dummy10943
12, // dummy10944
4, // dummy10945
4, // dummy10946
36, // dummy10947
0, // dummy10948
0, // dummy10949
0, // dummy10950
204, // dummy10951
10, // dummy10952
0, // dummy10953
0, // dummy10954
71, // dummy10955
31, // dummy10956
255, // dummy10957
255, // dummy10958
87, // dummy10959
0, // dummy10960
0, // dummy10961
0, // dummy10962
0, // dummy10963
65, // dummy10964
14, // dummy10965
8, // dummy10966
133, // dummy10967
2, // dummy10968
66, // dummy10969
13, // dummy10970
5, // dummy10971
69, // dummy10972
134, // dummy10973
3, // dummy10974
131, // dummy10975
4, // dummy10976
2, // dummy10977
76, // dummy10978
195, // dummy10979
65, // dummy10980
198, // dummy10981
65, // dummy10982
197, // dummy10983
12, // dummy10984
4, // dummy10985
4, // dummy10986
40, // dummy10987
0, // dummy10988
0, // dummy10989
0, // dummy10990
244, // dummy10991
10, // dummy10992
0, // dummy10993
0, // dummy10994
118, // dummy10995
31, // dummy10996
255, // dummy10997
255, // dummy10998
91, // dummy10999
0, // dummy11000
0, // dummy11001
0, // dummy11002
0, // dummy11003
65, // dummy11004
14, // dummy11005
8, // dummy11006
133, // dummy11007
2, // dummy11008
66, // dummy11009
13, // dummy11010
5, // dummy11011
70, // dummy11012
135, // dummy11013
3, // dummy11014
134, // dummy11015
4, // dummy11016
131, // dummy11017
5, // dummy11018
2, // dummy11019
74, // dummy11020
195, // dummy11021
65, // dummy11022
198, // dummy11023
65, // dummy11024
199, // dummy11025
65, // dummy11026
197, // dummy11027
12, // dummy11028
4, // dummy11029
4, // dummy11030
32, // dummy11031
0, // dummy11032
0, // dummy11033
0, // dummy11034
32, // dummy11035
11, // dummy11036
0, // dummy11037
0, // dummy11038
165, // dummy11039
31, // dummy11040
255, // dummy11041
255, // dummy11042
237, // dummy11043
0, // dummy11044
0, // dummy11045
0, // dummy11046
0, // dummy11047
65, // dummy11048
14, // dummy11049
8, // dummy11050
133, // dummy11051
2, // dummy11052
66, // dummy11053
13, // dummy11054
5, // dummy11055
68, // dummy11056
131, // dummy11057
3, // dummy11058
2, // dummy11059
228, // dummy11060
195, // dummy11061
65, // dummy11062
197, // dummy11063
12, // dummy11064
4, // dummy11065
4, // dummy11066
36, // dummy11067
0, // dummy11068
0, // dummy11069
0, // dummy11070
68, // dummy11071
11, // dummy11072
0, // dummy11073
0, // dummy11074
110, // dummy11075
32, // dummy11076
255, // dummy11077
255, // dummy11078
87, // dummy11079
0, // dummy11080
0, // dummy11081
0, // dummy11082
0, // dummy11083
65, // dummy11084
14, // dummy11085
8, // dummy11086
133, // dummy11087
2, // dummy11088
66, // dummy11089
13, // dummy11090
5, // dummy11091
69, // dummy11092
134, // dummy11093
3, // dummy11094
131, // dummy11095
4, // dummy11096
2, // dummy11097
76, // dummy11098
195, // dummy11099
65, // dummy11100
198, // dummy11101
65, // dummy11102
197, // dummy11103
12, // dummy11104
4, // dummy11105
4, // dummy11106
36, // dummy11107
0, // dummy11108
0, // dummy11109
0, // dummy11110
108, // dummy11111
11, // dummy11112
0, // dummy11113
0, // dummy11114
157, // dummy11115
32, // dummy11116
255, // dummy11117
255, // dummy11118
88, // dummy11119
0, // dummy11120
0, // dummy11121
0, // dummy11122
0, // dummy11123
65, // dummy11124
14, // dummy11125
8, // dummy11126
133, // dummy11127
2, // dummy11128
66, // dummy11129
13, // dummy11130
5, // dummy11131
69, // dummy11132
134, // dummy11133
3, // dummy11134
131, // dummy11135
4, // dummy11136
2, // dummy11137
77, // dummy11138
195, // dummy11139
65, // dummy11140
198, // dummy11141
65, // dummy11142
197, // dummy11143
12, // dummy11144
4, // dummy11145
4, // dummy11146
36, // dummy11147
0, // dummy11148
0, // dummy11149
0, // dummy11150
148, // dummy11151
11, // dummy11152
0, // dummy11153
0, // dummy11154
205, // dummy11155
32, // dummy11156
255, // dummy11157
255, // dummy11158
87, // dummy11159
0, // dummy11160
0, // dummy11161
0, // dummy11162
0, // dummy11163
65, // dummy11164
14, // dummy11165
8, // dummy11166
133, // dummy11167
2, // dummy11168
66, // dummy11169
13, // dummy11170
5, // dummy11171
69, // dummy11172
134, // dummy11173
3, // dummy11174
131, // dummy11175
4, // dummy11176
2, // dummy11177
76, // dummy11178
195, // dummy11179
65, // dummy11180
198, // dummy11181
65, // dummy11182
197, // dummy11183
12, // dummy11184
4, // dummy11185
4, // dummy11186
40, // dummy11187
0, // dummy11188
0, // dummy11189
0, // dummy11190
188, // dummy11191
11, // dummy11192
0, // dummy11193
0, // dummy11194
252, // dummy11195
32, // dummy11196
255, // dummy11197
255, // dummy11198
91, // dummy11199
0, // dummy11200
0, // dummy11201
0, // dummy11202
0, // dummy11203
65, // dummy11204
14, // dummy11205
8, // dummy11206
133, // dummy11207
2, // dummy11208
66, // dummy11209
13, // dummy11210
5, // dummy11211
70, // dummy11212
135, // dummy11213
3, // dummy11214
134, // dummy11215
4, // dummy11216
131, // dummy11217
5, // dummy11218
2, // dummy11219
74, // dummy11220
195, // dummy11221
65, // dummy11222
198, // dummy11223
65, // dummy11224
199, // dummy11225
65, // dummy11226
197, // dummy11227
12, // dummy11228
4, // dummy11229
4, // dummy11230
32, // dummy11231
0, // dummy11232
0, // dummy11233
0, // dummy11234
232, // dummy11235
11, // dummy11236
0, // dummy11237
0, // dummy11238
43, // dummy11239
33, // dummy11240
255, // dummy11241
255, // dummy11242
237, // dummy11243
0, // dummy11244
0, // dummy11245
0, // dummy11246
0, // dummy11247
65, // dummy11248
14, // dummy11249
8, // dummy11250
133, // dummy11251
2, // dummy11252
66, // dummy11253
13, // dummy11254
5, // dummy11255
68, // dummy11256
131, // dummy11257
3, // dummy11258
2, // dummy11259
228, // dummy11260
195, // dummy11261
65, // dummy11262
197, // dummy11263
12, // dummy11264
4, // dummy11265
4, // dummy11266
36, // dummy11267
0, // dummy11268
0, // dummy11269
0, // dummy11270
12, // dummy11271
12, // dummy11272
0, // dummy11273
0, // dummy11274
244, // dummy11275
33, // dummy11276
255, // dummy11277
255, // dummy11278
87, // dummy11279
0, // dummy11280
0, // dummy11281
0, // dummy11282
0, // dummy11283
65, // dummy11284
14, // dummy11285
8, // dummy11286
133, // dummy11287
2, // dummy11288
66, // dummy11289
13, // dummy11290
5, // dummy11291
69, // dummy11292
134, // dummy11293
3, // dummy11294
131, // dummy11295
4, // dummy11296
2, // dummy11297
76, // dummy11298
195, // dummy11299
65, // dummy11300
198, // dummy11301
65, // dummy11302
197, // dummy11303
12, // dummy11304
4, // dummy11305
4, // dummy11306
36, // dummy11307
0, // dummy11308
0, // dummy11309
0, // dummy11310
52, // dummy11311
12, // dummy11312
0, // dummy11313
0, // dummy11314
35, // dummy11315
34, // dummy11316
255, // dummy11317
255, // dummy11318
88, // dummy11319
0, // dummy11320
0, // dummy11321
0, // dummy11322
0, // dummy11323
65, // dummy11324
14, // dummy11325
8, // dummy11326
133, // dummy11327
2, // dummy11328
66, // dummy11329
13, // dummy11330
5, // dummy11331
69, // dummy11332
134, // dummy11333
3, // dummy11334
131, // dummy11335
4, // dummy11336
2, // dummy11337
77, // dummy11338
195, // dummy11339
65, // dummy11340
198, // dummy11341
65, // dummy11342
197, // dummy11343
12, // dummy11344
4, // dummy11345
4, // dummy11346
36, // dummy11347
0, // dummy11348
0, // dummy11349
0, // dummy11350
92, // dummy11351
12, // dummy11352
0, // dummy11353
0, // dummy11354
83, // dummy11355
34, // dummy11356
255, // dummy11357
255, // dummy11358
87, // dummy11359
0, // dummy11360
0, // dummy11361
0, // dummy11362
0, // dummy11363
65, // dummy11364
14, // dummy11365
8, // dummy11366
133, // dummy11367
2, // dummy11368
66, // dummy11369
13, // dummy11370
5, // dummy11371
69, // dummy11372
134, // dummy11373
3, // dummy11374
131, // dummy11375
4, // dummy11376
2, // dummy11377
76, // dummy11378
195, // dummy11379
65, // dummy11380
198, // dummy11381
65, // dummy11382
197, // dummy11383
12, // dummy11384
4, // dummy11385
4, // dummy11386
40, // dummy11387
0, // dummy11388
0, // dummy11389
0, // dummy11390
132, // dummy11391
12, // dummy11392
0, // dummy11393
0, // dummy11394
130, // dummy11395
34, // dummy11396
255, // dummy11397
255, // dummy11398
91, // dummy11399
0, // dummy11400
0, // dummy11401
0, // dummy11402
0, // dummy11403
65, // dummy11404
14, // dummy11405
8, // dummy11406
133, // dummy11407
2, // dummy11408
66, // dummy11409
13, // dummy11410
5, // dummy11411
70, // dummy11412
135, // dummy11413
3, // dummy11414
134, // dummy11415
4, // dummy11416
131, // dummy11417
5, // dummy11418
2, // dummy11419
74, // dummy11420
195, // dummy11421
65, // dummy11422
198, // dummy11423
65, // dummy11424
199, // dummy11425
65, // dummy11426
197, // dummy11427
12, // dummy11428
4, // dummy11429
4, // dummy11430
32, // dummy11431
0, // dummy11432
0, // dummy11433
0, // dummy11434
176, // dummy11435
12, // dummy11436
0, // dummy11437
0, // dummy11438
177, // dummy11439
34, // dummy11440
255, // dummy11441
255, // dummy11442
237, // dummy11443
0, // dummy11444
0, // dummy11445
0, // dummy11446
0, // dummy11447
65, // dummy11448
14, // dummy11449
8, // dummy11450
133, // dummy11451
2, // dummy11452
66, // dummy11453
13, // dummy11454
5, // dummy11455
68, // dummy11456
131, // dummy11457
3, // dummy11458
2, // dummy11459
228, // dummy11460
195, // dummy11461
65, // dummy11462
197, // dummy11463
12, // dummy11464
4, // dummy11465
4, // dummy11466
36, // dummy11467
0, // dummy11468
0, // dummy11469
0, // dummy11470
212, // dummy11471
12, // dummy11472
0, // dummy11473
0, // dummy11474
122, // dummy11475
35, // dummy11476
255, // dummy11477
255, // dummy11478
87, // dummy11479
0, // dummy11480
0, // dummy11481
0, // dummy11482
0, // dummy11483
65, // dummy11484
14, // dummy11485
8, // dummy11486
133, // dummy11487
2, // dummy11488
66, // dummy11489
13, // dummy11490
5, // dummy11491
69, // dummy11492
134, // dummy11493
3, // dummy11494
131, // dummy11495
4, // dummy11496
2, // dummy11497
76, // dummy11498
195, // dummy11499
65, // dummy11500
198, // dummy11501
65, // dummy11502
197, // dummy11503
12, // dummy11504
4, // dummy11505
4, // dummy11506
36, // dummy11507
0, // dummy11508
0, // dummy11509
0, // dummy11510
252, // dummy11511
12, // dummy11512
0, // dummy11513
0, // dummy11514
169, // dummy11515
35, // dummy11516
255, // dummy11517
255, // dummy11518
88, // dummy11519
0, // dummy11520
0, // dummy11521
0, // dummy11522
0, // dummy11523
65, // dummy11524
14, // dummy11525
8, // dummy11526
133, // dummy11527
2, // dummy11528
66, // dummy11529
13, // dummy11530
5, // dummy11531
69, // dummy11532
134, // dummy11533
3, // dummy11534
131, // dummy11535
4, // dummy11536
2, // dummy11537
77, // dummy11538
195, // dummy11539
65, // dummy11540
198, // dummy11541
65, // dummy11542
197, // dummy11543
12, // dummy11544
4, // dummy11545
4, // dummy11546
36, // dummy11547
0, // dummy11548
0, // dummy11549
0, // dummy11550
36, // dummy11551
13, // dummy11552
0, // dummy11553
0, // dummy11554
217, // dummy11555
35, // dummy11556
255, // dummy11557
255, // dummy11558
87, // dummy11559
0, // dummy11560
0, // dummy11561
0, // dummy11562
0, // dummy11563
65, // dummy11564
14, // dummy11565
8, // dummy11566
133, // dummy11567
2, // dummy11568
66, // dummy11569
13, // dummy11570
5, // dummy11571
69, // dummy11572
134, // dummy11573
3, // dummy11574
131, // dummy11575
4, // dummy11576
2, // dummy11577
76, // dummy11578
195, // dummy11579
65, // dummy11580
198, // dummy11581
65, // dummy11582
197, // dummy11583
12, // dummy11584
4, // dummy11585
4, // dummy11586
40, // dummy11587
0, // dummy11588
0, // dummy11589
0, // dummy11590
76, // dummy11591
13, // dummy11592
0, // dummy11593
0, // dummy11594
8, // dummy11595
36, // dummy11596
255, // dummy11597
255, // dummy11598
159, // dummy11599
0, // dummy11600
0, // dummy11601
0, // dummy11602
0, // dummy11603
65, // dummy11604
14, // dummy11605
8, // dummy11606
133, // dummy11607
2, // dummy11608
66, // dummy11609
13, // dummy11610
5, // dummy11611
70, // dummy11612
135, // dummy11613
3, // dummy11614
134, // dummy11615
4, // dummy11616
131, // dummy11617
5, // dummy11618
2, // dummy11619
142, // dummy11620
195, // dummy11621
65, // dummy11622
198, // dummy11623
65, // dummy11624
199, // dummy11625
65, // dummy11626
197, // dummy11627
12, // dummy11628
4, // dummy11629
4, // dummy11630
32, // dummy11631
0, // dummy11632
0, // dummy11633
0, // dummy11634
120, // dummy11635
13, // dummy11636
0, // dummy11637
0, // dummy11638
123, // dummy11639
36, // dummy11640
255, // dummy11641
255, // dummy11642
237, // dummy11643
0, // dummy11644
0, // dummy11645
0, // dummy11646
0, // dummy11647
65, // dummy11648
14, // dummy11649
8, // dummy11650
133, // dummy11651
2, // dummy11652
66, // dummy11653
13, // dummy11654
5, // dummy11655
68, // dummy11656
131, // dummy11657
3, // dummy11658
2, // dummy11659
228, // dummy11660
195, // dummy11661
65, // dummy11662
197, // dummy11663
12, // dummy11664
4, // dummy11665
4, // dummy11666
36, // dummy11667
0, // dummy11668
0, // dummy11669
0, // dummy11670
156, // dummy11671
13, // dummy11672
0, // dummy11673
0, // dummy11674
68, // dummy11675
37, // dummy11676
255, // dummy11677
255, // dummy11678
87, // dummy11679
0, // dummy11680
0, // dummy11681
0, // dummy11682
0, // dummy11683
65, // dummy11684
14, // dummy11685
8, // dummy11686
133, // dummy11687
2, // dummy11688
66, // dummy11689
13, // dummy11690
5, // dummy11691
69, // dummy11692
134, // dummy11693
3, // dummy11694
131, // dummy11695
4, // dummy11696
2, // dummy11697
76, // dummy11698
195, // dummy11699
65, // dummy11700
198, // dummy11701
65, // dummy11702
197, // dummy11703
12, // dummy11704
4, // dummy11705
4, // dummy11706
36, // dummy11707
0, // dummy11708
0, // dummy11709
0, // dummy11710
196, // dummy11711
13, // dummy11712
0, // dummy11713
0, // dummy11714
115, // dummy11715
37, // dummy11716
255, // dummy11717
255, // dummy11718
88, // dummy11719
0, // dummy11720
0, // dummy11721
0, // dummy11722
0, // dummy11723
65, // dummy11724
14, // dummy11725
8, // dummy11726
133, // dummy11727
2, // dummy11728
66, // dummy11729
13, // dummy11730
5, // dummy11731
69, // dummy11732
134, // dummy11733
3, // dummy11734
131, // dummy11735
4, // dummy11736
2, // dummy11737
77, // dummy11738
195, // dummy11739
65, // dummy11740
198, // dummy11741
65, // dummy11742
197, // dummy11743
12, // dummy11744
4, // dummy11745
4, // dummy11746
36, // dummy11747
0, // dummy11748
0, // dummy11749
0, // dummy11750
236, // dummy11751
13, // dummy11752
0, // dummy11753
0, // dummy11754
163, // dummy11755
37, // dummy11756
255, // dummy11757
255, // dummy11758
87, // dummy11759
0, // dummy11760
0, // dummy11761
0, // dummy11762
0, // dummy11763
65, // dummy11764
14, // dummy11765
8, // dummy11766
133, // dummy11767
2, // dummy11768
66, // dummy11769
13, // dummy11770
5, // dummy11771
69, // dummy11772
134, // dummy11773
3, // dummy11774
131, // dummy11775
4, // dummy11776
2, // dummy11777
76, // dummy11778
195, // dummy11779
65, // dummy11780
198, // dummy11781
65, // dummy11782
197, // dummy11783
12, // dummy11784
4, // dummy11785
4, // dummy11786
40, // dummy11787
0, // dummy11788
0, // dummy11789
0, // dummy11790
20, // dummy11791
14, // dummy11792
0, // dummy11793
0, // dummy11794
210, // dummy11795
37, // dummy11796
255, // dummy11797
255, // dummy11798
159, // dummy11799
0, // dummy11800
0, // dummy11801
0, // dummy11802
0, // dummy11803
65, // dummy11804
14, // dummy11805
8, // dummy11806
133, // dummy11807
2, // dummy11808
66, // dummy11809
13, // dummy11810
5, // dummy11811
70, // dummy11812
135, // dummy11813
3, // dummy11814
134, // dummy11815
4, // dummy11816
131, // dummy11817
5, // dummy11818
2, // dummy11819
142, // dummy11820
195, // dummy11821
65, // dummy11822
198, // dummy11823
65, // dummy11824
199, // dummy11825
65, // dummy11826
197, // dummy11827
12, // dummy11828
4, // dummy11829
4, // dummy11830
32, // dummy11831
0, // dummy11832
0, // dummy11833
0, // dummy11834
64, // dummy11835
14, // dummy11836
0, // dummy11837
0, // dummy11838
69, // dummy11839
38, // dummy11840
255, // dummy11841
255, // dummy11842
237, // dummy11843
0, // dummy11844
0, // dummy11845
0, // dummy11846
0, // dummy11847
65, // dummy11848
14, // dummy11849
8, // dummy11850
133, // dummy11851
2, // dummy11852
66, // dummy11853
13, // dummy11854
5, // dummy11855
68, // dummy11856
131, // dummy11857
3, // dummy11858
2, // dummy11859
228, // dummy11860
195, // dummy11861
65, // dummy11862
197, // dummy11863
12, // dummy11864
4, // dummy11865
4, // dummy11866
40, // dummy11867
0, // dummy11868
0, // dummy11869
0, // dummy11870
100, // dummy11871
14, // dummy11872
0, // dummy11873
0, // dummy11874
14, // dummy11875
39, // dummy11876
255, // dummy11877
255, // dummy11878
97, // dummy11879
0, // dummy11880
0, // dummy11881
0, // dummy11882
0, // dummy11883
65, // dummy11884
14, // dummy11885
8, // dummy11886
133, // dummy11887
2, // dummy11888
66, // dummy11889
13, // dummy11890
5, // dummy11891
70, // dummy11892
135, // dummy11893
3, // dummy11894
134, // dummy11895
4, // dummy11896
131, // dummy11897
5, // dummy11898
2, // dummy11899
84, // dummy11900
195, // dummy11901
65, // dummy11902
198, // dummy11903
65, // dummy11904
199, // dummy11905
65, // dummy11906
197, // dummy11907
12, // dummy11908
4, // dummy11909
4, // dummy11910
40, // dummy11911
0, // dummy11912
0, // dummy11913
0, // dummy11914
144, // dummy11915
14, // dummy11916
0, // dummy11917
0, // dummy11918
67, // dummy11919
39, // dummy11920
255, // dummy11921
255, // dummy11922
98, // dummy11923
0, // dummy11924
0, // dummy11925
0, // dummy11926
0, // dummy11927
65, // dummy11928
14, // dummy11929
8, // dummy11930
133, // dummy11931
2, // dummy11932
66, // dummy11933
13, // dummy11934
5, // dummy11935
70, // dummy11936
135, // dummy11937
3, // dummy11938
134, // dummy11939
4, // dummy11940
131, // dummy11941
5, // dummy11942
2, // dummy11943
85, // dummy11944
195, // dummy11945
65, // dummy11946
198, // dummy11947
65, // dummy11948
199, // dummy11949
65, // dummy11950
197, // dummy11951
12, // dummy11952
4, // dummy11953
4, // dummy11954
40, // dummy11955
0, // dummy11956
0, // dummy11957
0, // dummy11958
188, // dummy11959
14, // dummy11960
0, // dummy11961
0, // dummy11962
121, // dummy11963
39, // dummy11964
255, // dummy11965
255, // dummy11966
74, // dummy11967
0, // dummy11968
0, // dummy11969
0, // dummy11970
0, // dummy11971
65, // dummy11972
14, // dummy11973
8, // dummy11974
133, // dummy11975
2, // dummy11976
66, // dummy11977
13, // dummy11978
5, // dummy11979
70, // dummy11980
135, // dummy11981
3, // dummy11982
134, // dummy11983
4, // dummy11984
131, // dummy11985
5, // dummy11986
125, // dummy11987
195, // dummy11988
65, // dummy11989
198, // dummy11990
65, // dummy11991
199, // dummy11992
65, // dummy11993
197, // dummy11994
12, // dummy11995
4, // dummy11996
4, // dummy11997
0, // dummy11998
32, // dummy11999
0, // dummy12000
0, // dummy12001
0, // dummy12002
232, // dummy12003
14, // dummy12004
0, // dummy12005
0, // dummy12006
151, // dummy12007
39, // dummy12008
255, // dummy12009
255, // dummy12010
237, // dummy12011
0, // dummy12012
0, // dummy12013
0, // dummy12014
0, // dummy12015
65, // dummy12016
14, // dummy12017
8, // dummy12018
133, // dummy12019
2, // dummy12020
66, // dummy12021
13, // dummy12022
5, // dummy12023
68, // dummy12024
131, // dummy12025
3, // dummy12026
2, // dummy12027
228, // dummy12028
195, // dummy12029
65, // dummy12030
197, // dummy12031
12, // dummy12032
4, // dummy12033
4, // dummy12034
40, // dummy12035
0, // dummy12036
0, // dummy12037
0, // dummy12038
12, // dummy12039
15, // dummy12040
0, // dummy12041
0, // dummy12042
96, // dummy12043
40, // dummy12044
255, // dummy12045
255, // dummy12046
97, // dummy12047
0, // dummy12048
0, // dummy12049
0, // dummy12050
0, // dummy12051
65, // dummy12052
14, // dummy12053
8, // dummy12054
133, // dummy12055
2, // dummy12056
66, // dummy12057
13, // dummy12058
5, // dummy12059
70, // dummy12060
135, // dummy12061
3, // dummy12062
134, // dummy12063
4, // dummy12064
131, // dummy12065
5, // dummy12066
2, // dummy12067
84, // dummy12068
195, // dummy12069
65, // dummy12070
198, // dummy12071
65, // dummy12072
199, // dummy12073
65, // dummy12074
197, // dummy12075
12, // dummy12076
4, // dummy12077
4, // dummy12078
40, // dummy12079
0, // dummy12080
0, // dummy12081
0, // dummy12082
56, // dummy12083
15, // dummy12084
0, // dummy12085
0, // dummy12086
149, // dummy12087
40, // dummy12088
255, // dummy12089
255, // dummy12090
98, // dummy12091
0, // dummy12092
0, // dummy12093
0, // dummy12094
0, // dummy12095
65, // dummy12096
14, // dummy12097
8, // dummy12098
133, // dummy12099
2, // dummy12100
66, // dummy12101
13, // dummy12102
5, // dummy12103
70, // dummy12104
135, // dummy12105
3, // dummy12106
134, // dummy12107
4, // dummy12108
131, // dummy12109
5, // dummy12110
2, // dummy12111
85, // dummy12112
195, // dummy12113
65, // dummy12114
198, // dummy12115
65, // dummy12116
199, // dummy12117
65, // dummy12118
197, // dummy12119
12, // dummy12120
4, // dummy12121
4, // dummy12122
40, // dummy12123
0, // dummy12124
0, // dummy12125
0, // dummy12126
100, // dummy12127
15, // dummy12128
0, // dummy12129
0, // dummy12130
203, // dummy12131
40, // dummy12132
255, // dummy12133
255, // dummy12134
74, // dummy12135
0, // dummy12136
0, // dummy12137
0, // dummy12138
0, // dummy12139
65, // dummy12140
14, // dummy12141
8, // dummy12142
133, // dummy12143
2, // dummy12144
66, // dummy12145
13, // dummy12146
5, // dummy12147
70, // dummy12148
135, // dummy12149
3, // dummy12150
134, // dummy12151
4, // dummy12152
131, // dummy12153
5, // dummy12154
125, // dummy12155
195, // dummy12156
65, // dummy12157
198, // dummy12158
65, // dummy12159
199, // dummy12160
65, // dummy12161
197, // dummy12162
12, // dummy12163
4, // dummy12164
4, // dummy12165
0, // dummy12166
32, // dummy12167
0, // dummy12168
0, // dummy12169
0, // dummy12170
144, // dummy12171
15, // dummy12172
0, // dummy12173
0, // dummy12174
233, // dummy12175
40, // dummy12176
255, // dummy12177
255, // dummy12178
237, // dummy12179
0, // dummy12180
0, // dummy12181
0, // dummy12182
0, // dummy12183
65, // dummy12184
14, // dummy12185
8, // dummy12186
133, // dummy12187
2, // dummy12188
66, // dummy12189
13, // dummy12190
5, // dummy12191
68, // dummy12192
131, // dummy12193
3, // dummy12194
2, // dummy12195
228, // dummy12196
195, // dummy12197
65, // dummy12198
197, // dummy12199
12, // dummy12200
4, // dummy12201
4, // dummy12202
36, // dummy12203
0, // dummy12204
0, // dummy12205
0, // dummy12206
180, // dummy12207
15, // dummy12208
0, // dummy12209
0, // dummy12210
178, // dummy12211
41, // dummy12212
255, // dummy12213
255, // dummy12214
86, // dummy12215
0, // dummy12216
0, // dummy12217
0, // dummy12218
0, // dummy12219
65, // dummy12220
14, // dummy12221
8, // dummy12222
133, // dummy12223
2, // dummy12224
66, // dummy12225
13, // dummy12226
5, // dummy12227
69, // dummy12228
134, // dummy12229
3, // dummy12230
131, // dummy12231
4, // dummy12232
2, // dummy12233
75, // dummy12234
195, // dummy12235
65, // dummy12236
198, // dummy12237
65, // dummy12238
197, // dummy12239
12, // dummy12240
4, // dummy12241
4, // dummy12242
36, // dummy12243
0, // dummy12244
0, // dummy12245
0, // dummy12246
220, // dummy12247
15, // dummy12248
0, // dummy12249
0, // dummy12250
224, // dummy12251
41, // dummy12252
255, // dummy12253
255, // dummy12254
87, // dummy12255
0, // dummy12256
0, // dummy12257
0, // dummy12258
0, // dummy12259
65, // dummy12260
14, // dummy12261
8, // dummy12262
133, // dummy12263
2, // dummy12264
66, // dummy12265
13, // dummy12266
5, // dummy12267
69, // dummy12268
134, // dummy12269
3, // dummy12270
131, // dummy12271
4, // dummy12272
2, // dummy12273
76, // dummy12274
195, // dummy12275
65, // dummy12276
198, // dummy12277
65, // dummy12278
197, // dummy12279
12, // dummy12280
4, // dummy12281
4, // dummy12282
40, // dummy12283
0, // dummy12284
0, // dummy12285
0, // dummy12286
4, // dummy12287
16, // dummy12288
0, // dummy12289
0, // dummy12290
15, // dummy12291
42, // dummy12292
255, // dummy12293
255, // dummy12294
74, // dummy12295
0, // dummy12296
0, // dummy12297
0, // dummy12298
0, // dummy12299
65, // dummy12300
14, // dummy12301
8, // dummy12302
133, // dummy12303
2, // dummy12304
66, // dummy12305
13, // dummy12306
5, // dummy12307
70, // dummy12308
135, // dummy12309
3, // dummy12310
134, // dummy12311
4, // dummy12312
131, // dummy12313
5, // dummy12314
125, // dummy12315
195, // dummy12316
65, // dummy12317
198, // dummy12318
65, // dummy12319
199, // dummy12320
65, // dummy12321
197, // dummy12322
12, // dummy12323
4, // dummy12324
4, // dummy12325
0, // dummy12326
32, // dummy12327
0, // dummy12328
0, // dummy12329
0, // dummy12330
48, // dummy12331
16, // dummy12332
0, // dummy12333
0, // dummy12334
45, // dummy12335
42, // dummy12336
255, // dummy12337
255, // dummy12338
237, // dummy12339
0, // dummy12340
0, // dummy12341
0, // dummy12342
0, // dummy12343
65, // dummy12344
14, // dummy12345
8, // dummy12346
133, // dummy12347
2, // dummy12348
66, // dummy12349
13, // dummy12350
5, // dummy12351
68, // dummy12352
131, // dummy12353
3, // dummy12354
2, // dummy12355
228, // dummy12356
195, // dummy12357
65, // dummy12358
197, // dummy12359
12, // dummy12360
4, // dummy12361
4, // dummy12362
36, // dummy12363
0, // dummy12364
0, // dummy12365
0, // dummy12366
84, // dummy12367
16, // dummy12368
0, // dummy12369
0, // dummy12370
246, // dummy12371
42, // dummy12372
255, // dummy12373
255, // dummy12374
86, // dummy12375
0, // dummy12376
0, // dummy12377
0, // dummy12378
0, // dummy12379
65, // dummy12380
14, // dummy12381
8, // dummy12382
133, // dummy12383
2, // dummy12384
66, // dummy12385
13, // dummy12386
5, // dummy12387
69, // dummy12388
134, // dummy12389
3, // dummy12390
131, // dummy12391
4, // dummy12392
2, // dummy12393
75, // dummy12394
195, // dummy12395
65, // dummy12396
198, // dummy12397
65, // dummy12398
197, // dummy12399
12, // dummy12400
4, // dummy12401
4, // dummy12402
36, // dummy12403
0, // dummy12404
0, // dummy12405
0, // dummy12406
124, // dummy12407
16, // dummy12408
0, // dummy12409
0, // dummy12410
36, // dummy12411
43, // dummy12412
255, // dummy12413
255, // dummy12414
87, // dummy12415
0, // dummy12416
0, // dummy12417
0, // dummy12418
0, // dummy12419
65, // dummy12420
14, // dummy12421
8, // dummy12422
133, // dummy12423
2, // dummy12424
66, // dummy12425
13, // dummy12426
5, // dummy12427
69, // dummy12428
134, // dummy12429
3, // dummy12430
131, // dummy12431
4, // dummy12432
2, // dummy12433
76, // dummy12434
195, // dummy12435
65, // dummy12436
198, // dummy12437
65, // dummy12438
197, // dummy12439
12, // dummy12440
4, // dummy12441
4, // dummy12442
40, // dummy12443
0, // dummy12444
0, // dummy12445
0, // dummy12446
164, // dummy12447
16, // dummy12448
0, // dummy12449
0, // dummy12450
83, // dummy12451
43, // dummy12452
255, // dummy12453
255, // dummy12454
74, // dummy12455
0, // dummy12456
0, // dummy12457
0, // dummy12458
0, // dummy12459
65, // dummy12460
14, // dummy12461
8, // dummy12462
133, // dummy12463
2, // dummy12464
66, // dummy12465
13, // dummy12466
5, // dummy12467
70, // dummy12468
135, // dummy12469
3, // dummy12470
134, // dummy12471
4, // dummy12472
131, // dummy12473
5, // dummy12474
125, // dummy12475
195, // dummy12476
65, // dummy12477
198, // dummy12478
65, // dummy12479
199, // dummy12480
65, // dummy12481
197, // dummy12482
12, // dummy12483
4, // dummy12484
4, // dummy12485
0, // dummy12486
32, // dummy12487
0, // dummy12488
0, // dummy12489
0, // dummy12490
208, // dummy12491
16, // dummy12492
0, // dummy12493
0, // dummy12494
113, // dummy12495
43, // dummy12496
255, // dummy12497
255, // dummy12498
237, // dummy12499
0, // dummy12500
0, // dummy12501
0, // dummy12502
0, // dummy12503
65, // dummy12504
14, // dummy12505
8, // dummy12506
133, // dummy12507
2, // dummy12508
66, // dummy12509
13, // dummy12510
5, // dummy12511
68, // dummy12512
131, // dummy12513
3, // dummy12514
2, // dummy12515
228, // dummy12516
195, // dummy12517
65, // dummy12518
197, // dummy12519
12, // dummy12520
4, // dummy12521
4, // dummy12522
36, // dummy12523
0, // dummy12524
0, // dummy12525
0, // dummy12526
244, // dummy12527
16, // dummy12528
0, // dummy12529
0, // dummy12530
58, // dummy12531
44, // dummy12532
255, // dummy12533
255, // dummy12534
86, // dummy12535
0, // dummy12536
0, // dummy12537
0, // dummy12538
0, // dummy12539
65, // dummy12540
14, // dummy12541
8, // dummy12542
133, // dummy12543
2, // dummy12544
66, // dummy12545
13, // dummy12546
5, // dummy12547
69, // dummy12548
134, // dummy12549
3, // dummy12550
131, // dummy12551
4, // dummy12552
2, // dummy12553
75, // dummy12554
195, // dummy12555
65, // dummy12556
198, // dummy12557
65, // dummy12558
197, // dummy12559
12, // dummy12560
4, // dummy12561
4, // dummy12562
36, // dummy12563
0, // dummy12564
0, // dummy12565
0, // dummy12566
28, // dummy12567
17, // dummy12568
0, // dummy12569
0, // dummy12570
104, // dummy12571
44, // dummy12572
255, // dummy12573
255, // dummy12574
87, // dummy12575
0, // dummy12576
0, // dummy12577
0, // dummy12578
0, // dummy12579
65, // dummy12580
14, // dummy12581
8, // dummy12582
133, // dummy12583
2, // dummy12584
66, // dummy12585
13, // dummy12586
5, // dummy12587
69, // dummy12588
134, // dummy12589
3, // dummy12590
131, // dummy12591
4, // dummy12592
2, // dummy12593
76, // dummy12594
195, // dummy12595
65, // dummy12596
198, // dummy12597
65, // dummy12598
197, // dummy12599
12, // dummy12600
4, // dummy12601
4, // dummy12602
40, // dummy12603
0, // dummy12604
0, // dummy12605
0, // dummy12606
68, // dummy12607
17, // dummy12608
0, // dummy12609
0, // dummy12610
151, // dummy12611
44, // dummy12612
255, // dummy12613
255, // dummy12614
74, // dummy12615
0, // dummy12616
0, // dummy12617
0, // dummy12618
0, // dummy12619
65, // dummy12620
14, // dummy12621
8, // dummy12622
133, // dummy12623
2, // dummy12624
66, // dummy12625
13, // dummy12626
5, // dummy12627
70, // dummy12628
135, // dummy12629
3, // dummy12630
134, // dummy12631
4, // dummy12632
131, // dummy12633
5, // dummy12634
125, // dummy12635
195, // dummy12636
65, // dummy12637
198, // dummy12638
65, // dummy12639
199, // dummy12640
65, // dummy12641
197, // dummy12642
12, // dummy12643
4, // dummy12644
4, // dummy12645
0, // dummy12646
32, // dummy12647
0, // dummy12648
0, // dummy12649
0, // dummy12650
112, // dummy12651
17, // dummy12652
0, // dummy12653
0, // dummy12654
181, // dummy12655
44, // dummy12656
255, // dummy12657
255, // dummy12658
237, // dummy12659
0, // dummy12660
0, // dummy12661
0, // dummy12662
0, // dummy12663
65, // dummy12664
14, // dummy12665
8, // dummy12666
133, // dummy12667
2, // dummy12668
66, // dummy12669
13, // dummy12670
5, // dummy12671
68, // dummy12672
131, // dummy12673
3, // dummy12674
2, // dummy12675
228, // dummy12676
195, // dummy12677
65, // dummy12678
197, // dummy12679
12, // dummy12680
4, // dummy12681
4, // dummy12682
36, // dummy12683
0, // dummy12684
0, // dummy12685
0, // dummy12686
148, // dummy12687
17, // dummy12688
0, // dummy12689
0, // dummy12690
126, // dummy12691
45, // dummy12692
255, // dummy12693
255, // dummy12694
86, // dummy12695
0, // dummy12696
0, // dummy12697
0, // dummy12698
0, // dummy12699
65, // dummy12700
14, // dummy12701
8, // dummy12702
133, // dummy12703
2, // dummy12704
66, // dummy12705
13, // dummy12706
5, // dummy12707
69, // dummy12708
134, // dummy12709
3, // dummy12710
131, // dummy12711
4, // dummy12712
2, // dummy12713
75, // dummy12714
195, // dummy12715
65, // dummy12716
198, // dummy12717
65, // dummy12718
197, // dummy12719
12, // dummy12720
4, // dummy12721
4, // dummy12722
36, // dummy12723
0, // dummy12724
0, // dummy12725
0, // dummy12726
188, // dummy12727
17, // dummy12728
0, // dummy12729
0, // dummy12730
172, // dummy12731
45, // dummy12732
255, // dummy12733
255, // dummy12734
87, // dummy12735
0, // dummy12736
0, // dummy12737
0, // dummy12738
0, // dummy12739
65, // dummy12740
14, // dummy12741
8, // dummy12742
133, // dummy12743
2, // dummy12744
66, // dummy12745
13, // dummy12746
5, // dummy12747
69, // dummy12748
134, // dummy12749
3, // dummy12750
131, // dummy12751
4, // dummy12752
2, // dummy12753
76, // dummy12754
195, // dummy12755
65, // dummy12756
198, // dummy12757
65, // dummy12758
197, // dummy12759
12, // dummy12760
4, // dummy12761
4, // dummy12762
40, // dummy12763
0, // dummy12764
0, // dummy12765
0, // dummy12766
228, // dummy12767
17, // dummy12768
0, // dummy12769
0, // dummy12770
219, // dummy12771
45, // dummy12772
255, // dummy12773
255, // dummy12774
74, // dummy12775
0, // dummy12776
0, // dummy12777
0, // dummy12778
0, // dummy12779
65, // dummy12780
14, // dummy12781
8, // dummy12782
133, // dummy12783
2, // dummy12784
66, // dummy12785
13, // dummy12786
5, // dummy12787
70, // dummy12788
135, // dummy12789
3, // dummy12790
134, // dummy12791
4, // dummy12792
131, // dummy12793
5, // dummy12794
125, // dummy12795
195, // dummy12796
65, // dummy12797
198, // dummy12798
65, // dummy12799
199, // dummy12800
65, // dummy12801
197, // dummy12802
12, // dummy12803
4, // dummy12804
4, // dummy12805
0, // dummy12806
32, // dummy12807
0, // dummy12808
0, // dummy12809
0, // dummy12810
16, // dummy12811
18, // dummy12812
0, // dummy12813
0, // dummy12814
249, // dummy12815
45, // dummy12816
255, // dummy12817
255, // dummy12818
237, // dummy12819
0, // dummy12820
0, // dummy12821
0, // dummy12822
0, // dummy12823
65, // dummy12824
14, // dummy12825
8, // dummy12826
133, // dummy12827
2, // dummy12828
66, // dummy12829
13, // dummy12830
5, // dummy12831
68, // dummy12832
131, // dummy12833
3, // dummy12834
2, // dummy12835
228, // dummy12836
195, // dummy12837
65, // dummy12838
197, // dummy12839
12, // dummy12840
4, // dummy12841
4, // dummy12842
44, // dummy12843
0, // dummy12844
0, // dummy12845
0, // dummy12846
52, // dummy12847
18, // dummy12848
0, // dummy12849
0, // dummy12850
194, // dummy12851
46, // dummy12852
255, // dummy12853
255, // dummy12854
63, // dummy12855
7, // dummy12856
0, // dummy12857
0, // dummy12858
0, // dummy12859
65, // dummy12860
14, // dummy12861
8, // dummy12862
133, // dummy12863
2, // dummy12864
71, // dummy12865
13, // dummy12866
5, // dummy12867
70, // dummy12868
135, // dummy12869
3, // dummy12870
134, // dummy12871
4, // dummy12872
131, // dummy12873
5, // dummy12874
3, // dummy12875
45, // dummy12876
7, // dummy12877
195, // dummy12878
65, // dummy12879
198, // dummy12880
65, // dummy12881
199, // dummy12882
65, // dummy12883
197, // dummy12884
12, // dummy12885
4, // dummy12886
4, // dummy12887
0, // dummy12888
0, // dummy12889
0, // dummy12890
44, // dummy12891
0, // dummy12892
0, // dummy12893
0, // dummy12894
100, // dummy12895
18, // dummy12896
0, // dummy12897
0, // dummy12898
209, // dummy12899
53, // dummy12900
255, // dummy12901
255, // dummy12902
221, // dummy12903
24, // dummy12904
0, // dummy12905
0, // dummy12906
0, // dummy12907
65, // dummy12908
14, // dummy12909
8, // dummy12910
133, // dummy12911
2, // dummy12912
66, // dummy12913
13, // dummy12914
5, // dummy12915
70, // dummy12916
135, // dummy12917
3, // dummy12918
134, // dummy12919
4, // dummy12920
131, // dummy12921
5, // dummy12922
3, // dummy12923
208, // dummy12924
24, // dummy12925
195, // dummy12926
65, // dummy12927
198, // dummy12928
65, // dummy12929
199, // dummy12930
65, // dummy12931
197, // dummy12932
12, // dummy12933
4, // dummy12934
4, // dummy12935
0, // dummy12936
0, // dummy12937
0, // dummy12938
44, // dummy12939
0, // dummy12940
0, // dummy12941
0, // dummy12942
148, // dummy12943
18, // dummy12944
0, // dummy12945
0, // dummy12946
126, // dummy12947
78, // dummy12948
255, // dummy12949
255, // dummy12950
0, // dummy12951
4, // dummy12952
0, // dummy12953
0, // dummy12954
0, // dummy12955
65, // dummy12956
14, // dummy12957
8, // dummy12958
133, // dummy12959
2, // dummy12960
71, // dummy12961
13, // dummy12962
5, // dummy12963
70, // dummy12964
135, // dummy12965
3, // dummy12966
134, // dummy12967
4, // dummy12968
131, // dummy12969
5, // dummy12970
3, // dummy12971
238, // dummy12972
3, // dummy12973
195, // dummy12974
65, // dummy12975
198, // dummy12976
65, // dummy12977
199, // dummy12978
65, // dummy12979
197, // dummy12980
12, // dummy12981
4, // dummy12982
4, // dummy12983
0, // dummy12984
0, // dummy12985
0, // dummy12986
32, // dummy12987
0, // dummy12988
0, // dummy12989
0, // dummy12990
196, // dummy12991
18, // dummy12992
0, // dummy12993
0, // dummy12994
78, // dummy12995
82, // dummy12996
255, // dummy12997
255, // dummy12998
71, // dummy12999
0, // dummy13000
0, // dummy13001
0, // dummy13002
0, // dummy13003
65, // dummy13004
14, // dummy13005
8, // dummy13006
133, // dummy13007
2, // dummy13008
68, // dummy13009
13, // dummy13010
5, // dummy13011
68, // dummy13012
131, // dummy13013
3, // dummy13014
124, // dummy13015
195, // dummy13016
65, // dummy13017
197, // dummy13018
12, // dummy13019
4, // dummy13020
4, // dummy13021
0, // dummy13022
40, // dummy13023
0, // dummy13024
0, // dummy13025
0, // dummy13026
232, // dummy13027
18, // dummy13028
0, // dummy13029
0, // dummy13030
113, // dummy13031
82, // dummy13032
255, // dummy13033
255, // dummy13034
89, // dummy13035
0, // dummy13036
0, // dummy13037
0, // dummy13038
0, // dummy13039
65, // dummy13040
14, // dummy13041
8, // dummy13042
133, // dummy13043
2, // dummy13044
66, // dummy13045
13, // dummy13046
5, // dummy13047
70, // dummy13048
135, // dummy13049
3, // dummy13050
134, // dummy13051
4, // dummy13052
131, // dummy13053
5, // dummy13054
2, // dummy13055
76, // dummy13056
195, // dummy13057
65, // dummy13058
198, // dummy13059
65, // dummy13060
199, // dummy13061
65, // dummy13062
197, // dummy13063
12, // dummy13064
4, // dummy13065
4, // dummy13066
40, // dummy13067
0, // dummy13068
0, // dummy13069
0, // dummy13070
20, // dummy13071
19, // dummy13072
0, // dummy13073
0, // dummy13074
158, // dummy13075
82, // dummy13076
255, // dummy13077
255, // dummy13078
88, // dummy13079
0, // dummy13080
0, // dummy13081
0, // dummy13082
0, // dummy13083
65, // dummy13084
14, // dummy13085
8, // dummy13086
133, // dummy13087
2, // dummy13088
66, // dummy13089
13, // dummy13090
5, // dummy13091
70, // dummy13092
135, // dummy13093
3, // dummy13094
134, // dummy13095
4, // dummy13096
131, // dummy13097
5, // dummy13098
2, // dummy13099
75, // dummy13100
195, // dummy13101
65, // dummy13102
198, // dummy13103
65, // dummy13104
199, // dummy13105
65, // dummy13106
197, // dummy13107
12, // dummy13108
4, // dummy13109
4, // dummy13110
32, // dummy13111
0, // dummy13112
0, // dummy13113
0, // dummy13114
64, // dummy13115
19, // dummy13116
0, // dummy13117
0, // dummy13118
202, // dummy13119
82, // dummy13120
255, // dummy13121
255, // dummy13122
71, // dummy13123
0, // dummy13124
0, // dummy13125
0, // dummy13126
0, // dummy13127
65, // dummy13128
14, // dummy13129
8, // dummy13130
133, // dummy13131
2, // dummy13132
68, // dummy13133
13, // dummy13134
5, // dummy13135
68, // dummy13136
131, // dummy13137
3, // dummy13138
124, // dummy13139
195, // dummy13140
65, // dummy13141
197, // dummy13142
12, // dummy13143
4, // dummy13144
4, // dummy13145
0, // dummy13146
40, // dummy13147
0, // dummy13148
0, // dummy13149
0, // dummy13150
100, // dummy13151
19, // dummy13152
0, // dummy13153
0, // dummy13154
237, // dummy13155
82, // dummy13156
255, // dummy13157
255, // dummy13158
89, // dummy13159
0, // dummy13160
0, // dummy13161
0, // dummy13162
0, // dummy13163
65, // dummy13164
14, // dummy13165
8, // dummy13166
133, // dummy13167
2, // dummy13168
66, // dummy13169
13, // dummy13170
5, // dummy13171
70, // dummy13172
135, // dummy13173
3, // dummy13174
134, // dummy13175
4, // dummy13176
131, // dummy13177
5, // dummy13178
2, // dummy13179
76, // dummy13180
195, // dummy13181
65, // dummy13182
198, // dummy13183
65, // dummy13184
199, // dummy13185
65, // dummy13186
197, // dummy13187
12, // dummy13188
4, // dummy13189
4, // dummy13190
40, // dummy13191
0, // dummy13192
0, // dummy13193
0, // dummy13194
144, // dummy13195
19, // dummy13196
0, // dummy13197
0, // dummy13198
26, // dummy13199
83, // dummy13200
255, // dummy13201
255, // dummy13202
88, // dummy13203
0, // dummy13204
0, // dummy13205
0, // dummy13206
0, // dummy13207
65, // dummy13208
14, // dummy13209
8, // dummy13210
133, // dummy13211
2, // dummy13212
66, // dummy13213
13, // dummy13214
5, // dummy13215
70, // dummy13216
135, // dummy13217
3, // dummy13218
134, // dummy13219
4, // dummy13220
131, // dummy13221
5, // dummy13222
2, // dummy13223
75, // dummy13224
195, // dummy13225
65, // dummy13226
198, // dummy13227
65, // dummy13228
199, // dummy13229
65, // dummy13230
197, // dummy13231
12, // dummy13232
4, // dummy13233
4, // dummy13234
32, // dummy13235
0, // dummy13236
0, // dummy13237
0, // dummy13238
188, // dummy13239
19, // dummy13240
0, // dummy13241
0, // dummy13242
70, // dummy13243
83, // dummy13244
255, // dummy13245
255, // dummy13246
73, // dummy13247
0, // dummy13248
0, // dummy13249
0, // dummy13250
0, // dummy13251
65, // dummy13252
14, // dummy13253
8, // dummy13254
133, // dummy13255
2, // dummy13256
68, // dummy13257
13, // dummy13258
5, // dummy13259
68, // dummy13260
131, // dummy13261
3, // dummy13262
126, // dummy13263
195, // dummy13264
65, // dummy13265
197, // dummy13266
12, // dummy13267
4, // dummy13268
4, // dummy13269
0, // dummy13270
32, // dummy13271
0, // dummy13272
0, // dummy13273
0, // dummy13274
224, // dummy13275
19, // dummy13276
0, // dummy13277
0, // dummy13278
107, // dummy13279
83, // dummy13280
255, // dummy13281
255, // dummy13282
72, // dummy13283
0, // dummy13284
0, // dummy13285
0, // dummy13286
0, // dummy13287
65, // dummy13288
14, // dummy13289
8, // dummy13290
133, // dummy13291
2, // dummy13292
68, // dummy13293
13, // dummy13294
5, // dummy13295
68, // dummy13296
131, // dummy13297
3, // dummy13298
125, // dummy13299
195, // dummy13300
65, // dummy13301
197, // dummy13302
12, // dummy13303
4, // dummy13304
4, // dummy13305
0, // dummy13306
32, // dummy13307
0, // dummy13308
0, // dummy13309
0, // dummy13310
4, // dummy13311
20, // dummy13312
0, // dummy13313
0, // dummy13314
143, // dummy13315
83, // dummy13316
255, // dummy13317
255, // dummy13318
69, // dummy13319
0, // dummy13320
0, // dummy13321
0, // dummy13322
0, // dummy13323
65, // dummy13324
14, // dummy13325
8, // dummy13326
133, // dummy13327
2, // dummy13328
66, // dummy13329
13, // dummy13330
5, // dummy13331
68, // dummy13332
131, // dummy13333
3, // dummy13334
124, // dummy13335
195, // dummy13336
65, // dummy13337
197, // dummy13338
12, // dummy13339
4, // dummy13340
4, // dummy13341
0, // dummy13342
40, // dummy13343
0, // dummy13344
0, // dummy13345
0, // dummy13346
40, // dummy13347
20, // dummy13348
0, // dummy13349
0, // dummy13350
176, // dummy13351
83, // dummy13352
255, // dummy13353
255, // dummy13354
87, // dummy13355
0, // dummy13356
0, // dummy13357
0, // dummy13358
0, // dummy13359
65, // dummy13360
14, // dummy13361
8, // dummy13362
133, // dummy13363
2, // dummy13364
66, // dummy13365
13, // dummy13366
5, // dummy13367
70, // dummy13368
135, // dummy13369
3, // dummy13370
134, // dummy13371
4, // dummy13372
131, // dummy13373
5, // dummy13374
2, // dummy13375
74, // dummy13376
195, // dummy13377
65, // dummy13378
198, // dummy13379
65, // dummy13380
199, // dummy13381
65, // dummy13382
197, // dummy13383
12, // dummy13384
4, // dummy13385
4, // dummy13386
40, // dummy13387
0, // dummy13388
0, // dummy13389
0, // dummy13390
84, // dummy13391
20, // dummy13392
0, // dummy13393
0, // dummy13394
219, // dummy13395
83, // dummy13396
255, // dummy13397
255, // dummy13398
86, // dummy13399
0, // dummy13400
0, // dummy13401
0, // dummy13402
0, // dummy13403
65, // dummy13404
14, // dummy13405
8, // dummy13406
133, // dummy13407
2, // dummy13408
66, // dummy13409
13, // dummy13410
5, // dummy13411
70, // dummy13412
135, // dummy13413
3, // dummy13414
134, // dummy13415
4, // dummy13416
131, // dummy13417
5, // dummy13418
2, // dummy13419
73, // dummy13420
195, // dummy13421
65, // dummy13422
198, // dummy13423
65, // dummy13424
199, // dummy13425
65, // dummy13426
197, // dummy13427
12, // dummy13428
4, // dummy13429
4, // dummy13430
32, // dummy13431
0, // dummy13432
0, // dummy13433
0, // dummy13434
128, // dummy13435
20, // dummy13436
0, // dummy13437
0, // dummy13438
5, // dummy13439
84, // dummy13440
255, // dummy13441
255, // dummy13442
69, // dummy13443
0, // dummy13444
0, // dummy13445
0, // dummy13446
0, // dummy13447
65, // dummy13448
14, // dummy13449
8, // dummy13450
133, // dummy13451
2, // dummy13452
66, // dummy13453
13, // dummy13454
5, // dummy13455
68, // dummy13456
131, // dummy13457
3, // dummy13458
124, // dummy13459
195, // dummy13460
65, // dummy13461
197, // dummy13462
12, // dummy13463
4, // dummy13464
4, // dummy13465
0, // dummy13466
40, // dummy13467
0, // dummy13468
0, // dummy13469
0, // dummy13470
164, // dummy13471
20, // dummy13472
0, // dummy13473
0, // dummy13474
38, // dummy13475
84, // dummy13476
255, // dummy13477
255, // dummy13478
87, // dummy13479
0, // dummy13480
0, // dummy13481
0, // dummy13482
0, // dummy13483
65, // dummy13484
14, // dummy13485
8, // dummy13486
133, // dummy13487
2, // dummy13488
66, // dummy13489
13, // dummy13490
5, // dummy13491
70, // dummy13492
135, // dummy13493
3, // dummy13494
134, // dummy13495
4, // dummy13496
131, // dummy13497
5, // dummy13498
2, // dummy13499
74, // dummy13500
195, // dummy13501
65, // dummy13502
198, // dummy13503
65, // dummy13504
199, // dummy13505
65, // dummy13506
197, // dummy13507
12, // dummy13508
4, // dummy13509
4, // dummy13510
40, // dummy13511
0, // dummy13512
0, // dummy13513
0, // dummy13514
208, // dummy13515
20, // dummy13516
0, // dummy13517
0, // dummy13518
81, // dummy13519
84, // dummy13520
255, // dummy13521
255, // dummy13522
86, // dummy13523
0, // dummy13524
0, // dummy13525
0, // dummy13526
0, // dummy13527
65, // dummy13528
14, // dummy13529
8, // dummy13530
133, // dummy13531
2, // dummy13532
66, // dummy13533
13, // dummy13534
5, // dummy13535
70, // dummy13536
135, // dummy13537
3, // dummy13538
134, // dummy13539
4, // dummy13540
131, // dummy13541
5, // dummy13542
2, // dummy13543
73, // dummy13544
195, // dummy13545
65, // dummy13546
198, // dummy13547
65, // dummy13548
199, // dummy13549
65, // dummy13550
197, // dummy13551
12, // dummy13552
4, // dummy13553
4, // dummy13554
44, // dummy13555
0, // dummy13556
0, // dummy13557
0, // dummy13558
252, // dummy13559
20, // dummy13560
0, // dummy13561
0, // dummy13562
123, // dummy13563
84, // dummy13564
255, // dummy13565
255, // dummy13566
0, // dummy13567
15, // dummy13568
0, // dummy13569
0, // dummy13570
0, // dummy13571
65, // dummy13572
14, // dummy13573
8, // dummy13574
133, // dummy13575
2, // dummy13576
66, // dummy13577
13, // dummy13578
5, // dummy13579
70, // dummy13580
135, // dummy13581
3, // dummy13582
134, // dummy13583
4, // dummy13584
131, // dummy13585
5, // dummy13586
3, // dummy13587
243, // dummy13588
14, // dummy13589
195, // dummy13590
65, // dummy13591
198, // dummy13592
65, // dummy13593
199, // dummy13594
65, // dummy13595
197, // dummy13596
12, // dummy13597
4, // dummy13598
4, // dummy13599
0, // dummy13600
0, // dummy13601
0, // dummy13602
44, // dummy13603
0, // dummy13604
0, // dummy13605
0, // dummy13606
44, // dummy13607
21, // dummy13608
0, // dummy13609
0, // dummy13610
75, // dummy13611
99, // dummy13612
255, // dummy13613
255, // dummy13614
76, // dummy13615
3, // dummy13616
0, // dummy13617
0, // dummy13618
0, // dummy13619
65, // dummy13620
14, // dummy13621
8, // dummy13622
133, // dummy13623
2, // dummy13624
66, // dummy13625
13, // dummy13626
5, // dummy13627
70, // dummy13628
135, // dummy13629
3, // dummy13630
134, // dummy13631
4, // dummy13632
131, // dummy13633
5, // dummy13634
3, // dummy13635
63, // dummy13636
3, // dummy13637
195, // dummy13638
65, // dummy13639
198, // dummy13640
65, // dummy13641
199, // dummy13642
65, // dummy13643
197, // dummy13644
12, // dummy13645
4, // dummy13646
4, // dummy13647
0, // dummy13648
0, // dummy13649
0, // dummy13650
28, // dummy13651
0, // dummy13652
0, // dummy13653
0, // dummy13654
92, // dummy13655
21, // dummy13656
0, // dummy13657
0, // dummy13658
103, // dummy13659
102, // dummy13660
255, // dummy13661
255, // dummy13662
52, // dummy13663
0, // dummy13664
0, // dummy13665
0, // dummy13666
0, // dummy13667
65, // dummy13668
14, // dummy13669
8, // dummy13670
133, // dummy13671
2, // dummy13672
68, // dummy13673
13, // dummy13674
5, // dummy13675
110, // dummy13676
197, // dummy13677
12, // dummy13678
4, // dummy13679
4, // dummy13680
0, // dummy13681
0, // dummy13682
28, // dummy13683
0, // dummy13684
0, // dummy13685
0, // dummy13686
124, // dummy13687
21, // dummy13688
0, // dummy13689
0, // dummy13690
123, // dummy13691
102, // dummy13692
255, // dummy13693
255, // dummy13694
204, // dummy13695
1, // dummy13696
0, // dummy13697
0, // dummy13698
0, // dummy13699
65, // dummy13700
14, // dummy13701
8, // dummy13702
133, // dummy13703
2, // dummy13704
66, // dummy13705
13, // dummy13706
5, // dummy13707
3, // dummy13708
200, // dummy13709
1, // dummy13710
197, // dummy13711
12, // dummy13712
4, // dummy13713
4, // dummy13714
28, // dummy13715
0, // dummy13716
0, // dummy13717
0, // dummy13718
156, // dummy13719
21, // dummy13720
0, // dummy13721
0, // dummy13722
39, // dummy13723
104, // dummy13724
255, // dummy13725
255, // dummy13726
19, // dummy13727
0, // dummy13728
0, // dummy13729
0, // dummy13730
0, // dummy13731
65, // dummy13732
14, // dummy13733
8, // dummy13734
133, // dummy13735
2, // dummy13736
66, // dummy13737
13, // dummy13738
5, // dummy13739
79, // dummy13740
197, // dummy13741
12, // dummy13742
4, // dummy13743
4, // dummy13744
0, // dummy13745
0, // dummy13746
28, // dummy13747
0, // dummy13748
0, // dummy13749
0, // dummy13750
188, // dummy13751
21, // dummy13752
0, // dummy13753
0, // dummy13754
26, // dummy13755
104, // dummy13756
255, // dummy13757
255, // dummy13758
16, // dummy13759
1, // dummy13760
0, // dummy13761
0, // dummy13762
0, // dummy13763
65, // dummy13764
14, // dummy13765
8, // dummy13766
133, // dummy13767
2, // dummy13768
66, // dummy13769
13, // dummy13770
5, // dummy13771
3, // dummy13772
8, // dummy13773
1, // dummy13774
197, // dummy13775
12, // dummy13776
4, // dummy13777
4, // dummy13778
36, // dummy13779
0, // dummy13780
0, // dummy13781
0, // dummy13782
220, // dummy13783
21, // dummy13784
0, // dummy13785
0, // dummy13786
10, // dummy13787
105, // dummy13788
255, // dummy13789
255, // dummy13790
37, // dummy13791
1, // dummy13792
0, // dummy13793
0, // dummy13794
0, // dummy13795
65, // dummy13796
14, // dummy13797
8, // dummy13798
133, // dummy13799
2, // dummy13800
66, // dummy13801
13, // dummy13802
5, // dummy13803
68, // dummy13804
131, // dummy13805
3, // dummy13806
3, // dummy13807
28, // dummy13808
1, // dummy13809
195, // dummy13810
65, // dummy13811
197, // dummy13812
12, // dummy13813
4, // dummy13814
4, // dummy13815
0, // dummy13816
0, // dummy13817
0, // dummy13818
28, // dummy13819
0, // dummy13820
0, // dummy13821
0, // dummy13822
4, // dummy13823
22, // dummy13824
0, // dummy13825
0, // dummy13826
7, // dummy13827
106, // dummy13828
255, // dummy13829
255, // dummy13830
134, // dummy13831
0, // dummy13832
0, // dummy13833
0, // dummy13834
0, // dummy13835
65, // dummy13836
14, // dummy13837
8, // dummy13838
133, // dummy13839
2, // dummy13840
66, // dummy13841
13, // dummy13842
5, // dummy13843
2, // dummy13844
130, // dummy13845
197, // dummy13846
12, // dummy13847
4, // dummy13848
4, // dummy13849
0, // dummy13850
28, // dummy13851
0, // dummy13852
0, // dummy13853
0, // dummy13854
36, // dummy13855
22, // dummy13856
0, // dummy13857
0, // dummy13858
109, // dummy13859
106, // dummy13860
255, // dummy13861
255, // dummy13862
80, // dummy13863
0, // dummy13864
0, // dummy13865
0, // dummy13866
0, // dummy13867
65, // dummy13868
14, // dummy13869
8, // dummy13870
133, // dummy13871
2, // dummy13872
66, // dummy13873
13, // dummy13874
5, // dummy13875
2, // dummy13876
76, // dummy13877
197, // dummy13878
12, // dummy13879
4, // dummy13880
4, // dummy13881
0, // dummy13882
44, // dummy13883
0, // dummy13884
0, // dummy13885
0, // dummy13886
68, // dummy13887
22, // dummy13888
0, // dummy13889
0, // dummy13890
157, // dummy13891
106, // dummy13892
255, // dummy13893
255, // dummy13894
209, // dummy13895
1, // dummy13896
0, // dummy13897
0, // dummy13898
0, // dummy13899
65, // dummy13900
14, // dummy13901
8, // dummy13902
133, // dummy13903
2, // dummy13904
68, // dummy13905
13, // dummy13906
5, // dummy13907
73, // dummy13908
135, // dummy13909
3, // dummy13910
134, // dummy13911
4, // dummy13912
131, // dummy13913
5, // dummy13914
3, // dummy13915
191, // dummy13916
1, // dummy13917
195, // dummy13918
65, // dummy13919
198, // dummy13920
65, // dummy13921
199, // dummy13922
65, // dummy13923
197, // dummy13924
12, // dummy13925
4, // dummy13926
4, // dummy13927
0, // dummy13928
0, // dummy13929
0, // dummy13930
40, // dummy13931
0, // dummy13932
0, // dummy13933
0, // dummy13934
116, // dummy13935
22, // dummy13936
0, // dummy13937
0, // dummy13938
62, // dummy13939
108, // dummy13940
255, // dummy13941
255, // dummy13942
227, // dummy13943
1, // dummy13944
0, // dummy13945
0, // dummy13946
0, // dummy13947
65, // dummy13948
14, // dummy13949
8, // dummy13950
133, // dummy13951
2, // dummy13952
66, // dummy13953
13, // dummy13954
5, // dummy13955
66, // dummy13956
134, // dummy13957
3, // dummy13958
131, // dummy13959
4, // dummy13960
3, // dummy13961
219, // dummy13962
1, // dummy13963
195, // dummy13964
65, // dummy13965
198, // dummy13966
65, // dummy13967
197, // dummy13968
12, // dummy13969
4, // dummy13970
4, // dummy13971
0, // dummy13972
0, // dummy13973
0, // dummy13974
28, // dummy13975
0, // dummy13976
0, // dummy13977
0, // dummy13978
160, // dummy13979
22, // dummy13980
0, // dummy13981
0, // dummy13982
245, // dummy13983
109, // dummy13984
255, // dummy13985
255, // dummy13986
174, // dummy13987
1, // dummy13988
0, // dummy13989
0, // dummy13990
0, // dummy13991
65, // dummy13992
14, // dummy13993
8, // dummy13994
133, // dummy13995
2, // dummy13996
66, // dummy13997
13, // dummy13998
5, // dummy13999
3, // dummy14000
166, // dummy14001
1, // dummy14002
197, // dummy14003
12, // dummy14004
4, // dummy14005
4, // dummy14006
44, // dummy14007
0, // dummy14008
0, // dummy14009
0, // dummy14010
192, // dummy14011
22, // dummy14012
0, // dummy14013
0, // dummy14014
131, // dummy14015
111, // dummy14016
255, // dummy14017
255, // dummy14018
180, // dummy14019
10, // dummy14020
0, // dummy14021
0, // dummy14022
0, // dummy14023
65, // dummy14024
14, // dummy14025
8, // dummy14026
133, // dummy14027
2, // dummy14028
71, // dummy14029
13, // dummy14030
5, // dummy14031
70, // dummy14032
135, // dummy14033
3, // dummy14034
134, // dummy14035
4, // dummy14036
131, // dummy14037
5, // dummy14038
3, // dummy14039
162, // dummy14040
10, // dummy14041
195, // dummy14042
65, // dummy14043
198, // dummy14044
65, // dummy14045
199, // dummy14046
65, // dummy14047
197, // dummy14048
12, // dummy14049
4, // dummy14050
4, // dummy14051
0, // dummy14052
0, // dummy14053
0, // dummy14054
44, // dummy14055
0, // dummy14056
0, // dummy14057
0, // dummy14058
240, // dummy14059
22, // dummy14060
0, // dummy14061
0, // dummy14062
7, // dummy14063
122, // dummy14064
255, // dummy14065
255, // dummy14066
131, // dummy14067
5, // dummy14068
0, // dummy14069
0, // dummy14070
0, // dummy14071
65, // dummy14072
14, // dummy14073
8, // dummy14074
133, // dummy14075
2, // dummy14076
66, // dummy14077
13, // dummy14078
5, // dummy14079
70, // dummy14080
135, // dummy14081
3, // dummy14082
134, // dummy14083
4, // dummy14084
131, // dummy14085
5, // dummy14086
3, // dummy14087
118, // dummy14088
5, // dummy14089
195, // dummy14090
65, // dummy14091
198, // dummy14092
65, // dummy14093
199, // dummy14094
65, // dummy14095
197, // dummy14096
12, // dummy14097
4, // dummy14098
4, // dummy14099
0, // dummy14100
0, // dummy14101
0, // dummy14102
32, // dummy14103
0, // dummy14104
0, // dummy14105
0, // dummy14106
32, // dummy14107
23, // dummy14108
0, // dummy14109
0, // dummy14110
90, // dummy14111
127, // dummy14112
255, // dummy14113
255, // dummy14114
132, // dummy14115
0, // dummy14116
0, // dummy14117
0, // dummy14118
0, // dummy14119
65, // dummy14120
14, // dummy14121
8, // dummy14122
133, // dummy14123
2, // dummy14124
68, // dummy14125
13, // dummy14126
5, // dummy14127
71, // dummy14128
131, // dummy14129
3, // dummy14130
2, // dummy14131
118, // dummy14132
195, // dummy14133
65, // dummy14134
197, // dummy14135
12, // dummy14136
4, // dummy14137
4, // dummy14138
44, // dummy14139
0, // dummy14140
0, // dummy14141
0, // dummy14142
68, // dummy14143
23, // dummy14144
0, // dummy14145
0, // dummy14146
186, // dummy14147
127, // dummy14148
255, // dummy14149
255, // dummy14150
232, // dummy14151
21, // dummy14152
0, // dummy14153
0, // dummy14154
0, // dummy14155
65, // dummy14156
14, // dummy14157
8, // dummy14158
133, // dummy14159
2, // dummy14160
68, // dummy14161
13, // dummy14162
5, // dummy14163
70, // dummy14164
135, // dummy14165
3, // dummy14166
134, // dummy14167
4, // dummy14168
131, // dummy14169
5, // dummy14170
3, // dummy14171
217, // dummy14172
21, // dummy14173
195, // dummy14174
65, // dummy14175
198, // dummy14176
65, // dummy14177
199, // dummy14178
65, // dummy14179
197, // dummy14180
12, // dummy14181
4, // dummy14182
4, // dummy14183
0, // dummy14184
0, // dummy14185
0, // dummy14186
36, // dummy14187
0, // dummy14188
0, // dummy14189
0, // dummy14190
116, // dummy14191
23, // dummy14192
0, // dummy14193
0, // dummy14194
114, // dummy14195
149, // dummy14196
255, // dummy14197
255, // dummy14198
218, // dummy14199
0, // dummy14200
0, // dummy14201
0, // dummy14202
0, // dummy14203
65, // dummy14204
14, // dummy14205
8, // dummy14206
133, // dummy14207
2, // dummy14208
66, // dummy14209
13, // dummy14210
5, // dummy14211
66, // dummy14212
134, // dummy14213
3, // dummy14214
131, // dummy14215
4, // dummy14216
2, // dummy14217
210, // dummy14218
195, // dummy14219
65, // dummy14220
198, // dummy14221
65, // dummy14222
197, // dummy14223
12, // dummy14224
4, // dummy14225
4, // dummy14226
32, // dummy14227
0, // dummy14228
0, // dummy14229
0, // dummy14230
156, // dummy14231
23, // dummy14232
0, // dummy14233
0, // dummy14234
32, // dummy14235
157, // dummy14236
255, // dummy14237
255, // dummy14238
95, // dummy14239
0, // dummy14240
0, // dummy14241
0, // dummy14242
0, // dummy14243
65, // dummy14244
14, // dummy14245
8, // dummy14246
133, // dummy14247
2, // dummy14248
66, // dummy14249
13, // dummy14250
5, // dummy14251
68, // dummy14252
131, // dummy14253
3, // dummy14254
2, // dummy14255
87, // dummy14256
197, // dummy14257
195, // dummy14258
12, // dummy14259
4, // dummy14260
4, // dummy14261
0, // dummy14262
20, // dummy14263
0, // dummy14264
0, // dummy14265
0, // dummy14266
0, // dummy14267
0, // dummy14268
0, // dummy14269
0, // dummy14270
1, // dummy14271
122, // dummy14272
82, // dummy14273
0, // dummy14274
1, // dummy14275
124, // dummy14276
8, // dummy14277
1, // dummy14278
27, // dummy14279
12, // dummy14280
4, // dummy14281
4, // dummy14282
136, // dummy14283
1, // dummy14284
0, // dummy14285
0, // dummy14286
24, // dummy14287
0, // dummy14288
0, // dummy14289
0, // dummy14290
28, // dummy14291
0, // dummy14292
0, // dummy14293
0, // dummy14294
116, // dummy14295
151, // dummy14296
255, // dummy14297
255, // dummy14298
32, // dummy14299
0, // dummy14300
0, // dummy14301
0, // dummy14302
0, // dummy14303
67, // dummy14304
14, // dummy14305
32, // dummy14306
84, // dummy14307
14, // dummy14308
24, // dummy14309
67, // dummy14310
14, // dummy14311
32, // dummy14312
0, // dummy14313
0, // dummy14314
20, // dummy14315
0, // dummy14316
0, // dummy14317
0, // dummy14318
0, // dummy14319
0, // dummy14320
0, // dummy14321
0, // dummy14322
1, // dummy14323
122, // dummy14324
82, // dummy14325
0, // dummy14326
1, // dummy14327
124, // dummy14328
8, // dummy14329
1, // dummy14330
27, // dummy14331
12, // dummy14332
4, // dummy14333
4, // dummy14334
136, // dummy14335
1, // dummy14336
0, // dummy14337
0, // dummy14338
16, // dummy14339
0, // dummy14340
0, // dummy14341
0, // dummy14342
28, // dummy14343
0, // dummy14344
0, // dummy14345
0, // dummy14346
96, // dummy14347
151, // dummy14348
255, // dummy14349
255, // dummy14350
2, // dummy14351
0, // dummy14352
0, // dummy14353
0, // dummy14354
0, // dummy14355
0, // dummy14356
0, // dummy14357
0, // dummy14358
20, // dummy14359
0, // dummy14360
0, // dummy14361
0, // dummy14362
0, // dummy14363
0, // dummy14364
0, // dummy14365
0, // dummy14366
1, // dummy14367
122, // dummy14368
82, // dummy14369
0, // dummy14370
1, // dummy14371
124, // dummy14372
8, // dummy14373
1, // dummy14374
27, // dummy14375
12, // dummy14376
4, // dummy14377
4, // dummy14378
136, // dummy14379
1, // dummy14380
0, // dummy14381
0, // dummy14382
16, // dummy14383
0, // dummy14384
0, // dummy14385
0, // dummy14386
28, // dummy14387
0, // dummy14388
0, // dummy14389
0, // dummy14390
68, // dummy14391
151, // dummy14392
255, // dummy14393
255, // dummy14394
2, // dummy14395
0, // dummy14396
0, // dummy14397
0, // dummy14398
0, // dummy14399
0, // dummy14400
0, // dummy14401
0, // dummy14402
20, // dummy14403
0, // dummy14404
0, // dummy14405
0, // dummy14406
0, // dummy14407
0, // dummy14408
0, // dummy14409
0, // dummy14410
1, // dummy14411
122, // dummy14412
82, // dummy14413
0, // dummy14414
1, // dummy14415
124, // dummy14416
8, // dummy14417
1, // dummy14418
27, // dummy14419
12, // dummy14420
4, // dummy14421
4, // dummy14422
136, // dummy14423
1, // dummy14424
0, // dummy14425
0, // dummy14426
16, // dummy14427
0, // dummy14428
0, // dummy14429
0, // dummy14430
28, // dummy14431
0, // dummy14432
0, // dummy14433
0, // dummy14434
40, // dummy14435
151, // dummy14436
255, // dummy14437
255, // dummy14438
2, // dummy14439
0, // dummy14440
0, // dummy14441
0, // dummy14442
0, // dummy14443
0, // dummy14444
0, // dummy14445
0, // dummy14446
20, // dummy14447
0, // dummy14448
0, // dummy14449
0, // dummy14450
0, // dummy14451
0, // dummy14452
0, // dummy14453
0, // dummy14454
1, // dummy14455
122, // dummy14456
82, // dummy14457
0, // dummy14458
1, // dummy14459
124, // dummy14460
8, // dummy14461
1, // dummy14462
27, // dummy14463
12, // dummy14464
4, // dummy14465
4, // dummy14466
136, // dummy14467
1, // dummy14468
0, // dummy14469
0, // dummy14470
16, // dummy14471
0, // dummy14472
0, // dummy14473
0, // dummy14474
28, // dummy14475
0, // dummy14476
0, // dummy14477
0, // dummy14478
12, // dummy14479
151, // dummy14480
255, // dummy14481
255, // dummy14482
2, // dummy14483
0, // dummy14484
0, // dummy14485
0, // dummy14486
0, // dummy14487
0, // dummy14488
0, // dummy14489
0, // dummy14490
20, // dummy14491
0, // dummy14492
0, // dummy14493
0, // dummy14494
0, // dummy14495
0, // dummy14496
0, // dummy14497
0, // dummy14498
1, // dummy14499
122, // dummy14500
82, // dummy14501
0, // dummy14502
1, // dummy14503
124, // dummy14504
8, // dummy14505
1, // dummy14506
27, // dummy14507
12, // dummy14508
4, // dummy14509
4, // dummy14510
136, // dummy14511
1, // dummy14512
0, // dummy14513
0, // dummy14514
52, // dummy14515
0, // dummy14516
0, // dummy14517
0, // dummy14518
28, // dummy14519
0, // dummy14520
0, // dummy14521
0, // dummy14522
240, // dummy14523
150, // dummy14524
255, // dummy14525
255, // dummy14526
29, // dummy14527
3, // dummy14528
0, // dummy14529
0, // dummy14530
0, // dummy14531
65, // dummy14532
14, // dummy14533
8, // dummy14534
134, // dummy14535
2, // dummy14536
65, // dummy14537
14, // dummy14538
12, // dummy14539
131, // dummy14540
3, // dummy14541
67, // dummy14542
14, // dummy14543
32, // dummy14544
3, // dummy14545
138, // dummy14546
1, // dummy14547
14, // dummy14548
28, // dummy14549
67, // dummy14550
14, // dummy14551
32, // dummy14552
2, // dummy14553
76, // dummy14554
10, // dummy14555
14, // dummy14556
12, // dummy14557
70, // dummy14558
195, // dummy14559
14, // dummy14560
8, // dummy14561
65, // dummy14562
198, // dummy14563
14, // dummy14564
4, // dummy14565
75, // dummy14566
11, // dummy14567
0, // dummy14568
0, // dummy14569
0, // dummy14570
20, // dummy14571
0, // dummy14572
0, // dummy14573
0, // dummy14574
0, // dummy14575
0, // dummy14576
0, // dummy14577
0, // dummy14578
1, // dummy14579
122, // dummy14580
82, // dummy14581
0, // dummy14582
1, // dummy14583
124, // dummy14584
8, // dummy14585
1, // dummy14586
27, // dummy14587
12, // dummy14588
4, // dummy14589
4, // dummy14590
136, // dummy14591
1, // dummy14592
0, // dummy14593
0, // dummy14594
28, // dummy14595
0, // dummy14596
0, // dummy14597
0, // dummy14598
28, // dummy14599
0, // dummy14600
0, // dummy14601
0, // dummy14602
192, // dummy14603
153, // dummy14604
255, // dummy14605
255, // dummy14606
41, // dummy14607
0, // dummy14608
0, // dummy14609
0, // dummy14610
0, // dummy14611
67, // dummy14612
14, // dummy14613
32, // dummy14614
95, // dummy14615
14, // dummy14616
20, // dummy14617
67, // dummy14618
14, // dummy14619
32, // dummy14620
67, // dummy14621
14, // dummy14622
4, // dummy14623
0, // dummy14624
0, // dummy14625
0, // dummy14626
44, // dummy14627
0, // dummy14628
0, // dummy14629
0, // dummy14630
60, // dummy14631
0, // dummy14632
0, // dummy14633
0, // dummy14634
208, // dummy14635
153, // dummy14636
255, // dummy14637
255, // dummy14638
246, // dummy14639
0, // dummy14640
0, // dummy14641
0, // dummy14642
0, // dummy14643
67, // dummy14644
14, // dummy14645
48, // dummy14646
116, // dummy14647
10, // dummy14648
14, // dummy14649
4, // dummy14650
73, // dummy14651
11, // dummy14652
83, // dummy14653
10, // dummy14654
14, // dummy14655
4, // dummy14656
77, // dummy14657
11, // dummy14658
72, // dummy14659
10, // dummy14660
14, // dummy14661
4, // dummy14662
72, // dummy14663
11, // dummy14664
84, // dummy14665
14, // dummy14666
36, // dummy14667
67, // dummy14668
14, // dummy14669
48, // dummy14670
2, // dummy14671
105, // dummy14672
14, // dummy14673
4, // dummy14674
16, // dummy14675
0, // dummy14676
0, // dummy14677
0, // dummy14678
108, // dummy14679
0, // dummy14680
0, // dummy14681
0, // dummy14682
160, // dummy14683
154, // dummy14684
255, // dummy14685
255, // dummy14686
5, // dummy14687
0, // dummy14688
0, // dummy14689
0, // dummy14690
0, // dummy14691
0, // dummy14692
0, // dummy14693
0, // dummy14694
20, // dummy14695
0, // dummy14696
0, // dummy14697
0, // dummy14698
0, // dummy14699
0, // dummy14700
0, // dummy14701
0, // dummy14702
1, // dummy14703
122, // dummy14704
82, // dummy14705
0, // dummy14706
1, // dummy14707
124, // dummy14708
8, // dummy14709
1, // dummy14710
27, // dummy14711
12, // dummy14712
4, // dummy14713
4, // dummy14714
136, // dummy14715
1, // dummy14716
0, // dummy14717
0, // dummy14718
16, // dummy14719
0, // dummy14720
0, // dummy14721
0, // dummy14722
28, // dummy14723
0, // dummy14724
0, // dummy14725
0, // dummy14726
132, // dummy14727
154, // dummy14728
255, // dummy14729
255, // dummy14730
8, // dummy14731
0, // dummy14732
0, // dummy14733
0, // dummy14734
0, // dummy14735
0, // dummy14736
0, // dummy14737
0, // dummy14738
20, // dummy14739
0, // dummy14740
0, // dummy14741
0, // dummy14742
0, // dummy14743
0, // dummy14744
0, // dummy14745
0, // dummy14746
1, // dummy14747
122, // dummy14748
82, // dummy14749
0, // dummy14750
1, // dummy14751
124, // dummy14752
8, // dummy14753
1, // dummy14754
27, // dummy14755
12, // dummy14756
4, // dummy14757
4, // dummy14758
136, // dummy14759
1, // dummy14760
0, // dummy14761
0, // dummy14762
16, // dummy14763
0, // dummy14764
0, // dummy14765
0, // dummy14766
28, // dummy14767
0, // dummy14768
0, // dummy14769
0, // dummy14770
104, // dummy14771
154, // dummy14772
255, // dummy14773
255, // dummy14774
2, // dummy14775
0, // dummy14776
0, // dummy14777
0, // dummy14778
0, // dummy14779
0, // dummy14780
0, // dummy14781
0, // dummy14782
20, // dummy14783
0, // dummy14784
0, // dummy14785
0, // dummy14786
0, // dummy14787
0, // dummy14788
0, // dummy14789
0, // dummy14790
1, // dummy14791
122, // dummy14792
82, // dummy14793
0, // dummy14794
1, // dummy14795
124, // dummy14796
8, // dummy14797
1, // dummy14798
27, // dummy14799
12, // dummy14800
4, // dummy14801
4, // dummy14802
136, // dummy14803
1, // dummy14804
0, // dummy14805
0, // dummy14806
36, // dummy14807
0, // dummy14808
0, // dummy14809
0, // dummy14810
28, // dummy14811
0, // dummy14812
0, // dummy14813
0, // dummy14814
140, // dummy14815
154, // dummy14816
255, // dummy14817
255, // dummy14818
52, // dummy14819
0, // dummy14820
0, // dummy14821
0, // dummy14822
0, // dummy14823
65, // dummy14824
14, // dummy14825
8, // dummy14826
131, // dummy14827
2, // dummy14828
67, // dummy14829
14, // dummy14830
32, // dummy14831
88, // dummy14832
14, // dummy14833
24, // dummy14834
67, // dummy14835
14, // dummy14836
32, // dummy14837
79, // dummy14838
14, // dummy14839
8, // dummy14840
65, // dummy14841
195, // dummy14842
14, // dummy14843
4, // dummy14844
0, // dummy14845
0, // dummy14846
0, // dummy14847
0, // dummy14848
0, // dummy14849
0, // dummy14850
20, // dummy14851
0, // dummy14852
0, // dummy14853
0, // dummy14854
0, // dummy14855
0, // dummy14856
0, // dummy14857
0, // dummy14858
1, // dummy14859
122, // dummy14860
82, // dummy14861
0, // dummy14862
1, // dummy14863
124, // dummy14864
8, // dummy14865
1, // dummy14866
27, // dummy14867
12, // dummy14868
4, // dummy14869
4, // dummy14870
136, // dummy14871
1, // dummy14872
0, // dummy14873
0, // dummy14874
28, // dummy14875
0, // dummy14876
0, // dummy14877
0, // dummy14878
28, // dummy14879
0, // dummy14880
0, // dummy14881
0, // dummy14882
248, // dummy14883
154, // dummy14884
255, // dummy14885
255, // dummy14886
9, // dummy14887
0, // dummy14888
0, // dummy14889
0, // dummy14890
0, // dummy14891
65, // dummy14892
14, // dummy14893
8, // dummy14894
133, // dummy14895
2, // dummy14896
66, // dummy14897
13, // dummy14898
5, // dummy14899
65, // dummy14900
197, // dummy14901
12, // dummy14902
4, // dummy14903
4, // dummy14904
0, // dummy14905
0, // dummy14906
0, // dummy14907
0, // dummy14908
0, // dummy14909
0, // dummy14910
0, // dummy14911
0, // dummy14912
0, // dummy14913
/*
0, // dummy14914
0, // dummy14915
0, // dummy14916
0, // dummy14917
0, // dummy14918
0, // dummy14919
0, // dummy14920
0, // dummy14921
0, // dummy14922
0, // dummy14923
0, // dummy14924
0, // dummy14925
0, // dummy14926
0, // dummy14927
0, // dummy14928
0, // dummy14929
0, // dummy14930
0, // dummy14931
0, // dummy14932
0, // dummy14933
0, // dummy14934
0, // dummy14935
0, // dummy14936
0, // dummy14937
0, // dummy14938
0, // dummy14939
0, // dummy14940
0, // dummy14941
0, // dummy14942
0, // dummy14943
0, // dummy14944
0, // dummy14945
0, // dummy14946
0, // dummy14947
0, // dummy14948
0, // dummy14949
0, // dummy14950
0, // dummy14951
0, // dummy14952
0, // dummy14953
0, // dummy14954
0, // dummy14955
0, // dummy14956
0, // dummy14957
0, // dummy14958
0, // dummy14959
0, // dummy14960
0, // dummy14961
0, // dummy14962
0, // dummy14963
0, // dummy14964
0, // dummy14965
0, // dummy14966
0, // dummy14967
0, // dummy14968
0, // dummy14969
0, // dummy14970
0, // dummy14971
0, // dummy14972
0, // dummy14973
0, // dummy14974
0, // dummy14975
0, // dummy14976
0, // dummy14977
0, // dummy14978
0, // dummy14979
0, // dummy14980
0, // dummy14981
0, // dummy14982
0, // dummy14983
0, // dummy14984
0, // dummy14985
0, // dummy14986
0, // dummy14987
0, // dummy14988
0, // dummy14989
0, // dummy14990
0, // dummy14991
0, // dummy14992
0, // dummy14993
0, // dummy14994
0, // dummy14995
0, // dummy14996
0, // dummy14997
0, // dummy14998
0, // dummy14999
0, // dummy15000
0, // dummy15001
0, // dummy15002
0, // dummy15003
0, // dummy15004
0, // dummy15005
0, // dummy15006
0, // dummy15007
0, // dummy15008
0, // dummy15009
0, // dummy15010
0, // dummy15011
0, // dummy15012
0, // dummy15013
0, // dummy15014
0, // dummy15015
0, // dummy15016
0, // dummy15017
0, // dummy15018
0, // dummy15019
0, // dummy15020
0, // dummy15021
0, // dummy15022
0, // dummy15023
0, // dummy15024
0, // dummy15025
0, // dummy15026
0, // dummy15027
0, // dummy15028
0, // dummy15029
0, // dummy15030
0, // dummy15031
0, // dummy15032
0, // dummy15033
0, // dummy15034
0, // dummy15035
0, // dummy15036
0, // dummy15037
0, // dummy15038
0, // dummy15039
0, // dummy15040
0, // dummy15041
0, // dummy15042
0, // dummy15043
0, // dummy15044
0, // dummy15045
0, // dummy15046
0, // dummy15047
0, // dummy15048
0, // dummy15049
0, // dummy15050
0, // dummy15051
0, // dummy15052
0, // dummy15053
0, // dummy15054
0, // dummy15055
0, // dummy15056
0, // dummy15057
0, // dummy15058
0, // dummy15059
0, // dummy15060
0, // dummy15061
0, // dummy15062
0, // dummy15063
0, // dummy15064
0, // dummy15065
0, // dummy15066
0, // dummy15067
0, // dummy15068
0, // dummy15069
0, // dummy15070
0, // dummy15071
0, // dummy15072
0, // dummy15073
0, // dummy15074
0, // dummy15075
0, // dummy15076
0, // dummy15077
0, // dummy15078
0, // dummy15079
0, // dummy15080
0, // dummy15081
0, // dummy15082
0, // dummy15083
0, // dummy15084
0, // dummy15085
0, // dummy15086
0, // dummy15087
0, // dummy15088
0, // dummy15089
0, // dummy15090
0, // dummy15091
0, // dummy15092
0, // dummy15093
0, // dummy15094
0, // dummy15095
0, // dummy15096
0, // dummy15097
0, // dummy15098
0, // dummy15099
0, // dummy15100
0, // dummy15101
0, // dummy15102
0, // dummy15103
0, // dummy15104
0, // dummy15105
0, // dummy15106
0, // dummy15107
0, // dummy15108
0, // dummy15109
0, // dummy15110
0, // dummy15111
0, // dummy15112
0, // dummy15113
0, // dummy15114
0, // dummy15115
0, // dummy15116
0, // dummy15117
0, // dummy15118
0, // dummy15119
0, // dummy15120
0, // dummy15121
0, // dummy15122
0, // dummy15123
0, // dummy15124
0, // dummy15125
0, // dummy15126
0, // dummy15127
0, // dummy15128
0, // dummy15129
0, // dummy15130
0, // dummy15131
0, // dummy15132
0, // dummy15133
0, // dummy15134
0, // dummy15135
0, // dummy15136
0, // dummy15137
0, // dummy15138
0, // dummy15139
0, // dummy15140
0, // dummy15141
0, // dummy15142
0, // dummy15143
0, // dummy15144
0, // dummy15145
0, // dummy15146
0, // dummy15147
0, // dummy15148
0, // dummy15149
0, // dummy15150
0, // dummy15151
0, // dummy15152
0, // dummy15153
0, // dummy15154
0, // dummy15155
0, // dummy15156
0, // dummy15157
0, // dummy15158
0, // dummy15159
0, // dummy15160
0, // dummy15161
0, // dummy15162
0, // dummy15163
0, // dummy15164
0, // dummy15165
0, // dummy15166
0, // dummy15167
0, // dummy15168
0, // dummy15169
0, // dummy15170
0, // dummy15171
0, // dummy15172
0, // dummy15173
0, // dummy15174
0, // dummy15175
0, // dummy15176
0, // dummy15177
0, // dummy15178
0, // dummy15179
0, // dummy15180
0, // dummy15181
0, // dummy15182
0, // dummy15183
0, // dummy15184
0, // dummy15185
0, // dummy15186
0, // dummy15187
0, // dummy15188
0, // dummy15189
0, // dummy15190
0, // dummy15191
0, // dummy15192
0, // dummy15193
0, // dummy15194
0, // dummy15195
0, // dummy15196
0, // dummy15197
0, // dummy15198
0, // dummy15199
0, // dummy15200
0, // dummy15201
0, // dummy15202
0, // dummy15203
0, // dummy15204
0, // dummy15205
0, // dummy15206
0, // dummy15207
0, // dummy15208
0, // dummy15209
0, // dummy15210
0, // dummy15211
0, // dummy15212
0, // dummy15213
0, // dummy15214
0, // dummy15215
0, // dummy15216
0, // dummy15217
0, // dummy15218
0, // dummy15219
0, // dummy15220
0, // dummy15221
0, // dummy15222
0, // dummy15223
0, // dummy15224
0, // dummy15225
0, // dummy15226
0, // dummy15227
0, // dummy15228
0, // dummy15229
0, // dummy15230
0, // dummy15231
0, // dummy15232
0, // dummy15233
0, // dummy15234
0, // dummy15235
0, // dummy15236
0, // dummy15237
0, // dummy15238
0, // dummy15239
0, // dummy15240
0, // dummy15241
0, // dummy15242
0, // dummy15243
0, // dummy15244
0, // dummy15245
0, // dummy15246
0, // dummy15247
0, // dummy15248
0, // dummy15249
0, // dummy15250
0, // dummy15251
0, // dummy15252
0, // dummy15253
0, // dummy15254
0, // dummy15255
0, // dummy15256
0, // dummy15257
0, // dummy15258
0, // dummy15259
0, // dummy15260
0, // dummy15261
0, // dummy15262
0, // dummy15263
0, // dummy15264
0, // dummy15265
0, // dummy15266
0, // dummy15267
0, // dummy15268
0, // dummy15269
0, // dummy15270
0, // dummy15271
0, // dummy15272
0, // dummy15273
0, // dummy15274
0, // dummy15275
0, // dummy15276
0, // dummy15277
0, // dummy15278
0, // dummy15279
0, // dummy15280
0, // dummy15281
0, // dummy15282
0, // dummy15283
0, // dummy15284
0, // dummy15285
0, // dummy15286
0, // dummy15287
0, // dummy15288
0, // dummy15289
0, // dummy15290
0, // dummy15291
0, // dummy15292
0, // dummy15293
0, // dummy15294
0, // dummy15295
0, // dummy15296
0, // dummy15297
0, // dummy15298
0, // dummy15299
0, // dummy15300
0, // dummy15301
0, // dummy15302
0, // dummy15303
0, // dummy15304
0, // dummy15305
0, // dummy15306
0, // dummy15307
0, // dummy15308
0, // dummy15309
0, // dummy15310
0, // dummy15311
0, // dummy15312
0, // dummy15313
0, // dummy15314
0, // dummy15315
0, // dummy15316
0, // dummy15317
0, // dummy15318
0, // dummy15319
0, // dummy15320
0, // dummy15321
0, // dummy15322
0, // dummy15323
0, // dummy15324
0, // dummy15325
0, // dummy15326
0, // dummy15327
0, // dummy15328
0, // dummy15329
0, // dummy15330
0, // dummy15331
0, // dummy15332
0, // dummy15333
0, // dummy15334
0, // dummy15335
0, // dummy15336
0, // dummy15337
0, // dummy15338
0, // dummy15339
0, // dummy15340
0, // dummy15341
0, // dummy15342
0, // dummy15343
0, // dummy15344
0, // dummy15345
0, // dummy15346
0, // dummy15347
0, // dummy15348
0, // dummy15349
0, // dummy15350
0, // dummy15351
0, // dummy15352
0, // dummy15353
0, // dummy15354
0, // dummy15355
0, // dummy15356
0, // dummy15357
0, // dummy15358
0, // dummy15359
0, // dummy15360
0, // dummy15361
0, // dummy15362
0, // dummy15363
0, // dummy15364
0, // dummy15365
0, // dummy15366
0, // dummy15367
0, // dummy15368
0, // dummy15369
0, // dummy15370
0, // dummy15371
0, // dummy15372
0, // dummy15373
0, // dummy15374
0, // dummy15375
0, // dummy15376
0, // dummy15377
0, // dummy15378
0, // dummy15379
0, // dummy15380
0, // dummy15381
0, // dummy15382
0, // dummy15383
0, // dummy15384
0, // dummy15385
0, // dummy15386
0, // dummy15387
0, // dummy15388
0, // dummy15389
0, // dummy15390
0, // dummy15391
0, // dummy15392
0, // dummy15393
0, // dummy15394
0, // dummy15395
0, // dummy15396
0, // dummy15397
0, // dummy15398
0, // dummy15399
0, // dummy15400
0, // dummy15401
0, // dummy15402
0, // dummy15403
0, // dummy15404
0, // dummy15405
0, // dummy15406
0, // dummy15407
0, // dummy15408
0, // dummy15409
0, // dummy15410
0, // dummy15411
0, // dummy15412
0, // dummy15413
0, // dummy15414
0, // dummy15415
0, // dummy15416
0, // dummy15417
0, // dummy15418
0, // dummy15419
0, // dummy15420
0, // dummy15421
0, // dummy15422
0, // dummy15423
0, // dummy15424
0, // dummy15425
0, // dummy15426
0, // dummy15427
0, // dummy15428
0, // dummy15429
0, // dummy15430
0, // dummy15431
0, // dummy15432
0, // dummy15433
0, // dummy15434
0, // dummy15435
0, // dummy15436
0, // dummy15437
0, // dummy15438
0, // dummy15439
0, // dummy15440
0, // dummy15441
0, // dummy15442
0, // dummy15443
0, // dummy15444
0, // dummy15445
0, // dummy15446
0, // dummy15447
0, // dummy15448
0, // dummy15449
0, // dummy15450
0, // dummy15451
0, // dummy15452
0, // dummy15453
0, // dummy15454
0, // dummy15455
0, // dummy15456
0, // dummy15457
0, // dummy15458
0, // dummy15459
0, // dummy15460
0, // dummy15461
0, // dummy15462
0, // dummy15463
0, // dummy15464
0, // dummy15465
0, // dummy15466
0, // dummy15467
0, // dummy15468
0, // dummy15469
0, // dummy15470
0, // dummy15471
0, // dummy15472
0, // dummy15473
0, // dummy15474
0, // dummy15475
0, // dummy15476
0, // dummy15477
0, // dummy15478
0, // dummy15479
0, // dummy15480
0, // dummy15481
0, // dummy15482
0, // dummy15483
0, // dummy15484
0, // dummy15485
0, // dummy15486
0, // dummy15487
0, // dummy15488
0, // dummy15489
0, // dummy15490
0, // dummy15491
0, // dummy15492
0, // dummy15493
0, // dummy15494
0, // dummy15495
0, // dummy15496
0, // dummy15497
0, // dummy15498
0, // dummy15499
0, // dummy15500
0, // dummy15501
0, // dummy15502
0, // dummy15503
0, // dummy15504
0, // dummy15505
0, // dummy15506
0, // dummy15507
0, // dummy15508
0, // dummy15509
0, // dummy15510
0, // dummy15511
0, // dummy15512
0, // dummy15513
0, // dummy15514
0, // dummy15515
0, // dummy15516
0, // dummy15517
0, // dummy15518
0, // dummy15519
0, // dummy15520
0, // dummy15521
0, // dummy15522
0, // dummy15523
0, // dummy15524
0, // dummy15525
0, // dummy15526
0, // dummy15527
0, // dummy15528
0, // dummy15529
0, // dummy15530
0, // dummy15531
0, // dummy15532
0, // dummy15533
0, // dummy15534
0, // dummy15535
0, // dummy15536
0, // dummy15537
0, // dummy15538
0, // dummy15539
0, // dummy15540
0, // dummy15541
0, // dummy15542
0, // dummy15543
0, // dummy15544
0, // dummy15545
0, // dummy15546
0, // dummy15547
0, // dummy15548
0, // dummy15549
0, // dummy15550
0, // dummy15551
0, // dummy15552
0, // dummy15553
0, // dummy15554
0, // dummy15555
0, // dummy15556
0, // dummy15557
0, // dummy15558
0, // dummy15559
0, // dummy15560
0, // dummy15561
0, // dummy15562
0, // dummy15563
0, // dummy15564
0, // dummy15565
0, // dummy15566
0, // dummy15567
0, // dummy15568
0, // dummy15569
0, // dummy15570
0, // dummy15571
0, // dummy15572
0, // dummy15573
0, // dummy15574
0, // dummy15575
0, // dummy15576
0, // dummy15577
0, // dummy15578
0, // dummy15579
0, // dummy15580
0, // dummy15581
0, // dummy15582
0, // dummy15583
0, // dummy15584
0, // dummy15585
0, // dummy15586
0, // dummy15587
0, // dummy15588
0, // dummy15589
0, // dummy15590
0, // dummy15591
0, // dummy15592
0, // dummy15593
0, // dummy15594
0, // dummy15595
0, // dummy15596
0, // dummy15597
0, // dummy15598
0, // dummy15599
0, // dummy15600
0, // dummy15601
0, // dummy15602
0, // dummy15603
0, // dummy15604
0, // dummy15605
0, // dummy15606
0, // dummy15607
0, // dummy15608
0, // dummy15609
0, // dummy15610
0, // dummy15611
0, // dummy15612
0, // dummy15613
0, // dummy15614
0, // dummy15615
0, // dummy15616
0, // dummy15617
0, // dummy15618
0, // dummy15619
0, // dummy15620
0, // dummy15621
0, // dummy15622
0, // dummy15623
0, // dummy15624
0, // dummy15625
0, // dummy15626
0, // dummy15627
0, // dummy15628
0, // dummy15629
0, // dummy15630
0, // dummy15631
0, // dummy15632
0, // dummy15633
0, // dummy15634
0, // dummy15635
0, // dummy15636
0, // dummy15637
0, // dummy15638
0, // dummy15639
0, // dummy15640
0, // dummy15641
0, // dummy15642
0, // dummy15643
0, // dummy15644
0, // dummy15645
0, // dummy15646
0, // dummy15647
0, // dummy15648
0, // dummy15649
0, // dummy15650
0, // dummy15651
0, // dummy15652
0, // dummy15653
0, // dummy15654
0, // dummy15655
0, // dummy15656
0, // dummy15657
0, // dummy15658
0, // dummy15659
0, // dummy15660
0, // dummy15661
0, // dummy15662
0, // dummy15663
0, // dummy15664
0, // dummy15665
0, // dummy15666
0, // dummy15667
0, // dummy15668
0, // dummy15669
0, // dummy15670
0, // dummy15671
0, // dummy15672
0, // dummy15673
0, // dummy15674
0, // dummy15675
0, // dummy15676
0, // dummy15677
0, // dummy15678
0, // dummy15679
0, // dummy15680
0, // dummy15681
0, // dummy15682
0, // dummy15683
0, // dummy15684
0, // dummy15685
0, // dummy15686
0, // dummy15687
0, // dummy15688
0, // dummy15689
0, // dummy15690
0, // dummy15691
0, // dummy15692
0, // dummy15693
0, // dummy15694
0, // dummy15695
0, // dummy15696
0, // dummy15697
0, // dummy15698
0, // dummy15699
0, // dummy15700
0, // dummy15701
0, // dummy15702
0, // dummy15703
0, // dummy15704
0, // dummy15705
0, // dummy15706
0, // dummy15707
0, // dummy15708
0, // dummy15709
0, // dummy15710
0, // dummy15711
0, // dummy15712
0, // dummy15713
0, // dummy15714
0, // dummy15715
0, // dummy15716
0, // dummy15717
0, // dummy15718
0, // dummy15719
0, // dummy15720
0, // dummy15721
0, // dummy15722
0, // dummy15723
0, // dummy15724
0, // dummy15725
0, // dummy15726
0, // dummy15727
0, // dummy15728
0, // dummy15729
0, // dummy15730
0, // dummy15731
0, // dummy15732
0, // dummy15733
0, // dummy15734
0, // dummy15735
0, // dummy15736
0, // dummy15737
0, // dummy15738
0, // dummy15739
0, // dummy15740
0, // dummy15741
0, // dummy15742
0, // dummy15743
0, // dummy15744
0, // dummy15745
0, // dummy15746
0, // dummy15747
0, // dummy15748
0, // dummy15749
0, // dummy15750
0, // dummy15751
0, // dummy15752
0, // dummy15753
0, // dummy15754
0, // dummy15755
0, // dummy15756
0, // dummy15757
0, // dummy15758
0, // dummy15759
0, // dummy15760
0, // dummy15761
0, // dummy15762
0, // dummy15763
0, // dummy15764
0, // dummy15765
0, // dummy15766
0, // dummy15767
0, // dummy15768
0, // dummy15769
0, // dummy15770
0, // dummy15771
0, // dummy15772
0, // dummy15773
0, // dummy15774
0, // dummy15775
0, // dummy15776
0, // dummy15777
0, // dummy15778
0, // dummy15779
0, // dummy15780
0, // dummy15781
0, // dummy15782
0, // dummy15783
0, // dummy15784
0, // dummy15785
0, // dummy15786
0, // dummy15787
0, // dummy15788
0, // dummy15789
0, // dummy15790
0, // dummy15791
0, // dummy15792
0, // dummy15793
0, // dummy15794
0, // dummy15795
0, // dummy15796
0, // dummy15797
0, // dummy15798
0, // dummy15799
0, // dummy15800
0, // dummy15801
0, // dummy15802
0, // dummy15803
0, // dummy15804
0, // dummy15805
0, // dummy15806
0, // dummy15807
0, // dummy15808
0, // dummy15809
0, // dummy15810
0, // dummy15811
0, // dummy15812
0, // dummy15813
0, // dummy15814
0, // dummy15815
0, // dummy15816
0, // dummy15817
0, // dummy15818
0, // dummy15819
0, // dummy15820
0, // dummy15821
0, // dummy15822
0, // dummy15823
0, // dummy15824
0, // dummy15825
0, // dummy15826
0, // dummy15827
0, // dummy15828
0, // dummy15829
0, // dummy15830
0, // dummy15831
0, // dummy15832
0, // dummy15833
0, // dummy15834
0, // dummy15835
0, // dummy15836
0, // dummy15837
0, // dummy15838
0, // dummy15839
0, // dummy15840
0, // dummy15841
0, // dummy15842
0, // dummy15843
0, // dummy15844
0, // dummy15845
0, // dummy15846
0, // dummy15847
0, // dummy15848
0, // dummy15849
0, // dummy15850
0, // dummy15851
0, // dummy15852
0, // dummy15853
0, // dummy15854
0, // dummy15855
0, // dummy15856
0, // dummy15857
0, // dummy15858
0, // dummy15859
0, // dummy15860
0, // dummy15861
0, // dummy15862
0, // dummy15863
0, // dummy15864
0, // dummy15865
0, // dummy15866
0, // dummy15867
0, // dummy15868
0, // dummy15869
0, // dummy15870
0, // dummy15871
0, // dummy15872
0, // dummy15873
0, // dummy15874
0, // dummy15875
0, // dummy15876
0, // dummy15877
0, // dummy15878
0, // dummy15879
0, // dummy15880
0, // dummy15881
0, // dummy15882
0, // dummy15883
0, // dummy15884
0, // dummy15885
0, // dummy15886
0, // dummy15887
0, // dummy15888
0, // dummy15889
0, // dummy15890
0, // dummy15891
0, // dummy15892
0, // dummy15893
0, // dummy15894
0, // dummy15895
0, // dummy15896
0, // dummy15897
0, // dummy15898
0, // dummy15899
0, // dummy15900
0, // dummy15901
0, // dummy15902
0, // dummy15903
0, // dummy15904
0, // dummy15905
0, // dummy15906
0, // dummy15907
0, // dummy15908
0, // dummy15909
0, // dummy15910
0, // dummy15911
0, // dummy15912
0, // dummy15913
0, // dummy15914
0, // dummy15915
0, // dummy15916
0, // dummy15917
0, // dummy15918
0, // dummy15919
0, // dummy15920
0, // dummy15921
0, // dummy15922
0, // dummy15923
0, // dummy15924
0, // dummy15925
0, // dummy15926
0, // dummy15927
0, // dummy15928
0, // dummy15929
0, // dummy15930
0, // dummy15931
0, // dummy15932
0, // dummy15933
0, // dummy15934
0, // dummy15935
0, // dummy15936
0, // dummy15937
0, // dummy15938
0, // dummy15939
0, // dummy15940
0, // dummy15941
0, // dummy15942
0, // dummy15943
0, // dummy15944
0, // dummy15945
0, // dummy15946
0, // dummy15947
0, // dummy15948
0, // dummy15949
0, // dummy15950
0, // dummy15951
0, // dummy15952
0, // dummy15953
0, // dummy15954
0, // dummy15955
0, // dummy15956
0, // dummy15957
0, // dummy15958
0, // dummy15959
0, // dummy15960
0, // dummy15961
0, // dummy15962
0, // dummy15963
0, // dummy15964
0, // dummy15965
0, // dummy15966
0, // dummy15967
0, // dummy15968
0, // dummy15969
0, // dummy15970
0, // dummy15971
0, // dummy15972
0, // dummy15973
0, // dummy15974
0, // dummy15975
0, // dummy15976
0, // dummy15977
0, // dummy15978
0, // dummy15979
0, // dummy15980
0, // dummy15981
0, // dummy15982
0, // dummy15983
0, // dummy15984
0, // dummy15985
0, // dummy15986
0, // dummy15987
0, // dummy15988
0, // dummy15989
0, // dummy15990
0, // dummy15991
0, // dummy15992
0, // dummy15993
0, // dummy15994
0, // dummy15995
0, // dummy15996
0, // dummy15997
0, // dummy15998
0, // dummy15999
0, // dummy16000
0, // dummy16001
0, // dummy16002
0, // dummy16003
0, // dummy16004
0, // dummy16005
0, // dummy16006
0, // dummy16007
0, // dummy16008
0, // dummy16009
0, // dummy16010
0, // dummy16011
0, // dummy16012
0, // dummy16013
0, // dummy16014
0, // dummy16015
0, // dummy16016
0, // dummy16017
0, // dummy16018
0, // dummy16019
0, // dummy16020
0, // dummy16021
0, // dummy16022
0, // dummy16023
0, // dummy16024
0, // dummy16025
0, // dummy16026
0, // dummy16027
0, // dummy16028
0, // dummy16029
0, // dummy16030
0, // dummy16031
0, // dummy16032
0, // dummy16033
0, // dummy16034
0, // dummy16035
0, // dummy16036
0, // dummy16037
0, // dummy16038
0, // dummy16039
0, // dummy16040
0, // dummy16041
0, // dummy16042
0, // dummy16043
0, // dummy16044
0, // dummy16045
0, // dummy16046
0, // dummy16047
0, // dummy16048
0, // dummy16049
0, // dummy16050
0, // dummy16051
0, // dummy16052
0, // dummy16053
0, // dummy16054
0, // dummy16055
0, // dummy16056
0, // dummy16057
0, // dummy16058
0, // dummy16059
0, // dummy16060
0, // dummy16061
0, // dummy16062
0, // dummy16063
0, // dummy16064
0, // dummy16065
0, // dummy16066
0, // dummy16067
0, // dummy16068
0, // dummy16069
0, // dummy16070
0, // dummy16071
0, // dummy16072
0, // dummy16073
0, // dummy16074
0, // dummy16075
0, // dummy16076
0, // dummy16077
0, // dummy16078
0, // dummy16079
0, // dummy16080
0, // dummy16081
0, // dummy16082
0, // dummy16083
0, // dummy16084
0, // dummy16085
0, // dummy16086
0, // dummy16087
0, // dummy16088
0, // dummy16089
0, // dummy16090
0, // dummy16091
0, // dummy16092
0, // dummy16093
0, // dummy16094
0, // dummy16095
0, // dummy16096
0, // dummy16097
0, // dummy16098
0, // dummy16099
0, // dummy16100
0, // dummy16101
0, // dummy16102
0, // dummy16103
0, // dummy16104
0, // dummy16105
0, // dummy16106
0, // dummy16107
0, // dummy16108
0, // dummy16109
0, // dummy16110
0, // dummy16111
0, // dummy16112
0, // dummy16113
0, // dummy16114
0, // dummy16115
0, // dummy16116
0, // dummy16117
0, // dummy16118
0, // dummy16119
0, // dummy16120
0, // dummy16121
0, // dummy16122
0, // dummy16123
0, // dummy16124
0, // dummy16125
0, // dummy16126
0, // dummy16127
0, // dummy16128
0, // dummy16129
0, // dummy16130
0, // dummy16131
0, // dummy16132
0, // dummy16133
0, // dummy16134
0, // dummy16135
0, // dummy16136
0, // dummy16137
0, // dummy16138
0, // dummy16139
0, // dummy16140
0, // dummy16141
0, // dummy16142
0, // dummy16143
0, // dummy16144
0, // dummy16145
0, // dummy16146
0, // dummy16147
0, // dummy16148
0, // dummy16149
0, // dummy16150
0, // dummy16151
0, // dummy16152
0, // dummy16153
0, // dummy16154
0, // dummy16155
0, // dummy16156
0, // dummy16157
0, // dummy16158
0, // dummy16159
0, // dummy16160
0, // dummy16161
0, // dummy16162
0, // dummy16163
0, // dummy16164
0, // dummy16165
0, // dummy16166
0, // dummy16167
0, // dummy16168
0, // dummy16169
0, // dummy16170
0, // dummy16171
0, // dummy16172
0, // dummy16173
0, // dummy16174
0, // dummy16175
0, // dummy16176
0, // dummy16177
0, // dummy16178
0, // dummy16179
0, // dummy16180
0, // dummy16181
0, // dummy16182
0, // dummy16183
0, // dummy16184
0, // dummy16185
0, // dummy16186
0, // dummy16187
0, // dummy16188
0, // dummy16189
0, // dummy16190
0, // dummy16191
0, // dummy16192
0, // dummy16193
0, // dummy16194
0, // dummy16195
0, // dummy16196
0, // dummy16197
0, // dummy16198
0, // dummy16199
0, // dummy16200
0, // dummy16201
0, // dummy16202
0, // dummy16203
0, // dummy16204
0, // dummy16205
0, // dummy16206
0, // dummy16207
0, // dummy16208
0, // dummy16209
0, // dummy16210
0, // dummy16211
0, // dummy16212
0, // dummy16213
0, // dummy16214
0, // dummy16215
0, // dummy16216
0, // dummy16217
0, // dummy16218
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // segment _bss
0, // unk_414000
0, // dummy16219
0, // dummy16220
0, // dummy16221
0, // dummy16222
0, // dummy16223
0, // dummy16224
0, // dummy16225
0, // dummy16226
0, // dummy16227
0, // dummy16228
0, // dummy16229
0, // dummy16230
0, // dummy16231
0, // dummy16232
0, // dummy16233
0, // dummy16234
0, // dummy16235
0, // dummy16236
0, // dummy16237
0, // dummy16238
0, // dummy16239
0, // dummy16240
0, // dummy16241
0, // _fmode
0, // environ
0, // __dynamically_loaded
0, // dll_index
0, // storedPtr
0, // storedReason
0, // storedHandle
0, // hLibModule
0, // dummy16242
0, // dummy16243
0, // dummy16244
0, // dummy16245
0, // dummy16246
0, // dummy16247
0, // dummy16248
0, // dummy16249
0, // dummy16250
0, // dummy16251
0, // dummy16252
0, // dummy16253
0, // dummy16254
0, // dummy16255
0, // dummy16256
0, // dummy16257
0, // dummy16258
0, // dummy16259
0, // dummy16260
0, // dummy16261
0, // dummy16262
0, // dummy16263
0, // dummy16264
0, // dummy16265
0, // dummy16266
0, // dummy16267
0, // dummy16268
0, // byte_41411F
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // str_buffer
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // enter_stack
0, // unk_419120
0, // dummy16269
0, // dummy16270
0, // dummy16271
0, // dummy16272
0, // dummy16273
0, // dummy16274
0, // dummy16275
0, // dummy16276
0, // dummy16277
0, // dummy16278
0, // dummy16279
0, // dummy16280
0, // dummy16281
0, // dummy16282
0, // dummy16283
0, // dummy16284
0, // dummy16285
0, // dummy16286
0, // dummy16287
0, // dummy16288
0, // dummy16289
0, // dummy16290
0, // dummy16291
0, // dummy16292
0, // dummy16293
0, // dummy16294
0, // dummy16295
0, // dummy16296
0, // dummy16297
0, // dummy16298
0, // dummy16299
0, // dummy16300
0, // dummy16301
0, // dummy16302
0, // dummy16303
0, // dummy16304
0, // dummy16305
0, // dummy16306
0, // dummy16307
0, // dummy16308
0, // dummy16309
0, // dummy16310
0, // dummy16311
0, // dummy16312
0, // dummy16313
0, // dummy16314
0, // dummy16315
0, // dummy16316
0, // dummy16317
0, // dummy16318
0, // dummy16319
0, // dummy16320
0, // dummy16321
0, // dummy16322
0, // dummy16323
0, // dummy16324
0, // dummy16325
0, // dummy16326
0, // dummy16327
0, // dummy16328
0, // dummy16329
0, // dummy16330
0, // dummy16331
0, // dummy16332
0, // dummy16333
0, // dummy16334
0, // dummy16335
0, // dummy16336
0, // dummy16337
0, // dummy16338
0, // dummy16339
0, // dummy16340
0, // dummy16341
0, // dummy16342
0, // dummy16343
0, // dummy16344
0, // dummy16345
0, // dummy16346
0, // dummy16347
0, // dummy16348
0, // dummy16349
0, // dummy16350
0, // dummy16351
0, // dummy16352
0, // dummy16353
0, // dummy16354
0, // dummy16355
0, // dummy16356
0, // dummy16357
0, // dummy16358
0, // dummy16359
0, // dummy16360
0, // dummy16361
0, // dummy16362
0, // dummy16363
0, // dummy16364
0, // dummy16365
0, // dummy16366
0, // dummy16367
0, // dummy16368
0, // dummy16369
0, // dummy16370
0, // dummy16371
0, // dummy16372
0, // dummy16373
0, // dummy16374
0, // dummy16375
0, // dummy16376
0, // dummy16377
0, // dummy16378
0, // dummy16379
0, // dummy16380
0, // dummy16381
0, // dummy16382
0, // dummy16383
0, // dummy16384
0, // dummy16385
0, // dummy16386
0, // dummy16387
0, // dummy16388
0, // dummy16389
0, // dummy16390
0, // dummy16391
0, // dummy16392
0, // dummy16393
0, // dummy16394
0, // dummy16395
0, // dummy16396
0, // dummy16397
0, // dummy16398
0, // dummy16399
0, // dummy16400
0, // dummy16401
0, // dummy16402
0, // dummy16403
0, // dummy16404
0, // dummy16405
0, // dummy16406
0, // dummy16407
0, // dummy16408
0, // dummy16409
0, // dummy16410
0, // dummy16411
0, // dummy16412
0, // dummy16413
0, // dummy16414
0, // dummy16415
0, // dummy16416
0, // dummy16417
0, // dummy16418
0, // dummy16419
0, // dummy16420
0, // dummy16421
0, // dummy16422
0, // dummy16423
0, // dummy16424
0, // dummy16425
0, // dummy16426
0, // dummy16427
0, // dummy16428
0, // dummy16429
0, // dummy16430
0, // dummy16431
0, // dummy16432
0, // dummy16433
0, // dummy16434
0, // dummy16435
0, // dummy16436
0, // dummy16437
0, // dummy16438
0, // dummy16439
0, // dummy16440
0, // dummy16441
0, // dummy16442
0, // dummy16443
0, // dummy16444
0, // dummy16445
0, // dummy16446
0, // dummy16447
0, // dummy16448
0, // dummy16449
0, // dummy16450
0, // dummy16451
0, // dummy16452
0, // dummy16453
0, // dummy16454
0, // dummy16455
0, // dummy16456
0, // dummy16457
0, // dummy16458
0, // dummy16459
0, // dummy16460
0, // dummy16461
0, // dummy16462
0, // dummy16463
0, // dummy16464
0, // dummy16465
0, // dummy16466
0, // dummy16467
0, // dummy16468
0, // dummy16469
0, // dummy16470
0, // dummy16471
0, // dummy16472
0, // dummy16473
0, // dummy16474
0, // dummy16475
0, // dummy16476
0, // dummy16477
0, // dummy16478
0, // dummy16479
0, // dummy16480
0, // dummy16481
0, // dummy16482
0, // dummy16483
0, // dummy16484
0, // dummy16485
0, // dummy16486
0, // dummy16487
0, // dummy16488
0, // dummy16489
0, // dummy16490
0, // dummy16491
0, // dummy16492
0, // dummy16493
0, // dummy16494
0, // dummy16495
0, // dummy16496
0, // dummy16497
0, // dummy16498
0, // dummy16499
0, // dummy16500
0, // dummy16501
0, // dummy16502
0, // dummy16503
0, // dummy16504
0, // dummy16505
0, // dummy16506
0, // dummy16507
0, // dummy16508
0, // dummy16509
0, // dummy16510
0, // dummy16511
0, // dummy16512
0, // dummy16513
0, // dummy16514
0, // dummy16515
0, // dummy16516
0, // dummy16517
0, // dummy16518
0, // dummy16519
0, // dummy16520
0, // dummy16521
0, // dummy16522
0, // dummy16523
0, // dummy16524
0, // dummy16525
0, // dummy16526
0, // dummy16527
0, // dummy16528
0, // dummy16529
0, // dummy16530
0, // dummy16531
0, // dummy16532
0, // dummy16533
0, // dummy16534
0, // dummy16535
0, // dummy16536
0, // dummy16537
0, // dummy16538
0, // dummy16539
0, // dummy16540
0, // dummy16541
0, // dummy16542
0, // dummy16543
0, // dummy16544
0, // dummy16545
0, // dummy16546
0, // dummy16547
0, // dummy16548
0, // dummy16549
0, // dummy16550
0, // dummy16551
0, // dummy16552
0, // dummy16553
0, // dummy16554
0, // dummy16555
0, // dummy16556
0, // dummy16557
0, // dummy16558
0, // dummy16559
0, // dummy16560
0, // dummy16561
0, // dummy16562
0, // dummy16563
0, // dummy16564
0, // dummy16565
0, // dummy16566
0, // dummy16567
0, // dummy16568
0, // dummy16569
0, // dummy16570
0, // dummy16571
0, // dummy16572
0, // dummy16573
0, // dummy16574
0, // dummy16575
0, // dummy16576
0, // dummy16577
0, // dummy16578
0, // dummy16579
0, // dummy16580
0, // dummy16581
0, // dummy16582
0, // dummy16583
0, // dummy16584
0, // dummy16585
0, // dummy16586
0, // dummy16587
0, // dummy16588
0, // dummy16589
0, // dummy16590
0, // dummy16591
0, // dummy16592
0, // dummy16593
0, // dummy16594
0, // dummy16595
0, // dummy16596
0, // dummy16597
0, // dummy16598
0, // dummy16599
0, // dummy16600
0, // dummy16601
0, // dummy16602
0, // dummy16603
0, // dummy16604
0, // dummy16605
0, // dummy16606
0, // dummy16607
0, // dummy16608
0, // dummy16609
0, // dummy16610
0, // dummy16611
0, // dummy16612
0, // dummy16613
0, // dummy16614
0, // dummy16615
0, // dummy16616
0, // dummy16617
0, // dummy16618
0, // dummy16619
0, // dummy16620
0, // dummy16621
0, // dummy16622
0, // dummy16623
0, // dummy16624
0, // dummy16625
0, // dummy16626
0, // dummy16627
0, // dummy16628
0, // dummy16629
0, // dummy16630
0, // dummy16631
0, // dummy16632
0, // dummy16633
0, // dummy16634
0, // dummy16635
0, // dummy16636
0, // dummy16637
0, // dummy16638
0, // dummy16639
0, // dummy16640
0, // dummy16641
0, // dummy16642
0, // dummy16643
0, // dummy16644
0, // dummy16645
0, // dummy16646
0, // dummy16647
0, // dummy16648
0, // dummy16649
0, // dummy16650
0, // dummy16651
0, // dummy16652
0, // dummy16653
0, // dummy16654
0, // dummy16655
0, // dummy16656
0, // dummy16657
0, // dummy16658
0, // dummy16659
0, // dummy16660
0, // dummy16661
0, // dummy16662
0, // dummy16663
0, // dummy16664
0, // dummy16665
0, // dummy16666
0, // dummy16667
0, // dummy16668
0, // dummy16669
0, // dummy16670
0, // dummy16671
0, // dummy16672
0, // dummy16673
0, // dummy16674
0, // dummy16675
0, // dummy16676
0, // dummy16677
0, // dummy16678
0, // dummy16679
0, // dummy16680
0, // dummy16681
0, // dummy16682
0, // dummy16683
0, // dummy16684
0, // dummy16685
0, // dummy16686
0, // dummy16687
0, // dummy16688
0, // dummy16689
0, // dummy16690
0, // dummy16691
0, // dummy16692
0, // dummy16693
0, // dummy16694
0, // dummy16695
0, // dummy16696
0, // dummy16697
0, // dummy16698
0, // dummy16699
0, // dummy16700
0, // dummy16701
0, // dummy16702
0, // dummy16703
0, // dummy16704
0, // dummy16705
0, // dummy16706
0, // dummy16707
0, // dummy16708
0, // dummy16709
0, // dummy16710
0, // dummy16711
0, // dummy16712
0, // dummy16713
0, // dummy16714
0, // dummy16715
0, // dummy16716
0, // dummy16717
0, // dummy16718
0, // dummy16719
0, // dummy16720
0, // dummy16721
0, // dummy16722
0, // dummy16723
0, // dummy16724
0, // dummy16725
0, // dummy16726
0, // dummy16727
0, // dummy16728
0, // dummy16729
0, // dummy16730
0, // dummy16731
0, // dummy16732
0, // dummy16733
0, // dummy16734
0, // dummy16735
0, // dummy16736
0, // dummy16737
0, // dummy16738
0, // dummy16739
0, // dummy16740
0, // dummy16741
0, // dummy16742
0, // dummy16743
0, // dummy16744
0, // dummy16745
0, // dummy16746
0, // dummy16747
0, // dummy16748
0, // dummy16749
0, // dummy16750
0, // dummy16751
0, // dummy16752
0, // dummy16753
0, // dummy16754
0, // dummy16755
0, // dummy16756
0, // dummy16757
0, // dummy16758
0, // dummy16759
0, // dummy16760
0, // dummy16761
0, // dummy16762
0, // dummy16763
0, // dummy16764
0, // dummy16765
0, // dummy16766
0, // dummy16767
0, // dummy16768
0, // dummy16769
0, // dummy16770
0, // dummy16771
0, // dummy16772
0, // dummy16773
0, // dummy16774
0, // dummy16775
0, // dummy16776
0, // dummy16777
0, // dummy16778
0, // dummy16779
0, // dummy16780
0, // dummy16781
0, // dummy16782
0, // dummy16783
0, // dummy16784
0, // dummy16785
0, // dummy16786
0, // dummy16787
0, // dummy16788
0, // dummy16789
0, // dummy16790
0, // dummy16791
0, // dummy16792
0, // dummy16793
0, // dummy16794
0, // dummy16795
0, // dummy16796
0, // dummy16797
0, // dummy16798
0, // dummy16799
0, // dummy16800
0, // dummy16801
0, // dummy16802
0, // dummy16803
0, // dummy16804
0, // dummy16805
0, // dummy16806
0, // dummy16807
0, // dummy16808
0, // dummy16809
0, // dummy16810
0, // dummy16811
0, // dummy16812
0, // dummy16813
0, // dummy16814
0, // dummy16815
0, // dummy16816
0, // dummy16817
0, // dummy16818
0, // dummy16819
0, // dummy16820
0, // dummy16821
0, // dummy16822
0, // dummy16823
0, // dummy16824
0, // dummy16825
0, // dummy16826
0, // dummy16827
0, // dummy16828
0, // dummy16829
0, // dummy16830
0, // dummy16831
0, // dummy16832
0, // dummy16833
0, // dummy16834
0, // dummy16835
0, // dummy16836
0, // dummy16837
0, // dummy16838
0, // dummy16839
0, // dummy16840
0, // dummy16841
0, // dummy16842
0, // dummy16843
0, // dummy16844
0, // dummy16845
0, // dummy16846
0, // dummy16847
0, // dummy16848
0, // dummy16849
0, // dummy16850
0, // dummy16851
0, // dummy16852
0, // dummy16853
0, // dummy16854
0, // dummy16855
0, // dummy16856
0, // dummy16857
0, // dummy16858
0, // dummy16859
0, // dummy16860
0, // dummy16861
0, // dummy16862
0, // dummy16863
0, // dummy16864
0, // dummy16865
0, // dummy16866
0, // dummy16867
0, // dummy16868
0, // dummy16869
0, // dummy16870
0, // dummy16871
0, // dummy16872
0, // dummy16873
0, // dummy16874
0, // dummy16875
0, // dummy16876
0, // dummy16877
0, // dummy16878
0, // dummy16879
0, // dummy16880
0, // dummy16881
0, // dummy16882
0, // dummy16883
0, // dummy16884
0, // dummy16885
0, // dummy16886
0, // dummy16887
0, // dummy16888
0, // dummy16889
0, // dummy16890
0, // dummy16891
0, // dummy16892
0, // dummy16893
0, // dummy16894
0, // dummy16895
0, // dummy16896
0, // dummy16897
0, // dummy16898
0, // dummy16899
0, // dummy16900
0, // dummy16901
0, // dummy16902
0, // dummy16903
0, // dummy16904
0, // dummy16905
0, // dummy16906
0, // dummy16907
0, // dummy16908
0, // dummy16909
0, // dummy16910
0, // dummy16911
0, // dummy16912
0, // dummy16913
0, // dummy16914
0, // dummy16915
0, // dummy16916
0, // dummy16917
0, // dummy16918
0, // dummy16919
0, // dummy16920
0, // dummy16921
0, // dummy16922
0, // dummy16923
0, // dummy16924
0, // dummy16925
0, // dummy16926
0, // dummy16927
0, // dummy16928
0, // dummy16929
0, // dummy16930
0, // dummy16931
0, // dummy16932
0, // dummy16933
0, // dummy16934
0, // dummy16935
0, // dummy16936
0, // dummy16937
0, // dummy16938
0, // dummy16939
0, // dummy16940
0, // dummy16941
0, // dummy16942
0, // dummy16943
0, // dummy16944
0, // dummy16945
0, // dummy16946
0, // dummy16947
0, // dummy16948
0, // dummy16949
0, // dummy16950
0, // dummy16951
0, // dummy16952
0, // dummy16953
0, // dummy16954
0, // dummy16955
0, // dummy16956
0, // dummy16957
0, // dummy16958
0, // dummy16959
0, // dummy16960
0, // dummy16961
0, // dummy16962
0, // dummy16963
0, // dummy16964
0, // dummy16965
0, // dummy16966
0, // dummy16967
0, // dummy16968
0, // dummy16969
0, // dummy16970
0, // dummy16971
0, // dummy16972
0, // dummy16973
0, // dummy16974
0, // dummy16975
0, // dummy16976
0, // dummy16977
0, // dummy16978
0, // dummy16979
0, // dummy16980
0, // dummy16981
0, // dummy16982
0, // dummy16983
0, // dummy16984
0, // dummy16985
0, // dummy16986
0, // dummy16987
0, // dummy16988
0, // dummy16989
0, // dummy16990
0, // dummy16991
0, // dummy16992
0, // dummy16993
0, // dummy16994
0, // dummy16995
0, // dummy16996
0, // dummy16997
0, // dummy16998
0, // dummy16999
0, // dummy17000
0, // dummy17001
0, // dummy17002
0, // dummy17003
0, // dummy17004
0, // dummy17005
0, // dummy17006
0, // dummy17007
0, // dummy17008
0, // dummy17009
0, // dummy17010
0, // dummy17011
0, // dummy17012
0, // dummy17013
0, // dummy17014
0, // dummy17015
0, // dummy17016
0, // dummy17017
0, // dummy17018
0, // dummy17019
0, // dummy17020
0, // dummy17021
0, // dummy17022
0, // dummy17023
0, // dummy17024
0, // dummy17025
0, // dummy17026
0, // dummy17027
0, // dummy17028
0, // dummy17029
0, // dummy17030
0, // dummy17031
0, // dummy17032
0, // dummy17033
0, // dummy17034
0, // dummy17035
0, // dummy17036
0, // dummy17037
0, // dummy17038
0, // dummy17039
0, // dummy17040
0, // dummy17041
0, // dummy17042
0, // dummy17043
0, // dummy17044
0, // dummy17045
0, // dummy17046
0, // dummy17047
0, // dummy17048
0, // dummy17049
0, // dummy17050
0, // dummy17051
0, // dummy17052
0, // dummy17053
0, // dummy17054
0, // dummy17055
0, // dummy17056
0, // dummy17057
0, // dummy17058
0, // dummy17059
0, // dummy17060
0, // dummy17061
0, // dummy17062
0, // dummy17063
0, // dummy17064
0, // dummy17065
0, // dummy17066
0, // dummy17067
0, // dummy17068
0, // dummy17069
0, // dummy17070
0, // dummy17071
0, // dummy17072
0, // dummy17073
0, // dummy17074
0, // dummy17075
0, // dummy17076
0, // dummy17077
0, // dummy17078
0, // dummy17079
0, // dummy17080
0, // dummy17081
0, // dummy17082
0, // dummy17083
0, // dummy17084
0, // dummy17085
0, // dummy17086
0, // dummy17087
0, // dummy17088
0, // dummy17089
0, // dummy17090
0, // dummy17091
0, // dummy17092
0, // dummy17093
0, // dummy17094
0, // dummy17095
0, // dummy17096
0, // dummy17097
0, // dummy17098
0, // dummy17099
0, // dummy17100
0, // dummy17101
0, // dummy17102
0, // dummy17103
0, // dummy17104
0, // dummy17105
0, // dummy17106
0, // dummy17107
0, // dummy17108
0, // dummy17109
0, // dummy17110
0, // dummy17111
0, // dummy17112
0, // dummy17113
0, // dummy17114
0, // dummy17115
0, // dummy17116
0, // dummy17117
0, // dummy17118
0, // dummy17119
0, // dummy17120
0, // dummy17121
0, // dummy17122
0, // dummy17123
0, // dummy17124
0, // dummy17125
0, // dummy17126
0, // dummy17127
0, // dummy17128
0, // dummy17129
0, // dummy17130
0, // dummy17131
0, // dummy17132
0, // dummy17133
0, // dummy17134
0, // dummy17135
0, // dummy17136
0, // dummy17137
0, // dummy17138
0, // dummy17139
0, // dummy17140
0, // dummy17141
0, // dummy17142
0, // dummy17143
0, // dummy17144
0, // dummy17145
0, // dummy17146
0, // dummy17147
0, // dummy17148
0, // dummy17149
0, // dummy17150
0, // dummy17151
0, // dummy17152
0, // dummy17153
0, // dummy17154
0, // dummy17155
0, // dummy17156
0, // dummy17157
0, // dummy17158
0, // dummy17159
0, // dummy17160
0, // dummy17161
0, // dummy17162
0, // dummy17163
0, // dummy17164
0, // dummy17165
0, // dummy17166
0, // dummy17167
0, // dummy17168
0, // dummy17169
0, // dummy17170
0, // dummy17171
0, // dummy17172
0, // dummy17173
0, // dummy17174
0, // dummy17175
0, // dummy17176
0, // dummy17177
0, // dummy17178
0, // dummy17179
0, // dummy17180
0, // dummy17181
0, // dummy17182
0, // dummy17183
0, // dummy17184
0, // dummy17185
0, // dummy17186
0, // dummy17187
0, // dummy17188
0, // dummy17189
0, // dummy17190
0, // dummy17191
0, // dummy17192
0, // dummy17193
0, // dummy17194
0, // dummy17195
0, // dummy17196
0, // dummy17197
0, // dummy17198
0, // dummy17199
0, // dummy17200
0, // dummy17201
0, // dummy17202
0, // dummy17203
0, // dummy17204
0, // dummy17205
0, // dummy17206
0, // dummy17207
0, // dummy17208
0, // dummy17209
0, // dummy17210
0, // dummy17211
0, // dummy17212
0, // dummy17213
0, // dummy17214
0, // dummy17215
0, // dummy17216
0, // dummy17217
0, // dummy17218
0, // dummy17219
0, // dummy17220
0, // dummy17221
0, // dummy17222
0, // dummy17223
0, // dummy17224
0, // dummy17225
0, // dummy17226
0, // dummy17227
0, // dummy17228
0, // dummy17229
0, // dummy17230
0, // dummy17231
0, // dummy17232
0, // dummy17233
0, // dummy17234
0, // dummy17235
0, // dummy17236
0, // dummy17237
0, // dummy17238
0, // dummy17239
0, // dummy17240
0, // dummy17241
0, // dummy17242
0, // dummy17243
0, // dummy17244
0, // dummy17245
0, // dummy17246
0, // dummy17247
0, // dummy17248
0, // dummy17249
0, // dummy17250
0, // dummy17251
0, // dummy17252
0, // dummy17253
0, // dummy17254
0, // dummy17255
0, // dummy17256
0, // dummy17257
0, // dummy17258
0, // dummy17259
0, // dummy17260
0, // dummy17261
0, // dummy17262
0, // dummy17263
0, // dummy17264
0, // dummy17265
0, // dummy17266
0, // dummy17267
0, // dummy17268
0, // dummy17269
0, // dummy17270
0, // dummy17271
0, // dummy17272
0, // dummy17273
0, // dummy17274
0, // dummy17275
0, // dummy17276
0, // dummy17277
0, // dummy17278
0, // dummy17279
0, // dummy17280
0, // dummy17281
0, // dummy17282
0, // dummy17283
0, // dummy17284
0, // dummy17285
0, // dummy17286
0, // dummy17287
0, // dummy17288
0, // dummy17289
0, // dummy17290
0, // dummy17291
0, // dummy17292
0, // dummy17293
0, // dummy17294
0, // dummy17295
0, // dummy17296
0, // dummy17297
0, // dummy17298
0, // dummy17299
0, // dummy17300
0, // dummy17301
0, // dummy17302
0, // dummy17303
0, // dummy17304
0, // dummy17305
0, // dummy17306
0, // dummy17307
0, // dummy17308
0, // dummy17309
0, // dummy17310
0, // dummy17311
0, // dummy17312
0, // dummy17313
0, // dummy17314
0, // dummy17315
0, // dummy17316
0, // dummy17317
0, // dummy17318
0, // dummy17319
0, // dummy17320
0, // dummy17321
0, // dummy17322
0, // dummy17323
0, // dummy17324
0, // dummy17325
0, // dummy17326
0, // dummy17327
0, // dummy17328
0, // dummy17329
0, // dummy17330
0, // dummy17331
0, // dummy17332
0, // dummy17333
0, // dummy17334
0, // dummy17335
0, // dummy17336
0, // dummy17337
0, // dummy17338
0, // dummy17339
0, // dummy17340
0, // dummy17341
0, // dummy17342
0, // dummy17343
0, // dummy17344
0, // dummy17345
0, // dummy17346
0, // dummy17347
0, // dummy17348
0, // dummy17349
0, // dummy17350
0, // dummy17351
0, // dummy17352
0, // dummy17353
0, // dummy17354
0, // dummy17355
0, // dummy17356
0, // dummy17357
0, // dummy17358
0, // dummy17359
0, // dummy17360
0, // dummy17361
0, // dummy17362
0, // dummy17363
0, // dummy17364
0, // dummy17365
0, // dummy17366
0, // dummy17367
0, // dummy17368
0, // dummy17369
0, // dummy17370
0, // dummy17371
0, // dummy17372
0, // dummy17373
0, // dummy17374
0, // dummy17375
0, // dummy17376
0, // dummy17377
0, // dummy17378
0, // dummy17379
0, // dummy17380
0, // dummy17381
0, // dummy17382
0, // dummy17383
0, // dummy17384
0, // dummy17385
0, // dummy17386
0, // dummy17387
0, // dummy17388
0, // dummy17389
0, // dummy17390
0, // dummy17391
0, // dummy17392
0, // dummy17393
0, // dummy17394
0, // dummy17395
0, // dummy17396
0, // dummy17397
0, // dummy17398
0, // dummy17399
0, // dummy17400
0, // dummy17401
0, // dummy17402
0, // dummy17403
0, // dummy17404
0, // dummy17405
0, // dummy17406
0, // dummy17407
0, // dummy17408
0, // dummy17409
0, // dummy17410
0, // dummy17411
0, // dummy17412
0, // dummy17413
0, // dummy17414
0, // dummy17415
0, // dummy17416
0, // dummy17417
0, // dummy17418
0, // dummy17419
0, // dummy17420
0, // dummy17421
0, // dummy17422
0, // dummy17423
0, // dummy17424
0, // dummy17425
0, // dummy17426
0, // dummy17427
0, // dummy17428
0, // dummy17429
0, // dummy17430
0, // dummy17431
0, // dummy17432
0, // dummy17433
0, // dummy17434
0, // dummy17435
0, // dummy17436
0, // dummy17437
0, // dummy17438
0, // dummy17439
0, // dummy17440
0, // dummy17441
0, // dummy17442
0, // dummy17443
0, // dummy17444
0, // dummy17445
0, // dummy17446
0, // dummy17447
0, // dummy17448
0, // dummy17449
0, // dummy17450
0, // dummy17451
0, // dummy17452
0, // dummy17453
0, // dummy17454
0, // dummy17455
0, // dummy17456
0, // dummy17457
0, // dummy17458
0, // dummy17459
0, // dummy17460
0, // dummy17461
0, // dummy17462
0, // dummy17463
0, // dummy17464
0, // dummy17465
0, // dummy17466
0, // dummy17467
0, // dummy17468
0, // dummy17469
0, // dummy17470
0, // dummy17471
0, // dummy17472
0, // dummy17473
0, // dummy17474
0, // dummy17475
0, // dummy17476
0, // dummy17477
0, // dummy17478
0, // dummy17479
0, // dummy17480
0, // dummy17481
0, // dummy17482
0, // dummy17483
0, // dummy17484
0, // dummy17485
0, // dummy17486
0, // dummy17487
0, // dummy17488
0, // dummy17489
0, // dummy17490
0, // dummy17491
0, // dummy17492
0, // dummy17493
0, // dummy17494
0, // dummy17495
0, // dummy17496
0, // dummy17497
0, // dummy17498
0, // dummy17499
0, // dummy17500
0, // dummy17501
0, // dummy17502
0, // dummy17503
0, // dummy17504
0, // dummy17505
0, // dummy17506
0, // dummy17507
0, // dummy17508
0, // dummy17509
0, // dummy17510
0, // dummy17511
0, // dummy17512
0, // dummy17513
0, // dummy17514
0, // dummy17515
0, // dummy17516
0, // dummy17517
0, // dummy17518
0, // dummy17519
0, // dummy17520
0, // dummy17521
0, // dummy17522
0, // dummy17523
0, // dummy17524
0, // dummy17525
0, // dummy17526
0, // dummy17527
0, // dummy17528
0, // dummy17529
0, // dummy17530
0, // dummy17531
0, // dummy17532
0, // dummy17533
0, // dummy17534
0, // dummy17535
0, // dummy17536
0, // dummy17537
0, // dummy17538
0, // dummy17539
0, // dummy17540
0, // dummy17541
0, // dummy17542
0, // dummy17543
0, // dummy17544
0, // dummy17545
0, // dummy17546
0, // dummy17547
0, // dummy17548
0, // dummy17549
0, // dummy17550
0, // dummy17551
0, // dummy17552
0, // dummy17553
0, // dummy17554
0, // dummy17555
0, // dummy17556
0, // dummy17557
0, // dummy17558
0, // dummy17559
0, // dummy17560
0, // dummy17561
0, // dummy17562
0, // dummy17563
0, // dummy17564
0, // dummy17565
0, // dummy17566
0, // dummy17567
0, // dummy17568
0, // dummy17569
0, // dummy17570
0, // dummy17571
0, // dummy17572
0, // dummy17573
0, // dummy17574
0, // dummy17575
0, // dummy17576
0, // dummy17577
0, // dummy17578
0, // dummy17579
0, // dummy17580
0, // dummy17581
0, // dummy17582
0, // dummy17583
0, // dummy17584
0, // dummy17585
0, // dummy17586
0, // dummy17587
0, // dummy17588
0, // dummy17589
0, // dummy17590
0, // dummy17591
0, // dummy17592
0, // dummy17593
0, // dummy17594
0, // dummy17595
0, // dummy17596
0, // dummy17597
0, // dummy17598
0, // dummy17599
0, // dummy17600
0, // dummy17601
0, // dummy17602
0, // dummy17603
0, // dummy17604
0, // dummy17605
0, // dummy17606
0, // dummy17607
0, // dummy17608
0, // dummy17609
0, // dummy17610
0, // dummy17611
0, // dummy17612
0, // dummy17613
0, // dummy17614
0, // dummy17615
0, // dummy17616
0, // dummy17617
0, // dummy17618
0, // dummy17619
0, // dummy17620
0, // dummy17621
0, // dummy17622
0, // dummy17623
0, // dummy17624
0, // dummy17625
0, // dummy17626
0, // dummy17627
0, // dummy17628
0, // dummy17629
0, // dummy17630
0, // dummy17631
0, // dummy17632
0, // dummy17633
0, // dummy17634
0, // dummy17635
0, // dummy17636
0, // dummy17637
0, // dummy17638
0, // dummy17639
0, // dummy17640
0, // dummy17641
0, // dummy17642
0, // dummy17643
0, // dummy17644
0, // dummy17645
0, // dummy17646
0, // dummy17647
0, // dummy17648
0, // dummy17649
0, // dummy17650
0, // dummy17651
0, // dummy17652
0, // dummy17653
0, // dummy17654
0, // dummy17655
0, // dummy17656
0, // dummy17657
0, // dummy17658
0, // dummy17659
0, // dummy17660
0, // dummy17661
0, // dummy17662
0, // dummy17663
0, // dummy17664
0, // dummy17665
0, // dummy17666
0, // dummy17667
0, // dummy17668
0, // dummy17669
0, // dummy17670
0, // dummy17671
0, // dummy17672
0, // dummy17673
0, // dummy17674
0, // dummy17675
0, // dummy17676
0, // dummy17677
0, // dummy17678
0, // dummy17679
0, // dummy17680
0, // dummy17681
0, // dummy17682
0, // dummy17683
0, // dummy17684
0, // dummy17685
0, // dummy17686
0, // dummy17687
0, // dummy17688
0, // dummy17689
0, // dummy17690
0, // dummy17691
0, // dummy17692
0, // dummy17693
0, // dummy17694
0, // dummy17695
0, // dummy17696
0, // dummy17697
0, // dummy17698
0, // dummy17699
0, // dummy17700
0, // dummy17701
0, // dummy17702
0, // dummy17703
0, // dummy17704
0, // dummy17705
0, // dummy17706
0, // dummy17707
0, // dummy17708
0, // dummy17709
0, // dummy17710
0, // dummy17711
0, // dummy17712
0, // dummy17713
0, // dummy17714
0, // dummy17715
0, // dummy17716
0, // dummy17717
0, // dummy17718
0, // dummy17719
0, // dummy17720
0, // dummy17721
0, // dummy17722
0, // dummy17723
0, // dummy17724
0, // dummy17725
0, // dummy17726
0, // dummy17727
0, // dummy17728
0, // dummy17729
0, // dummy17730
0, // dummy17731
0, // dummy17732
0, // dummy17733
0, // dummy17734
0, // dummy17735
0, // dummy17736
0, // dummy17737
0, // dummy17738
0, // dummy17739
0, // dummy17740
0, // dummy17741
0, // dummy17742
0, // dummy17743
0, // dummy17744
0, // dummy17745
0, // dummy17746
0, // dummy17747
0, // dummy17748
0, // dummy17749
0, // dummy17750
0, // dummy17751
0, // dummy17752
0, // dummy17753
0, // dummy17754
0, // dummy17755
0, // dummy17756
0, // dummy17757
0, // dummy17758
0, // dummy17759
0, // dummy17760
0, // dummy17761
0, // dummy17762
0, // dummy17763
0, // dummy17764
0, // dummy17765
0, // dummy17766
0, // dummy17767
0, // dummy17768
0, // dummy17769
0, // dummy17770
0, // dummy17771
0, // dummy17772
0, // dummy17773
0, // dummy17774
0, // dummy17775
0, // dummy17776
0, // dummy17777
0, // dummy17778
0, // dummy17779
0, // dummy17780
0, // dummy17781
0, // dummy17782
0, // dummy17783
0, // dummy17784
0, // dummy17785
0, // dummy17786
0, // dummy17787
0, // dummy17788
0, // dummy17789
0, // dummy17790
0, // dummy17791
0, // dummy17792
0, // dummy17793
0, // dummy17794
0, // dummy17795
0, // dummy17796
0, // dummy17797
0, // dummy17798
0, // dummy17799
0, // dummy17800
0, // dummy17801
0, // dummy17802
0, // dummy17803
0, // dummy17804
0, // dummy17805
0, // dummy17806
0, // dummy17807
0, // dummy17808
0, // dummy17809
0, // dummy17810
0, // dummy17811
0, // dummy17812
0, // dummy17813
0, // dummy17814
0, // dummy17815
0, // dummy17816
0, // dummy17817
0, // dummy17818
0, // dummy17819
0, // dummy17820
0, // dummy17821
0, // dummy17822
0, // dummy17823
0, // dummy17824
0, // dummy17825
0, // dummy17826
0, // dummy17827
0, // dummy17828
0, // dummy17829
0, // dummy17830
0, // dummy17831
0, // dummy17832
0, // dummy17833
0, // dummy17834
0, // dummy17835
0, // dummy17836
0, // dummy17837
0, // dummy17838
0, // dummy17839
0, // dummy17840
0, // dummy17841
0, // dummy17842
0, // dummy17843
0, // dummy17844
0, // dummy17845
0, // dummy17846
0, // dummy17847
0, // dummy17848
0, // dummy17849
0, // dummy17850
0, // dummy17851
0, // dummy17852
0, // dummy17853
0, // dummy17854
0, // dummy17855
0, // dummy17856
0, // dummy17857
0, // dummy17858
0, // dummy17859
0, // dummy17860
0, // dummy17861
0, // dummy17862
0, // dummy17863
0, // dummy17864
0, // dummy17865
0, // dummy17866
0, // dummy17867
0, // dummy17868
0, // dummy17869
0, // dummy17870
0, // dummy17871
0, // dummy17872
0, // dummy17873
0, // dummy17874
0, // dummy17875
0, // dummy17876
0, // dummy17877
0, // dummy17878
0, // dummy17879
0, // dummy17880
0, // dummy17881
0, // dummy17882
0, // dummy17883
0, // dummy17884
0, // dummy17885
0, // dummy17886
0, // dummy17887
0, // dummy17888
0, // dummy17889
0, // dummy17890
0, // dummy17891
0, // dummy17892
0, // dummy17893
0, // dummy17894
0, // dummy17895
0, // dummy17896
0, // dummy17897
0, // dummy17898
0, // dummy17899
0, // dummy17900
0, // dummy17901
0, // dummy17902
0, // dummy17903
0, // dummy17904
0, // dummy17905
0, // dummy17906
0, // dummy17907
0, // dummy17908
0, // dummy17909
0, // dummy17910
0, // dummy17911
0, // dummy17912
0, // dummy17913
0, // dummy17914
0, // dummy17915
0, // dummy17916
0, // dummy17917
0, // dummy17918
0, // dummy17919
0, // dummy17920
0, // dummy17921
0, // dummy17922
0, // dummy17923
0, // dummy17924
0, // dummy17925
0, // dummy17926
0, // dummy17927
0, // dummy17928
0, // dummy17929
0, // dummy17930
0, // dummy17931
0, // dummy17932
0, // dummy17933
0, // dummy17934
0, // dummy17935
0, // dummy17936
0, // dummy17937
0, // dummy17938
0, // dummy17939
0, // dummy17940
0, // dummy17941
0, // dummy17942
0, // dummy17943
0, // dummy17944
0, // dummy17945
0, // dummy17946
0, // dummy17947
0, // dummy17948
0, // dummy17949
0, // dummy17950
0, // dummy17951
0, // dummy17952
0, // dummy17953
0, // dummy17954
0, // dummy17955
0, // dummy17956
0, // dummy17957
0, // dummy17958
0, // dummy17959
0, // dummy17960
0, // dummy17961
0, // dummy17962
0, // dummy17963
0, // dummy17964
0, // dummy17965
0, // dummy17966
0, // dummy17967
0, // dummy17968
0, // dummy17969
0, // dummy17970
0, // dummy17971
0, // dummy17972
0, // dummy17973
0, // dummy17974
0, // dummy17975
0, // dummy17976
0, // dummy17977
0, // dummy17978
0, // dummy17979
0, // dummy17980
0, // dummy17981
0, // dummy17982
0, // dummy17983
0, // dummy17984
0, // dummy17985
0, // dummy17986
0, // dummy17987
0, // dummy17988
0, // dummy17989
0, // dummy17990
0, // dummy17991
0, // dummy17992
0, // dummy17993
0, // dummy17994
0, // dummy17995
0, // dummy17996
0, // dummy17997
0, // dummy17998
0, // dummy17999
0, // dummy18000
0, // dummy18001
0, // dummy18002
0, // dummy18003
0, // dummy18004
0, // dummy18005
0, // dummy18006
0, // dummy18007
0, // dummy18008
0, // dummy18009
0, // dummy18010
0, // dummy18011
0, // dummy18012
0, // dummy18013
0, // dummy18014
0, // dummy18015
0, // dummy18016
0, // dummy18017
0, // dummy18018
0, // dummy18019
0, // dummy18020
0, // dummy18021
0, // dummy18022
0, // dummy18023
0, // dummy18024
0, // dummy18025
0, // dummy18026
0, // dummy18027
0, // dummy18028
0, // dummy18029
0, // dummy18030
0, // dummy18031
0, // dummy18032
0, // dummy18033
0, // dummy18034
0, // dummy18035
0, // dummy18036
0, // dummy18037
0, // dummy18038
0, // dummy18039
0, // dummy18040
0, // dummy18041
0, // dummy18042
0, // dummy18043
0, // dummy18044
0, // dummy18045
0, // dummy18046
0, // dummy18047
0, // dummy18048
0, // dummy18049
0, // dummy18050
0, // dummy18051
0, // dummy18052
0, // dummy18053
0, // dummy18054
0, // dummy18055
0, // dummy18056
0, // dummy18057
0, // dummy18058
0, // dummy18059
0, // dummy18060
0, // dummy18061
0, // dummy18062
0, // dummy18063
0, // dummy18064
0, // dummy18065
0, // dummy18066
0, // dummy18067
0, // dummy18068
0, // dummy18069
0, // dummy18070
0, // dummy18071
0, // dummy18072
0, // dummy18073
0, // dummy18074
0, // dummy18075
0, // dummy18076
0, // dummy18077
0, // dummy18078
0, // dummy18079
0, // dummy18080
0, // dummy18081
0, // dummy18082
0, // dummy18083
0, // dummy18084
0, // dummy18085
0, // dummy18086
0, // dummy18087
0, // dummy18088
0, // dummy18089
0, // dummy18090
0, // dummy18091
0, // dummy18092
0, // dummy18093
0, // dummy18094
0, // dummy18095
0, // dummy18096
0, // dummy18097
0, // dummy18098
0, // dummy18099
0, // dummy18100
0, // dummy18101
0, // dummy18102
0, // dummy18103
0, // dummy18104
0, // dummy18105
0, // dummy18106
0, // dummy18107
0, // dummy18108
0, // dummy18109
0, // dummy18110
0, // dummy18111
0, // dummy18112
0, // dummy18113
0, // dummy18114
0, // dummy18115
0, // dummy18116
0, // dummy18117
0, // dummy18118
0, // dummy18119
0, // dummy18120
0, // dummy18121
0, // dummy18122
0, // dummy18123
0, // dummy18124
0, // dummy18125
0, // dummy18126
0, // dummy18127
0, // dummy18128
0, // dummy18129
0, // dummy18130
0, // dummy18131
0, // dummy18132
0, // dummy18133
0, // dummy18134
0, // dummy18135
0, // dummy18136
0, // dummy18137
0, // dummy18138
0, // dummy18139
0, // dummy18140
0, // dummy18141
0, // dummy18142
0, // dummy18143
0, // dummy18144
0, // dummy18145
0, // dummy18146
0, // dummy18147
0, // dummy18148
0, // dummy18149
0, // dummy18150
0, // dummy18151
0, // dummy18152
0, // dummy18153
0, // dummy18154
0, // dummy18155
0, // dummy18156
0, // dummy18157
0, // dummy18158
0, // dummy18159
0, // dummy18160
0, // dummy18161
0, // dummy18162
0, // dummy18163
0, // dummy18164
0, // dummy18165
0, // dummy18166
0, // dummy18167
0, // dummy18168
0, // dummy18169
0, // dummy18170
0, // dummy18171
0, // dummy18172
0, // dummy18173
0, // dummy18174
0, // dummy18175
0, // dummy18176
0, // dummy18177
0, // dummy18178
0, // dummy18179
0, // dummy18180
0, // dummy18181
0, // dummy18182
0, // dummy18183
0, // dummy18184
0, // dummy18185
0, // dummy18186
0, // dummy18187
0, // dummy18188
0, // dummy18189
0, // dummy18190
0, // dummy18191
0, // dummy18192
0, // dummy18193
0, // dummy18194
0, // dummy18195
0, // dummy18196
0, // dummy18197
0, // dummy18198
0, // dummy18199
0, // dummy18200
0, // dummy18201
0, // dummy18202
0, // dummy18203
0, // dummy18204
0, // dummy18205
0, // dummy18206
0, // dummy18207
0, // dummy18208
0, // dummy18209
0, // dummy18210
0, // dummy18211
0, // dummy18212
0, // dummy18213
0, // dummy18214
0, // dummy18215
0, // dummy18216
0, // dummy18217
0, // dummy18218
0, // dummy18219
0, // dummy18220
0, // dummy18221
0, // dummy18222
0, // dummy18223
0, // dummy18224
0, // dummy18225
0, // dummy18226
0, // dummy18227
0, // dummy18228
0, // dummy18229
0, // dummy18230
0, // dummy18231
0, // dummy18232
0, // dummy18233
0, // dummy18234
0, // dummy18235
0, // dummy18236
0, // dummy18237
0, // dummy18238
0, // dummy18239
0, // dummy18240
0, // dummy18241
0, // dummy18242
0, // dummy18243
0, // dummy18244
0, // dummy18245
0, // dummy18246
0, // dummy18247
0, // dummy18248
0, // dummy18249
0, // dummy18250
0, // dummy18251
0, // dummy18252
0, // dummy18253
0, // dummy18254
0, // dummy18255
0, // dummy18256
0, // dummy18257
0, // dummy18258
0, // dummy18259
0, // dummy18260
0, // dummy18261
0, // dummy18262
0, // dummy18263
0, // dummy18264
0, // dummy18265
0, // dummy18266
0, // dummy18267
0, // dummy18268
0, // dummy18269
0, // dummy18270
0, // dummy18271
0, // dummy18272
0, // dummy18273
0, // dummy18274
0, // dummy18275
0, // dummy18276
0, // dummy18277
0, // dummy18278
0, // dummy18279
0, // dummy18280
0, // dummy18281
0, // dummy18282
0, // dummy18283
0, // dummy18284
0, // dummy18285
0, // dummy18286
0, // dummy18287
0, // dummy18288
0, // dummy18289
0, // dummy18290
0, // dummy18291
0, // dummy18292
0, // dummy18293
0, // dummy18294
0, // dummy18295
0, // dummy18296
0, // dummy18297
0, // dummy18298
0, // dummy18299
0, // dummy18300
0, // dummy18301
0, // dummy18302
0, // dummy18303
0, // dummy18304
0, // dummy18305
0, // dummy18306
0, // dummy18307
0, // dummy18308
0, // dummy18309
0, // dummy18310
0, // dummy18311
0, // dummy18312
0, // dummy18313
0, // dummy18314
0, // dummy18315
0, // dummy18316
0, // dummy18317
0, // dummy18318
0, // dummy18319
0, // dummy18320
0, // dummy18321
0, // dummy18322
0, // dummy18323
0, // dummy18324
0, // dummy18325
0, // dummy18326
0, // dummy18327
0, // dummy18328
0, // dummy18329
0, // dummy18330
0, // dummy18331
0, // dummy18332
0, // dummy18333
0, // dummy18334
0, // dummy18335
0, // dummy18336
0, // dummy18337
0, // dummy18338
0, // dummy18339
0, // dummy18340
0, // dummy18341
0, // dummy18342
0, // dummy18343
0, // dummy18344
0, // dummy18345
0, // dummy18346
0, // dummy18347
0, // dummy18348
0, // dummy18349
0, // dummy18350
0, // dummy18351
0, // dummy18352
0, // dummy18353
0, // dummy18354
0, // dummy18355
0, // dummy18356
0, // dummy18357
0, // dummy18358
0, // dummy18359
0, // dummy18360
0, // dummy18361
0, // dummy18362
0, // dummy18363
0, // dummy18364
0, // dummy18365
0, // dummy18366
0, // dummy18367
0, // dummy18368
0, // dummy18369
0, // dummy18370
0, // dummy18371
0, // dummy18372
0, // dummy18373
0, // dummy18374
0, // dummy18375
0, // dummy18376
0, // dummy18377
0, // dummy18378
0, // dummy18379
0, // dummy18380
0, // dummy18381
0, // dummy18382
0, // dummy18383
0, // dummy18384
0, // dummy18385
0, // dummy18386
0, // dummy18387
0, // dummy18388
0, // dummy18389
0, // dummy18390
0, // dummy18391
0, // dummy18392
0, // dummy18393
0, // dummy18394
0, // dummy18395
0, // dummy18396
0, // dummy18397
0, // dummy18398
0, // dummy18399
0, // dummy18400
0, // dummy18401
0, // dummy18402
0, // dummy18403
0, // dummy18404
0, // dummy18405
0, // dummy18406
0, // dummy18407
0, // dummy18408
0, // dummy18409
0, // dummy18410
0, // dummy18411
0, // dummy18412
0, // dummy18413
0, // dummy18414
0, // dummy18415
0, // dummy18416
0, // dummy18417
0, // dummy18418
0, // dummy18419
0, // dummy18420
0, // dummy18421
0, // dummy18422
0, // dummy18423
0, // dummy18424
0, // dummy18425
0, // dummy18426
0, // dummy18427
0, // dummy18428
0, // dummy18429
0, // dummy18430
0, // dummy18431
0, // dummy18432
0, // dummy18433
0, // dummy18434
0, // dummy18435
0, // dummy18436
0, // dummy18437
0, // dummy18438
0, // dummy18439
0, // dummy18440
0, // dummy18441
0, // dummy18442
0, // dummy18443
0, // dummy18444
0, // dummy18445
0, // dummy18446
0, // dummy18447
0, // dummy18448
0, // dummy18449
0, // dummy18450
0, // dummy18451
0, // dummy18452
0, // dummy18453
0, // dummy18454
0, // dummy18455
0, // dummy18456
0, // dummy18457
0, // dummy18458
0, // dummy18459
0, // dummy18460
0, // dummy18461
0, // dummy18462
0, // dummy18463
0, // dummy18464
0, // dummy18465
0, // dummy18466
0, // dummy18467
0, // dummy18468
0, // dummy18469
0, // dummy18470
0, // dummy18471
0, // dummy18472
0, // dummy18473
0, // dummy18474
0, // dummy18475
0, // dummy18476
0, // dummy18477
0, // dummy18478
0, // dummy18479
0, // dummy18480
0, // dummy18481
0, // dummy18482
0, // dummy18483
0, // dummy18484
0, // dummy18485
0, // dummy18486
0, // dummy18487
0, // dummy18488
0, // dummy18489
0, // dummy18490
0, // dummy18491
0, // dummy18492
0, // dummy18493
0, // dummy18494
0, // dummy18495
0, // dummy18496
0, // dummy18497
0, // dummy18498
0, // dummy18499
0, // dummy18500
0, // dummy18501
0, // dummy18502
0, // dummy18503
0, // dummy18504
0, // dummy18505
0, // dummy18506
0, // dummy18507
0, // dummy18508
0, // dummy18509
0, // dummy18510
0, // dummy18511
0, // dummy18512
0, // dummy18513
0, // dummy18514
0, // dummy18515
0, // dummy18516
0, // dummy18517
0, // dummy18518
0, // dummy18519
0, // dummy18520
0, // dummy18521
0, // dummy18522
0, // dummy18523
0, // dummy18524
0, // dummy18525
0, // dummy18526
0, // dummy18527
0, // dummy18528
0, // dummy18529
0, // dummy18530
0, // dummy18531
0, // dummy18532
0, // dummy18533
0, // dummy18534
0, // dummy18535
0, // dummy18536
0, // dummy18537
0, // dummy18538
0, // dummy18539
0, // dummy18540
0, // dummy18541
0, // dummy18542
0, // dummy18543
0, // dummy18544
0, // dummy18545
0, // dummy18546
0, // dummy18547
0, // dummy18548
0, // dummy18549
0, // dummy18550
0, // dummy18551
0, // dummy18552
0, // dummy18553
0, // dummy18554
0, // dummy18555
0, // dummy18556
0, // dummy18557
0, // dummy18558
0, // dummy18559
0, // dummy18560
0, // dummy18561
0, // dummy18562
0, // dummy18563
0, // dummy18564
0, // dummy18565
0, // dummy18566
0, // dummy18567
0, // dummy18568
0, // dummy18569
0, // dummy18570
0, // dummy18571
0, // dummy18572
0, // dummy18573
0, // dummy18574
0, // dummy18575
0, // dummy18576
0, // dummy18577
0, // dummy18578
0, // dummy18579
0, // dummy18580
0, // dummy18581
0, // dummy18582
0, // dummy18583
0, // dummy18584
0, // dummy18585
0, // dummy18586
0, // dummy18587
0, // dummy18588
0, // dummy18589
0, // dummy18590
0, // dummy18591
0, // dummy18592
0, // dummy18593
0, // dummy18594
0, // dummy18595
0, // dummy18596
0, // dummy18597
0, // dummy18598
0, // dummy18599
0, // dummy18600
0, // dummy18601
0, // dummy18602
0, // dummy18603
0, // dummy18604
0, // dummy18605
0, // dummy18606
0, // dummy18607
0, // dummy18608
0, // dummy18609
0, // dummy18610
0, // dummy18611
0, // dummy18612
0, // dummy18613
0, // dummy18614
0, // dummy18615
0, // dummy18616
0, // dummy18617
0, // dummy18618
0, // dummy18619
0, // dummy18620
0, // dummy18621
0, // dummy18622
0, // dummy18623
0, // dummy18624
0, // dummy18625
0, // dummy18626
0, // dummy18627
0, // dummy18628
0, // dummy18629
0, // dummy18630
0, // dummy18631
0, // dummy18632
0, // dummy18633
0, // dummy18634
0, // dummy18635
0, // dummy18636
0, // dummy18637
0, // dummy18638
0, // dummy18639
0, // dummy18640
0, // dummy18641
0, // dummy18642
0, // dummy18643
0, // dummy18644
0, // dummy18645
0, // dummy18646
0, // dummy18647
0, // dummy18648
0, // dummy18649
0, // dummy18650
0, // dummy18651
0, // dummy18652
0, // dummy18653
0, // dummy18654
0, // dummy18655
0, // dummy18656
0, // dummy18657
0, // dummy18658
0, // dummy18659
0, // dummy18660
0, // dummy18661
0, // dummy18662
0, // dummy18663
0, // dummy18664
0, // dummy18665
0, // dummy18666
0, // dummy18667
0, // dummy18668
0, // dummy18669
0, // dummy18670
0, // dummy18671
0, // dummy18672
0, // dummy18673
0, // dummy18674
0, // dummy18675
0, // dummy18676
0, // dummy18677
0, // dummy18678
0, // dummy18679
0, // dummy18680
0, // dummy18681
0, // dummy18682
0, // dummy18683
0, // dummy18684
0, // dummy18685
0, // dummy18686
0, // dummy18687
0, // dummy18688
0, // dummy18689
0, // dummy18690
0, // dummy18691
0, // dummy18692
0, // dummy18693
0, // dummy18694
0, // dummy18695
0, // dummy18696
0, // dummy18697
0, // dummy18698
0, // dummy18699
0, // dummy18700
0, // dummy18701
0, // dummy18702
0, // dummy18703
0, // dummy18704
0, // dummy18705
0, // dummy18706
0, // dummy18707
0, // dummy18708
0, // dummy18709
0, // dummy18710
0, // dummy18711
0, // dummy18712
0, // dummy18713
0, // dummy18714
0, // dummy18715
0, // dummy18716
0, // dummy18717
0, // dummy18718
0, // dummy18719
0, // dummy18720
0, // dummy18721
0, // dummy18722
0, // dummy18723
0, // dummy18724
0, // dummy18725
0, // dummy18726
0, // dummy18727
0, // dummy18728
0, // dummy18729
0, // dummy18730
0, // dummy18731
0, // dummy18732
0, // dummy18733
0, // dummy18734
0, // dummy18735
0, // dummy18736
0, // dummy18737
0, // dummy18738
0, // dummy18739
0, // dummy18740
0, // dummy18741
0, // dummy18742
0, // dummy18743
0, // dummy18744
0, // dummy18745
0, // dummy18746
0, // dummy18747
0, // dummy18748
0, // dummy18749
0, // dummy18750
0, // dummy18751
0, // dummy18752
0, // dummy18753
0, // dummy18754
0, // dummy18755
0, // dummy18756
0, // dummy18757
0, // dummy18758
0, // dummy18759
0, // dummy18760
0, // dummy18761
0, // dummy18762
0, // dummy18763
0, // dummy18764
0, // dummy18765
0, // dummy18766
0, // dummy18767
0, // dummy18768
0, // dummy18769
0, // dummy18770
0, // dummy18771
0, // dummy18772
0, // dummy18773
0, // dummy18774
0, // dummy18775
0, // dummy18776
0, // dummy18777
0, // dummy18778
0, // dummy18779
0, // dummy18780
0, // dummy18781
0, // dummy18782
0, // dummy18783
0, // dummy18784
0, // dummy18785
0, // dummy18786
0, // dummy18787
0, // dummy18788
0, // dummy18789
0, // dummy18790
0, // dummy18791
0, // dummy18792
0, // dummy18793
0, // dummy18794
0, // dummy18795
0, // dummy18796
0, // dummy18797
0, // dummy18798
0, // dummy18799
0, // dummy18800
0, // dummy18801
0, // dummy18802
0, // dummy18803
0, // dummy18804
0, // dummy18805
0, // dummy18806
0, // dummy18807
0, // dummy18808
0, // dummy18809
0, // dummy18810
0, // dummy18811
0, // dummy18812
0, // dummy18813
0, // dummy18814
0, // dummy18815
0, // dummy18816
0, // dummy18817
0, // dummy18818
0, // dummy18819
0, // dummy18820
0, // dummy18821
0, // dummy18822
0, // dummy18823
0, // dummy18824
0, // dummy18825
0, // dummy18826
0, // dummy18827
0, // dummy18828
0, // dummy18829
0, // dummy18830
0, // dummy18831
0, // dummy18832
0, // dummy18833
0, // dummy18834
0, // dummy18835
0, // dummy18836
0, // dummy18837
0, // dummy18838
0, // dummy18839
0, // dummy18840
0, // dummy18841
0, // dummy18842
0, // dummy18843
0, // dummy18844
0, // dummy18845
0, // dummy18846
0, // dummy18847
0, // dummy18848
0, // dummy18849
0, // dummy18850
0, // dummy18851
0, // dummy18852
0, // dummy18853
0, // dummy18854
0, // dummy18855
0, // dummy18856
0, // dummy18857
0, // dummy18858
0, // dummy18859
0, // dummy18860
0, // dummy18861
0, // dummy18862
0, // dummy18863
0, // dummy18864
0, // dummy18865
0, // dummy18866
0, // dummy18867
0, // dummy18868
0, // dummy18869
0, // dummy18870
0, // dummy18871
0, // dummy18872
0, // dummy18873
0, // dummy18874
0, // dummy18875
0, // dummy18876
0, // dummy18877
0, // dummy18878
0, // dummy18879
0, // dummy18880
0, // dummy18881
0, // dummy18882
0, // dummy18883
0, // dummy18884
0, // dummy18885
0, // dummy18886
0, // dummy18887
0, // dummy18888
0, // dummy18889
0, // dummy18890
0, // dummy18891
0, // dummy18892
0, // dummy18893
0, // dummy18894
0, // dummy18895
0, // dummy18896
0, // dummy18897
0, // dummy18898
0, // dummy18899
0, // dummy18900
0, // dummy18901
0, // dummy18902
0, // dummy18903
0, // dummy18904
0, // dummy18905
0, // dummy18906
0, // dummy18907
0, // dummy18908
0, // dummy18909
0, // dummy18910
0, // dummy18911
0, // dummy18912
0, // dummy18913
0, // dummy18914
0, // dummy18915
0, // dummy18916
0, // dummy18917
0, // dummy18918
0, // dummy18919
0, // dummy18920
0, // dummy18921
0, // dummy18922
0, // dummy18923
0, // dummy18924
0, // dummy18925
0, // dummy18926
0, // dummy18927
0, // dummy18928
0, // dummy18929
0, // dummy18930
0, // dummy18931
0, // dummy18932
0, // dummy18933
0, // dummy18934
0, // dummy18935
0, // dummy18936
0, // dummy18937
0, // dummy18938
0, // dummy18939
0, // dummy18940
0, // dummy18941
0, // dummy18942
0, // dummy18943
0, // dummy18944
0, // dummy18945
0, // dummy18946
0, // dummy18947
0, // dummy18948
0, // dummy18949
0, // dummy18950
0, // dummy18951
0, // dummy18952
0, // dummy18953
0, // dummy18954
0, // dummy18955
0, // dummy18956
0, // dummy18957
0, // dummy18958
0, // dummy18959
0, // dummy18960
0, // dummy18961
0, // dummy18962
0, // dummy18963
0, // dummy18964
0, // dummy18965
0, // dummy18966
0, // dummy18967
0, // dummy18968
0, // dummy18969
0, // dummy18970
0, // dummy18971
0, // dummy18972
0, // dummy18973
0, // dummy18974
0, // dummy18975
0, // dummy18976
0, // dummy18977
0, // dummy18978
0, // dummy18979
0, // dummy18980
0, // dummy18981
0, // dummy18982
0, // dummy18983
0, // dummy18984
0, // dummy18985
0, // dummy18986
0, // dummy18987
0, // dummy18988
0, // dummy18989
0, // dummy18990
0, // dummy18991
0, // dummy18992
0, // dummy18993
0, // dummy18994
0, // dummy18995
0, // dummy18996
0, // dummy18997
0, // dummy18998
0, // dummy18999
0, // dummy19000
0, // dummy19001
0, // dummy19002
0, // dummy19003
0, // dummy19004
0, // dummy19005
0, // dummy19006
0, // dummy19007
0, // dummy19008
0, // dummy19009
0, // dummy19010
0, // dummy19011
0, // dummy19012
0, // dummy19013
0, // dummy19014
0, // dummy19015
0, // dummy19016
0, // dummy19017
0, // dummy19018
0, // dummy19019
0, // dummy19020
0, // dummy19021
0, // dummy19022
0, // dummy19023
0, // dummy19024
0, // dummy19025
0, // dummy19026
0, // dummy19027
0, // dummy19028
0, // dummy19029
0, // dummy19030
0, // dummy19031
0, // dummy19032
0, // dummy19033
0, // dummy19034
0, // dummy19035
0, // dummy19036
0, // dummy19037
0, // dummy19038
0, // dummy19039
0, // dummy19040
0, // dummy19041
0, // dummy19042
0, // dummy19043
0, // dummy19044
0, // dummy19045
0, // dummy19046
0, // dummy19047
0, // dummy19048
0, // dummy19049
0, // dummy19050
0, // dummy19051
0, // dummy19052
0, // dummy19053
0, // dummy19054
0, // dummy19055
0, // dummy19056
0, // dummy19057
0, // dummy19058
0, // dummy19059
0, // dummy19060
0, // dummy19061
0, // dummy19062
0, // dummy19063
0, // dummy19064
0, // dummy19065
0, // dummy19066
0, // dummy19067
0, // dummy19068
0, // dummy19069
0, // dummy19070
0, // dummy19071
0, // dummy19072
0, // dummy19073
0, // dummy19074
0, // dummy19075
0, // dummy19076
0, // dummy19077
0, // dummy19078
0, // dummy19079
0, // dummy19080
0, // dummy19081
0, // dummy19082
0, // dummy19083
0, // dummy19084
0, // dummy19085
0, // dummy19086
0, // dummy19087
0, // dummy19088
0, // dummy19089
0, // dummy19090
0, // dummy19091
0, // dummy19092
0, // dummy19093
0, // dummy19094
0, // dummy19095
0, // dummy19096
0, // dummy19097
0, // dummy19098
0, // dummy19099
0, // dummy19100
0, // dummy19101
0, // dummy19102
0, // dummy19103
0, // dummy19104
0, // dummy19105
0, // dummy19106
0, // dummy19107
0, // dummy19108
0, // dummy19109
0, // dummy19110
0, // dummy19111
0, // dummy19112
0, // dummy19113
0, // dummy19114
0, // dummy19115
0, // dummy19116
0, // dummy19117
0, // dummy19118
0, // dummy19119
0, // dummy19120
0, // dummy19121
0, // dummy19122
0, // dummy19123
0, // dummy19124
0, // dummy19125
0, // dummy19126
0, // dummy19127
0, // dummy19128
0, // dummy19129
0, // dummy19130
0, // dummy19131
0, // dummy19132
0, // dummy19133
0, // dummy19134
0, // dummy19135
0, // dummy19136
0, // dummy19137
0, // dummy19138
0, // dummy19139
0, // dummy19140
0, // dummy19141
0, // dummy19142
0, // dummy19143
0, // dummy19144
0, // dummy19145
0, // dummy19146
0, // dummy19147
0, // dummy19148
0, // dummy19149
0, // dummy19150
0, // dummy19151
0, // dummy19152
0, // dummy19153
0, // dummy19154
0, // dummy19155
0, // dummy19156
0, // dummy19157
0, // dummy19158
0, // dummy19159
0, // dummy19160
0, // dummy19161
0, // dummy19162
0, // dummy19163
0, // dummy19164
0, // dummy19165
0, // dummy19166
0, // dummy19167
0, // dummy19168
0, // dummy19169
0, // dummy19170
0, // dummy19171
0, // dummy19172
0, // dummy19173
0, // dummy19174
0, // dummy19175
0, // dummy19176
0, // dummy19177
0, // dummy19178
0, // dummy19179
0, // dummy19180
0, // dummy19181
0, // dummy19182
0, // dummy19183
0, // dummy19184
0, // dummy19185
0, // dummy19186
0, // dummy19187
0, // dummy19188
0, // dummy19189
0, // dummy19190
0, // dummy19191
0, // dummy19192
0, // dummy19193
0, // dummy19194
0, // dummy19195
0, // dummy19196
0, // dummy19197
0, // dummy19198
0, // dummy19199
0, // dummy19200
0, // dummy19201
0, // dummy19202
0, // dummy19203
0, // dummy19204
0, // dummy19205
0, // dummy19206
0, // dummy19207
0, // dummy19208
0, // dummy19209
0, // dummy19210
0, // dummy19211
0, // dummy19212
0, // dummy19213
0, // dummy19214
0, // dummy19215
0, // dummy19216
0, // dummy19217
0, // dummy19218
0, // dummy19219
0, // dummy19220
0, // dummy19221
0, // dummy19222
0, // dummy19223
0, // dummy19224
0, // dummy19225
0, // dummy19226
0, // dummy19227
0, // dummy19228
0, // dummy19229
0, // dummy19230
0, // dummy19231
0, // dummy19232
0, // dummy19233
0, // dummy19234
0, // dummy19235
0, // dummy19236
0, // dummy19237
0, // dummy19238
0, // dummy19239
0, // dummy19240
0, // dummy19241
0, // dummy19242
0, // dummy19243
0, // dummy19244
0, // dummy19245
0, // dummy19246
0, // dummy19247
0, // dummy19248
0, // dummy19249
0, // dummy19250
0, // dummy19251
0, // dummy19252
0, // dummy19253
0, // dummy19254
0, // dummy19255
0, // dummy19256
0, // dummy19257
0, // dummy19258
0, // dummy19259
0, // dummy19260
0, // dummy19261
0, // dummy19262
0, // dummy19263
0, // dummy19264
0, // dummy19265
0, // dummy19266
0, // dummy19267
0, // dummy19268
0, // dummy19269
0, // dummy19270
0, // dummy19271
0, // dummy19272
0, // dummy19273
0, // dummy19274
0, // dummy19275
0, // dummy19276
0, // dummy19277
0, // dummy19278
0, // dummy19279
0, // dummy19280
0, // dummy19281
0, // dummy19282
0, // dummy19283
0, // dummy19284
0, // dummy19285
0, // dummy19286
0, // dummy19287
0, // dummy19288
0, // dummy19289
0, // dummy19290
0, // dummy19291
0, // dummy19292
0, // dummy19293
0, // dummy19294
0, // dummy19295
0, // dummy19296
0, // dummy19297
0, // dummy19298
0, // dummy19299
0, // dummy19300
0, // dummy19301
0, // dummy19302
0, // dummy19303
0, // dummy19304
0, // dummy19305
0, // dummy19306
0, // dummy19307
0, // dummy19308
0, // dummy19309
0, // dummy19310
0, // dummy19311
0, // dummy19312
0, // dummy19313
0, // dummy19314
0, // dummy19315
0, // dummy19316
0, // dummy19317
0, // dummy19318
0, // dummy19319
0, // dummy19320
0, // dummy19321
0, // dummy19322
0, // dummy19323
0, // dummy19324
0, // dummy19325
0, // dummy19326
0, // dummy19327
0, // dummy19328
0, // dummy19329
0, // dummy19330
0, // dummy19331
0, // dummy19332
0, // dummy19333
0, // dummy19334
0, // dummy19335
0, // dummy19336
0, // dummy19337
0, // dummy19338
0, // dummy19339
0, // dummy19340
0, // dummy19341
0, // dummy19342
0, // dummy19343
0, // dummy19344
0, // dummy19345
0, // dummy19346
0, // dummy19347
0, // dummy19348
0, // dummy19349
0, // dummy19350
0, // dummy19351
0, // dummy19352
0, // dummy19353
0, // dummy19354
0, // dummy19355
0, // dummy19356
0, // dummy19357
0, // dummy19358
0, // dummy19359
0, // dummy19360
0, // dummy19361
0, // dummy19362
0, // dummy19363
0, // dummy19364
0, // dummy19365
0, // dummy19366
0, // dummy19367
0, // dummy19368
0, // dummy19369
0, // dummy19370
0, // dummy19371
0, // dummy19372
0, // dummy19373
0, // dummy19374
0, // dummy19375
0, // dummy19376
0, // dummy19377
0, // dummy19378
0, // dummy19379
0, // dummy19380
0, // dummy19381
0, // dummy19382
0, // dummy19383
0, // dummy19384
0, // dummy19385
0, // dummy19386
0, // dummy19387
0, // dummy19388
0, // dummy19389
0, // dummy19390
0, // dummy19391
0, // dummy19392
0, // dummy19393
0, // dummy19394
0, // dummy19395
0, // dummy19396
0, // dummy19397
0, // dummy19398
0, // dummy19399
0, // dummy19400
0, // dummy19401
0, // dummy19402
0, // dummy19403
0, // dummy19404
0, // dummy19405
0, // dummy19406
0, // dummy19407
0, // dummy19408
0, // dummy19409
0, // dummy19410
0, // dummy19411
0, // dummy19412
0, // dummy19413
0, // dummy19414
0, // dummy19415
0, // dummy19416
0, // dummy19417
0, // dummy19418
0, // dummy19419
0, // dummy19420
0, // dummy19421
0, // dummy19422
0, // dummy19423
0, // dummy19424
0, // dummy19425
0, // dummy19426
0, // dummy19427
0, // dummy19428
0, // dummy19429
0, // dummy19430
0, // dummy19431
0, // dummy19432
0, // dummy19433
0, // dummy19434
0, // dummy19435
0, // dummy19436
0, // dummy19437
0, // dummy19438
0, // dummy19439
0, // dummy19440
0, // dummy19441
0, // dummy19442
0, // dummy19443
0, // dummy19444
0, // dummy19445
0, // dummy19446
0, // dummy19447
0, // dummy19448
0, // dummy19449
0, // dummy19450
0, // dummy19451
0, // dummy19452
0, // dummy19453
0, // dummy19454
0, // dummy19455
0, // dummy19456
0, // dummy19457
0, // dummy19458
0, // dummy19459
0, // dummy19460
0, // dummy19461
0, // dummy19462
0, // dummy19463
0, // dummy19464
0, // dummy19465
0, // dummy19466
0, // dummy19467
0, // dummy19468
0, // dummy19469
0, // dummy19470
0, // dummy19471
0, // dummy19472
0, // dummy19473
0, // dummy19474
0, // dummy19475
0, // dummy19476
0, // dummy19477
0, // dummy19478
0, // dummy19479
0, // dummy19480
0, // dummy19481
0, // dummy19482
0, // dummy19483
0, // dummy19484
0, // dummy19485
0, // dummy19486
0, // dummy19487
0, // dummy19488
0, // dummy19489
0, // dummy19490
0, // dummy19491
0, // dummy19492
0, // dummy19493
0, // dummy19494
0, // dummy19495
0, // dummy19496
0, // dummy19497
0, // dummy19498
0, // dummy19499
0, // dummy19500
0, // dummy19501
0, // dummy19502
0, // dummy19503
0, // dummy19504
0, // dummy19505
0, // dummy19506
0, // dummy19507
0, // dummy19508
0, // dummy19509
0, // dummy19510
0, // dummy19511
0, // dummy19512
0, // dummy19513
0, // dummy19514
0, // dummy19515
0, // dummy19516
0, // dummy19517
0, // dummy19518
0, // dummy19519
0, // dummy19520
0, // dummy19521
0, // dummy19522
0, // dummy19523
0, // dummy19524
0, // dummy19525
0, // dummy19526
0, // dummy19527
0, // dummy19528
0, // dummy19529
0, // dummy19530
0, // dummy19531
0, // dummy19532
0, // dummy19533
0, // dummy19534
0, // dummy19535
0, // dummy19536
0, // dummy19537
0, // dummy19538
0, // dummy19539
0, // dummy19540
0, // dummy19541
0, // dummy19542
0, // dummy19543
0, // dummy19544
0, // dummy19545
0, // dummy19546
0, // dummy19547
0, // dummy19548
0, // dummy19549
0, // dummy19550
0, // dummy19551
0, // dummy19552
0, // dummy19553
0, // dummy19554
0, // dummy19555
0, // dummy19556
0, // dummy19557
0, // dummy19558
0, // dummy19559
0, // dummy19560
0, // dummy19561
0, // dummy19562
0, // dummy19563
0, // dummy19564
0, // dummy19565
0, // dummy19566
0, // dummy19567
0, // dummy19568
0, // dummy19569
0, // dummy19570
0, // dummy19571
0, // dummy19572
0, // dummy19573
0, // dummy19574
0, // dummy19575
0, // dummy19576
0, // dummy19577
0, // dummy19578
0, // dummy19579
0, // dummy19580
0, // dummy19581
0, // dummy19582
0, // dummy19583
0, // dummy19584
0, // dummy19585
0, // dummy19586
0, // dummy19587
0, // dummy19588
0, // dummy19589
0, // dummy19590
0, // dummy19591
0, // dummy19592
0, // dummy19593
0, // dummy19594
0, // dummy19595
0, // dummy19596
0, // dummy19597
0, // dummy19598
0, // dummy19599
0, // dummy19600
0, // dummy19601
0, // dummy19602
0, // dummy19603
0, // dummy19604
0, // dummy19605
0, // dummy19606
0, // dummy19607
0, // dummy19608
0, // dummy19609
0, // dummy19610
0, // dummy19611
0, // dummy19612
0, // dummy19613
0, // dummy19614
0, // dummy19615
0, // dummy19616
0, // dummy19617
0, // dummy19618
0, // dummy19619
0, // dummy19620
0, // dummy19621
0, // dummy19622
0, // dummy19623
0, // dummy19624
0, // dummy19625
0, // dummy19626
0, // dummy19627
0, // dummy19628
0, // dummy19629
0, // dummy19630
0, // dummy19631
0, // dummy19632
0, // dummy19633
0, // dummy19634
0, // dummy19635
0, // dummy19636
0, // dummy19637
0, // dummy19638
0, // dummy19639
0, // dummy19640
0, // dummy19641
0, // dummy19642
0, // dummy19643
0, // dummy19644
0, // dummy19645
0, // dummy19646
0, // dummy19647
0, // dummy19648
0, // dummy19649
0, // dummy19650
0, // dummy19651
0, // dummy19652
0, // dummy19653
0, // dummy19654
0, // dummy19655
0, // dummy19656
0, // dummy19657
0, // dummy19658
0, // dummy19659
0, // dummy19660
0, // dummy19661
0, // dummy19662
0, // dummy19663
0, // dummy19664
0, // dummy19665
0, // dummy19666
0, // dummy19667
0, // dummy19668
0, // dummy19669
0, // dummy19670
0, // dummy19671
0, // dummy19672
0, // dummy19673
0, // dummy19674
0, // dummy19675
0, // dummy19676
0, // dummy19677
0, // dummy19678
0, // dummy19679
0, // dummy19680
0, // dummy19681
0, // dummy19682
0, // dummy19683
0, // dummy19684
0, // dummy19685
0, // dummy19686
0, // dummy19687
0, // dummy19688
0, // dummy19689
0, // dummy19690
0, // dummy19691
0, // dummy19692
0, // dummy19693
0, // dummy19694
0, // dummy19695
0, // dummy19696
0, // dummy19697
0, // dummy19698
0, // dummy19699
0, // dummy19700
0, // dummy19701
0, // dummy19702
0, // dummy19703
0, // dummy19704
0, // dummy19705
0, // dummy19706
0, // dummy19707
0, // dummy19708
0, // dummy19709
0, // dummy19710
0, // dummy19711
0, // dummy19712
0, // dummy19713
0, // dummy19714
0, // dummy19715
0, // dummy19716
0, // dummy19717
0, // dummy19718
0, // dummy19719
0, // dummy19720
0, // dummy19721
0, // dummy19722
0, // dummy19723
0, // dummy19724
0, // dummy19725
0, // dummy19726
0, // dummy19727
0, // dummy19728
0, // dummy19729
0, // dummy19730
0, // dummy19731
0, // dummy19732
0, // dummy19733
0, // dummy19734
0, // dummy19735
0, // dummy19736
0, // dummy19737
0, // dummy19738
0, // dummy19739
0, // dummy19740
0, // dummy19741
0, // dummy19742
0, // dummy19743
0, // dummy19744
0, // dummy19745
0, // dummy19746
0, // dummy19747
0, // dummy19748
0, // dummy19749
0, // dummy19750
0, // dummy19751
0, // dummy19752
0, // dummy19753
0, // dummy19754
0, // dummy19755
0, // dummy19756
0, // dummy19757
0, // dummy19758
0, // dummy19759
0, // dummy19760
0, // dummy19761
0, // dummy19762
0, // dummy19763
0, // dummy19764
0, // dummy19765
0, // dummy19766
0, // dummy19767
0, // dummy19768
0, // dummy19769
0, // dummy19770
0, // dummy19771
0, // dummy19772
0, // dummy19773
0, // dummy19774
0, // dummy19775
0, // dummy19776
0, // dummy19777
0, // dummy19778
0, // dummy19779
0, // dummy19780
0, // dummy19781
0, // dummy19782
0, // dummy19783
0, // dummy19784
0, // dummy19785
0, // dummy19786
0, // dummy19787
0, // dummy19788
0, // dummy19789
0, // dummy19790
0, // dummy19791
0, // dummy19792
0, // dummy19793
0, // dummy19794
0, // dummy19795
0, // dummy19796
0, // dummy19797
0, // dummy19798
0, // dummy19799
0, // dummy19800
0, // dummy19801
0, // dummy19802
0, // dummy19803
0, // dummy19804
0, // dummy19805
0, // dummy19806
0, // dummy19807
0, // dummy19808
0, // dummy19809
0, // dummy19810
0, // dummy19811
0, // dummy19812
0, // dummy19813
0, // dummy19814
0, // dummy19815
0, // dummy19816
0, // dummy19817
0, // dummy19818
0, // dummy19819
0, // dummy19820
0, // dummy19821
0, // dummy19822
0, // dummy19823
0, // dummy19824
0, // dummy19825
0, // dummy19826
0, // dummy19827
0, // dummy19828
0, // dummy19829
0, // dummy19830
0, // dummy19831
0, // dummy19832
0, // dummy19833
0, // dummy19834
0, // dummy19835
0, // dummy19836
0, // dummy19837
0, // dummy19838
0, // dummy19839
0, // dummy19840
0, // dummy19841
0, // dummy19842
0, // dummy19843
0, // dummy19844
0, // dummy19845
0, // dummy19846
0, // dummy19847
0, // dummy19848
0, // dummy19849
0, // dummy19850
0, // dummy19851
0, // dummy19852
0, // dummy19853
0, // dummy19854
0, // dummy19855
0, // dummy19856
0, // dummy19857
0, // dummy19858
0, // dummy19859
0, // dummy19860
0, // dummy19861
0, // dummy19862
0, // dummy19863
0, // dummy19864
0, // dummy19865
0, // dummy19866
0, // dummy19867
0, // dummy19868
0, // dummy19869
0, // dummy19870
0, // dummy19871
0, // dummy19872
0, // dummy19873
0, // dummy19874
0, // dummy19875
0, // dummy19876
0, // dummy19877
0, // dummy19878
0, // dummy19879
0, // dummy19880
0, // dummy19881
0, // dummy19882
0, // dummy19883
0, // dummy19884
0, // dummy19885
0, // dummy19886
0, // dummy19887
0, // dummy19888
0, // dummy19889
0, // dummy19890
0, // dummy19891
0, // dummy19892
0, // dummy19893
0, // dummy19894
0, // dummy19895
0, // dummy19896
0, // dummy19897
0, // dummy19898
0, // dummy19899
0, // dummy19900
0, // dummy19901
0, // dummy19902
0, // dummy19903
0, // dummy19904
0, // dummy19905
0, // dummy19906
0, // dummy19907
0, // dummy19908
0, // dummy19909
0, // dummy19910
0, // dummy19911
0, // dummy19912
0, // dummy19913
0, // dummy19914
0, // dummy19915
0, // dummy19916
0, // dummy19917
0, // dummy19918
0, // dummy19919
0, // dummy19920
0, // dummy19921
0, // dummy19922
0, // dummy19923
0, // dummy19924
0, // dummy19925
0, // dummy19926
0, // dummy19927
0, // dummy19928
0, // dummy19929
0, // dummy19930
0, // dummy19931
0, // dummy19932
0, // dummy19933
0, // dummy19934
0, // dummy19935
0, // dummy19936
0, // dummy19937
0, // dummy19938
0, // dummy19939
0, // dummy19940
0, // dummy19941
0, // dummy19942
0, // dummy19943
0, // dummy19944
0, // dummy19945
0, // dummy19946
0, // dummy19947
0, // dummy19948
0, // dummy19949
0, // dummy19950
0, // dummy19951
0, // dummy19952
0, // dummy19953
0, // dummy19954
0, // dummy19955
0, // dummy19956
0, // dummy19957
0, // dummy19958
0, // dummy19959
0, // dummy19960
0, // dummy19961
0, // dummy19962
0, // dummy19963
0, // dummy19964
0, // dummy19965
0, // dummy19966
0, // dummy19967
0, // dummy19968
0, // dummy19969
0, // dummy19970
0, // dummy19971
0, // dummy19972
0, // dummy19973
0, // dummy19974
0, // dummy19975
0, // dummy19976
0, // dummy19977
0, // dummy19978
0, // dummy19979
0, // dummy19980
0, // dummy19981
0, // dummy19982
0, // dummy19983
0, // dummy19984
0, // dummy19985
0, // dummy19986
0, // dummy19987
0, // dummy19988
0, // dummy19989
0, // dummy19990
0, // dummy19991
0, // dummy19992
0, // dummy19993
0, // dummy19994
0, // dummy19995
0, // dummy19996
0, // dummy19997
0, // dummy19998
0, // dummy19999
0, // dummy20000
0, // dummy20001
0, // dummy20002
0, // dummy20003
0, // dummy20004
0, // dummy20005
0, // dummy20006
0, // dummy20007
0, // dummy20008
0, // dummy20009
0, // dummy20010
0, // dummy20011
0, // dummy20012
0, // dummy20013
0, // dummy20014
0, // dummy20015
0, // dummy20016
0, // dummy20017
0, // dummy20018
0, // dummy20019
0, // dummy20020
0, // dummy20021
0, // dummy20022
0, // dummy20023
0, // dummy20024
0, // dummy20025
0, // dummy20026
0, // dummy20027
0, // dummy20028
0, // dummy20029
0, // dummy20030
0, // dummy20031
0, // dummy20032
0, // dummy20033
0, // dummy20034
0, // dummy20035
0, // dummy20036
0, // dummy20037
0, // dummy20038
0, // dummy20039
0, // dummy20040
0, // dummy20041
0, // dummy20042
0, // dummy20043
0, // dummy20044
0, // dummy20045
0, // dummy20046
0, // dummy20047
0, // dummy20048
0, // dummy20049
0, // dummy20050
0, // dummy20051
0, // dummy20052
0, // dummy20053
0, // dummy20054
0, // dummy20055
0, // dummy20056
0, // dummy20057
0, // dummy20058
0, // dummy20059
0, // dummy20060
0, // dummy20061
0, // dummy20062
0, // dummy20063
0, // dummy20064
0, // dummy20065
0, // dummy20066
0, // dummy20067
0, // dummy20068
0, // dummy20069
0, // dummy20070
0, // dummy20071
0, // dummy20072
0, // dummy20073
0, // dummy20074
0, // dummy20075
{0,0,0,0,0,0,0,0,0,0,0,0}, // padding

                {0}
*/
                };



//} // End of namespace DreamGen
