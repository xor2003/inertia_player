
                .686p
;                .mmx
                .model flat
;.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment public 'CODE' use32
                assume cs:_text
                ;org 401000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_addl(int s0, int s1, int iflags)
exec_addl       proc near               ; CODE XREF: exec_add+1D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                add     edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAddl ; "addl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401180
exec_addl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_addw(int s0, int s1, int iflags)
exec_addw       proc near               ; CODE XREF: exec_add+31↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                add     dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAddw ; "addw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4011CF
exec_addw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_addb(int s0, int s1, int iflags)
exec_addb       proc near               ; CODE XREF: exec_add+45↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                add     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAddb ; "addb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40121F
exec_addb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_add(int s0, int s1)
exec_add        proc near               ; CODE XREF: test_add+15↓p
                                        ; test_add+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_addl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_addw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_addb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40126E
exec_add        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_add()
test_add        proc near               ; DATA XREF: initcall:_test_add↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_add
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_add
                leave
                retn
; } // starts at 4012BF
test_add        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_subl(int s0, int s1, int iflags)
exec_subl       proc near               ; CODE XREF: exec_sub+1D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                sub     edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSubl ; "subl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4015BF
exec_subl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_subw(int s0, int s1, int iflags)
exec_subw       proc near               ; CODE XREF: exec_sub+31↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                sub     dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSubw ; "subw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40160E
exec_subw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_subb(int s0, int s1, int iflags)
exec_subb       proc near               ; CODE XREF: exec_sub+45↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                sub     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSubb ; "subb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40165E
exec_subb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sub(int s0, int s1)
exec_sub        proc near               ; CODE XREF: test_sub+15↓p
                                        ; test_sub+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_subl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_subw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_subb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4016AD
exec_sub        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_sub()
test_sub        proc near               ; DATA XREF: initcall:_test_sub↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sub
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_sub
                leave
                retn
; } // starts at 4016FE
test_sub        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_xorl(int s0, int s1, int iflags)
exec_xorl       proc near               ; CODE XREF: exec_xor+1D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                xor     edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aXorl ; "xorl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4019FE
exec_xorl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_xorw(int s0, int s1, int iflags)
exec_xorw       proc near               ; CODE XREF: exec_xor+31↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                xor     dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aXorw ; "xorw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401A4D
exec_xorw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_xorb(int s0, int s1, int iflags)
exec_xorb       proc near               ; CODE XREF: exec_xor+45↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                xor     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aXorb ; "xorb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401A9D
exec_xorb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_xor(int s0, int s1)
exec_xor        proc near               ; CODE XREF: test_xor+15↓p
                                        ; test_xor+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_xorl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_xorw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_xorb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401AEC
exec_xor        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_xor()
test_xor        proc near               ; DATA XREF: initcall:_test_xor↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_xor
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_xor
                leave
                retn
; } // starts at 401B3D
test_xor        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_andl(int s0, int s1, int iflags)
exec_andl       proc near               ; CODE XREF: exec_and+1D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                and     edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAndl ; "andl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401E3D
exec_andl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_andw(int s0, int s1, int iflags)
exec_andw       proc near               ; CODE XREF: exec_and+31↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                and     dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAndw ; "andw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401E8C
exec_andw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_andb(int s0, int s1, int iflags)
exec_andb       proc near               ; CODE XREF: exec_and+45↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                and     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAndb ; "andb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401EDC
exec_andb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_and(int s0, int s1)
exec_and        proc near               ; CODE XREF: test_and+15↓p
                                        ; test_and+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_andl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_andw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_andb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 401F2B
exec_and        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_and()
test_and        proc near               ; DATA XREF: initcall:_test_and↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_and
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_and
                leave
                retn
; } // starts at 401F7C
test_and        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_orl(int s0, int s1, int iflags)
exec_orl        proc near               ; CODE XREF: exec_or+1D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                or      edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aOrl ; "orl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40227C
exec_orl        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_orw(int s0, int s1, int iflags)
exec_orw        proc near               ; CODE XREF: exec_or+31↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                or      dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aOrw ; "orw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4022CB
exec_orw        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_orb(int s0, int s1, int iflags)
exec_orb        proc near               ; CODE XREF: exec_or+45↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                or      dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aOrb ; "orb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40231B
exec_orb        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_or(int s0, int s1)
exec_or         proc near               ; CODE XREF: test_or+15↓p
                                        ; test_or+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_orl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_orw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_orb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40236A
exec_or         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_or()
test_or         proc near               ; DATA XREF: initcall:_test_or↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_or
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_or
                leave
                retn
; } // starts at 4023BB
test_or         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_cmpl(int s0, int s1, int iflags)
exec_cmpl       proc near               ; CODE XREF: exec_cmp+1D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                cmp     edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aCmpl ; "cmpl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4026BB
exec_cmpl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_cmpw(int s0, int s1, int iflags)
exec_cmpw       proc near               ; CODE XREF: exec_cmp+31↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                cmp     dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aCmpw ; "cmpw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40270A
exec_cmpw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_cmpb(int s0, int s1, int iflags)
exec_cmpb       proc near               ; CODE XREF: exec_cmp+45↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                cmp     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aCmpb ; "cmpb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40275A
exec_cmpb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_cmp(int s0, int s1)
exec_cmp        proc near               ; CODE XREF: test_cmp+15↓p
                                        ; test_cmp+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_cmpl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_cmpw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_cmpb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4027A9
exec_cmp        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_cmp()
test_cmp        proc near               ; DATA XREF: initcall:_test_cmp↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_cmp
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_cmp
                leave
                retn
; } // starts at 4027FA
test_cmp        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_adcl(int s0, int s1, int iflags)
exec_adcl       proc near               ; CODE XREF: exec_adc+1D↓p
                                        ; exec_adc+59↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                adc     edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAdcl ; "adcl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 402AFA
exec_adcl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_adcw(int s0, int s1, int iflags)
exec_adcw       proc near               ; CODE XREF: exec_adc+31↓p
                                        ; exec_adc+6D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                adc     dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAdcw ; "adcw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 402B49
exec_adcw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_adcb(int s0, int s1, int iflags)
exec_adcb       proc near               ; CODE XREF: exec_adc+45↓p
                                        ; exec_adc+81↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                adc     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aAdcb ; "adcb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 402B99
exec_adcb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_adc(int s0, int s1)
exec_adc        proc near               ; CODE XREF: test_adc+15↓p
                                        ; test_adc+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_adcl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_adcw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_adcb
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_adcl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_adcw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_adcb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 402BE8
exec_adc        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_adc()
test_adc        proc near               ; DATA XREF: initcall:_test_adc↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_adc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_adc
                leave
                retn
; } // starts at 402C75
test_adc        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sbbl(int s0, int s1, int iflags)
exec_sbbl       proc near               ; CODE XREF: exec_sbb+1D↓p
                                        ; exec_sbb+59↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                sbb     edx, ecx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSbbl ; "sbbl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 402F75
exec_sbbl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sbbw(int s0, int s1, int iflags)
exec_sbbw       proc near               ; CODE XREF: exec_sbb+31↓p
                                        ; exec_sbb+6D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                sbb     dx, cx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSbbw ; "sbbw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 402FC4
exec_sbbw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sbbb(int s0, int s1, int iflags)
exec_sbbb       proc near               ; CODE XREF: exec_sbb+45↓p
                                        ; exec_sbb+81↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, [ebp+s1]
                mov     edx, res
                mov     eax, flags
                mov     [esp+14h], flags
                push    eax
                popf
                sbb     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSbbb ; "sbbb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 403014
exec_sbbb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sbb(int s0, int s1)
exec_sbb        proc near               ; CODE XREF: test_sbb+15↓p
                                        ; test_sbb+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_sbbl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_sbbw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_sbbb
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_sbbl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_sbbw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_sbbb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 403063
exec_sbb        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_sbb()
test_sbb        proc near               ; DATA XREF: initcall:_test_sbb↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_sbb
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_sbb
                leave
                retn
; } // starts at 4030F0
test_sbb        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_incl(int s0, int s1, int iflags)
exec_incl       proc near               ; CODE XREF: exec_inc+1D↓p
                                        ; exec_inc+59↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                inc     edx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aIncl ; "incl"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 4033F0
exec_incl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_incw(int s0, int s1, int iflags)
exec_incw       proc near               ; CODE XREF: exec_inc+31↓p
                                        ; exec_inc+6D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                inc     dx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aIncw ; "incw"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 403435
exec_incw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_incb(int s0, int s1, int iflags)
exec_incb       proc near               ; CODE XREF: exec_inc+45↓p
                                        ; exec_inc+81↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                inc     dl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aIncb ; "incb"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 40347B
exec_incb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_inc(int s0, int s1)
exec_inc        proc near               ; CODE XREF: test_inc+15↓p
                                        ; test_inc+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_incl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_incw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_incb
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_incl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_incw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_incb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4034C1
exec_inc        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_inc()
test_inc        proc near               ; DATA XREF: initcall:_test_inc↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_inc
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_inc
                leave
                retn
; } // starts at 40354E
test_inc        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_decl(int s0, int s1, int iflags)
exec_decl       proc near               ; CODE XREF: exec_dec+1D↓p
                                        ; exec_dec+59↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                dec     edx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aDecl ; "decl"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 40384E
exec_decl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_decw(int s0, int s1, int iflags)
exec_decw       proc near               ; CODE XREF: exec_dec+31↓p
                                        ; exec_dec+6D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                dec     dx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aDecw ; "decw"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 403893
exec_decw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_decb(int s0, int s1, int iflags)
exec_decb       proc near               ; CODE XREF: exec_dec+45↓p
                                        ; exec_dec+81↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                dec     dl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aDecb ; "decb"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 4038D9
exec_decb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_dec(int s0, int s1)
exec_dec        proc near               ; CODE XREF: test_dec+15↓p
                                        ; test_dec+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_decl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_decw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_decb
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_decl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_decw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_decb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40391F
exec_dec        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_dec()
test_dec        proc near               ; DATA XREF: initcall:_test_dec↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_dec
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_dec
                leave
                retn
; } // starts at 4039AC
test_dec        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_negl(int s0, int s1, int iflags)
exec_negl       proc near               ; CODE XREF: exec_neg+1D↓p
                                        ; exec_neg+59↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                neg     edx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aNegl ; "negl"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 403CAC
exec_negl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_negw(int s0, int s1, int iflags)
exec_negw       proc near               ; CODE XREF: exec_neg+31↓p
                                        ; exec_neg+6D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                neg     dx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aNegw ; "negw"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 403CF2
exec_negw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_negb(int s0, int s1, int iflags)
exec_negb       proc near               ; CODE XREF: exec_neg+45↓p
                                        ; exec_neg+81↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                neg     dl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aNegb ; "negb"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 403D39
exec_negb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_neg(int s0, int s1)
exec_neg        proc near               ; CODE XREF: test_neg+15↓p
                                        ; test_neg+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_negl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_negw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_negb
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_negl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_negw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_negb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 403D7F
exec_neg        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_neg()
test_neg        proc near               ; DATA XREF: initcall:_test_neg↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_neg
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_neg
                leave
                retn
; } // starts at 403E0C
test_neg        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_notl(int s0, int s1, int iflags)
exec_notl       proc near               ; CODE XREF: exec_not+1D↓p
                                        ; exec_not+59↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                not     edx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aNotl ; "notl"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 40410C
exec_notl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_notw(int s0, int s1, int iflags)
exec_notw       proc near               ; CODE XREF: exec_not+31↓p
                                        ; exec_not+6D↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                not     dx
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aNotw ; "notw"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 404152
exec_notw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_notb(int s0, int s1, int iflags)
exec_notb       proc near               ; CODE XREF: exec_not+45↓p
                                        ; exec_not+81↓p

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+iflags]
                mov     ecx, [ebp+s0]
res = ecx                               ; int
flags = ebx                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                not     dl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                and     flags, 8D5h
                mov     [esp+10h], ebx
                mov     [esp+14h], eax
                mov     [esp+0Ch], res
                mov     [esp+8], ecx
                mov     dword ptr [esp+4], offset aNotb ; "notb"
                mov     dword ptr [esp], offset a10sA08lxR08lxC ; "%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 404199
exec_notb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_not(int s0, int s1)
exec_not        proc near               ; CODE XREF: test_not+15↓p
                                        ; test_not+29↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 10h
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_notl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_notw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_notb
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_notl
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_notw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 1 ; iflags
                call    exec_notb
                add     esp, 10h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4041DF
exec_not        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_not()
test_not        proc near               ; DATA XREF: initcall:_test_not↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp+4], 812FADAh ; s1
                mov     dword ptr [esp], 12345678h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 12341h ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFEDCBFh ; s1
                mov     dword ptr [esp], 12341h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 2 ; s1
                mov     dword ptr [esp], 0FFFFFFFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 7FFFFFFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 80000000h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347FFFh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348000h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12347F7Fh ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFEh ; s1
                mov     dword ptr [esp], 12348080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0FFFE0080h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 10000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 20000h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1FF7Fh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1FF80h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1FF81h ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 1FFFFh ; s1
                mov     dword ptr [esp], 0FFFE0080h ; s0
                call    exec_not
                mov     dword ptr [esp+4], 0 ; s1
                mov     dword ptr [esp], 0 ; s0
                call    exec_not
                leave
                retn
; } // starts at 40426C
test_not        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shll(int s2, int s0, int s1, int iflags)
exec_shll       proc near               ; CODE XREF: exec_shl+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shl     edx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_40458F
                and     ah, 0F7h

loc_40458F:                             ; CODE XREF: exec_shll+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aShll ; "shll"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40456C
exec_shll       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shlw(int s2, int s0, int s1, int iflags)
exec_shlw       proc near               ; CODE XREF: exec_shl+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shl     dx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_4045E7
                and     ah, 0F7h

loc_4045E7:                             ; CODE XREF: exec_shlw+1F↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aShlw ; "shlw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4045C3
exec_shlw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shlb(int s0, int s1, int iflags)
exec_shlb       proc near               ; CODE XREF: exec_shl+56↓j

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shl     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_40463E
                and     ah, 0F7h

loc_40463E:                             ; CODE XREF: exec_shlb+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aShlb ; "shlb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40461B
exec_shlb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shl(int s2, int s0, int s1)
exec_shl        proc near               ; CODE XREF: test_shl+1D↓p
                                        ; test_shl+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     edi, [ebp+s2]
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shll
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shlw
                mov     [ebp+s0], esi
                mov     [ebp+s2], ebx
                mov     [ebp+s1], 0
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                jmp     exec_shlb
; } // starts at 404672
exec_shl        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_shl()
test_shl        proc near               ; DATA XREF: initcall:_test_shl↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_4046D6:                             ; CODE XREF: test_shl+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4046D6
                xor     i, i

loc_4046F6:                             ; CODE XREF: test_shl+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4046F6
                xor     i, i

loc_404716:                             ; CODE XREF: test_shl+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404716
                xor     i, i

loc_404736:                             ; CODE XREF: test_shl+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404736
                xor     i, i

loc_404756:                             ; CODE XREF: test_shl+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_shl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404756
                xor     i, i

loc_404776:                             ; CODE XREF: test_shl+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_shl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404776
                xor     i, i

loc_404796:                             ; CODE XREF: test_shl+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_shl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404796
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 4046CD
test_shl        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shrl(int s2, int s0, int s1, int iflags)
exec_shrl       proc near               ; CODE XREF: exec_shr+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shr     edx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_4047DD
                and     ah, 0F7h

loc_4047DD:                             ; CODE XREF: exec_shrl+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aShrl ; "shrl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4047BA
exec_shrl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shrw(int s2, int s0, int s1, int iflags)
exec_shrw       proc near               ; CODE XREF: exec_shr+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shr     dx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404835
                and     ah, 0F7h

loc_404835:                             ; CODE XREF: exec_shrw+1F↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aShrw ; "shrw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404811
exec_shrw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shrb(int s0, int s1, int iflags)
exec_shrb       proc near               ; CODE XREF: exec_shr+56↓j

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shr     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_40488C
                and     ah, 0F7h

loc_40488C:                             ; CODE XREF: exec_shrb+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aShrb ; "shrb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404869
exec_shrb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shr(int s2, int s0, int s1)
exec_shr        proc near               ; CODE XREF: test_shr+1D↓p
                                        ; test_shr+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     edi, [ebp+s2]
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shrl
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shrw
                mov     [ebp+s0], esi
                mov     [ebp+s2], ebx
                mov     [ebp+s1], 0
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                jmp     exec_shrb
; } // starts at 4048C0
exec_shr        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_shr()
test_shr        proc near               ; DATA XREF: initcall:_test_shr↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_404924:                             ; CODE XREF: test_shr+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404924
                xor     i, i

loc_404944:                             ; CODE XREF: test_shr+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404944
                xor     i, i

loc_404964:                             ; CODE XREF: test_shr+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404964
                xor     i, i

loc_404984:                             ; CODE XREF: test_shr+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404984
                xor     i, i

loc_4049A4:                             ; CODE XREF: test_shr+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_shr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4049A4
                xor     i, i

loc_4049C4:                             ; CODE XREF: test_shr+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_shr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4049C4
                xor     i, i

loc_4049E4:                             ; CODE XREF: test_shr+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_shr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4049E4
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 40491B
test_shr        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sarl(int s2, int s0, int s1, int iflags)
exec_sarl       proc near               ; CODE XREF: exec_sar+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                sar     edx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404A2B
                and     ah, 0F7h

loc_404A2B:                             ; CODE XREF: exec_sarl+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSarl ; "sarl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404A08
exec_sarl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sarw(int s2, int s0, int s1, int iflags)
exec_sarw       proc near               ; CODE XREF: exec_sar+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                sar     dx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404A83
                and     ah, 0F7h

loc_404A83:                             ; CODE XREF: exec_sarw+1F↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSarw ; "sarw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404A5F
exec_sarw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sarb(int s0, int s1, int iflags)
exec_sarb       proc near               ; CODE XREF: exec_sar+56↓j

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                sar     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404ADA
                and     ah, 0F7h

loc_404ADA:                             ; CODE XREF: exec_sarb+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aSarb ; "sarb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404AB7
exec_sarb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_sar(int s2, int s0, int s1)
exec_sar        proc near               ; CODE XREF: test_sar+1D↓p
                                        ; test_sar+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     edi, [ebp+s2]
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_sarl
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_sarw
                mov     [ebp+s0], esi
                mov     [ebp+s2], ebx
                mov     [ebp+s1], 0
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                jmp     exec_sarb
; } // starts at 404B0E
exec_sar        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_sar()
test_sar        proc near               ; DATA XREF: initcall:_test_sar↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_404B72:                             ; CODE XREF: test_sar+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_sar
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404B72
                xor     i, i

loc_404B92:                             ; CODE XREF: test_sar+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_sar
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404B92
                xor     i, i

loc_404BB2:                             ; CODE XREF: test_sar+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_sar
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404BB2
                xor     i, i

loc_404BD2:                             ; CODE XREF: test_sar+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_sar
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404BD2
                xor     i, i

loc_404BF2:                             ; CODE XREF: test_sar+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_sar
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404BF2
                xor     i, i

loc_404C12:                             ; CODE XREF: test_sar+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_sar
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404C12
                xor     i, i

loc_404C32:                             ; CODE XREF: test_sar+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_sar
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404C32
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 404B69
test_sar        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_roll(int s2, int s0, int s1, int iflags)
exec_roll       proc near               ; CODE XREF: exec_rol+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rol     edx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404C79
                and     ah, 0F7h

loc_404C79:                             ; CODE XREF: exec_roll+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRoll ; "roll"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404C56
exec_roll       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rolw(int s2, int s0, int s1, int iflags)
exec_rolw       proc near               ; CODE XREF: exec_rol+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rol     dx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404CD1
                and     ah, 0F7h

loc_404CD1:                             ; CODE XREF: exec_rolw+1F↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRolw ; "rolw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404CAD
exec_rolw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rolb(int s0, int s1, int iflags)
exec_rolb       proc near               ; CODE XREF: exec_rol+56↓j

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rol     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404D28
                and     ah, 0F7h

loc_404D28:                             ; CODE XREF: exec_rolb+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRolb ; "rolb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404D05
exec_rolb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rol(int s2, int s0, int s1)
exec_rol        proc near               ; CODE XREF: test_rol+1D↓p
                                        ; test_rol+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     edi, [ebp+s2]
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_roll
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_rolw
                mov     [ebp+s0], esi
                mov     [ebp+s2], ebx
                mov     [ebp+s1], 0
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                jmp     exec_rolb
; } // starts at 404D5C
exec_rol        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_rol()
test_rol        proc near               ; DATA XREF: initcall:_test_rol↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_404DC0:                             ; CODE XREF: test_rol+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_rol
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404DC0
                xor     i, i

loc_404DE0:                             ; CODE XREF: test_rol+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_rol
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404DE0
                xor     i, i

loc_404E00:                             ; CODE XREF: test_rol+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_rol
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404E00
                xor     i, i

loc_404E20:                             ; CODE XREF: test_rol+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_rol
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404E20
                xor     i, i

loc_404E40:                             ; CODE XREF: test_rol+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_rol
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404E40
                xor     i, i

loc_404E60:                             ; CODE XREF: test_rol+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_rol
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404E60
                xor     i, i

loc_404E80:                             ; CODE XREF: test_rol+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_rol
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_404E80
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 404DB7
test_rol        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rorl(int s2, int s0, int s1, int iflags)
exec_rorl       proc near               ; CODE XREF: exec_ror+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                ror     edx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404EC7
                and     ah, 0F7h

loc_404EC7:                             ; CODE XREF: exec_rorl+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRorl ; "rorl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404EA4
exec_rorl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rorw(int s2, int s0, int s1, int iflags)
exec_rorw       proc near               ; CODE XREF: exec_ror+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                ror     dx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404F1F
                and     ah, 0F7h

loc_404F1F:                             ; CODE XREF: exec_rorw+1F↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRorw ; "rorw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404EFB
exec_rorw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rorb(int s0, int s1, int iflags)
exec_rorb       proc near               ; CODE XREF: exec_ror+56↓j

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                ror     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_404F76
                and     ah, 0F7h

loc_404F76:                             ; CODE XREF: exec_rorb+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRorb ; "rorb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 404F53
exec_rorb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_ror(int s2, int s0, int s1)
exec_ror        proc near               ; CODE XREF: test_ror+1D↓p
                                        ; test_ror+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     edi, [ebp+s2]
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_rorl
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_rorw
                mov     [ebp+s0], esi
                mov     [ebp+s2], ebx
                mov     [ebp+s1], 0
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                jmp     exec_rorb
; } // starts at 404FAA
exec_ror        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_ror()
test_ror        proc near               ; DATA XREF: initcall:_test_ror↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_40500E:                             ; CODE XREF: test_ror+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_ror
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40500E
                xor     i, i

loc_40502E:                             ; CODE XREF: test_ror+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_ror
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40502E
                xor     i, i

loc_40504E:                             ; CODE XREF: test_ror+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_ror
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40504E
                xor     i, i

loc_40506E:                             ; CODE XREF: test_ror+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_ror
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40506E
                xor     i, i

loc_40508E:                             ; CODE XREF: test_ror+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_ror
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40508E
                xor     i, i

loc_4050AE:                             ; CODE XREF: test_ror+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_ror
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4050AE
                xor     i, i

loc_4050CE:                             ; CODE XREF: test_ror+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_ror
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4050CE
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 405005
test_ror        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rcrl(int s2, int s0, int s1, int iflags)
exec_rcrl       proc near               ; CODE XREF: exec_rcr+25↓p
                                        ; exec_rcr+69↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rcr     edx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_405115
                and     ah, 0F7h

loc_405115:                             ; CODE XREF: exec_rcrl+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRcrl ; "rcrl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4050F2
exec_rcrl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rcrw(int s2, int s0, int s1, int iflags)
exec_rcrw       proc near               ; CODE XREF: exec_rcr+3D↓p
                                        ; exec_rcr+81↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rcr     dx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_40516D
                and     ah, 0F7h

loc_40516D:                             ; CODE XREF: exec_rcrw+1F↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRcrw ; "rcrw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405149
exec_rcrw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rcrb(int s0, int s1, int iflags)
exec_rcrb       proc near               ; CODE XREF: exec_rcr+51↓p
                                        ; exec_rcr+9A↓j

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rcr     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_4051C4
                and     ah, 0F7h

loc_4051C4:                             ; CODE XREF: exec_rcrb+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRcrb ; "rcrb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4051A1
exec_rcrb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rcr(int s2, int s0, int s1)
exec_rcr        proc near               ; CODE XREF: test_rcr+1D↓p
                                        ; test_rcr+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     edi, [ebp+s2]
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_rcrl
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_rcrw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_rcrb
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 1 ; iflags
                call    exec_rcrl
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 1 ; iflags
                call    exec_rcrw
                mov     [ebp+s0], esi
                mov     [ebp+s2], ebx
                mov     [ebp+s1], 1
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                jmp     exec_rcrb
; } // starts at 4051F8
exec_rcr        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_rcr()
test_rcr        proc near               ; DATA XREF: initcall:_test_rcr↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_4052A0:                             ; CODE XREF: test_rcr+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_rcr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4052A0
                xor     i, i

loc_4052C0:                             ; CODE XREF: test_rcr+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_rcr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4052C0
                xor     i, i

loc_4052E0:                             ; CODE XREF: test_rcr+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_rcr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4052E0
                xor     i, i

loc_405300:                             ; CODE XREF: test_rcr+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_rcr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405300
                xor     i, i

loc_405320:                             ; CODE XREF: test_rcr+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_rcr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405320
                xor     i, i

loc_405340:                             ; CODE XREF: test_rcr+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_rcr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405340
                xor     i, i

loc_405360:                             ; CODE XREF: test_rcr+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_rcr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405360
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 405297
test_rcr        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rcll(int s2, int s0, int s1, int iflags)
exec_rcll       proc near               ; CODE XREF: exec_rcl+25↓p
                                        ; exec_rcl+69↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rcl     edx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_4053A7
                and     ah, 0F7h

loc_4053A7:                             ; CODE XREF: exec_rcll+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRcll ; "rcll"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405384
exec_rcll       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rclw(int s2, int s0, int s1, int iflags)
exec_rclw       proc near               ; CODE XREF: exec_rcl+3D↓p
                                        ; exec_rcl+81↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rcl     dx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_4053FF
                and     ah, 0F7h

loc_4053FF:                             ; CODE XREF: exec_rclw+1F↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRclw ; "rclw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 4053DB
exec_rclw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rclb(int s0, int s1, int iflags)
exec_rclb       proc near               ; CODE XREF: exec_rcl+51↓p
                                        ; exec_rcl+9A↓j

s0              = dword ptr  8
s1              = dword ptr  0Ch
iflags          = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     ecx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                rcl     dl, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_405456
                and     ah, 0F7h

loc_405456:                             ; CODE XREF: exec_rclb+1E↑j
                and     flags, 8C5h
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], ecx
                mov     dword ptr [esp+4], offset aRclb ; "rclb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405433
exec_rclb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_rcl(int s2, int s0, int s1)
exec_rcl        proc near               ; CODE XREF: test_rcl+1D↓p
                                        ; test_rcl+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s0]
                mov     esi, [ebp+s1]
                mov     edi, [ebp+s2]
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_rcll
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_rclw
                mov     [esp+4], esi    ; s1
                mov     [esp], ebx      ; s0
                mov     dword ptr [esp+8], 0 ; iflags
                call    exec_rclb
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 1 ; iflags
                call    exec_rcll
                mov     [esp+8], esi    ; s1
                mov     [esp+4], ebx    ; s0
                mov     [esp], edi      ; s2
                mov     dword ptr [esp+0Ch], 1 ; iflags
                call    exec_rclw
                mov     [ebp+s0], esi
                mov     [ebp+s2], ebx
                mov     [ebp+s1], 1
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                jmp     exec_rclb
; } // starts at 40548A
exec_rcl        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_rcl()
test_rcl        proc near               ; DATA XREF: initcall:_test_rcl↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_405532:                             ; CODE XREF: test_rcl+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_rcl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405532
                xor     i, i

loc_405552:                             ; CODE XREF: test_rcl+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_rcl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405552
                xor     i, i

loc_405572:                             ; CODE XREF: test_rcl+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_rcl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405572
                xor     i, i

loc_405592:                             ; CODE XREF: test_rcl+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_rcl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405592
                xor     i, i

loc_4055B2:                             ; CODE XREF: test_rcl+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_rcl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4055B2
                xor     i, i

loc_4055D2:                             ; CODE XREF: test_rcl+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_rcl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4055D2
                xor     i, i

loc_4055F2:                             ; CODE XREF: test_rcl+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_rcl
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4055F2
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 405529
test_rcl        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shldl(int s2, int s0, int s1, int iflags)
exec_shldl      proc near               ; CODE XREF: exec_shld+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                mov     ecx, [ebp+s1]
                mov     esi, [ebp+s0]
res = esi                               ; int
                mov     edi, [ebp+iflags]
flags = edi                             ; int
                mov     ebx, [ebp+s2]
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shld    edx, ebx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_40563E
                and     ah, 0F7h

loc_40563E:                             ; CODE XREF: exec_shldl+23↑j
                and     flags, 8C5h
                mov     [esp+18h], edi
                mov     [esp+0Ch], ebx
                mov     [esp+8], esi
                mov     [esp+1Ch], eax
                mov     [esp+14h], res
                mov     [esp+10h], ecx
                mov     dword ptr [esp+4], offset aShldl ; "shldl"
                mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 405616
exec_shldl      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shldw(int s2, int s0, int s1, int iflags)
exec_shldw      proc near               ; CODE XREF: exec_shld+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                mov     ecx, [ebp+s1]
                mov     esi, [ebp+s0]
res = esi                               ; int
                mov     edi, [ebp+iflags]
flags = edi                             ; int
                mov     ebx, [ebp+s2]
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shld    dx, bx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_4056A0
                and     ah, 0F7h

loc_4056A0:                             ; CODE XREF: exec_shldw+24↑j
                and     flags, 8C5h
                mov     [esp+18h], edi
                mov     [esp+0Ch], ebx
                mov     [esp+8], esi
                mov     [esp+1Ch], eax
                mov     [esp+14h], res
                mov     [esp+10h], ecx
                mov     dword ptr [esp+4], offset aShldw ; "shldw"
                mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 405677
exec_shldw      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shld(int s2, int s0, int s1)
exec_shld       proc near               ; CODE XREF: test_shld+1D↓p
                                        ; test_shld+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s2]
                mov     esi, [ebp+s0]
                mov     edi, [ebp+s1]
                mov     [esp+4], esi    ; s0
                mov     [esp+8], edi    ; s1
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shldl
                mov     [esp+8], edi    ; s1
                mov     [esp+4], esi    ; s0
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shldw
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 4056D9
exec_shld       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_shld()
test_shld       proc near               ; DATA XREF: initcall:_test_shld↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_40572C:                             ; CODE XREF: test_shld+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shld
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40572C
                xor     i, i

loc_40574C:                             ; CODE XREF: test_shld+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shld
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40574C
                xor     i, i

loc_40576C:                             ; CODE XREF: test_shld+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shld
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40576C
                xor     i, i

loc_40578C:                             ; CODE XREF: test_shld+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shld
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_40578C
                xor     i, i

loc_4057AC:                             ; CODE XREF: test_shld+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_shld
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4057AC
                xor     i, i

loc_4057CC:                             ; CODE XREF: test_shld+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_shld
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4057CC
                xor     i, i

loc_4057EC:                             ; CODE XREF: test_shld+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_shld
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4057EC
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 405723
test_shld       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shrdl(int s2, int s0, int s1, int iflags)
exec_shrdl      proc near               ; CODE XREF: exec_shrd+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                mov     ecx, [ebp+s1]
                mov     esi, [ebp+s0]
res = esi                               ; int
                mov     edi, [ebp+iflags]
flags = edi                             ; int
                mov     ebx, [ebp+s2]
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shrd    edx, ebx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_405838
                and     ah, 0F7h

loc_405838:                             ; CODE XREF: exec_shrdl+23↑j
                and     flags, 8C5h
                mov     [esp+18h], edi
                mov     [esp+0Ch], ebx
                mov     [esp+8], esi
                mov     [esp+1Ch], eax
                mov     [esp+14h], res
                mov     [esp+10h], ecx
                mov     dword ptr [esp+4], offset aShrdl ; "shrdl"
                mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 405810
exec_shrdl      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shrdw(int s2, int s0, int s1, int iflags)
exec_shrdw      proc near               ; CODE XREF: exec_shrd+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                mov     ecx, [ebp+s1]
                mov     esi, [ebp+s0]
res = esi                               ; int
                mov     edi, [ebp+iflags]
flags = edi                             ; int
                mov     ebx, [ebp+s2]
                mov     edx, res
                mov     eax, flags
                push    eax
                popf
                shrd    dx, bx, cl
                pushf
                pop     eax
res = edx                               ; int
flags = eax                             ; int
                cmp     ecx, 1
                jz      short loc_40589A
                and     ah, 0F7h

loc_40589A:                             ; CODE XREF: exec_shrdw+24↑j
                and     flags, 8C5h
                mov     [esp+18h], edi
                mov     [esp+0Ch], ebx
                mov     [esp+8], esi
                mov     [esp+1Ch], eax
                mov     [esp+14h], res
                mov     [esp+10h], ecx
                mov     dword ptr [esp+4], offset aShrdw ; "shrdw"
                mov     dword ptr [esp], offset a10sA08lxB08lxC ; "%-10s A=%08lx B=%08lx C=%08lx R=%08lx C"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 405871
exec_shrdw      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_shrd(int s2, int s0, int s1)
exec_shrd       proc near               ; CODE XREF: test_shrd+1D↓p
                                        ; test_shrd+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s2]
                mov     esi, [ebp+s0]
                mov     edi, [ebp+s1]
                mov     [esp+4], esi    ; s0
                mov     [esp+8], edi    ; s1
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shrdl
                mov     [esp+8], edi    ; s1
                mov     [esp+4], esi    ; s0
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_shrdw
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 4058D3
exec_shrd       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_shrd()
test_shrd       proc near               ; DATA XREF: initcall:_test_shrd↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_405926:                             ; CODE XREF: test_shrd+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shrd
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405926
                xor     i, i

loc_405946:                             ; CODE XREF: test_shrd+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shrd
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405946
                xor     i, i

loc_405966:                             ; CODE XREF: test_shrd+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_shrd
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405966
                xor     i, i

loc_405986:                             ; CODE XREF: test_shrd+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_shrd
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405986
                xor     i, i

loc_4059A6:                             ; CODE XREF: test_shrd+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_shrd
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4059A6
                xor     i, i

loc_4059C6:                             ; CODE XREF: test_shrd+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_shrd
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4059C6
                xor     i, i

loc_4059E6:                             ; CODE XREF: test_shrd+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_shrd
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4059E6
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 40591D
test_shrd       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btl(int s2, int s0, int s1, int iflags)
exec_btl        proc near               ; CODE XREF: exec_bt+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                bt      ecx, edx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_405A2E
                and     ah, 0F7h

loc_405A2E:                             ; CODE XREF: exec_btl+1F↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtl ; "btl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405A0A
exec_btl        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btw(int s2, int s0, int s1, int iflags)
exec_btw        proc near               ; CODE XREF: exec_bt+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                bt      cx, dx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_405A85
                and     ah, 0F7h

loc_405A85:                             ; CODE XREF: exec_btw+20↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtw ; "btw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405A60
exec_btw        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_bt(int s2, int s0, int s1)
exec_bt         proc near               ; CODE XREF: test_bt+1D↓p
                                        ; test_bt+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s2]
                mov     esi, [ebp+s0]
                mov     edi, [ebp+s1]
                mov     [esp+4], esi    ; s0
                mov     [esp+8], edi    ; s1
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btl
                mov     [esp+8], edi    ; s1
                mov     [esp+4], esi    ; s0
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btw
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 405AB7
exec_bt         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_bt()
test_bt         proc near               ; DATA XREF: initcall:_test_bt↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_405B0A:                             ; CODE XREF: test_bt+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_bt
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405B0A
                xor     i, i

loc_405B2A:                             ; CODE XREF: test_bt+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_bt
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405B2A
                xor     i, i

loc_405B4A:                             ; CODE XREF: test_bt+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_bt
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405B4A
                xor     i, i

loc_405B6A:                             ; CODE XREF: test_bt+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_bt
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405B6A
                xor     i, i

loc_405B8A:                             ; CODE XREF: test_bt+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_bt
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405B8A
                xor     i, i

loc_405BAA:                             ; CODE XREF: test_bt+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_bt
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405BAA
                xor     i, i

loc_405BCA:                             ; CODE XREF: test_bt+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_bt
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405BCA
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 405B01
test_bt         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btsl(int s2, int s0, int s1, int iflags)
exec_btsl       proc near               ; CODE XREF: exec_bts+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                bts     ecx, edx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_405C12
                and     ah, 0F7h

loc_405C12:                             ; CODE XREF: exec_btsl+1F↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtsl ; "btsl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405BEE
exec_btsl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btsw(int s2, int s0, int s1, int iflags)
exec_btsw       proc near               ; CODE XREF: exec_bts+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                bts     cx, dx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_405C69
                and     ah, 0F7h

loc_405C69:                             ; CODE XREF: exec_btsw+20↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtsw ; "btsw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405C44
exec_btsw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_bts(int s2, int s0, int s1)
exec_bts        proc near               ; CODE XREF: test_bts+1D↓p
                                        ; test_bts+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s2]
                mov     esi, [ebp+s0]
                mov     edi, [ebp+s1]
                mov     [esp+4], esi    ; s0
                mov     [esp+8], edi    ; s1
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btsl
                mov     [esp+8], edi    ; s1
                mov     [esp+4], esi    ; s0
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btsw
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 405C9B
exec_bts        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_bts()
test_bts        proc near               ; DATA XREF: initcall:_test_bts↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_405CEE:                             ; CODE XREF: test_bts+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_bts
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405CEE
                xor     i, i

loc_405D0E:                             ; CODE XREF: test_bts+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_bts
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405D0E
                xor     i, i

loc_405D2E:                             ; CODE XREF: test_bts+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_bts
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405D2E
                xor     i, i

loc_405D4E:                             ; CODE XREF: test_bts+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_bts
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405D4E
                xor     i, i

loc_405D6E:                             ; CODE XREF: test_bts+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_bts
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405D6E
                xor     i, i

loc_405D8E:                             ; CODE XREF: test_bts+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_bts
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405D8E
                xor     i, i

loc_405DAE:                             ; CODE XREF: test_bts+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_bts
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405DAE
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 405CE5
test_bts        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btrl(int s2, int s0, int s1, int iflags)
exec_btrl       proc near               ; CODE XREF: exec_btr+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                btr     ecx, edx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_405DF6
                and     ah, 0F7h

loc_405DF6:                             ; CODE XREF: exec_btrl+1F↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtrl ; "btrl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405DD2
exec_btrl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btrw(int s2, int s0, int s1, int iflags)
exec_btrw       proc near               ; CODE XREF: exec_btr+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                btr     cx, dx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_405E4D
                and     ah, 0F7h

loc_405E4D:                             ; CODE XREF: exec_btrw+20↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtrw ; "btrw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405E28
exec_btrw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btr(int s2, int s0, int s1)
exec_btr        proc near               ; CODE XREF: test_btr+1D↓p
                                        ; test_btr+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s2]
                mov     esi, [ebp+s0]
                mov     edi, [ebp+s1]
                mov     [esp+4], esi    ; s0
                mov     [esp+8], edi    ; s1
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btrl
                mov     [esp+8], edi    ; s1
                mov     [esp+4], esi    ; s0
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btrw
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 405E7F
exec_btr        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_btr()
test_btr        proc near               ; DATA XREF: initcall:_test_btr↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_405ED2:                             ; CODE XREF: test_btr+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_btr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405ED2
                xor     i, i

loc_405EF2:                             ; CODE XREF: test_btr+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_btr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405EF2
                xor     i, i

loc_405F12:                             ; CODE XREF: test_btr+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_btr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405F12
                xor     i, i

loc_405F32:                             ; CODE XREF: test_btr+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_btr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405F32
                xor     i, i

loc_405F52:                             ; CODE XREF: test_btr+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_btr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405F52
                xor     i, i

loc_405F72:                             ; CODE XREF: test_btr+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_btr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405F72
                xor     i, i

loc_405F92:                             ; CODE XREF: test_btr+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_btr
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_405F92
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 405EC9
test_btr        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btcl(int s2, int s0, int s1, int iflags)
exec_btcl       proc near               ; CODE XREF: exec_btc+25↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                btc     ecx, edx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_405FDA
                and     ah, 0F7h

loc_405FDA:                             ; CODE XREF: exec_btcl+1F↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtcl ; "btcl"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 405FB6
exec_btcl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btcw(int s2, int s0, int s1, int iflags)
exec_btcw       proc near               ; CODE XREF: exec_btc+3D↓p

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h
iflags          = dword ptr  14h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                sub     esp, 20h
                mov     edx, [ebp+s1]
                mov     ebx, [ebp+s0]
res = ebx                               ; int
                mov     esi, [ebp+iflags]
flags = esi                             ; int
                mov     ecx, res
                mov     eax, flags
                push    eax
                popf
                btc     cx, dx
                pushf
                pop     eax
res = ecx                               ; int
flags = eax                             ; int
                cmp     edx, 1
                jz      short loc_406031
                and     ah, 0F7h

loc_406031:                             ; CODE XREF: exec_btcw+20↑j
                and     flags, 1
                mov     [esp+14h], esi
                mov     [esp+8], ebx
                mov     [esp+18h], eax
                mov     [esp+10h], res
                mov     [esp+0Ch], edx
                mov     dword ptr [esp+4], offset aBtcw ; "btcw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR_0 ; "%-10s A=%08lx B=%08lx R=%08lx CCIN=%04l"...
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40600C
exec_btcw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl exec_btc(int s2, int s0, int s1)
exec_btc        proc near               ; CODE XREF: test_btc+1D↓p
                                        ; test_btc+3D↓p ...

s2              = dword ptr  8
s0              = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     ebx, [ebp+s2]
                mov     esi, [ebp+s0]
                mov     edi, [ebp+s1]
                mov     [esp+4], esi    ; s0
                mov     [esp+8], edi    ; s1
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btcl
                mov     [esp+8], edi    ; s1
                mov     [esp+4], esi    ; s0
                mov     [esp], ebx      ; s2
                mov     dword ptr [esp+0Ch], 0 ; iflags
                call    exec_btcw
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 406063
exec_btc        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_btc()
test_btc        proc near               ; DATA XREF: initcall:_test_btc↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                xor     ebx, ebx

loc_4060B6:                             ; CODE XREF: test_btc+25↓j
i = ebx                                 ; int ; s1
                mov     [esp+8], i
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_btc
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4060B6
                xor     i, i

loc_4060D6:                             ; CODE XREF: test_btc+45↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_btc
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4060D6
                xor     i, i

loc_4060F6:                             ; CODE XREF: test_btc+65↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 82345679h ; s0
                mov     dword ptr [esp], 21AD3D34h ; s2
                inc     i
                call    exec_btc
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_4060F6
                xor     i, i

loc_406116:                             ; CODE XREF: test_btc+85↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 12345678h ; s0
                mov     dword ptr [esp], 813F3421h ; s2
                inc     i
                call    exec_btc
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_406116
                xor     i, i

loc_406136:                             ; CODE XREF: test_btc+A5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 80008688h ; s0
                mov     dword ptr [esp], 80008481h ; s2
                inc     i
                call    exec_btc
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_406136
                xor     i, i

loc_406156:                             ; CODE XREF: test_btc+C5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; s0
                mov     dword ptr [esp], 0FFFFFFFFh ; s2
                inc     i
                call    exec_btc
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_406156
                xor     i, i

loc_406176:                             ; CODE XREF: test_btc+E5↓j
                mov     [esp+8], i      ; s1
                mov     dword ptr [esp+4], 0FFFE0080h ; s0
                mov     dword ptr [esp], 0FFFE0080h ; s2
                inc     i
                call    exec_btc
i = ebx                                 ; int
                cmp     i, 20h
                jnz     short loc_406176
                add     esp, 14h
                pop     i
                pop     ebp
                retn
; } // starts at 4060AD
test_btc        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_lea()
test_lea        proc near               ; CODE XREF: main+4E↓p
; __unwind {
                push    ebp
                mov     ecx, 4
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 1Ch
                mov     esi, 10h
                mov     edi, 20h
                mov     ebx, 2
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000 ; "0x4000"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, large ds:4000h
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEax ; "(%%eax)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [eax]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEbx ; "(%%ebx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ebx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEcx ; "(%%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ecx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEdx ; "(%%edx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEsi ; "(%%esi)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [esi]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEdi ; "(%%edi)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edi]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Eax ; "0x40(%%eax)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [eax+40h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Ebx ; "0x40(%%ebx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ebx+40h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Ecx ; "0x40(%%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ecx+40h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Edx ; "0x40(%%edx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edx+40h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Esi ; "0x40(%%esi)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [esi+40h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Edi ; "0x40(%%edi)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edi+40h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000Eax ; "0x4000(%%eax)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [eax+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000Ebx ; "0x4000(%%ebx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ebx+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000Ecx ; "0x4000(%%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ecx+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000Edx ; "0x4000(%%edx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edx+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000Esi ; "0x4000(%%esi)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [esi+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000Edi ; "0x4000(%%edi)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edi+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEaxEcx ; "(%%eax, %%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [eax+ecx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEbxEdx ; "(%%ebx, %%edx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ebx+edx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEcxEcx ; "(%%ecx, %%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ecx+ecx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEdxEcx ; "(%%edx, %%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edx+ecx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEsiEcx ; "(%%esi, %%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [esi+ecx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEdiEcx ; "(%%edi, %%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edi+ecx]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40EaxEcx ; "0x40(%%eax, %%ecx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [eax+ecx+40h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000EbxEdx ; "0x4000(%%ebx, %%edx)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ebx+edx+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEcxEcx2 ; "(%%ecx, %%ecx, 2)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ecx+ecx*2]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEdxEcx4 ; "(%%edx, %%ecx, 4)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edx+ecx*4]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEsiEcx8 ; "(%%esi, %%ecx, 8)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [esi+ecx*8]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEax2 ; "(,%%eax, 2)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, ds:0[eax*2]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEbx4 ; "(,%%ebx, 4)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, ds:0[ebx*4]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset aEcx8 ; "(,%%ecx, 8)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, ds:0[ecx*8]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Eax2 ; "0x40(,%%eax, 2)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, ds:40h[eax*2]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Ebx4 ; "0x40(,%%ebx, 4)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, ds:40h[ebx*4]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x40Ecx8 ; "0x40(,%%ecx, 8)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, ds:40h[ecx*8]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a10EcxEcx2 ; "-10(%%ecx, %%ecx, 2)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ecx+ecx*2-0Ah]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a10EdxEcx4 ; "-10(%%edx, %%ecx, 4)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edx+ecx*4-0Ah]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a10EsiEcx8 ; "-10(%%esi, %%ecx, 8)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [esi+ecx*8-0Ah]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000EcxEcx2 ; "0x4000(%%ecx, %%ecx, 2)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [ecx+ecx*2+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000EdxEcx4 ; "0x4000(%%edx, %%ecx, 4)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                mov     eax, 1
                lea     eax, [edx+ecx*4+4000h]
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     eax, 1
                mov     ecx, 4
                mov     edx, 8
                mov     dword ptr [esp+4], offset a0x4000EsiEcx8 ; "0x4000(%%esi, %%ecx, 8)"
                mov     dword ptr [esp], offset aLeaS08lx ; "lea %s = %08lx\n"
                lea     ebx, [esi+ecx*8+4000h]
res = ebx                               ; int
                mov     [esp+8], res
                call    printf
                add     esp, 1Ch
                pop     res
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 40619A
test_lea        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_jcc()
test_jcc        proc near               ; CODE XREF: main+30↓p

var_2C          = dword ptr -2Ch
val             = dword ptr -1Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 3Ch
                mov     ebx, 1
                mov     eax, 1
                cmp     ebx, ebx
                jnz     short loc_4068F5
                mov     eax, 0

loc_4068F5:                             ; CODE XREF: test_jcc+15↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aJne ; "jne"
                mov     [esp+8], res
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     esi, 12345678h
                call    printf
                mov     dword ptr [esp+4], offset aSetne ; "setne"
                mov     eax, 0
                cmp     ebx, ebx
                setnz   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                cmp     ebx, ebx
                cmovnz  esi, [ebp+val]
res = esi                               ; int
                mov     dword ptr [esp+4], offset aCmovnel ; "cmovnel"
                mov     [esp+8], res
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edi, 12345678h
                call    printf
                mov     dword ptr [esp+4], offset aCmovnew ; "cmovnew"
                cmp     ebx, ebx
                cmovnz  si, bx
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                xor     res, res
                mov     eax, 1
                cmp     ebx, esi
                jnz     short loc_40698C
                mov     eax, 0

loc_40698C:                             ; CODE XREF: test_jcc+AC↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aJne ; "jne"
                mov     [esp+8], res
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                call    printf
                mov     dword ptr [esp+4], offset aSetne ; "setne"
                mov     eax, 0
                cmp     ebx, esi
                setnz   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                cmp     ebx, esi
                cmovnz  edi, [ebp+val]
res = edi                               ; int
                mov     dword ptr [esp+4], offset aCmovnel ; "cmovnel"
                mov     [esp+8], res
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aCmovnew ; "cmovnew"
                cmp     ebx, esi
                cmovnz  di, bx
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aJe ; "je"
                mov     eax, 1
                cmp     ebx, ebx
                jz      short loc_406A1F
                mov     eax, 0

loc_406A1F:                             ; CODE XREF: test_jcc+13F↑j
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     dword ptr [esp+4], offset aSete ; "sete"
                mov     eax, 0
                cmp     ebx, ebx
                setz    al
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     res, 12345678h
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovel ; "cmovel"
                cmp     ebx, ebx
                cmovz   edi, [ebp+val]
res = edi                               ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aCmovew ; "cmovew"
                cmp     ebx, ebx
                cmovz   di, bx
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aJe ; "je"
                mov     eax, 1
                cmp     ebx, esi
                jz      short loc_406AAF
                mov     eax, 0

loc_406AAF:                             ; CODE XREF: test_jcc+1CF↑j
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     dword ptr [esp+4], offset aSete ; "sete"
                mov     eax, 0
                cmp     ebx, esi
                setz    al
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     res, 12345678h
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovel ; "cmovel"
                cmp     ebx, esi
                cmovz   edi, [ebp+val]
res = edi                               ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aCmovew ; "cmovew"
                cmp     ebx, esi
                cmovz   di, bx
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aJl ; "jl"
                mov     eax, 1
                cmp     ebx, ebx
                jl      short loc_406B3F
                mov     eax, 0

loc_406B3F:                             ; CODE XREF: test_jcc+25F↑j
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     dword ptr [esp+4], offset aSetl ; "setl"
                mov     eax, 0
                cmp     ebx, ebx
                setl    al
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     res, 12345678h
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovll ; "cmovll"
                cmp     ebx, ebx
                cmovl   edi, [ebp+val]
res = edi                               ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aCmovlw ; "cmovlw"
                cmp     ebx, ebx
                cmovl   di, bx
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aJl ; "jl"
                mov     eax, 1
                cmp     ebx, esi
                jl      short loc_406BCF
                mov     eax, 0

loc_406BCF:                             ; CODE XREF: test_jcc+2EF↑j
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     dword ptr [esp+4], offset aSetl ; "setl"
                mov     eax, 0
                cmp     ebx, esi
                setl    al
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], eax
                call    printf
                mov     res, 12345678h
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovll ; "cmovll"
                cmp     ebx, esi
                cmovl   edi, [ebp+val]
res = edi                               ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aCmovlw ; "cmovlw"
                cmp     ebx, esi
                cmovl   di, bx
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                or      res, 0FFFFFFFFh
                mov     eax, 1
                cmp     ebx, edi
                jl      short loc_406C5A
                mov     eax, 0

loc_406C5A:                             ; CODE XREF: test_jcc+37A↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aJl ; "jl"
                mov     [esp+8], res
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                call    printf
                mov     dword ptr [esp+4], offset aSetl ; "setl"
                mov     eax, 0
                cmp     ebx, edi
                setl    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovll ; "cmovll"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, edi
                cmovl   edx, [ebp+val]
res_0 = edx                             ; int
                mov     [esp+8], res_0
                mov     [ebp+var_2C], res_0
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, edi
                cmovl   dx, bx
res_0 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovlw ; "cmovlw"
                mov     [esp+8], res_0
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJle ; "jle"
                mov     eax, 1
                cmp     ebx, ebx
                jle     short loc_406CF8
                mov     eax, 0

loc_406CF8:                             ; CODE XREF: test_jcc+418↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetle ; "setle"
                mov     eax, 0
                cmp     ebx, ebx
                setle   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovlel ; "cmovlel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovle  edx, [ebp+val]
res_1 = edx                             ; int
                mov     [esp+8], res_1
                mov     [ebp+var_2C], res_1
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovle  dx, bx
res_1 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovlew ; "cmovlew"
                mov     [esp+8], res_1
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJle ; "jle"
                mov     eax, 1
                cmp     ebx, esi
                jle     short loc_406D8E
                mov     eax, 0

loc_406D8E:                             ; CODE XREF: test_jcc+4AE↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetle ; "setle"
                mov     eax, 0
                cmp     ebx, esi
                setle   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovlel ; "cmovlel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovle  edx, [ebp+val]
res_2 = edx                             ; int
                mov     [esp+8], res_2
                mov     [ebp+var_2C], res_2
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovle  dx, bx
res_2 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovlew ; "cmovlew"
                mov     [esp+8], res_2
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJle ; "jle"
                mov     eax, 1
                cmp     ebx, edi
                jle     short loc_406E24
                mov     eax, 0

loc_406E24:                             ; CODE XREF: test_jcc+544↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetle ; "setle"
                mov     eax, 0
                cmp     ebx, edi
                setle   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovlel ; "cmovlel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, edi
                cmovle  edx, [ebp+val]
res_3 = edx                             ; int
                mov     [esp+8], res_3
                mov     [ebp+var_2C], res_3
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, edi
                cmovle  dx, bx
res_3 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovlew ; "cmovlew"
                mov     [esp+8], res_3
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJge ; "jge"
                mov     eax, 1
                cmp     ebx, ebx
                jge     short loc_406EBA
                mov     eax, 0

loc_406EBA:                             ; CODE XREF: test_jcc+5DA↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetge ; "setge"
                mov     eax, 0
                cmp     ebx, ebx
                setnl   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovgel ; "cmovgel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovge  edx, [ebp+val]
res_4 = edx                             ; int
                mov     [esp+8], res_4
                mov     [ebp+var_2C], res_4
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovge  dx, bx
res_4 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovgew ; "cmovgew"
                mov     [esp+8], res_4
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJge ; "jge"
                mov     eax, 1
                cmp     ebx, esi
                jge     short loc_406F50
                mov     eax, 0

loc_406F50:                             ; CODE XREF: test_jcc+670↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetge ; "setge"
                mov     eax, 0
                cmp     ebx, esi
                setnl   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovgel ; "cmovgel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovge  edx, [ebp+val]
res_5 = edx                             ; int
                mov     [esp+8], res_5
                mov     [ebp+var_2C], res_5
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovge  dx, bx
res_5 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovgew ; "cmovgew"
                mov     [esp+8], res_5
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJge ; "jge"
                mov     eax, 1
                cmp     edi, ebx
                jge     short loc_406FE6
                mov     eax, 0

loc_406FE6:                             ; CODE XREF: test_jcc+706↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetge ; "setge"
                mov     eax, 0
                cmp     edi, ebx
                setnl   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovgel ; "cmovgel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     edi, ebx
                cmovge  edx, [ebp+val]
res_6 = edx                             ; int
                mov     [esp+8], res_6
                mov     [ebp+var_2C], res_6
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     edi, ebx
                cmovge  dx, bx
res_6 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovgew ; "cmovgew"
                mov     [esp+8], res_6
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJg ; "jg"
                mov     eax, 1
                cmp     ebx, ebx
                jg      short loc_40707C
                mov     eax, 0

loc_40707C:                             ; CODE XREF: test_jcc+79C↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetg ; "setg"
                mov     eax, 0
                cmp     ebx, ebx
                setnle  al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovgl ; "cmovgl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovg   edx, [ebp+val]
res_7 = edx                             ; int
                mov     [esp+8], res_7
                mov     [ebp+var_2C], res_7
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovg   dx, bx
res_7 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovgw ; "cmovgw"
                mov     [esp+8], res_7
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJg ; "jg"
                mov     eax, 1
                cmp     ebx, esi
                jg      short loc_407112
                mov     eax, 0

loc_407112:                             ; CODE XREF: test_jcc+832↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetg ; "setg"
                mov     eax, 0
                cmp     ebx, esi
                setnle  al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovgl ; "cmovgl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovg   edx, [ebp+val]
res_8 = edx                             ; int
                mov     [esp+8], res_8
                mov     [ebp+var_2C], res_8
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovg   dx, bx
res_8 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovgw ; "cmovgw"
                mov     [esp+8], res_8
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJg ; "jg"
                mov     eax, 1
                cmp     ebx, edi
                jg      short loc_4071A8
                mov     eax, 0

loc_4071A8:                             ; CODE XREF: test_jcc+8C8↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetg ; "setg"
                mov     eax, 0
                cmp     ebx, edi
                setnle  al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovgl ; "cmovgl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, edi
                cmovg   edx, [ebp+val]
res_9 = edx                             ; int
                mov     [esp+8], res_9
                mov     [ebp+var_2C], res_9
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, edi
                cmovg   dx, bx
res_9 = edx                             ; int
                mov     dword ptr [esp+4], offset aCmovgw ; "cmovgw"
                mov     [esp+8], res_9
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJb ; "jb"
                mov     eax, 1
                cmp     ebx, ebx
                jb      short loc_40723E
                mov     eax, 0

loc_40723E:                             ; CODE XREF: test_jcc+95E↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetb ; "setb"
                mov     eax, 0
                cmp     ebx, ebx
                setb    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovbl ; "cmovbl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovb   edx, [ebp+val]
res_10 = edx                            ; int
                mov     [esp+8], res_10
                mov     [ebp+var_2C], res_10
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovb   dx, bx
res_10 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovbw ; "cmovbw"
                mov     [esp+8], res_10
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJb ; "jb"
                mov     eax, 1
                cmp     ebx, esi
                jb      short loc_4072D4
                mov     eax, 0

loc_4072D4:                             ; CODE XREF: test_jcc+9F4↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetb ; "setb"
                mov     eax, 0
                cmp     ebx, esi
                setb    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovbl ; "cmovbl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovb   edx, [ebp+val]
res_11 = edx                            ; int
                mov     [esp+8], res_11
                mov     [ebp+var_2C], res_11
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovb   dx, bx
res_11 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovbw ; "cmovbw"
                mov     [esp+8], res_11
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJb ; "jb"
                mov     eax, 1
                cmp     ebx, edi
                jb      short loc_40736A
                mov     eax, 0

loc_40736A:                             ; CODE XREF: test_jcc+A8A↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetb ; "setb"
                mov     eax, 0
                cmp     ebx, edi
                setb    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovbl ; "cmovbl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, edi
                cmovb   edx, [ebp+val]
res_12 = edx                            ; int
                mov     [esp+8], res_12
                mov     [ebp+var_2C], res_12
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, edi
                cmovb   dx, bx
res_12 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovbw ; "cmovbw"
                mov     [esp+8], res_12
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJbe ; "jbe"
                mov     eax, 1
                cmp     ebx, ebx
                jbe     short loc_407400
                mov     eax, 0

loc_407400:                             ; CODE XREF: test_jcc+B20↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetbe ; "setbe"
                mov     eax, 0
                cmp     ebx, ebx
                setbe   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovbel ; "cmovbel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovbe  edx, [ebp+val]
res_13 = edx                            ; int
                mov     [esp+8], res_13
                mov     [ebp+var_2C], res_13
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovbe  dx, bx
res_13 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovbew ; "cmovbew"
                mov     [esp+8], res_13
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJbe ; "jbe"
                mov     eax, 1
                cmp     ebx, esi
                jbe     short loc_407496
                mov     eax, 0

loc_407496:                             ; CODE XREF: test_jcc+BB6↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetbe ; "setbe"
                mov     eax, 0
                cmp     ebx, esi
                setbe   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovbel ; "cmovbel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovbe  edx, [ebp+val]
res_14 = edx                            ; int
                mov     [esp+8], res_14
                mov     [ebp+var_2C], res_14
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovbe  dx, bx
res_14 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovbew ; "cmovbew"
                mov     [esp+8], res_14
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJbe ; "jbe"
                mov     eax, 1
                cmp     ebx, edi
                jbe     short loc_40752C
                mov     eax, 0

loc_40752C:                             ; CODE XREF: test_jcc+C4C↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetbe ; "setbe"
                mov     eax, 0
                cmp     ebx, edi
                setbe   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovbel ; "cmovbel"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, edi
                cmovbe  edx, [ebp+val]
res_15 = edx                            ; int
                mov     [esp+8], res_15
                mov     [ebp+var_2C], res_15
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, edi
                cmovbe  dx, bx
res_15 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovbew ; "cmovbew"
                mov     [esp+8], res_15
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJae ; "jae"
                mov     eax, 1
                cmp     ebx, ebx
                jnb     short loc_4075C2
                mov     eax, 0

loc_4075C2:                             ; CODE XREF: test_jcc+CE2↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetae ; "setae"
                mov     eax, 0
                cmp     ebx, ebx
                setnb   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovael ; "cmovael"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovnb  edx, [ebp+val]
res_16 = edx                            ; int
                mov     [esp+8], res_16
                mov     [ebp+var_2C], res_16
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovnb  dx, bx
res_16 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovaew ; "cmovaew"
                mov     [esp+8], res_16
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJae ; "jae"
                mov     eax, 1
                cmp     ebx, esi
                jnb     short loc_407658
                mov     eax, 0

loc_407658:                             ; CODE XREF: test_jcc+D78↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetae ; "setae"
                mov     eax, 0
                cmp     ebx, esi
                setnb   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovael ; "cmovael"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovnb  edx, [ebp+val]
res_17 = edx                            ; int
                mov     [esp+8], res_17
                mov     [ebp+var_2C], res_17
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovnb  dx, bx
res_17 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovaew ; "cmovaew"
                mov     [esp+8], res_17
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJae ; "jae"
                mov     eax, 1
                cmp     ebx, edi
                jnb     short loc_4076EE
                mov     eax, 0

loc_4076EE:                             ; CODE XREF: test_jcc+E0E↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetae ; "setae"
                mov     eax, 0
                cmp     ebx, edi
                setnb   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovael ; "cmovael"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, edi
                cmovnb  edx, [ebp+val]
res_18 = edx                            ; int
                mov     [esp+8], res_18
                mov     [ebp+var_2C], res_18
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, edi
                cmovnb  dx, bx
res_18 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovaew ; "cmovaew"
                mov     [esp+8], res_18
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJa ; "ja"
                mov     eax, 1
                cmp     ebx, ebx
                ja      short loc_407784
                mov     eax, 0

loc_407784:                             ; CODE XREF: test_jcc+EA4↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSeta ; "seta"
                mov     eax, 0
                cmp     ebx, ebx
                setnbe  al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmoval ; "cmoval"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmova   edx, [ebp+val]
res_19 = edx                            ; int
                mov     [esp+8], res_19
                mov     [ebp+var_2C], res_19
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmova   dx, bx
res_19 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovaw ; "cmovaw"
                mov     [esp+8], res_19
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJa ; "ja"
                mov     eax, 1
                cmp     ebx, esi
                ja      short loc_40781A
                mov     eax, 0

loc_40781A:                             ; CODE XREF: test_jcc+F3A↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSeta ; "seta"
                mov     eax, 0
                cmp     ebx, esi
                setnbe  al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmoval ; "cmoval"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmova   edx, [ebp+val]
res_20 = edx                            ; int
                mov     [esp+8], res_20
                mov     [ebp+var_2C], res_20
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmova   dx, bx
res_20 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovaw ; "cmovaw"
                mov     [esp+8], res_20
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJa ; "ja"
                mov     eax, 1
                cmp     ebx, edi
                ja      short loc_4078B0
                mov     eax, 0

loc_4078B0:                             ; CODE XREF: test_jcc+FD0↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSeta ; "seta"
                mov     eax, 0
                cmp     ebx, edi
                setnbe  al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmoval ; "cmoval"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, edi
                cmova   edx, [ebp+val]
res_21 = edx                            ; int
                mov     [esp+8], res_21
                mov     [ebp+var_2C], res_21
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, edi
                cmova   dx, bx
res_21 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovaw ; "cmovaw"
                mov     [esp+8], res_21
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJp ; "jp"
                mov     eax, 1
                cmp     ebx, ebx
                jp      short loc_407946
                mov     eax, 0

loc_407946:                             ; CODE XREF: test_jcc+1066↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetp ; "setp"
                mov     eax, 0
                cmp     ebx, ebx
                setp    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovpl ; "cmovpl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovp   edx, [ebp+val]
res_22 = edx                            ; int
                mov     [esp+8], res_22
                mov     [ebp+var_2C], res_22
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovp   dx, bx
res_22 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovpw ; "cmovpw"
                mov     [esp+8], res_22
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJp ; "jp"
                mov     eax, 1
                cmp     ebx, esi
                jp      short loc_4079DC
                mov     eax, 0

loc_4079DC:                             ; CODE XREF: test_jcc+10FC↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetp ; "setp"
                mov     eax, 0
                cmp     ebx, esi
                setp    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovpl ; "cmovpl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovp   edx, [ebp+val]
res_23 = edx                            ; int
                mov     [esp+8], res_23
                mov     [ebp+var_2C], res_23
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovp   dx, bx
res_23 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovpw ; "cmovpw"
                mov     [esp+8], res_23
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJnp ; "jnp"
                mov     eax, 1
                cmp     ebx, ebx
                jnp     short loc_407A72
                mov     eax, 0

loc_407A72:                             ; CODE XREF: test_jcc+1192↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetnp ; "setnp"
                mov     eax, 0
                cmp     ebx, ebx
                setnp   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovnpl ; "cmovnpl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, ebx
                cmovnp  edx, [ebp+val]
res_24 = edx                            ; int
                mov     [esp+8], res_24
                mov     [ebp+var_2C], res_24
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, ebx
                cmovnp  dx, bx
res_24 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovnpw ; "cmovnpw"
                mov     [esp+8], res_24
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJnp ; "jnp"
                mov     eax, 1
                cmp     ebx, esi
                jnp     short loc_407B08
                mov     eax, 0

loc_407B08:                             ; CODE XREF: test_jcc+1228↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetnp ; "setnp"
                mov     eax, 0
                cmp     ebx, esi
                setnp   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovnpl ; "cmovnpl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     ebx, esi
                cmovnp  edx, [ebp+val]
res_25 = edx                            ; int
                mov     [esp+8], res_25
                mov     [ebp+var_2C], res_25
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     ebx, esi
                cmovnp  dx, bx
res_25 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovnpw ; "cmovnpw"
                mov     [esp+8], res_25
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJo ; "jo"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 1
                cmp     eax, esi
                jo      short loc_407BAA
                mov     eax, 0

loc_407BAA:                             ; CODE XREF: test_jcc+12CA↑j
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSeto ; "seto"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 0
                cmp     eax, esi
                seto    al
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovol ; "cmovol"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     eax, esi
                cmovo   edx, [ebp+val]
res_26 = edx                            ; int
                mov     [esp+8], res_26
                mov     [ebp+var_2C], res_26
                call    printf
                mov     edx, [ebp+var_2C]
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovow ; "cmovow"
                cmp     eax, esi
                cmovo   dx, bx
res_26 = edx                            ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res_26
                call    printf
                mov     dword ptr [esp+4], offset aJo ; "jo"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 1
                cmp     eax, edi
                jo      short loc_407C54
                mov     eax, 0

loc_407C54:                             ; CODE XREF: test_jcc+1374↑j
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSeto ; "seto"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 0
                cmp     eax, edi
                seto    al
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovol ; "cmovol"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     eax, edi
                cmovo   edx, [ebp+val]
res_27 = edx                            ; int
                mov     [esp+8], res_27
                mov     [ebp+var_2C], res_27
                call    printf
                mov     edx, [ebp+var_2C]
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovow ; "cmovow"
                cmp     eax, edi
                cmovo   dx, bx
res_27 = edx                            ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res_27
                call    printf
                mov     dword ptr [esp+4], offset aJno ; "jno"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 1
                cmp     eax, esi
                jno     short loc_407CFE
                mov     eax, 0

loc_407CFE:                             ; CODE XREF: test_jcc+141E↑j
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetno ; "setno"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 0
                cmp     eax, esi
                setno   al
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovnol ; "cmovnol"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     eax, esi
                cmovno  edx, [ebp+val]
res_28 = edx                            ; int
                mov     [esp+8], res_28
                mov     [ebp+var_2C], res_28
                call    printf
                mov     edx, [ebp+var_2C]
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovnow ; "cmovnow"
                cmp     eax, esi
                cmovno  dx, bx
res_28 = edx                            ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res_28
                call    printf
                mov     dword ptr [esp+4], offset aJno ; "jno"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 1
                cmp     eax, edi
                jno     short loc_407DA8
                mov     eax, 0

loc_407DA8:                             ; CODE XREF: test_jcc+14C8↑j
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetno ; "setno"
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     eax, 7FFFFFFFh
                mov     eax, 0
                cmp     eax, edi
                setno   al
res = eax                               ; int
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovnol ; "cmovnol"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     eax, edi
                cmovno  edx, [ebp+val]
res_29 = edx                            ; int
                mov     [esp+8], res_29
                mov     [ebp+var_2C], res_29
                call    printf
                mov     edx, [ebp+var_2C]
                mov     eax, 7FFFFFFFh
                mov     dword ptr [esp+4], offset aCmovnow ; "cmovnow"
                cmp     eax, edi
                cmovno  dx, bx
res_29 = edx                            ; int
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res_29
                call    printf
                mov     dword ptr [esp+4], offset aJs ; "js"
                mov     eax, 1
                cmp     esi, ebx
                js      short loc_407E46
                mov     eax, 0

loc_407E46:                             ; CODE XREF: test_jcc+1566↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSets ; "sets"
                mov     eax, 0
                cmp     esi, ebx
                sets    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovsl ; "cmovsl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     esi, ebx
                cmovs   edx, [ebp+val]
res_30 = edx                            ; int
                mov     [esp+8], res_30
                mov     [ebp+var_2C], res_30
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     esi, ebx
                cmovs   dx, bx
res_30 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovsw ; "cmovsw"
                mov     [esp+8], res_30
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJs ; "js"
                mov     eax, 1
                cmp     esi, edi
                js      short loc_407EDC
                mov     eax, 0

loc_407EDC:                             ; CODE XREF: test_jcc+15FC↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSets ; "sets"
                mov     eax, 0
                cmp     esi, edi
                sets    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovsl ; "cmovsl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     esi, edi
                cmovs   edx, [ebp+val]
res_31 = edx                            ; int
                mov     [esp+8], res_31
                mov     [ebp+var_2C], res_31
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     esi, edi
                cmovs   dx, bx
res_31 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovsw ; "cmovsw"
                mov     [esp+8], res_31
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJs ; "js"
                mov     eax, 1
                cmp     esi, esi
                js      short loc_407F72
                mov     eax, 0

loc_407F72:                             ; CODE XREF: test_jcc+1692↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSets ; "sets"
                mov     eax, 0
                cmp     esi, esi
                sets    al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovsl ; "cmovsl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     esi, esi
                cmovs   edx, [ebp+val]
res_32 = edx                            ; int
                mov     [esp+8], res_32
                mov     [ebp+var_2C], res_32
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     esi, esi
                cmovs   dx, bx
res_32 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovsw ; "cmovsw"
                mov     [esp+8], res_32
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJns ; "jns"
                mov     eax, 1
                cmp     esi, ebx
                jns     short loc_408008
                mov     eax, 0

loc_408008:                             ; CODE XREF: test_jcc+1728↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetns ; "setns"
                mov     eax, 0
                cmp     esi, ebx
                setns   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovnsl ; "cmovnsl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     esi, ebx
                cmovns  edx, [ebp+val]
res_33 = edx                            ; int
                mov     [esp+8], res_33
                mov     [ebp+var_2C], res_33
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     esi, ebx
                cmovns  dx, bx
res_33 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovnsw ; "cmovnsw"
                mov     [esp+8], res_33
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aJns ; "jns"
                mov     eax, 1
                cmp     esi, edi
                jns     short loc_40809E
                mov     eax, 0

loc_40809E:                             ; CODE XREF: test_jcc+17BE↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetns ; "setns"
                mov     eax, 0
                cmp     esi, edi
                setns   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                mov     dword ptr [esp+4], offset aCmovnsl ; "cmovnsl"
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edx, 12345678h
                cmp     esi, edi
                cmovns  edx, [ebp+val]
res_34 = edx                            ; int
                mov     [esp+8], res_34
                mov     [ebp+var_2C], res_34
                call    printf
                mov     edx, [ebp+var_2C]
                cmp     esi, edi
                cmovns  dx, bx
res_34 = edx                            ; int
                mov     dword ptr [esp+4], offset aCmovnsw ; "cmovnsw"
                mov     [esp+8], res_34
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     edi, 12345678h
                call    printf
                mov     dword ptr [esp+4], offset aJns ; "jns"
                mov     eax, 1
                cmp     esi, esi
                jns     short loc_408139
                mov     eax, 0

loc_408139:                             ; CODE XREF: test_jcc+1859↑j
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     dword ptr [esp+4], offset aSetns ; "setns"
                mov     eax, 0
                cmp     esi, esi
                setns   al
res = eax                               ; int
                mov     dword ptr [esp], offset a10sD ; "%-10s %d\n"
                mov     [esp+8], res
                call    printf
                mov     [ebp+val], 1
                cmp     esi, esi
                cmovns  edi, [ebp+val]
res = edi                               ; int
                mov     dword ptr [esp+4], offset aCmovnsl ; "cmovnsl"
                mov     [esp+8], res
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                call    printf
                mov     dword ptr [esp+4], offset aCmovnsw ; "cmovnsw"
                cmp     esi, esi
                cmovns  di, bx
                mov     dword ptr [esp], offset a10sR08lx ; "%-10s R=%08lx\n"
                mov     [esp+8], res
                call    printf
                add     esp, 3Ch
                pop     ebx
                pop     esi
                pop     res
                pop     ebp
                retn
; } // starts at 4068D9
test_jcc        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_loop()
test_loop       proc near               ; CODE XREF: main+35↓p

ecx_0           = dword ptr -2Ch
ecx_vals        = dword ptr -28h

; __unwind {
                push    ebp
                mov     ecx, 4
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 4Ch
                lea     edi, [ebp+ecx_vals]
                mov     esi, offset unk_40E008
                rep movsd
                xor     esi, esi
                mov     edi, 1

loc_4081D5:                             ; CODE XREF: test_loop+93↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                jcxz    loc_4081F6
                mov     eax, 0

loc_4081F6:                             ; CODE XREF: test_loop+38↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aJcxz ; "jcxz"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                jcxz    loc_408229
                mov     eax, 0

loc_408229:                             ; CODE XREF: test_loop+6B↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aJcxz ; "jcxz"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_4081D5
                xor     i, i
                mov     edi, 1

loc_408252:                             ; CODE XREF: test_loop+110↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                loopw   loc_408273
                mov     eax, 0

loc_408273:                             ; CODE XREF: test_loop+B5↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aLoopw ; "loopw"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                loopw   loc_4082A6
                mov     eax, 0

loc_4082A6:                             ; CODE XREF: test_loop+E8↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aLoopw ; "loopw"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_408252
                xor     i, i
                mov     edi, 1

loc_4082CF:                             ; CODE XREF: test_loop+18D↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                loopwe  loc_4082F0
                mov     eax, 0

loc_4082F0:                             ; CODE XREF: test_loop+132↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aLoopzw ; "loopzw"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                loopwe  loc_408323
                mov     eax, 0

loc_408323:                             ; CODE XREF: test_loop+165↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aLoopzw ; "loopzw"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_4082CF
                xor     i, i
                mov     edi, 1

loc_40834C:                             ; CODE XREF: test_loop+20A↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                loopwne loc_40836D
                mov     eax, 0

loc_40836D:                             ; CODE XREF: test_loop+1AF↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aLoopnzw ; "loopnzw"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                loopwne loc_4083A0
                mov     eax, 0

loc_4083A0:                             ; CODE XREF: test_loop+1E2↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aLoopnzw ; "loopnzw"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_40834C
                xor     i, i
                mov     edi, 1

loc_4083C9:                             ; CODE XREF: test_loop+285↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                jecxz   short loc_4083E9
                mov     eax, 0

loc_4083E9:                             ; CODE XREF: test_loop+22C↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aJecxz ; "jecxz"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                jecxz   short loc_40841B
                mov     eax, 0

loc_40841B:                             ; CODE XREF: test_loop+25E↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aJecxz ; "jecxz"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_4083C9
                xor     i, i
                mov     edi, 1

loc_408444:                             ; CODE XREF: test_loop+300↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                loop    loc_408464
                mov     eax, 0

loc_408464:                             ; CODE XREF: test_loop+2A7↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aLoopl ; "loopl"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                loop    loc_408496
                mov     eax, 0

loc_408496:                             ; CODE XREF: test_loop+2D9↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aLoopl ; "loopl"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_408444
                xor     i, i
                mov     edi, 1

loc_4084BF:                             ; CODE XREF: test_loop+37B↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                loope   loc_4084DF
                mov     eax, 0

loc_4084DF:                             ; CODE XREF: test_loop+322↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aLoopzl ; "loopzl"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                loope   loc_408511
                mov     eax, 0

loc_408511:                             ; CODE XREF: test_loop+354↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aLoopzl ; "loopzl"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_4084BF
                xor     i, i
                mov     edi, 1

loc_40853A:                             ; CODE XREF: test_loop+3F6↓j
i = esi                                 ; int
                mov     ecx, [ebp+i*4+ecx_vals]
ecx_0_0 = ecx                           ; int
                mov     ebx, edi
                mov     [esp+8], ecx_0_0
                mov     dword ptr [esp+0Ch], 0
                test    ebx, ebx
                mov     eax, 1
                loopne  loc_40855A
                mov     eax, 0

loc_40855A:                             ; CODE XREF: test_loop+39D↑j
res = eax                               ; int
                mov     dword ptr [esp+4], offset aLoopnzl ; "loopnzl"
                mov     [esp+10h], res
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                mov     [ebp+ecx_0], ecx_0_0
                call    printf
                mov     ecx, [ebp+ecx_0]
                xor     ebx, ebx
                mov     [esp+0Ch], edi
                test    ebx, ebx
                mov     eax, 1
                loopne  loc_40858C
                mov     eax, 0

loc_40858C:                             ; CODE XREF: test_loop+3CF↑j
res = eax                               ; int
                mov     [esp+8], ecx
                mov     [esp+10h], res
                mov     dword ptr [esp+4], offset aLoopnzl ; "loopnzl"
                mov     dword ptr [esp], offset a10sEcx08lxZfLd ; "%-10s ECX=%08lx ZF=%ld r=%d\n"
                inc     i
                call    printf
i = esi                                 ; int
                cmp     i, 4
                jnz     short loc_40853A
                add     esp, 4Ch
                pop     ebx
                pop     i
                pop     edi
                pop     ebp
                retn
; } // starts at 4081B6
test_loop       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_mulb(int op0, int op1)
test_mulb       proc near               ; CODE XREF: test_mul+148↓p
                                        ; test_mul+15C↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                xor     edx, edx
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+s0]
s0_0 = ebx                              ; int
                mov     ecx, [ebp+s1]
s1_0 = ecx                              ; int
                mov     eax, s0_0
                mov     [esp+8], s0_0
                push    edx
                popf
                mul     cl
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 801h
                mov     [esp+10h], res
                mov     [esp+14h], edx
                mov     [esp+0Ch], s1_0
                mov     dword ptr [esp+4], offset aMulb ; "mulb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                add     esp, 24h
                pop     s0_0
                pop     ebp
                retn
; } // starts at 4085B6
test_mulb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_mulw(int op0h, int op0, int op1)
test_mulw       proc near               ; CODE XREF: test_mul+1A0↓p
                                        ; test_mul+1BC↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     ebx, ebx
                mov     esi, [ebp+op0h]
                mov     edi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = edi                               ; int
s1_0 = ecx                              ; int
resh = esi                              ; int
                mov     eax, res
                mov     edx, resh
                mov     [esp+0Ch], res
                push    ebx
                popf
                mul     cx
                pushf
                pop     ebx
res = eax                               ; int
flags = ebx                             ; int
resh = edx                              ; int
                and     flags, 801h
                mov     [esp+8], esi
                mov     [esp+1Ch], ebx
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     [esp+10h], s1_0
                mov     dword ptr [esp+4], offset aMulw ; "mulw"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 4085FD
test_mulw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_mull(int op0h, int op0, int op1)
test_mull       proc near               ; CODE XREF: test_mul+210↓p
                                        ; test_mul+22C↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     ebx, ebx
                mov     esi, [ebp+op0h]
                mov     edi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = edi                               ; int
s1_0 = ecx                              ; int
resh = esi                              ; int
                mov     eax, res
                mov     edx, resh
                mov     [esp+0Ch], res
                push    ebx
                popf
                mul     s1_0
                pushf
                pop     ebx
res = eax                               ; int
flags = ebx                             ; int
resh = edx                              ; int
                and     flags, 801h
                mov     [esp+8], esi
                mov     [esp+1Ch], ebx
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     [esp+10h], s1_0
                mov     dword ptr [esp+4], offset aMull ; "mull"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 408656
test_mull       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_imulb(int op0, int op1)
test_imulb      proc near               ; CODE XREF: test_mul+18↓p
                                        ; test_mul+2C↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                xor     edx, edx
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+s0]
s0_0 = ebx                              ; int
                mov     ecx, [ebp+s1]
s1_0 = ecx                              ; int
                mov     eax, s0_0
                mov     [esp+8], s0_0
                push    edx
                popf
                imul    cl
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 801h
                mov     [esp+10h], res
                mov     [esp+14h], edx
                mov     [esp+0Ch], s1_0
                mov     dword ptr [esp+4], offset aImulb ; "imulb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                add     esp, 24h
                pop     s0_0
                pop     ebp
                retn
; } // starts at 4086AE
test_imulb      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_imulw(int op0h, int op0, int op1)
test_imulw      proc near               ; CODE XREF: test_mul+70↓p
                                        ; test_mul+8C↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     ebx, ebx
                mov     esi, [ebp+op0h]
                mov     edi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = edi                               ; int
s1_0 = ecx                              ; int
resh = esi                              ; int
                mov     eax, res
                mov     edx, resh
                mov     [esp+0Ch], res
                push    ebx
                popf
                imul    cx
                pushf
                pop     ebx
res = eax                               ; int
flags = ebx                             ; int
resh = edx                              ; int
                and     flags, 801h
                mov     [esp+8], esi
                mov     [esp+1Ch], ebx
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     [esp+10h], s1_0
                mov     dword ptr [esp+4], offset aImulw ; "imulw"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 4086F5
test_imulw      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_imull(int op0h, int op0, int op1)
test_imull      proc near               ; CODE XREF: test_mul+E0↓p
                                        ; test_mul+FC↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     ebx, ebx
                mov     esi, [ebp+op0h]
                mov     edi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = edi                               ; int
s1_0 = ecx                              ; int
resh = esi                              ; int
                mov     eax, res
                mov     edx, resh
                mov     [esp+0Ch], res
                push    ebx
                popf
                imul    s1_0
                pushf
                pop     ebx
res = eax                               ; int
flags = ebx                             ; int
resh = edx                              ; int
                and     flags, 801h
                mov     [esp+8], esi
                mov     [esp+1Ch], ebx
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     [esp+10h], s1_0
                mov     dword ptr [esp+4], offset aImull ; "imull"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 40874E
test_imull      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_imulw2(int op0, int op1)
test_imulw2     proc near               ; CODE XREF: test_mul+3AE↓p
                                        ; test_mul+3C2↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                xor     edx, edx
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+s0]
s0_0 = ebx                              ; int
                mov     ecx, [ebp+s1]
s1_0 = ecx                              ; int
                mov     eax, s0_0
                push    edx
                popf
                imul    ax, cx
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 801h
                mov     [esp+8], s0_0
                mov     [esp+14h], edx
                mov     [esp+10h], res
                mov     [esp+0Ch], s1_0
                mov     dword ptr [esp+4], offset aImulw ; "imulw"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                add     esp, 24h
                pop     s0_0
                pop     ebp
                retn
; } // starts at 4087A6
test_imulw2     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_imull2(int op0, int op1)
test_imull2     proc near               ; CODE XREF: test_mul+3FE↓p
                                        ; test_mul+412↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                xor     edx, edx
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                mov     ebx, [ebp+s0]
s0_0 = ebx                              ; int
                mov     ecx, [ebp+s1]
s1_0 = ecx                              ; int
                mov     eax, s0_0
                push    edx
                popf
                imul    eax, s1_0
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 801h
                mov     [esp+8], s0_0
                mov     [esp+14h], edx
                mov     [esp+10h], res
                mov     [esp+0Ch], s1_0
                mov     dword ptr [esp+4], offset aImull ; "imull"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                add     esp, 24h
                pop     s0_0
                pop     ebp
                retn
; } // starts at 4087EF
test_imull2     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_divb(int op0, int op1)
test_divb       proc near               ; CODE XREF: test_mul+7FC↓p
                                        ; test_mul+810↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                xor     ebx, ebx
                mov     ecx, [ebp+s0]
s0_0 = ecx                              ; int
                mov     edx, [ebp+s1]
s1_0 = edx                              ; int
                mov     eax, s0_0
                mov     dword ptr [esp+14h], 0
                push    ebx
                popf
                div     dl
                pushf
                pop     ebx
res = eax                               ; int
                mov     [esp+0Ch], s1_0
                mov     [esp+10h], res
                mov     [esp+8], s0_0
                mov     dword ptr [esp+4], offset aDivb ; "divb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 408837
test_divb       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_divw(int op0h, int op0, int op1)
test_divw       proc near               ; CODE XREF: test_mul+840↓p
                                        ; test_mul+85C↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     edi, edi
                mov     ebx, [ebp+op0h]
                mov     esi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = esi                               ; int
s1_0 = ecx                              ; int
resh = ebx                              ; int
                mov     [esp+0Ch], res
                mov     [esp+8], resh
                mov     eax, res
                mov     edx, resh
                mov     dword ptr [esp+1Ch], 0
                push    edi
                popf
                div     cx
                pushf
                pop     edi
res = eax                               ; int
resh = edx                              ; int
                mov     [esp+10h], s1_0
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     dword ptr [esp+4], offset aDivw ; "divw"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 40887C
test_divw       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_divl(int op0h, int op0, int op1)
test_divl       proc near               ; CODE XREF: test_mul+8B0↓p
                                        ; test_mul+8CC↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     edi, edi
                mov     ebx, [ebp+op0h]
                mov     esi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = esi                               ; int
s1_0 = ecx                              ; int
resh = ebx                              ; int
                mov     [esp+0Ch], res
                mov     [esp+8], resh
                mov     eax, res
                mov     edx, resh
                mov     dword ptr [esp+1Ch], 0
                push    edi
                popf
                div     s1_0
                pushf
                pop     edi
res = eax                               ; int
resh = edx                              ; int
                mov     [esp+10h], s1_0
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     dword ptr [esp+4], offset aDivl ; "divl"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 4088D3
test_divl       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_idivb(int op0, int op1)
test_idivb      proc near               ; CODE XREF: test_mul+650↓p
                                        ; test_mul+664↓p ...

s0              = dword ptr  8
s1              = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                xor     ebx, ebx
                mov     ecx, [ebp+s0]
s0_0 = ecx                              ; int
                mov     edx, [ebp+s1]
s1_0 = edx                              ; int
                mov     eax, s0_0
                mov     dword ptr [esp+14h], 0
                push    ebx
                popf
                idiv    dl
                pushf
                pop     ebx
res = eax                               ; int
                mov     [esp+0Ch], s1_0
                mov     [esp+10h], res
                mov     [esp+8], s0_0
                mov     dword ptr [esp+4], offset aIdivb ; "idivb"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                add     esp, 24h
                pop     ebx
                pop     ebp
                retn
; } // starts at 408929
test_idivb      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_idivw(int op0h, int op0, int op1)
test_idivw      proc near               ; CODE XREF: test_mul+6D0↓p
                                        ; test_mul+6EC↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     edi, edi
                mov     ebx, [ebp+op0h]
                mov     esi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = esi                               ; int
s1_0 = ecx                              ; int
resh = ebx                              ; int
                mov     [esp+0Ch], res
                mov     [esp+8], resh
                mov     eax, res
                mov     edx, resh
                mov     dword ptr [esp+1Ch], 0
                push    edi
                popf
                idiv    cx
                pushf
                pop     edi
res = eax                               ; int
resh = edx                              ; int
                mov     [esp+10h], s1_0
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     dword ptr [esp+4], offset aIdivw ; "idivw"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 40896E
test_idivw      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void __cdecl test_idivl(int op0h, int op0, int op1)
test_idivl      proc near               ; CODE XREF: test_mul+794↓p
                                        ; test_mul+7B0↓p ...

op0h            = dword ptr  8
op0             = dword ptr  0Ch
s1              = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     edi, edi
                mov     ebx, [ebp+op0h]
                mov     esi, [ebp+op0]
                mov     ecx, [ebp+s1]
res = esi                               ; int
s1_0 = ecx                              ; int
resh = ebx                              ; int
                mov     [esp+0Ch], res
                mov     [esp+8], resh
                mov     eax, res
                mov     edx, resh
                mov     dword ptr [esp+1Ch], 0
                push    edi
                popf
                idiv    s1_0
                pushf
                pop     edi
res = eax                               ; int
resh = edx                              ; int
                mov     [esp+10h], s1_0
                mov     [esp+18h], res
                mov     [esp+14h], resh
                mov     dword ptr [esp+4], offset aIdivl ; "idivl"
                mov     dword ptr [esp], offset a10sAh08lxAl08l ; "%-10s AH=%08lx AL=%08lx B=%08lx RH=%08l"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 4089C5
test_idivl      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_mul()
test_mul        proc near               ; CODE XREF: main+2B↓p

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 3Ch
                mov     dword ptr [esp+4], 4 ; op1
                mov     dword ptr [esp], 1234561Dh ; op0
                call    test_imulb
                mov     dword ptr [esp+4], 0FFFFFFFCh ; op1
                mov     dword ptr [esp], 3 ; op0
                call    test_imulb
                mov     dword ptr [esp+4], 80h ; op1
                mov     dword ptr [esp], 80h ; op0
                call    test_imulb
                mov     dword ptr [esp+4], 10h ; op1
                mov     dword ptr [esp], 10h ; op0
                call    test_imulb
                mov     dword ptr [esp+8], 2Dh ; op1
                mov     dword ptr [esp+4], 1234001Dh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imulw
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 17h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imulw
                mov     dword ptr [esp+8], 8000h ; op1
                mov     dword ptr [esp+4], 8000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imulw
                mov     dword ptr [esp+8], 100h ; op1
                mov     dword ptr [esp+4], 100h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imulw
                mov     dword ptr [esp+8], 2Dh ; op1
                mov     dword ptr [esp+4], 1234001Dh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imull
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 17h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imull
                mov     dword ptr [esp+8], 80000000h ; op1
                mov     dword ptr [esp+4], 80000000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imull
                mov     dword ptr [esp+8], 10000h ; op1
                mov     dword ptr [esp+4], 10000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_imull
                mov     dword ptr [esp+4], 4 ; op1
                mov     dword ptr [esp], 1234561Dh ; op0
                call    test_mulb
                mov     dword ptr [esp+4], 0FFFFFFFCh ; op1
                mov     dword ptr [esp], 3 ; op0
                call    test_mulb
                mov     dword ptr [esp+4], 80h ; op1
                mov     dword ptr [esp], 80h ; op0
                call    test_mulb
                mov     dword ptr [esp+4], 10h ; op1
                mov     dword ptr [esp], 10h ; op0
                call    test_mulb
                mov     dword ptr [esp+8], 2Dh ; op1
                mov     dword ptr [esp+4], 1234001Dh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mulw
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 17h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mulw
                mov     dword ptr [esp+8], 8000h ; op1
                mov     dword ptr [esp+4], 8000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mulw
                mov     dword ptr [esp+8], 100h ; op1
                mov     dword ptr [esp+4], 100h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mulw
                mov     dword ptr [esp+8], 2Dh ; op1
                mov     dword ptr [esp+4], 1234001Dh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 17h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 80000000h ; op1
                mov     dword ptr [esp+4], 80000000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 10000h ; op1
                mov     dword ptr [esp+4], 10000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0 ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 1 ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 2 ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 3 ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 0 ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 1 ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 2 ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 3 ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_mull
                mov     dword ptr [esp+4], 2Dh ; op1
                mov     dword ptr [esp], 1234001Dh ; op0
                xor     ebx, ebx
                call    test_imulw2
                mov     dword ptr [esp+4], 0FFFFFFD3h ; op1
                mov     dword ptr [esp], 17h ; op0
                call    test_imulw2
                mov     dword ptr [esp+4], 8000h ; op1
                mov     dword ptr [esp], 8000h ; op0
                call    test_imulw2
                mov     dword ptr [esp+4], 100h ; op1
                mov     dword ptr [esp], 100h ; op0
                call    test_imulw2
                mov     dword ptr [esp+4], 2Dh ; op1
                mov     dword ptr [esp], 1234001Dh ; op0
                call    test_imull2
                mov     dword ptr [esp+4], 0FFFFFFD3h ; op1
                mov     dword ptr [esp], 17h ; op0
                call    test_imull2
                mov     dword ptr [esp+4], 80000000h ; op1
                mov     dword ptr [esp], 80000000h ; op0
                call    test_imull2
                mov     dword ptr [esp+4], 10000h ; op1
                mov     dword ptr [esp], 10000h ; op0
                call    test_imull2
                mov     ecx, 1234h
                mov     eax, ebx
                xor     edx, edx
                push    edx
                popf
                imul    ax, cx, 2Dh
                pushf
                pop     edx
                mov     dword ptr [esp+14h], 0
                mov     [esp+10h], eax
                mov     dword ptr [esp+0Ch], 1234h
                mov     dword ptr [esp+8], 2Dh
                mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                mov     [ebp+var_20], ecx
res = eax                               ; int
                call    printf
                mov     edx, 17h
                mov     eax, ebx
                xor     ecx, ecx
                push    ecx
                popf
                imul    ax, dx, -2Dh
                pushf
                pop     ecx
                mov     dword ptr [esp+14h], 0
                mov     [esp+10h], eax
                mov     dword ptr [esp+0Ch], 17h
                mov     dword ptr [esp+8], 0FFFFFFD3h
                mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                mov     [ebp+var_1C], edx
res = eax                               ; int
                mov     edi, 80000000h
                call    printf
                mov     eax, ebx
                xor     edx, edx
                push    edx
                popf
                imul    ax, di, 8000h
                pushf
                pop     edx
res = eax                               ; int
                mov     dword ptr [esp+14h], 0
                mov     [esp+10h], res
                mov     dword ptr [esp+0Ch], 80000000h
                mov     dword ptr [esp+8], 8000h
                mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                mov     esi, 1000h
                mov     eax, ebx
                xor     ecx, ecx
                push    ecx
                popf
                imul    ax, si, 7FFFh
                pushf
                pop     ecx
res = eax                               ; int
                mov     dword ptr [esp+14h], 0
                mov     [esp+10h], res
                mov     dword ptr [esp+0Ch], 1000h
                mov     dword ptr [esp+8], 7FFFh
                mov     dword ptr [esp+4], offset aImulwIm ; "imulw im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                mov     eax, ebx
                xor     edx, edx
                mov     ecx, [ebp+var_20]
                push    edx
                popf
                imul    eax, ecx, 2Dh
                pushf
                pop     edx
res = eax                               ; int
                mov     dword ptr [esp+14h], 0
                mov     [esp+10h], res
                mov     dword ptr [esp+0Ch], 1234h
                mov     dword ptr [esp+8], 2Dh
                mov     dword ptr [esp+4], offset aImullIm ; "imull im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                mov     eax, ebx
                xor     ecx, ecx
                mov     edx, [ebp+var_1C]
                push    ecx
                popf
                imul    eax, edx, -2Dh
                pushf
                pop     ecx
res = eax                               ; int
                mov     dword ptr [esp+14h], 0
                mov     [esp+10h], res
                mov     dword ptr [esp+0Ch], 17h
                mov     dword ptr [esp+8], 0FFFFFFD3h
                mov     dword ptr [esp+4], offset aImullIm ; "imull im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                mov     eax, ebx
                xor     edx, edx
                push    edx
                popf
                imul    eax, edi, 8000h
                pushf
                pop     edx
res = eax                               ; int
                mov     dword ptr [esp+14h], 0
                mov     [esp+10h], res
                mov     dword ptr [esp+0Ch], 80000000h
                mov     dword ptr [esp+8], 8000h
                mov     dword ptr [esp+4], offset aImullIm ; "imull im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                xor     eax, eax
                push    eax
                popf
                imul    ebx, esi, 7FFFh
                pushf
                pop     eax
res = ebx                               ; int
                mov     [esp+10h], res
                mov     dword ptr [esp+14h], 0
                mov     dword ptr [esp+0Ch], 1000h
                mov     dword ptr [esp+8], 7FFFh
                mov     dword ptr [esp+4], offset aImullIm ; "imull im"
                mov     dword ptr [esp], offset a10sA08lxB08lxR ; "%-10s A=%08lx B=%08lx R=%08lx CC=%04lx"...
                call    printf
                mov     dword ptr [esp+4], 127Eh ; op1
                mov     dword ptr [esp], 12341678h ; op0
                call    test_idivb
                mov     dword ptr [esp+4], 0FFFFFFFBh ; op1
                mov     dword ptr [esp], 43210123h ; op0
                call    test_idivb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op1
                mov     dword ptr [esp], 12340004h ; op0
                call    test_idivb
                mov     dword ptr [esp+4], 3 ; op1
                mov     dword ptr [esp], 0FFFFFFECh ; op0
                call    test_idivb
                mov     dword ptr [esp+4], 0FFFFFFFDh ; op1
                mov     dword ptr [esp], 14h ; op0
                call    test_idivb
                mov     dword ptr [esp+4], 0FFFFFFFDh ; op1
                mov     dword ptr [esp], 0FFFFFFECh ; op0
                call    test_idivb
                mov     dword ptr [esp+8], 303Bh ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivw
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 0FFFFA549h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivw
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 12348000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivw
                mov     dword ptr [esp+8], 81238567h ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 12343h ; op0h
                call    test_idivw
                mov     dword ptr [esp+8], 12Ch ; op1
                mov     dword ptr [esp+4], 0 ; op0
                mov     dword ptr [esp], 0FFFFFFECh ; op0h
                call    test_idivw
                mov     dword ptr [esp+8], 0FFFFFED4h ; op1
                mov     dword ptr [esp+4], 0 ; op0
                mov     dword ptr [esp], 14h ; op0h
                call    test_idivw
                mov     dword ptr [esp+8], 0FFFFFED4h ; op1
                mov     dword ptr [esp+4], 0 ; op0
                mov     dword ptr [esp], 0FFFFFFECh ; op0h
                call    test_idivw
                mov     dword ptr [esp+8], 303Bh ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivl
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 0FFFC70F9h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivl
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 80000000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivl
                mov     dword ptr [esp+8], 81234567h ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 12343h ; op0h
                call    test_idivl
                mov     dword ptr [esp+4], 127Eh ; op1
                mov     dword ptr [esp], 12341678h ; op0
                call    test_divb
                mov     dword ptr [esp+4], 0FFFFFFFBh ; op1
                mov     dword ptr [esp], 43210123h ; op0
                call    test_divb
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op1
                mov     dword ptr [esp], 12340004h ; op0
                call    test_divb
                mov     dword ptr [esp+8], 303Bh ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_divw
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 0FFFFA549h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_divw
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 12348000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_divw
                mov     dword ptr [esp+8], 81238567h ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 12343h ; op0h
                call    test_divw
                mov     dword ptr [esp+8], 303Bh ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFFD3h ; op1
                mov     dword ptr [esp+4], 0FFFC70F9h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 80000000h ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 81234567h ; op1
                mov     dword ptr [esp+4], 12345678h ; op0
                mov     dword ptr [esp], 12343h ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFFFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0Fh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0Eh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 7FFFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 7FFFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 7FFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 7FFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 7FFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 7FFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 7FFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 7FFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 7FFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 7FFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 7FFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 7FEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 7Fh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 7Eh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 3FFFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 3FFFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 3FFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 3FFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 3FFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 3FFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 3FFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 3FFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 3FFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 3FFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 3FFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 3FEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 3Fh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 3Eh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 1FFFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 1FFFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 1FFFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 1FFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 1FFFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 1FFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 1FFFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 1FFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 1FFFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 1FFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 1FFh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 1FEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 1Fh ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 1Eh ; op0h
                call    test_divl
                xor     res, res

loc_409652:                             ; CODE XREF: test_mul+EF2↓j
i = ebx                                 ; int
                lea     esi, [i+1]
                mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
                mov     [esp+8], esi    ; op1
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                lea     edi, [i+2]
                mov     [esp+8], esi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
                mov     dword ptr [esp], 1 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                lea     edi, [i+3]
                mov     dword ptr [esp], 1 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
                mov     dword ptr [esp], 2 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                lea     edi, [i+4]
                mov     dword ptr [esp], 2 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
                mov     dword ptr [esp], 3 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                lea     edi, [i+5]
                mov     dword ptr [esp], 3 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFEh ; op0
                mov     dword ptr [esp], 4 ; op0h
                call    test_divl
                mov     [esp+8], edi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 4 ; op0h
                call    test_divl
                lea     edi, [i-10h]
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
                mov     dword ptr [esp], 0FFFFFFFDh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
                mov     [esp+4], edi    ; op0
                mov     dword ptr [esp], 0FFFFFFFDh ; op0h
                call    test_divl
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp], 0FFFFFFFEh ; op0h
                call    test_divl
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     [esp+4], edi    ; op0
                mov     dword ptr [esp], 0FFFFFFFEh ; op0h
                call    test_divl
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFAh ; op1
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFBh ; op1
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFCh ; op1
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFDh ; op1
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFEh ; op1
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     [esp+4], i      ; op0
                mov     dword ptr [esp+8], 0FFFFFFFFh ; op1
                mov     dword ptr [esp], 0 ; op0h
                call    test_divl
                mov     i, esi
                mov     [esp+8], esi    ; op1
                mov     dword ptr [esp+4], 1 ; op0
                mov     dword ptr [esp], 0 ; op0h
                neg     ebx
                call    test_idivl
                mov     [esp+8], esi    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFFFFFFFh ; op0h
                call    test_idivl
                mov     [esp+8], ebx    ; op1
                mov     dword ptr [esp+4], 1 ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivl
                mov     [esp+8], ebx    ; op1
                mov     dword ptr [esp+4], 0FFFFFFFFh ; op0
                mov     dword ptr [esp], 0FFFFFFFFh ; op0h
                call    test_idivl
                mov     [esp+8], esi    ; op1
                mov     dword ptr [esp+4], 7FFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivl
                mov     [esp+8], esi    ; op1
                mov     dword ptr [esp+4], 80000001h ; op0
                mov     dword ptr [esp], 0FFFFFFFFh ; op0h
                call    test_idivl
                mov     [esp+8], ebx    ; op1
                mov     dword ptr [esp+4], 7FFFFFFFh ; op0
                mov     dword ptr [esp], 0 ; op0h
                call    test_idivl
                mov     [esp+8], ebx    ; op1
                mov     dword ptr [esp+4], 80000001h ; op0
                mov     dword ptr [esp], 0FFFFFFFFh ; op0h
                call    test_idivl
i = esi                                 ; int
                mov     ebx, i
                cmp     i, 10h
                jnz     loc_409652
                add     esp, 3Ch
                pop     ebx
                pop     i
                pop     edi
                pop     ebp
                retn
; } // starts at 408A1B
test_mul        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_bsx()
test_bsx        proc near               ; CODE XREF: main:loc_40D581↓p
; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch
                xor     esi, esi
                xor     edx, edx
                mov     eax, 12345678h
                bsr     ax, si
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+8], 0
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                mov     edi, 12340128h
                call    printf
                mov     dword ptr [esp+8], 12340128h
                xor     edx, edx
                mov     eax, 12345678h
                bsr     ax, di
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                or      ebx, 0FFFFFFFFh
                xor     edx, edx
                mov     eax, 12345678h
                bsr     ax, bx
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+8], 0FFFFFFFFh
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     eax, 0FFFF7FFFh
                xor     ecx, ecx
                mov     edx, 12345678h
                bsr     dx, ax
                setz    cl
res = edx                               ; int
resz = ecx                              ; int
                mov     dword ptr [esp+8], 0FFFF7FFFh
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp+4], offset aBsrw ; "bsrw"
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 0
                xor     edx, edx
                mov     eax, 12345678h
                bsf     ax, si
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 12340128h
                xor     edx, edx
                mov     eax, 12345678h
                bsf     ax, di
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 0FFFFFFFFh
                xor     edx, edx
                mov     eax, 12345678h
                bsf     ax, bx
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     edi, 0FFFFFFF7h
                xor     edx, edx
                mov     eax, 12345678h
                bsf     ax, di
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+8], 0FFFFFFF7h
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp+4], offset aBsfw ; "bsfw"
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 0
                xor     edx, edx
                mov     eax, 12345678h
                bsr     eax, esi
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     edx, 340128h
                xor     ecx, ecx
                mov     eax, 12345678h
                bsr     eax, edx
                setz    cl
res = eax                               ; int
resz = ecx                              ; int
                mov     dword ptr [esp+8], 340128h
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 0FFFFFFFFh
                xor     ecx, ecx
                mov     eax, 12345678h
                bsr     eax, ebx
                setz    cl
res = eax                               ; int
resz = ecx                              ; int
                mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     eax, 7FFFFFFFh
                xor     ecx, ecx
                mov     edx, 12345678h
                bsr     edx, eax
                setz    cl
res = edx                               ; int
resz = ecx                              ; int
                mov     dword ptr [esp+8], 7FFFFFFFh
                mov     [esp+0Ch], res
                mov     [esp+10h], resz
                mov     dword ptr [esp+4], offset aBsrl ; "bsrl"
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 0
                xor     ecx, ecx
                mov     eax, 12345678h
                bsf     eax, esi
                setz    cl
res = eax                               ; int
resz = ecx                              ; int
                mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     edx, 340128h
                xor     ecx, ecx
                mov     eax, 12345678h
                bsf     eax, edx
                setz    cl
res = eax                               ; int
resz = ecx                              ; int
                mov     dword ptr [esp+8], 340128h
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 0FFFFFFFFh
                xor     edx, edx
                mov     eax, 12345678h
                bsf     eax, ebx
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                mov     dword ptr [esp+8], 0FFFFFFF7h
                xor     edx, edx
                mov     eax, 12345678h
                bsf     eax, edi
                setz    dl
res = eax                               ; int
resz = edx                              ; int
                mov     dword ptr [esp+4], offset aBsfl ; "bsfl"
                mov     [esp+10h], resz
                mov     [esp+0Ch], res
                mov     dword ptr [esp], offset a10sA08lxR08lxL ; "%-10s A=%08lx R=%08lx %ld\n"
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 40991B
test_bsx        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_popcnt()
test_popcnt     proc near               ; CODE XREF: main+26↓p
; __unwind {
                push    ebp
                xor     eax, eax
                mov     ebp, esp
                sub     esp, 18h
                xor     ecx, ecx
                mov     edx, 12345678h
;;                popcnt  dx, ax
                pushf
                pop     ecx
res = edx                               ; int
resz = ecx                              ; int
                mov     dword ptr [esp+4], 0
                mov     [esp+0Ch], resz
                mov     [esp+8], res
                mov     dword ptr [esp], offset aPopcntA08lxR08 ; "popcnt A=%08lx R=%08lx flags=%lx\n"
                call    printf
                leave
                retn
; } // starts at 409C67
test_popcnt     endp



; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_bcd()
test_bcd        proc near               ; CODE XREF: main+3A↓p

var_1C          = dword ptr -1Ch

; __unwind {
                push    ebp
                mov     edx, 10h
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 3Ch
                mov     esi, 12340503h
                mov     eax, esi
                mov     ebx, 12340506h
                push    edx
                popf
                daa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     dword ptr [esp+10h], 10h
                mov     [esp+14h], edx
                mov     [esp+0Ch], res
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                mov     edi, 123405A0h
                call    printf
                mov     eax, ebx
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                daa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     edx, 12340507h
                mov     eax, edx
                mov     ecx, 10h
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     dword ptr [esp+10h], 10h
                mov     [esp+14h], ecx
                mov     [esp+0Ch], res
                mov     dword ptr [esp+8], 12340507h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                mov     [ebp+var_1C], edx
                call    printf
                mov     eax, 12340559h
                mov     ecx, 10h
                mov     dword ptr [esp+10h], 10h
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340559h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 12340560h
                mov     ecx, 10h
                mov     dword ptr [esp+10h], 10h
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340560h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 1234059Fh
                mov     ecx, 10h
                mov     dword ptr [esp+10h], 10h
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 1234059Fh
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, edi
                mov     ecx, 10h
                mov     dword ptr [esp+10h], 10h
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 123405A0h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                xor     ecx, ecx
                mov     dword ptr [esp+10h], 0
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                xor     ecx, ecx
                mov     dword ptr [esp+10h], 0
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                mov     ecx, 1
                mov     dword ptr [esp+10h], 1
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                mov     ecx, 1
                mov     dword ptr [esp+10h], 1
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                mov     ecx, 11h
                mov     dword ptr [esp+10h], 11h
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                mov     ecx, 11h
                mov     dword ptr [esp+10h], 11h
                push    ecx
                popf
                daa
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDaa ; "daa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                mov     ecx, 10h
                mov     dword ptr [esp+10h], 10h
                push    ecx
                popf
                das
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                mov     ecx, 10h
                mov     dword ptr [esp+10h], 10h
                push    ecx
                popf
                das
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], ecx
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     edx, [ebp+var_1C]
                mov     eax, edx
                mov     ecx, 10h
                push    ecx
                popf
                das
                pushf
                pop     ecx
res = eax                               ; int
flags = ecx                             ; int
                and     flags, 0D5h
                mov     dword ptr [esp+10h], 10h
                mov     [esp+14h], ecx
                mov     [esp+0Ch], res
                mov     dword ptr [esp+8], 12340507h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 12340559h
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340559h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 12340560h
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340560h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 1234059Fh
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 1234059Fh
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, edi
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 123405A0h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                mov     edx, 1
                mov     dword ptr [esp+10h], 1
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                mov     edx, 1
                mov     dword ptr [esp+10h], 1
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                mov     edx, 11h
                mov     dword ptr [esp+10h], 11h
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340503h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                mov     edx, 11h
                mov     edi, 12340205h
                push    edx
                popf
                das
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 0D5h
                mov     dword ptr [esp+10h], 11h
                mov     [esp+14h], edx
                mov     [esp+0Ch], res
                mov     dword ptr [esp+8], 12340506h
                mov     dword ptr [esp+4], offset aDas ; "das"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                mov     esi, 12340306h
                call    printf
                mov     eax, edi
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340205h
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                mov     edx, 10h
                mov     ebx, 1234040Ah
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     dword ptr [esp+10h], 10h
                mov     [esp+14h], edx
                mov     [esp+0Ch], res
                mov     dword ptr [esp+8], 12340306h
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 1234040Ah
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 123405FAh
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 123405FAh
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, edi
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340205h
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340306h
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 1234040Ah
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                xor     edx, edx
                mov     eax, 123405FAh
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aaa
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 123405FAh
                mov     dword ptr [esp+4], offset aAaa ; "aaa"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, edi
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340205h
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340306h
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 1234040Ah
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 123405FAh
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 123405FAh
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, edi
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340205h
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, esi
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340306h
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, ebx
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 1234040Ah
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 123405FAh
                xor     edx, edx
                mov     dword ptr [esp+10h], 0
                push    edx
                popf
                aas
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 11h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 123405FAh
                mov     dword ptr [esp+4], offset aAas ; "aas"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 12340547h
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aam
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 8D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340547h
                mov     dword ptr [esp+4], offset aAam ; "aam"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                mov     eax, 12340407h
                mov     edx, 10h
                mov     dword ptr [esp+10h], 10h
                push    edx
                popf
                aad
                pushf
                pop     edx
res = eax                               ; int
flags = edx                             ; int
                and     flags, 8D5h
                mov     [esp+0Ch], res
                mov     [esp+14h], edx
                mov     dword ptr [esp+8], 12340407h
                mov     dword ptr [esp+4], offset aAad ; "aad"
                mov     dword ptr [esp], offset a10sA08xR08xCci ; "%-10s A=%08x R=%08x CCIN=%04x CC=%04x\n"
                call    printf
                add     esp, 3Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 40A6E7
test_bcd        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_xchg()
test_xchg       proc near               ; CODE XREF: main+3F↓p

edx_0           = dword ptr -2Ch
var_20          = qword ptr -20h

; __unwind {
                push    ebp
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 4Ch
                mov     ebx, 12345678h
                mov     edi, 0FBCA7654h
                mov     eax, ebx
                mov     edx, edi
                mov     dword ptr [esp+4], offset aXchgl ; "xchgl"
                xchg    eax, edx
op0 = eax                               ; int
op1 = edx                               ; int
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                mov     [esp+0Ch], op1
                mov     [esp+8], op0
                mov     esi, 0FFFEFDFCh
                call    printf
                mov     eax, ebx
                mov     edx, edi
                mov     dword ptr [esp+4], offset aXchgw ; "xchgw"
                xchg    ax, dx
op0 = eax                               ; int
op1 = edx                               ; int
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                mov     [esp+0Ch], op1
                mov     [esp+8], op0
                call    printf
                mov     eax, ebx
                mov     edx, edi
                mov     dword ptr [esp+4], offset aXchgb ; "xchgb"
                xchg    al, dl
op0 = eax                               ; int
op1 = edx                               ; int
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                mov     [esp+0Ch], op1
                mov     [esp+8], op0
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     eax, ebx
                mov     dword ptr [esp+4], offset aXchgl ; "xchgl"
                xchg    eax, dword ptr [ebp+var_20]
op0 = eax                               ; int
                mov     edx, dword ptr [ebp+var_20]
                mov     [esp+8], op0
                mov     [esp+0Ch], edx
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     eax, ebx
                mov     dword ptr [esp+4], offset aXchgw ; "xchgw"
                xchg    ax, word ptr [ebp+var_20]
op0 = eax                               ; int
                mov     edx, dword ptr [ebp+var_20]
                mov     [esp+8], op0
                mov     [esp+0Ch], edx
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     eax, ebx
                mov     dword ptr [esp+4], offset aXchgb ; "xchgb"
                xchg    al, byte ptr [ebp+var_20]
op0 = eax                               ; int
                mov     edx, dword ptr [ebp+var_20]
                mov     [esp+8], op0
                mov     [esp+0Ch], edx
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                call    printf
                mov     eax, ebx
                mov     edx, edi
                mov     dword ptr [esp+4], offset aXaddl ; "xaddl"
                xadd    edx, eax
op0 = eax                               ; int
op1 = edx                               ; int
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                mov     [esp+0Ch], op1
                mov     [esp+8], op0
                call    printf
                mov     eax, ebx
                mov     edx, edi
                mov     dword ptr [esp+4], offset aXaddw ; "xaddw"
                xadd    dx, ax
op0 = eax                               ; int
op1 = edx                               ; int
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                mov     [esp+0Ch], op1
                mov     [esp+8], op0
                call    printf
                mov     eax, ebx
                mov     edx, edi
                mov     dword ptr [esp+4], offset aXaddb ; "xaddb"
                xadd    dl, al
op0 = eax                               ; int
op1 = edx                               ; int
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                mov     [esp+0Ch], op1
                mov     [esp+8], op0
                call    printf
                mov     eax, ebx
                xadd    eax, eax
res = eax                               ; int
                mov     dword ptr [esp], offset aXaddlSameRes08 ; "xaddl same res=%08x\n"
                mov     [esp+4], res
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     eax, ebx
                mov     dword ptr [esp+4], offset aXaddl ; "xaddl"
                xadd    dword ptr [ebp+var_20], eax
op0 = eax                               ; int
                mov     edx, dword ptr [ebp+var_20]
                mov     [esp+8], op0
                mov     [esp+0Ch], edx
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     eax, ebx
                mov     dword ptr [esp+4], offset aXaddw ; "xaddw"
                xadd    word ptr [ebp+var_20], ax
op0 = eax                               ; int
                mov     edx, dword ptr [ebp+var_20]
                mov     [esp+8], op0
                mov     [esp+0Ch], edx
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     eax, ebx
                mov     dword ptr [esp+4], offset aXaddb ; "xaddb"
                xadd    byte ptr [ebp+var_20], al
op0 = eax                               ; int
                mov     edx, dword ptr [ebp+var_20]
                mov     [esp+8], op0
                mov     [esp+0Ch], edx
                mov     dword ptr [esp], offset a10sA08lxB08lx ; "%-10s A=%08lx B=%08lx\n"
                call    printf
                mov     edx, ebx
                mov     eax, edi
                mov     dword ptr [esp+8], 0FBCA7654h
                cmpxchg eax, edx
                pushf
                pop     ecx
op0 = edx                               ; int
op1 = eax                               ; int
eflags = ecx                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], op0
                mov     [esp+14h], ecx
                mov     [esp+10h], op1
                mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     edx, ebx
                mov     eax, edi
                mov     dword ptr [esp+8], 0FBCA7654h
                cmpxchg ax, dx
                pushf
                pop     ecx
op0 = edx                               ; int
op1 = eax                               ; int
eflags = ecx                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], op0
                mov     [esp+14h], ecx
                mov     [esp+10h], op1
                mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     edx, ebx
                mov     eax, edi
                mov     dword ptr [esp+8], 0FBCA7654h
                cmpxchg al, dl
                pushf
                pop     ecx
op0 = edx                               ; int
op1 = eax                               ; int
eflags = ecx                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], op0
                mov     [esp+14h], ecx
                mov     [esp+10h], op1
                mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     edx, ebx
                mov     ecx, edi
                mov     eax, esi
                cmpxchg ecx, edx
                pushf
                pop     eax
op0 = edx                               ; int
op1 = ecx                               ; int
eflags = eax                            ; int
                and     eflags, 8D5h
                mov     [esp+10h], op1
                mov     [esp+0Ch], op0
                mov     [esp+14h], eax
                mov     dword ptr [esp+8], 0FFFEFDFCh
                mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     edx, ebx
                mov     ecx, edi
                mov     eax, esi
                cmpxchg cx, dx
                pushf
                pop     eax
op0 = edx                               ; int
op1 = ecx                               ; int
eflags = eax                            ; int
                and     eflags, 8D5h
                mov     [esp+10h], op1
                mov     [esp+0Ch], op0
                mov     [esp+14h], eax
                mov     dword ptr [esp+8], 0FFFEFDFCh
                mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     edx, ebx
                mov     ecx, edi
                mov     eax, esi
                cmpxchg cl, dl
                pushf
                pop     eax
op0 = edx                               ; int
op1 = ecx                               ; int
eflags = eax                            ; int
                and     eflags, 8D5h
                mov     [esp+10h], op1
                mov     [esp+0Ch], op0
                mov     [esp+14h], eax
                mov     dword ptr [esp+8], 0FFFEFDFCh
                mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     edx, ebx
                mov     eax, edi
                cmpxchg dword ptr [ebp+var_20], edx
                pushf
                pop     eax
op0 = edx                               ; int
eflags = eax                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], op0
                mov     [esp+14h], eax
                mov     eax, dword ptr [ebp+var_20]
                mov     [esp+10h], eax
                mov     dword ptr [esp+8], 0FBCA7654h
                mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     edx, ebx
                mov     eax, edi
                cmpxchg word ptr [ebp+var_20], dx
                pushf
                pop     eax
op0 = edx                               ; int
eflags = eax                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], op0
                mov     [esp+14h], eax
                mov     eax, dword ptr [ebp+var_20]
                mov     [esp+10h], eax
                mov     dword ptr [esp+8], 0FBCA7654h
                mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     edx, ebx
                mov     eax, edi
                cmpxchg byte ptr [ebp+var_20], dl
                pushf
                pop     edi
op0 = edx                               ; int
eflags = edi                            ; int
                and     eflags, 8D5h
                mov     eax, dword ptr [ebp+var_20]
                mov     [esp+14h], edi
                mov     [esp+0Ch], op0
                mov     [esp+10h], eax
                mov     dword ptr [esp+8], 0FBCA7654h
                mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     edx, ebx
                mov     eax, esi
                cmpxchg dword ptr [ebp+var_20], edx
                pushf
                pop     eax
op0 = edx                               ; int
eflags = eax                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], op0
                mov     [esp+14h], eax
                mov     eax, dword ptr [ebp+var_20]
                mov     [esp+10h], eax
                mov     dword ptr [esp+8], 0FFFEFDFCh
                mov     dword ptr [esp+4], offset aCmpxchgl ; "cmpxchgl"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     edx, ebx
                mov     eax, esi
                cmpxchg word ptr [ebp+var_20], dx
                pushf
                pop     eax
op0 = edx                               ; int
eflags = eax                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], op0
                mov     [esp+14h], eax
                mov     eax, dword ptr [ebp+var_20]
                mov     [esp+10h], eax
                mov     dword ptr [esp+8], 0FFFEFDFCh
                mov     dword ptr [esp+4], offset aCmpxchgw ; "cmpxchgw"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                call    printf
                mov     dword ptr [ebp+var_20], 0FBCA7654h
                mov     eax, esi
                mov     edi, 12345h
                cmpxchg byte ptr [ebp+var_20], bl
                pushf
                pop     esi
op0 = ebx                               ; int
eflags = esi                            ; int
                and     eflags, 8D5h
                mov     eax, dword ptr [ebp+var_20]
                mov     [esp+14h], esi
                mov     [esp+0Ch], op0
                mov     esi, 6789ABCDh
                mov     [esp+10h], eax
                mov     dword ptr [esp+8], 0FFFEFDFCh
                mov     dword ptr [esp+4], offset aCmpxchgb ; "cmpxchgb"
                mov     dword ptr [esp], offset a10sEax08lxA08l ; "%-10s EAX=%08lx A=%08lx C=%08lx CC=%02l"...
                mov     op0, 32432434h
                call    printf
                mov     dword ptr [ebp+var_20], 65423456h
                mov     dword ptr [ebp+var_20+4], 0FBCA7h
                mov     eax, esi
                mov     edx, edi
                mov     ecx, 65324h
                cmpxchg8b [ebp+var_20]
                pushf
                pop     ecx
                and     ecx, 40h
                mov     [ebp+edx_0], edx
eax_0 = eax                             ; int
edx_0_0 = edx                           ; int
                mov     [esp+14h], ecx
                mov     ecx, dword ptr [ebp+var_20+4]
                mov     edx_0_0, dword ptr [ebp+var_20]
                mov     [esp+10h], ecx
                mov     ecx, [ebp+edx_0]
                mov     [esp+0Ch], edx
                mov     [esp+8], ecx
                mov     [esp+4], eax_0
                mov     dword ptr [esp], offset aCmpxchg8bEax08 ; "cmpxchg8b: eax=%08lx edx=%08lx op1=%016"...
                call    printf
                mov     dword ptr [ebp+var_20], 6789ABCDh
                mov     dword ptr [ebp+var_20+4], 12345h
                mov     eax, esi
                mov     edx, edi
                mov     ecx, 65324h
                cmpxchg8b [ebp+var_20]
                pushf
                pop     ebx
eax_0 = eax                             ; int
edx_0_0 = edx                           ; int
eflags = ebx                            ; int
                and     eflags, 40h
                mov     ecx, dword ptr [ebp+var_20]
                mov     [esp+14h], ebx
                mov     ebx, dword ptr [ebp+var_20+4]
                mov     [esp+10h], ebx
                mov     [esp+0Ch], ecx
                mov     [esp+8], edx_0_0
                mov     [esp+4], eax_0
                mov     dword ptr [esp], offset aCmpxchg8bEax08 ; "cmpxchg8b: eax=%08lx edx=%08lx op1=%016"...
                call    printf
                add     esp, 4Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 40B19B
test_xchg       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_misc()
test_misc       proc near               ; CODE XREF: main+49↓p

table           = byte ptr -108h

; __unwind {
                push    ebp
                xor     eax, eax
                mov     ebp, esp
                push    ebx
                sub     esp, 114h

loc_40B72A:                             ; CODE XREF: test_misc+23↓j
i = eax                                 ; int
                mov     dl, al
                lea     ebx, [ebp+table]
                neg     edx
                mov     [ebp+i+table], dl
                inc     i
                cmp     i, 100h
                jnz     short loc_40B72A
                mov     dword ptr [esp], offset aXlatEax08lx ; "xlat: EAX=%08lx\n"
                mov     i, 12345678h
                xlat
res = eax                               ; int
                mov     [esp+4], res
                call    printf
                push    0BC6058h
                push    9ABCDEFh
                pop     dword ptr [esp]
                pop     eax
res = eax                               ; int
                mov     [esp+4], res
                mov     dword ptr [esp], offset aPoplEsp08lx ; "popl esp=%08lx\n"
                call    printf
                push    0BC6058h
                push    9ABCDEFh
                pop     small word ptr [esp]
                add     esp, 2
                pop     eax
res = eax                               ; int
                mov     [esp+4], res
                mov     dword ptr [esp], offset aPopwEsp08lx ; "popw esp=%08lx\n"
                call    printf
                add     esp, 114h
                pop     ebx
                pop     ebp
                retn
; } // starts at 40B71E
test_misc       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_string()
test_string     proc near               ; CODE XREF: main+44↓p
; __unwind {
                push    ebp
                xor     eax, eax
                mov     ebp, esp
                push    edi
                push    esi
                push    ebx
                sub     esp, 2Ch

loc_40B7AD:                             ; CODE XREF: test_string+1A↓j
i = eax                                 ; int
                lea     edx, [i+56h]
                inc     i
                mov     ds:byte_41411F[eax], dl
i = eax                                 ; int
                cmp     i, 1000h
                jnz     short loc_40B7AD
                mov     ebx, (offset str_buffer+800h)
esi_0 = ebx                             ; int
                mov     edi, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     esi, esi_0
                mov     i, 12345678h
                mov     ecx, 11h
                push    0
                popf
                stosb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aStosb ; "stosb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                stosw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aStosw ; "stosw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                stosd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aStosl ; "stosl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                stosb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aStosb ; "stosb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                stosw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aStosw ; "stosw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                stosd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aStosl ; "stosl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep stosb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepStosb ; "rep stosb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep stosw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepStosw ; "rep stosw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep stosd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepStosl ; "rep stosl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep stosb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepStosb ; "rep stosb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep stosw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepStosw ; "rep stosw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep stosd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepStosl ; "rep stosl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                lodsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                lodsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                lodsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                lodsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                lodsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                lodsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep lodsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepLodsb ; "rep lodsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep lodsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepLodsw ; "rep lodsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep lodsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepLodsl ; "rep lodsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep lodsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepLodsb ; "rep lodsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep lodsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepLodsw ; "rep lodsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep lodsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepLodsl ; "rep lodsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                movsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aMovsb ; "movsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                movsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aMovsw ; "movsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                movsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aMovsl ; "movsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                movsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aMovsb ; "movsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                movsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aMovsw ; "movsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                movsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aMovsl ; "movsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep movsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepMovsb ; "rep movsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep movsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepMovsw ; "rep movsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                rep movsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepMovsl ; "rep movsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep movsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepMovsb ; "rep movsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep movsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepMovsw ; "rep movsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                rep movsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepMovsl ; "rep movsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                lodsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                lodsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                lodsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                lodsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsb ; "lodsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                lodsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsw ; "lodsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                lodsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aLodsl ; "lodsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                scasb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aScasb ; "scasb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                scasw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aScasw ; "scasw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                scasd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aScasl ; "scasl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                scasb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aScasb ; "scasb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                scasw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aScasw ; "scasw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                scasd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aScasl ; "scasl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repe scasb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzScasb ; "repz scasb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repe scasw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzScasw ; "repz scasw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repe scasd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzScasl ; "repz scasl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repe scasb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzScasb ; "repz scasb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repe scasw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzScasw ; "repz scasw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repe scasd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzScasl ; "repz scasl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repne scasb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzScasb ; "repnz scasb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repne scasw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzScasw ; "repnz scasw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repne scasd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzScasl ; "repnz scasl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repne scasb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzScasb ; "repnz scasb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repne scasw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzScasw ; "repnz scasw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repne scasd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzScasl ; "repnz scasl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                cmpsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aCmpsb ; "cmpsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                cmpsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aCmpsw ; "cmpsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                cmpsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aCmpsl ; "cmpsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                cmpsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aCmpsb ; "cmpsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                cmpsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aCmpsw ; "cmpsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                cmpsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aCmpsl ; "cmpsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repe cmpsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzCmpsb ; "repz cmpsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repe cmpsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzCmpsw ; "repz cmpsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repe cmpsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzCmpsl ; "repz cmpsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repe cmpsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzCmpsb ; "repz cmpsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repe cmpsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzCmpsw ; "repz cmpsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repe cmpsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepzCmpsl ; "repz cmpsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repne cmpsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzCmpsb ; "repnz cmpsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repne cmpsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzCmpsw ; "repnz cmpsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                repne cmpsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzCmpsl ; "repnz cmpsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repne cmpsb
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzCmpsb ; "repnz cmpsb"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repne cmpsw
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+14h], ecx_0
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzCmpsw ; "repnz cmpsw"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                mov     esi_0, ebx
                mov     edi_0, (offset str_buffer+810h)
edi_0 = edi                             ; int
                mov     eax, 12345678h
                mov     ecx, 11h
                push    0
                popf
                std
                repne cmpsd
                cld
                pushf
                pop     edx
esi_0 = esi                             ; int
eax_0 = eax                             ; int
ecx_0 = ecx                             ; int
eflags = edx                            ; int
                and     eflags, 8D5h
                mov     [esp+0Ch], edi_0
                mov     [esp+8], esi_0
                mov     [esp+18h], edx
                mov     [esp+14h], ecx_0
                mov     [esp+10h], eax_0
                mov     dword ptr [esp+4], offset aRepnzCmpsl ; "repnz cmpsl"
                mov     dword ptr [esp], offset a10sEsi08lxEdi0 ; "%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX"...
                call    printf
                add     esp, 2Ch
                pop     ebx
                pop     esi_0
                pop     edi_0
                pop     ebp
                retn
; } // starts at 40B7A2
test_string     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void test_conv()
test_conv       proc near               ; CODE XREF: main+53↓p
; __unwind {
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                mov     ebx, 8234A6F8h
                sub     esp, 20h
                mov     eax, ebx
                cbw
r = eax                                 ; unsigned int
                mov     [esp+0Ch], r
                mov     dword ptr [esp+8], 8234A6F8h
                mov     dword ptr [esp+4], offset aCbw ; "cbw"
                mov     dword ptr [esp], offset a10sA08lxR08lx ; "%-10s A=%08lx R=%08lx\n"
                call    printf
                mov     eax, ebx
                cwde
r = eax                                 ; unsigned int
                mov     esi, 8345A1F2h
                mov     [esp+0Ch], r
                mov     dword ptr [esp+8], 8234A6F8h
                mov     dword ptr [esp+4], offset aCwde ; "cwde"
                mov     dword ptr [esp], offset a10sA08lxR08lx ; "%-10s A=%08lx R=%08lx\n"
                call    printf
                mov     eax, ebx
                mov     edx, esi
                cwd
r = eax                                 ; unsigned int
rh = edx                                ; unsigned int
                mov     [esp+10h], rh
                mov     [esp+0Ch], r
                mov     dword ptr [esp+8], 8234A6F8h
                mov     dword ptr [esp+4], offset aCwd ; "cwd"
                mov     dword ptr [esp], offset a10sA08lxR08lx0 ; "%-10s A=%08lx R=%08lx:%08lx\n"
                call    printf
                mov     eax, ebx
                mov     edx, esi
                cdq
r = eax                                 ; unsigned int
rh = edx                                ; unsigned int
                mov     [esp+10h], rh
                mov     [esp+0Ch], r
                mov     dword ptr [esp+8], 8234A6F8h
                mov     dword ptr [esp+4], offset aCdq ; "cdq"
                mov     dword ptr [esp], offset a10sA08lxR08lx0 ; "%-10s A=%08lx R=%08lx:%08lx\n"
                call    printf
                mov     eax, 12345678h
                bswap   eax
r = eax                                 ; unsigned int
                mov     [esp+0Ch], r
                mov     dword ptr [esp+8], 12345678h
                mov     dword ptr [esp+4], offset aBswapl ; "bswapl"
                mov     dword ptr [esp], offset a10sA08lxR08lx_0 ; "%-10s: A=%08lx R=%08lx\n"
                call    printf
                add     esp, 20h
                pop     ebx
                pop     esi
                pop     ebp
                retn
; } // starts at 40CD8A
test_conv       endp

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, char **argv)
main            proc near               ; DATA XREF: mainCRTStartup+9↑o

var_4           = dword ptr -4
argc            = dword ptr  8
argv            = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                and     esp, 0FFFFFFF0h
                mov     ebx, offset _test_btc
;                call    __main

loc_40D571:                             ; CODE XREF: main+1F↓j
;ptr = ebx                               ; void **
                cmp     ebx, offset unk_40F064
                jz      short loc_40D581
                add     ebx, 4
                call    dword ptr [ebx-4]
                jmp     short loc_40D571
; ---------------------------------------------------------------------------

loc_40D581:                             ; CODE XREF: main+17↑j
                call    test_bsx
                call    test_popcnt
                call    test_mul
                call    test_jcc
                call    test_loop
                call    test_bcd
                call    test_xchg
                call    test_string
                call    test_misc
                call    test_lea
                call    test_conv
                xor     eax, eax
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 40D560
main            endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_40D5C0      proc near
; __unwind {
                push    ebp
                mov     ebp, esp
                pop     ebp
                jmp     sub_401090
; } // starts at 40D5C0
sub_40D5C0      endp

; ---------------------------------------------------------------------------
                align 10h
; func_ptr dword_40D5D0[]
dword_40D5D0    dd 0FFFFFFFFh, 40D5C0h, 0
                                        ; DATA XREF: _cygwin_crt0_common@8+52↑o
                                        ; _cygwin_crt0_common@8+22C↑o
; func_ptr dword_40D5DC[]
dword_40D5DC    dd 0FFFFFFFFh, 8 dup(0) ; DATA XREF: _cygwin_crt0_common@8+59↑o
                                        ; _cygwin_crt0_common@8+233↑o
                dd 280h dup(?)
_text           ends

; Section 2. (virtual address 0000E000)
; Virtual size                  : 00000060 (     96.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 0000CA00
; Flags C0600040: Data Readable Writable
; Alignment     : 32 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data           segment public 'DATA' use32
                assume cs:_data
                ;org 40E000h
dword_40E000    dd 0                    ; DATA XREF: sub_401090+60↑w
                                        ; sub_401090:loc_401130↑w ...
unk_40E004      db    0                 ; DATA XREF: sub_401090:loc_40110A↑o
                db    0
                db    0
                db    0
unk_40E008      db    0                 ; DATA XREF: test_loop+11↑o
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    1
                db    0
                db    1
                db    0
; float64u s_nan
s_nan           float64u <-1.797693134862316e308>
; float64u q_nan
q_nan           float64u <-2.696539702293474e308>
                                        ; DATA XREF: test_floats+AC↑r
                                        ; test_floats+CC↑r ...
                align 20h
; per_process_cxx_malloc _cygwin_cxx_malloc
__cygwin_cxx_malloc per_process_cxx_malloc <0>
                                        ; DATA XREF: _cygwin_crt0_common@8+DA↑r
                                        ; _cygwin_crt0_common@8:loc_40D194↑r ...
unk_40E060      db    0                 ; DATA XREF: _cygwin_crt0_common@8+19C↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
_data           ends

; Section 3. (virtual address 0000F000)
; Virtual size                  : 00000064 (    100.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 0000CC00
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
initcall        segment dword public 'DATA' use32
                assume cs:initcall
                ;org 40F000h
; void *test_btc
_test_btc       dd offset test_btc      ; DATA XREF: main+7↑o
; void *test_btr
_test_btr       dd offset test_btr
; void *test_bts
_test_bts       dd offset test_bts
; void *test_bt
_test_bt        dd offset test_bt
; void *test_shrd
_test_shrd      dd offset test_shrd
; void *test_shld
_test_shld      dd offset test_shld
; void *test_rcl
_test_rcl       dd offset test_rcl
; void *test_rcr
_test_rcr       dd offset test_rcr
; void *test_ror
_test_ror       dd offset test_ror
; void *test_rol
_test_rol       dd offset test_rol
; void *test_sar
_test_sar       dd offset test_sar
; void *test_shr
_test_shr       dd offset test_shr
; void *test_shl
_test_shl       dd offset test_shl
; void *test_not
_test_not       dd offset test_not
; void *test_neg
_test_neg       dd offset test_neg
; void *test_dec
_test_dec       dd offset test_dec
; void *test_inc
_test_inc       dd offset test_inc
; void *test_sbb
_test_sbb       dd offset test_sbb
; void *test_adc
_test_adc       dd offset test_adc
; void *test_cmp
_test_cmp       dd offset test_cmp
; void *test_or
_test_or        dd offset test_or
; void *test_and
_test_and       dd offset test_and
; void *test_xor
_test_xor       dd offset test_xor
; void *test_sub
_test_sub       dd offset test_sub
; void *test_add
_test_add       dd offset test_add
unk_40F064      db    0                 ; DATA XREF: main:loc_40D571↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
initcall        ends

; Section 4. (virtual address 00010000)
; Virtual size                  : 00000FF4 (   4084.)
; Section size in file          : 00001000 (   4096.)
; Offset to raw data for section: 0000CE00
; Flags 40400040: Data Readable
; Alignment     : 8 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata          segment para public 'DATA' use32
                assume cs:_rdata
                ;org 410000h
; CHAR LibFileName[]
LibFileName     db 'cyggcc_s-1.dll',0   ; DATA XREF: sub_401090+9↑o
                                        ; sub_401090+23↑o
; CHAR ProcName[]
ProcName        db '__register_frame_info',0
                                        ; DATA XREF: sub_401090+3E↑o
; CHAR aDeregisterFram[]
aDeregisterFram db '__deregister_frame_info',0
                                        ; DATA XREF: sub_401090+50↑o
                align 10h
aAddl           db 'addl',0             ; DATA XREF: exec_addl+34↑o
; char a10sA08lxB08lxR_0[]
a10sA08lxB08lxR_0 db '%-10s A=%08lx B=%08lx R=%08lx CCIN=%04lx CC=%04lx',0Ah,0
                                        ; DATA XREF: exec_addl+3C↑o
                                        ; exec_addw+3D↑o ...
aAddw           db 'addw',0             ; DATA XREF: exec_addw+35↑o
aAddb           db 'addb',0             ; DATA XREF: exec_addb+34↑o
aSubl           db 'subl',0             ; DATA XREF: exec_subl+34↑o
aSubw           db 'subw',0             ; DATA XREF: exec_subw+35↑o
aSubb           db 'subb',0             ; DATA XREF: exec_subb+34↑o
aXorl           db 'xorl',0             ; DATA XREF: exec_xorl+34↑o
aXorw           db 'xorw',0             ; DATA XREF: exec_xorw+35↑o
aXorb           db 'xorb',0             ; DATA XREF: exec_xorb+34↑o
aAndl           db 'andl',0             ; DATA XREF: exec_andl+34↑o
aAndw           db 'andw',0             ; DATA XREF: exec_andw+35↑o
aAndb           db 'andb',0             ; DATA XREF: exec_andb+34↑o
aOrl            db 'orl',0              ; DATA XREF: exec_orl+34↑o
aOrw            db 'orw',0              ; DATA XREF: exec_orw+35↑o
aOrb            db 'orb',0              ; DATA XREF: exec_orb+34↑o
aCmpl           db 'cmpl',0             ; DATA XREF: exec_cmpl+34↑o
aCmpw           db 'cmpw',0             ; DATA XREF: exec_cmpw+35↑o
aCmpb           db 'cmpb',0             ; DATA XREF: exec_cmpb+34↑o
aAdcl           db 'adcl',0             ; DATA XREF: exec_adcl+34↑o
aAdcw           db 'adcw',0             ; DATA XREF: exec_adcw+35↑o
aAdcb           db 'adcb',0             ; DATA XREF: exec_adcb+34↑o
aSbbl           db 'sbbl',0             ; DATA XREF: exec_sbbl+34↑o
aSbbw           db 'sbbw',0             ; DATA XREF: exec_sbbw+35↑o
aSbbb           db 'sbbb',0             ; DATA XREF: exec_sbbb+34↑o
aIncl           db 'incl',0             ; DATA XREF: exec_incl+2B↑o
; char a10sA08lxR08lxC[]
a10sA08lxR08lxC db '%-10s A=%08lx R=%08lx CCIN=%04lx CC=%04lx',0Ah,0
                                        ; DATA XREF: exec_incl+33↑o
                                        ; exec_incw+34↑o ...
aIncw           db 'incw',0             ; DATA XREF: exec_incw+2C↑o
aIncb           db 'incb',0             ; DATA XREF: exec_incb+2C↑o
aDecl           db 'decl',0             ; DATA XREF: exec_decl+2B↑o
aDecw           db 'decw',0             ; DATA XREF: exec_decw+2C↑o
aDecb           db 'decb',0             ; DATA XREF: exec_decb+2C↑o
aNegl           db 'negl',0             ; DATA XREF: exec_negl+2C↑o
aNegw           db 'negw',0             ; DATA XREF: exec_negw+2D↑o
aNegb           db 'negb',0             ; DATA XREF: exec_negb+2C↑o
aNotl           db 'notl',0             ; DATA XREF: exec_notl+2C↑o
aNotw           db 'notw',0             ; DATA XREF: exec_notw+2D↑o
aNotb           db 'notb',0             ; DATA XREF: exec_notb+2C↑o
aShll           db 'shll',0             ; DATA XREF: exec_shll+3C↑o
aShlw           db 'shlw',0             ; DATA XREF: exec_shlw+3D↑o
aShlb           db 'shlb',0             ; DATA XREF: exec_shlb+3C↑o
aShrl           db 'shrl',0             ; DATA XREF: exec_shrl+3C↑o
aShrw           db 'shrw',0             ; DATA XREF: exec_shrw+3D↑o
aShrb           db 'shrb',0             ; DATA XREF: exec_shrb+3C↑o
aSarl           db 'sarl',0             ; DATA XREF: exec_sarl+3C↑o
aSarw           db 'sarw',0             ; DATA XREF: exec_sarw+3D↑o
aSarb           db 'sarb',0             ; DATA XREF: exec_sarb+3C↑o
aRoll           db 'roll',0             ; DATA XREF: exec_roll+3C↑o
aRolw           db 'rolw',0             ; DATA XREF: exec_rolw+3D↑o
aRolb           db 'rolb',0             ; DATA XREF: exec_rolb+3C↑o
aRorl           db 'rorl',0             ; DATA XREF: exec_rorl+3C↑o
aRorw           db 'rorw',0             ; DATA XREF: exec_rorw+3D↑o
aRorb           db 'rorb',0             ; DATA XREF: exec_rorb+3C↑o
aRcrl           db 'rcrl',0             ; DATA XREF: exec_rcrl+3C↑o
aRcrw           db 'rcrw',0             ; DATA XREF: exec_rcrw+3D↑o
aRcrb           db 'rcrb',0             ; DATA XREF: exec_rcrb+3C↑o
aRcll           db 'rcll',0             ; DATA XREF: exec_rcll+3C↑o
aRclw           db 'rclw',0             ; DATA XREF: exec_rclw+3D↑o
aRclb           db 'rclb',0             ; DATA XREF: exec_rclb+3C↑o
aShldl          db 'shldl',0            ; DATA XREF: exec_shldl+45↑o
; char a10sA08lxB08lxC[]
a10sA08lxB08lxC db '%-10s A=%08lx B=%08lx C=%08lx R=%08lx CCIN=%04lx CC=%04lx',0Ah,0
                                        ; DATA XREF: exec_shldl+4D↑o
                                        ; exec_shldw+4E↑o ...
aShldw          db 'shldw',0            ; DATA XREF: exec_shldw+46↑o
aShrdl          db 'shrdl',0            ; DATA XREF: exec_shrdl+45↑o
aShrdw          db 'shrdw',0            ; DATA XREF: exec_shrdw+46↑o
aBtl            db 'btl',0              ; DATA XREF: exec_btl+3B↑o
aBtw            db 'btw',0              ; DATA XREF: exec_btw+3C↑o
aBtsl           db 'btsl',0             ; DATA XREF: exec_btsl+3B↑o
aBtsw           db 'btsw',0             ; DATA XREF: exec_btsw+3C↑o
aBtrl           db 'btrl',0             ; DATA XREF: exec_btrl+3B↑o
aBtrw           db 'btrw',0             ; DATA XREF: exec_btrw+3C↑o
aBtcl           db 'btcl',0             ; DATA XREF: exec_btcl+3B↑o
aBtcw           db 'btcw',0             ; DATA XREF: exec_btcw+3C↑o
a0x4000         db '0x4000',0           ; DATA XREF: test_lea+22↑o
; char aLeaS08lx[]
aLeaS08lx       db 'lea %s = %08lx',0Ah,0 ; DATA XREF: test_lea+2A↑o
                                        ; test_lea+57↑o ...
aEax            db '(%%eax)',0          ; DATA XREF: test_lea+4F↑o
aEbx            db '(%%ebx)',0          ; DATA XREF: test_lea+78↑o
aEcx            db '(%%ecx)',0          ; DATA XREF: test_lea+A1↑o
aEdx            db '(%%edx)',0          ; DATA XREF: test_lea+CA↑o
aEsi            db '(%%esi)',0          ; DATA XREF: test_lea+F3↑o
aEdi            db '(%%edi)',0          ; DATA XREF: test_lea+11C↑o
a0x40Eax        db '0x40(%%eax)',0      ; DATA XREF: test_lea+145↑o
a0x40Ebx        db '0x40(%%ebx)',0      ; DATA XREF: test_lea+16F↑o
a0x40Ecx        db '0x40(%%ecx)',0      ; DATA XREF: test_lea+199↑o
a0x40Edx        db '0x40(%%edx)',0      ; DATA XREF: test_lea+1C3↑o
a0x40Esi        db '0x40(%%esi)',0      ; DATA XREF: test_lea+1ED↑o
a0x40Edi        db '0x40(%%edi)',0      ; DATA XREF: test_lea+217↑o
a0x4000Eax      db '0x4000(%%eax)',0    ; DATA XREF: test_lea+241↑o
a0x4000Ebx      db '0x4000(%%ebx)',0    ; DATA XREF: test_lea+26E↑o
a0x4000Ecx      db '0x4000(%%ecx)',0    ; DATA XREF: test_lea+29B↑o
a0x4000Edx      db '0x4000(%%edx)',0    ; DATA XREF: test_lea+2C8↑o
a0x4000Esi      db '0x4000(%%esi)',0    ; DATA XREF: test_lea+2F5↑o
a0x4000Edi      db '0x4000(%%edi)',0    ; DATA XREF: test_lea+322↑o
aEaxEcx         db '(%%eax, %%ecx)',0   ; DATA XREF: test_lea+34F↑o
aEbxEdx         db '(%%ebx, %%edx)',0   ; DATA XREF: test_lea+379↑o
aEcxEcx         db '(%%ecx, %%ecx)',0   ; DATA XREF: test_lea+3A3↑o
aEdxEcx         db '(%%edx, %%ecx)',0   ; DATA XREF: test_lea+3CD↑o
aEsiEcx         db '(%%esi, %%ecx)',0   ; DATA XREF: test_lea+3F7↑o
aEdiEcx         db '(%%edi, %%ecx)',0   ; DATA XREF: test_lea+421↑o
a0x40EaxEcx     db '0x40(%%eax, %%ecx)',0 ; DATA XREF: test_lea+44B↑o
a0x4000EbxEdx   db '0x4000(%%ebx, %%edx)',0 ; DATA XREF: test_lea+476↑o
aEcxEcx2        db '(%%ecx, %%ecx, 2)',0 ; DATA XREF: test_lea+4A4↑o
aEdxEcx4        db '(%%edx, %%ecx, 4)',0 ; DATA XREF: test_lea+4CE↑o
aEsiEcx8        db '(%%esi, %%ecx, 8)',0 ; DATA XREF: test_lea+4F8↑o
aEax2           db '(,%%eax, 2)',0      ; DATA XREF: test_lea+522↑o
aEbx4           db '(,%%ebx, 4)',0      ; DATA XREF: test_lea+550↑o
aEcx8           db '(,%%ecx, 8)',0      ; DATA XREF: test_lea+57E↑o
a0x40Eax2       db '0x40(,%%eax, 2)',0  ; DATA XREF: test_lea+5AC↑o
a0x40Ebx4       db '0x40(,%%ebx, 4)',0  ; DATA XREF: test_lea+5DA↑o
a0x40Ecx8       db '0x40(,%%ecx, 8)',0  ; DATA XREF: test_lea+608↑o
a10EcxEcx2      db '-10(%%ecx, %%ecx, 2)',0 ; DATA XREF: test_lea+636↑o
a10EdxEcx4      db '-10(%%edx, %%ecx, 4)',0 ; DATA XREF: test_lea+661↑o
a10EsiEcx8      db '-10(%%esi, %%ecx, 8)',0 ; DATA XREF: test_lea+68C↑o
a0x4000EcxEcx2  db '0x4000(%%ecx, %%ecx, 2)',0
                                        ; DATA XREF: test_lea+6B7↑o
a0x4000EdxEcx4  db '0x4000(%%edx, %%ecx, 4)',0
                                        ; DATA XREF: test_lea+6E5↑o
a0x4000EsiEcx8  db '0x4000(%%esi, %%ecx, 8)',0
                                        ; DATA XREF: test_lea+718↑o
aJne            db 'jne',0              ; DATA XREF: test_jcc:loc_4068F5↑o
                                        ; test_jcc:loc_40698C↑o
; char a10sD[]
a10sD           db '%-10s %d',0Ah,0     ; DATA XREF: test_jcc+28↑o
                                        ; test_jcc+4B↑o ...
aSetne          db 'setne',0            ; DATA XREF: test_jcc+39↑o
                                        ; test_jcc+CB↑o
aCmovnel        db 'cmovnel',0          ; DATA XREF: test_jcc+68↑o
                                        ; test_jcc+FA↑o
; char a10sR08lx[]
a10sR08lx       db '%-10s R=%08lx',0Ah,0 ; DATA XREF: test_jcc+74↑o
                                        ; test_jcc+93↑o ...
aCmovnew        db 'cmovnew',0          ; DATA XREF: test_jcc+85↑o
                                        ; test_jcc+112↑o
aJe             db 'je',0               ; DATA XREF: test_jcc+130↑o
                                        ; test_jcc+1C0↑o
aSete           db 'sete',0             ; DATA XREF: test_jcc+156↑o
                                        ; test_jcc+1E6↑o
aCmovel         db 'cmovel',0           ; DATA XREF: test_jcc+184↑o
                                        ; test_jcc+214↑o
aCmovew         db 'cmovew',0           ; DATA XREF: test_jcc+1A2↑o
                                        ; test_jcc+232↑o
aJl             db 'jl',0               ; DATA XREF: test_jcc+250↑o
                                        ; test_jcc+2E0↑o ...
aSetl           db 'setl',0             ; DATA XREF: test_jcc+276↑o
                                        ; test_jcc+306↑o ...
aCmovll         db 'cmovll',0           ; DATA XREF: test_jcc+2A4↑o
                                        ; test_jcc+334↑o ...
aCmovlw         db 'cmovlw',0           ; DATA XREF: test_jcc+2C2↑o
                                        ; test_jcc+352↑o ...
aJle            db 'jle',0              ; DATA XREF: test_jcc+409↑o
                                        ; test_jcc+49F↑o ...
aSetle          db 'setle',0            ; DATA XREF: test_jcc+42F↑o
                                        ; test_jcc+4C5↑o ...
aCmovlel        db 'cmovlel',0          ; DATA XREF: test_jcc+458↑o
                                        ; test_jcc+4EE↑o ...
aCmovlew        db 'cmovlew',0          ; DATA XREF: test_jcc+487↑o
                                        ; test_jcc+51D↑o ...
aJge            db 'jge',0              ; DATA XREF: test_jcc+5CB↑o
                                        ; test_jcc+661↑o ...
aSetge          db 'setge',0            ; DATA XREF: test_jcc+5F1↑o
                                        ; test_jcc+687↑o ...
aCmovgel        db 'cmovgel',0          ; DATA XREF: test_jcc+61A↑o
                                        ; test_jcc+6B0↑o ...
aCmovgew        db 'cmovgew',0          ; DATA XREF: test_jcc+649↑o
                                        ; test_jcc+6DF↑o ...
aJg             db 'jg',0               ; DATA XREF: test_jcc+78D↑o
                                        ; test_jcc+823↑o ...
aSetg           db 'setg',0             ; DATA XREF: test_jcc+7B3↑o
                                        ; test_jcc+849↑o ...
aCmovgl         db 'cmovgl',0           ; DATA XREF: test_jcc+7DC↑o
                                        ; test_jcc+872↑o ...
aCmovgw         db 'cmovgw',0           ; DATA XREF: test_jcc+80B↑o
                                        ; test_jcc+8A1↑o ...
aJb             db 'jb',0               ; DATA XREF: test_jcc+94F↑o
                                        ; test_jcc+9E5↑o ...
aSetb           db 'setb',0             ; DATA XREF: test_jcc+975↑o
                                        ; test_jcc+A0B↑o ...
aCmovbl         db 'cmovbl',0           ; DATA XREF: test_jcc+99E↑o
                                        ; test_jcc+A34↑o ...
aCmovbw         db 'cmovbw',0           ; DATA XREF: test_jcc+9CD↑o
                                        ; test_jcc+A63↑o ...
aJbe            db 'jbe',0              ; DATA XREF: test_jcc+B11↑o
                                        ; test_jcc+BA7↑o ...
aSetbe          db 'setbe',0            ; DATA XREF: test_jcc+B37↑o
                                        ; test_jcc+BCD↑o ...
aCmovbel        db 'cmovbel',0          ; DATA XREF: test_jcc+B60↑o
                                        ; test_jcc+BF6↑o ...
aCmovbew        db 'cmovbew',0          ; DATA XREF: test_jcc+B8F↑o
                                        ; test_jcc+C25↑o ...
aJae            db 'jae',0              ; DATA XREF: test_jcc+CD3↑o
                                        ; test_jcc+D69↑o ...
aSetae          db 'setae',0            ; DATA XREF: test_jcc+CF9↑o
                                        ; test_jcc+D8F↑o ...
aCmovael        db 'cmovael',0          ; DATA XREF: test_jcc+D22↑o
                                        ; test_jcc+DB8↑o ...
aCmovaew        db 'cmovaew',0          ; DATA XREF: test_jcc+D51↑o
                                        ; test_jcc+DE7↑o ...
aJa             db 'ja',0               ; DATA XREF: test_jcc+E95↑o
                                        ; test_jcc+F2B↑o ...
aSeta           db 'seta',0             ; DATA XREF: test_jcc+EBB↑o
                                        ; test_jcc+F51↑o ...
aCmoval         db 'cmoval',0           ; DATA XREF: test_jcc+EE4↑o
                                        ; test_jcc+F7A↑o ...
aCmovaw         db 'cmovaw',0           ; DATA XREF: test_jcc+F13↑o
                                        ; test_jcc+FA9↑o ...
aJp             db 'jp',0               ; DATA XREF: test_jcc+1057↑o
                                        ; test_jcc+10ED↑o
aSetp           db 'setp',0             ; DATA XREF: test_jcc+107D↑o
                                        ; test_jcc+1113↑o
aCmovpl         db 'cmovpl',0           ; DATA XREF: test_jcc+10A6↑o
                                        ; test_jcc+113C↑o
aCmovpw         db 'cmovpw',0           ; DATA XREF: test_jcc+10D5↑o
                                        ; test_jcc+116B↑o
aJnp            db 'jnp',0              ; DATA XREF: test_jcc+1183↑o
                                        ; test_jcc+1219↑o
aSetnp          db 'setnp',0            ; DATA XREF: test_jcc+11A9↑o
                                        ; test_jcc+123F↑o
aCmovnpl        db 'cmovnpl',0          ; DATA XREF: test_jcc+11D2↑o
                                        ; test_jcc+1268↑o
aCmovnpw        db 'cmovnpw',0          ; DATA XREF: test_jcc+1201↑o
                                        ; test_jcc+1297↑o
aJo             db 'jo',0               ; DATA XREF: test_jcc+12AF↑o
                                        ; test_jcc+1359↑o
aSeto           db 'seto',0             ; DATA XREF: test_jcc+12DA↑o
                                        ; test_jcc+1384↑o
aCmovol         db 'cmovol',0           ; DATA XREF: test_jcc+130D↑o
                                        ; test_jcc+13B7↑o
aCmovow         db 'cmovow',0           ; DATA XREF: test_jcc+133B↑o
                                        ; test_jcc+13E5↑o
aJno            db 'jno',0              ; DATA XREF: test_jcc+1403↑o
                                        ; test_jcc+14AD↑o
aSetno          db 'setno',0            ; DATA XREF: test_jcc+142E↑o
                                        ; test_jcc+14D8↑o
aCmovnol        db 'cmovnol',0          ; DATA XREF: test_jcc+1461↑o
                                        ; test_jcc+150B↑o
aCmovnow        db 'cmovnow',0          ; DATA XREF: test_jcc+148F↑o
                                        ; test_jcc+1539↑o
aJs             db 'js',0               ; DATA XREF: test_jcc+1557↑o
                                        ; test_jcc+15ED↑o ...
aSets           db 'sets',0             ; DATA XREF: test_jcc+157D↑o
                                        ; test_jcc+1613↑o ...
aCmovsl         db 'cmovsl',0           ; DATA XREF: test_jcc+15A6↑o
                                        ; test_jcc+163C↑o ...
aCmovsw         db 'cmovsw',0           ; DATA XREF: test_jcc+15D5↑o
                                        ; test_jcc+166B↑o ...
aJns            db 'jns',0              ; DATA XREF: test_jcc+1719↑o
                                        ; test_jcc+17AF↑o ...
aSetns          db 'setns',0            ; DATA XREF: test_jcc+173F↑o
                                        ; test_jcc+17D5↑o ...
aCmovnsl        db 'cmovnsl',0          ; DATA XREF: test_jcc+1768↑o
                                        ; test_jcc+17FE↑o ...
aCmovnsw        db 'cmovnsw',0          ; DATA XREF: test_jcc+1797↑o
                                        ; test_jcc+182D↑o ...
aJcxz           db 'jcxz',0             ; DATA XREF: test_loop:loc_4081F6↑o
                                        ; test_loop+7B↑o
; char a10sEcx08lxZfLd[]
a10sEcx08lxZfLd db '%-10s ECX=%08lx ZF=%ld r=%d',0Ah,0
                                        ; DATA XREF: test_loop+4C↑o
                                        ; test_loop+83↑o ...
aLoopw          db 'loopw',0            ; DATA XREF: test_loop:loc_408273↑o
                                        ; test_loop+F8↑o
aLoopzw         db 'loopzw',0           ; DATA XREF: test_loop:loc_4082F0↑o
                                        ; test_loop+175↑o
aLoopnzw        db 'loopnzw',0          ; DATA XREF: test_loop:loc_40836D↑o
                                        ; test_loop+1F2↑o
aJecxz          db 'jecxz',0            ; DATA XREF: test_loop:loc_4083E9↑o
                                        ; test_loop+26D↑o
aLoopl          db 'loopl',0            ; DATA XREF: test_loop:loc_408464↑o
                                        ; test_loop+2E8↑o
aLoopzl         db 'loopzl',0           ; DATA XREF: test_loop:loc_4084DF↑o
                                        ; test_loop+363↑o
aLoopnzl        db 'loopnzl',0          ; DATA XREF: test_loop:loc_40855A↑o
                                        ; test_loop+3DE↑o
aMulb           db 'mulb',0             ; DATA XREF: test_mulb+2D↑o
; char a10sA08lxB08lxR[]
a10sA08lxB08lxR db '%-10s A=%08lx B=%08lx R=%08lx CC=%04lx',0Ah,0
                                        ; DATA XREF: test_mulb+35↑o
                                        ; test_imulb+35↑o ...
aMulw           db 'mulw',0             ; DATA XREF: test_mulw+3D↑o
; char a10sAh08lxAl08l[]
a10sAh08lxAl08l db '%-10s AH=%08lx AL=%08lx B=%08lx RH=%08lx RL=%08lx CC=%04lx',0Ah,0
                                        ; DATA XREF: test_mulw+45↑o
                                        ; test_mull+44↑o ...
aMull           db 'mull',0             ; DATA XREF: test_mull+3C↑o
aImulb          db 'imulb',0            ; DATA XREF: test_imulb+2D↑o
aImulw          db 'imulw',0            ; DATA XREF: test_imulw+3D↑o
                                        ; test_imulw2+2F↑o
aImull          db 'imull',0            ; DATA XREF: test_imull+3C↑o
                                        ; test_imull2+2E↑o
aDivb           db 'divb',0             ; DATA XREF: test_divb+2B↑o
aDivw           db 'divw',0             ; DATA XREF: test_divw+3B↑o
aDivl           db 'divl',0             ; DATA XREF: test_divl+3A↑o
aIdivb          db 'idivb',0            ; DATA XREF: test_idivb+2B↑o
aIdivw          db 'idivw',0            ; DATA XREF: test_idivw+3B↑o
aIdivl          db 'idivl',0            ; DATA XREF: test_idivl+3A↑o
aImulwIm        db 'imulw im',0         ; DATA XREF: test_mul+46C↑o
                                        ; test_mul+4B0↑o ...
aImullIm        db 'imull im',0         ; DATA XREF: test_mul+575↑o
                                        ; test_mul+5B3↑o ...
aBsrw           db 'bsrw',0             ; DATA XREF: test_bsx+29↑o
                                        ; test_bsx+58↑o ...
; char a10sA08lxR08lxL[]
a10sA08lxR08lxL db '%-10s A=%08lx R=%08lx %ld',0Ah,0
                                        ; DATA XREF: test_bsx+31↑o
                                        ; test_bsx+68↑o ...
aBsfw           db 'bsfw',0             ; DATA XREF: test_bsx+F6↑o
                                        ; test_bsx+128↑o ...
aBsrl           db 'bsrl',0             ; DATA XREF: test_bsx+1C2↑o
                                        ; test_bsx+200↑o ...
aBsfl           db 'bsfl',0             ; DATA XREF: test_bsx+290↑o
                                        ; test_bsx+2CE↑o ...
; char aPopcntA08lxR08[]
aPopcntA08lxR08 db 'popcnt A=%08lx R=%08lx flags=%lx',0Ah,0
                                        ; DATA XREF: test_popcnt+26↑o
; char aAFBFABF[]
aAFBFABF        db 'a=%f b=%f a+b=%f',0Ah,0 ; DATA XREF: test_fops+10↑o
; char aAFBFABF_0[]
aAFBFABF_0      db 'a=%f b=%f a-b=%f',0Ah,0 ; DATA XREF: test_fops+2E↑o
; char aAFBFABF_1[]
aAFBFABF_1      db 'a=%f b=%f a*b=%f',0Ah,0 ; DATA XREF: test_fops+52↑o
; char aAFBFABF_2[]
aAFBFABF_2      db 'a=%f b=%f a/b=%f',0Ah,0 ; DATA XREF: test_fops+79↑o
; char aAFBFF[]
aAFBFF          db 'a=%f b=%f =%f',0Ah,0 ; DATA XREF: test_fops+9D↑o
; char aAFBFFmodABF[]
aAFBFFmodABF    db 'a=%f b=%f fmod(a, b)=%f',0Ah,0
                                        ; DATA XREF: test_fops+13A↑o
; char aAFCopysignABF[]
aAFCopysignABF  db 'a=%f copysign(a,b)=%f',0Ah,0
                                        ; DATA XREF: test_fops+173↑o
; char aAFSqrtAF[]
aAFSqrtAF       db 'a=%f sqrt(a)=%f',0Ah,0 ; DATA XREF: test_fops+191↑o
; char aAFExpAF[]
aAFExpAF        db 'a=%f exp(a)=%f',0Ah,0 ; DATA XREF: test_fops+1B3↑o
; char aFcomFF04lx[]
aFcomFF04lx     db 'fcom(%f %f)=%04lx',0Ah,0 ; DATA XREF: test_fcmp+17↑o
; char aFucomFF04lx[]
aFucomFF04lx    db 'fucom(%f %f)=%04lx',0Ah,0
                                        ; DATA XREF: test_fcmp+4C↑o
; char aFcomiFF04lx02l[]
aFcomiFF04lx02l db 'fcomi(%f %f)=%04lx %02lx',0Ah,0
                                        ; DATA XREF: test_fcmp+99↑o
; char aFucomiFF04lx02[]
aFucomiFF04lx02 db 'fucomi(%f %f)=%04lx %02lx',0Ah,0
                                        ; DATA XREF: test_fcmp+D0↑o
; char aFxamF04lx[]
aFxamF04lx      db 'fxam(%f)=%04lx',0Ah,0 ; DATA XREF: test_fcmp+F6↑o
; char aFloatFF[]
aFloatFF        db '(float)%f = %f',0Ah,0 ; DATA XREF: test_fcvt+A↑o
; char aLongDoubleFLf[]
aLongDoubleFLf  db '(long double)%f = %Lf',0Ah,0
                                        ; DATA XREF: test_fcvt+29↑o
; char aA016llx[]
aA016llx        db 'a=%016llx',0Ah,0    ; DATA XREF: test_fcvt+52↑o
; char aLa016llx04x[]
aLa016llx04x    db 'la=%016llx %04x',0Ah,0 ; DATA XREF: test_fcvt+5E↑o
; char aShortAD[]
aShortAD        db '(short)a = %d',0Ah,0 ; DATA XREF: test_fcvt+BF↑o
; char aIntAD[]
aIntAD          db '(int)a = %d',0Ah,0  ; DATA XREF: test_fcvt+D7↑o
; char aInt64TA016llx[]
aInt64TA016llx  db '(int64_t)a = %016llx',0Ah,0
                                        ; DATA XREF: test_fcvt+F5↑o
; char aRintAF[]
aRintAF         db 'rint(a) = %f',0Ah,0 ; DATA XREF: test_fcvt+101↑o
; char aFld1F[]
aFld1F          db 'fld1= %f',0Ah,0     ; DATA XREF: test_fconst+C↑o
; char aFldl2tF[]
aFldl2tF        db 'fldl2t= %f',0Ah,0   ; DATA XREF: test_fconst+18↑o
; char aFldl2eF[]
aFldl2eF        db 'fldl2e= %f',0Ah,0   ; DATA XREF: test_fconst+2A↑o
; char aFldpiF[]
aFldpiF         db 'fldpi= %f',0Ah,0    ; DATA XREF: test_fconst+3C↑o
; char aFldlg2F[]
aFldlg2F        db 'fldlg2= %f',0Ah,0   ; DATA XREF: test_fconst+4E↑o
; char aFldln2F[]
aFldln2F        db 'fldln2= %f',0Ah,0   ; DATA XREF: test_fconst+60↑o
; char aFldzF[]
aFldzF          db 'fldz= %f',0Ah,0     ; DATA XREF: test_fconst+72↑o
; char aAFBcd04x04x04x[]
aAFBcd04x04x04x db 'a=%f bcd=%04x%04x%04x%04x%04x b=%f',0Ah,0
                                        ; DATA XREF: test_fbcd+17↑o
; char aResDF[]
aResDF          db 'res[%d]=%f',0Ah,0   ; DATA XREF: test_fenv+8D↑o
                                        ; test_fenv+13A↑o
; char aFpuc04xFpus04x[]
aFpuc04xFpus04x db 'fpuc=%04x fpus=%04x fptag=%04x',0Ah,0
                                        ; DATA XREF: test_fenv+BF↑o
                                        ; test_fenv+16C↑o
; char aFptag04x[]
aFptag04x       db 'fptag=%04x',0Ah,0   ; DATA XREF: test_fenv+1B6↑o
aB              db 'b',0                ; DATA XREF: test_fcmov+30↑o
; char aFcmovSEflags0x[]
aFcmovSEflags0x db 'fcmov%s eflags=0x%04lx-> %f',0Ah,0
                                        ; DATA XREF: test_fcmov+38↑o
                                        ; test_fcmov+63↑o ...
aE              db 'e',0                ; DATA XREF: test_fcmov+5B↑o
aBe             db 'be',0               ; DATA XREF: test_fcmov+85↑o
aNb             db 'nb',0               ; DATA XREF: test_fcmov+AF↑o
aNe             db 'ne',0               ; DATA XREF: test_fcmov+D9↑o
aNbe            db 'nbe',0              ; DATA XREF: test_fcmov+103↑o
aU              db 'u',0                ; DATA XREF: test_fcmov+13B↑o
                                        ; test_fcmov+16A↑o
aNu             db 'nu',0               ; DATA XREF: test_fcmov+199↑o
                                        ; test_fcmov+1C8↑o
aDaa            db 'daa',0              ; DATA XREF: test_bcd+3D↑o
                                        ; test_bcd+80↑o ...
; char a10sA08xR08xCci[]
a10sA08xR08xCci db '%-10s A=%08x R=%08x CCIN=%04x CC=%04x',0Ah,0
                                        ; DATA XREF: test_bcd+45↑o
                                        ; test_bcd+88↑o ...
aDas            db 'das',0              ; DATA XREF: test_bcd+373↑o
                                        ; test_bcd+3B1↑o ...
aAaa            db 'aaa',0              ; DATA XREF: test_bcd+6A6↑o
                                        ; test_bcd+6E6↑o ...
aAas            db 'aas',0              ; DATA XREF: test_bcd+87D↑o
                                        ; test_bcd+8B8↑o ...
aAam            db 'aam',0              ; DATA XREF: test_bcd+A56↑o
aAad            db 'aad',0              ; DATA XREF: test_bcd+A98↑o
aXchgl          db 'xchgl',0            ; DATA XREF: test_xchg+17↑o
                                        ; test_xchg+86↑o
; char a10sA08lxB08lx[]
a10sA08lxB08lx  db '%-10s A=%08lx B=%08lx',0Ah,0
                                        ; DATA XREF: test_xchg+20↑o
                                        ; test_xchg+47↑o ...
aXchgw          db 'xchgw',0            ; DATA XREF: test_xchg+3D↑o
                                        ; test_xchg+B1↑o
aXchgb          db 'xchgb',0            ; DATA XREF: test_xchg+5F↑o
                                        ; test_xchg+DD↑o
aXaddl          db 'xaddl',0            ; DATA XREF: test_xchg+103↑o
                                        ; test_xchg+187↑o
aXaddw          db 'xaddw',0            ; DATA XREF: test_xchg+126↑o
                                        ; test_xchg+1B3↑o
aXaddb          db 'xaddb',0            ; DATA XREF: test_xchg+14A↑o
                                        ; test_xchg+1E0↑o
; char aXaddlSameRes08[]
aXaddlSameRes08 db 'xaddl same res=%08x',0Ah,0
                                        ; DATA XREF: test_xchg+16E↑o
aCmpxchgl       db 'cmpxchgl',0         ; DATA XREF: test_xchg+226↑o
                                        ; test_xchg+2CD↑o ...
; char a10sEax08lxA08l[]
a10sEax08lxA08l db '%-10s EAX=%08lx A=%08lx C=%08lx CC=%02lx',0Ah,0
                                        ; DATA XREF: test_xchg+22E↑o
                                        ; test_xchg+266↑o ...
aCmpxchgw       db 'cmpxchgw',0         ; DATA XREF: test_xchg+25E↑o
                                        ; test_xchg+306↑o ...
aCmpxchgb       db 'cmpxchgb',0         ; DATA XREF: test_xchg+295↑o
                                        ; test_xchg+33E↑o ...
; char aCmpxchg8bEax08[]
aCmpxchg8bEax08 db 'cmpxchg8b: eax=%08lx edx=%08lx op1=%016llx CC=%02lx',0Ah,0
                                        ; DATA XREF: test_xchg+529↑o
                                        ; test_xchg+56F↑o
; char aXlatEax08lx[]
aXlatEax08lx    db 'xlat: EAX=%08lx',0Ah,0 ; DATA XREF: test_misc+25↑o
; char aPoplEsp08lx[]
aPoplEsp08lx    db 'popl esp=%08lx',0Ah,0 ; DATA XREF: test_misc+4D↑o
; char aPopwEsp08lx[]
aPopwEsp08lx    db 'popw esp=%08lx',0Ah,0 ; DATA XREF: test_misc+6F↑o
aStosb          db 'stosb',0            ; DATA XREF: test_string+53↑o
                                        ; test_string+127↑o
; char a10sEsi08lxEdi0[]
a10sEsi08lxEdi0 db '%-10s ESI=%08lx EDI=%08lx EAX=%08lx ECX=%08lx EFL=%04x',0Ah,0
                                        ; DATA XREF: test_string+5B↑o
                                        ; test_string+A2↑o ...
aStosw          db 'stosw',0            ; DATA XREF: test_string+9A↑o
                                        ; test_string+16F↑o
aStosl          db 'stosl',0            ; DATA XREF: test_string+E0↑o
                                        ; test_string+1B6↑o
aRepStosb       db 'rep stosb',0        ; DATA XREF: test_string+1FD↑o
                                        ; test_string+2D4↑o
aRepStosw       db 'rep stosw',0        ; DATA XREF: test_string+245↑o
                                        ; test_string+31D↑o
aRepStosl       db 'rep stosl',0        ; DATA XREF: test_string+28C↑o
                                        ; test_string+365↑o
aLodsb          db 'lodsb',0            ; DATA XREF: test_string+3AB↑o
                                        ; test_string+47F↑o ...
aLodsw          db 'lodsw',0            ; DATA XREF: test_string+3F2↑o
                                        ; test_string+4C7↑o ...
aLodsl          db 'lodsl',0            ; DATA XREF: test_string+438↑o
                                        ; test_string+50E↑o ...
aRepLodsb       db 'rep lodsb',0        ; DATA XREF: test_string+555↑o
                                        ; test_string+62C↑o
aRepLodsw       db 'rep lodsw',0        ; DATA XREF: test_string+59D↑o
                                        ; test_string+675↑o
aRepLodsl       db 'rep lodsl',0        ; DATA XREF: test_string+5E4↑o
                                        ; test_string+6BD↑o
aMovsb          db 'movsb',0            ; DATA XREF: test_string+703↑o
                                        ; test_string+7D7↑o
aMovsw          db 'movsw',0            ; DATA XREF: test_string+74A↑o
                                        ; test_string+81F↑o
aMovsl          db 'movsl',0            ; DATA XREF: test_string+790↑o
                                        ; test_string+866↑o
aRepMovsb       db 'rep movsb',0        ; DATA XREF: test_string+8AD↑o
                                        ; test_string+984↑o
aRepMovsw       db 'rep movsw',0        ; DATA XREF: test_string+8F5↑o
                                        ; test_string+9CD↑o
aRepMovsl       db 'rep movsl',0        ; DATA XREF: test_string+93C↑o
                                        ; test_string+A15↑o
aScasb          db 'scasb',0            ; DATA XREF: test_string+C04↑o
                                        ; test_string+CD8↑o
aScasw          db 'scasw',0            ; DATA XREF: test_string+C4B↑o
                                        ; test_string+D20↑o
aScasl          db 'scasl',0            ; DATA XREF: test_string+C91↑o
                                        ; test_string+D67↑o
aRepzScasb      db 'repz scasb',0       ; DATA XREF: test_string+DAE↑o
                                        ; test_string+E85↑o
aRepzScasw      db 'repz scasw',0       ; DATA XREF: test_string+DF6↑o
                                        ; test_string+ECE↑o
aRepzScasl      db 'repz scasl',0       ; DATA XREF: test_string+E3D↑o
                                        ; test_string+F16↑o
aRepnzScasb     db 'repnz scasb',0      ; DATA XREF: test_string+F5D↑o
                                        ; test_string+1034↑o
aRepnzScasw     db 'repnz scasw',0      ; DATA XREF: test_string+FA5↑o
                                        ; test_string+107D↑o
aRepnzScasl     db 'repnz scasl',0      ; DATA XREF: test_string+FEC↑o
                                        ; test_string+10C5↑o
aCmpsb          db 'cmpsb',0            ; DATA XREF: test_string+110B↑o
                                        ; test_string+11DF↑o
aCmpsw          db 'cmpsw',0            ; DATA XREF: test_string+1152↑o
                                        ; test_string+1227↑o
aCmpsl          db 'cmpsl',0            ; DATA XREF: test_string+1198↑o
                                        ; test_string+126E↑o
aRepzCmpsb      db 'repz cmpsb',0       ; DATA XREF: test_string+12B5↑o
                                        ; test_string+138C↑o
aRepzCmpsw      db 'repz cmpsw',0       ; DATA XREF: test_string+12FD↑o
                                        ; test_string+13D5↑o
aRepzCmpsl      db 'repz cmpsl',0       ; DATA XREF: test_string+1344↑o
                                        ; test_string+141D↑o
aRepnzCmpsb     db 'repnz cmpsb',0      ; DATA XREF: test_string+1464↑o
                                        ; test_string+153B↑o
aRepnzCmpsw     db 'repnz cmpsw',0      ; DATA XREF: test_string+14AC↑o
                                        ; test_string+1584↑o
aRepnzCmpsl     db 'repnz cmpsl',0      ; DATA XREF: test_string+14F3↑o
                                        ; test_string+15CC↑o
aCbw            db 'cbw',0              ; DATA XREF: test_conv+1D↑o
; char a10sA08lxR08lx[]
a10sA08lxR08lx  db '%-10s A=%08lx R=%08lx',0Ah,0
                                        ; DATA XREF: test_conv+25↑o
                                        ; test_conv+4D↑o
aCwde           db 'cwde',0             ; DATA XREF: test_conv+45↑o
aCwd            db 'cwd',0              ; DATA XREF: test_conv+6F↑o
; char a10sA08lxR08lx0[]
a10sA08lxR08lx0 db '%-10s A=%08lx R=%08lx:%08lx',0Ah,0
                                        ; DATA XREF: test_conv+77↑o
                                        ; test_conv+A0↑o
aCdq            db 'cdq',0              ; DATA XREF: test_conv+98↑o
aBswapl         db 'bswapl',0           ; DATA XREF: test_conv+BF↑o
; char a10sA08lxR08lx_0[]
a10sA08lxR08lx_0 db '%-10s: A=%08lx R=%08lx',0Ah,0
                                        ; DATA XREF: test_conv+C7↑o
flt_410D24      dd 6.5                  ; DATA XREF: test_fops+B0↑r
dbl_410D28      dq 3.7                  ; DATA XREF: test_fops+C9↑r
flt_410D30      dd 5.5                  ; DATA XREF: test_fops+DD↑r
flt_410D34      dd 3.5                  ; DATA XREF: test_fops+F7↑r
flt_410D38      dd 3.0                  ; DATA XREF: test_fops+101↑r
                                        ; test_floats+6↑r ...
flt_410D3C      dd 2.0                  ; DATA XREF: test_floats+10↑r
                                        ; test_floats+74↑r ...
dbl_410D40      dq 2.0                  ; DATA XREF: test_fcmov:loc_40A370↑r
                                        ; test_fcmov+49↑r ...
flt_410D48      dd -5.0                 ; DATA XREF: test_floats+25↑r
flt_410D4C      dd 128.0                ; DATA XREF: test_floats+3C↑r
flt_410D50      dd -20.5                ; DATA XREF: test_floats+46↑r
flt_410D54      dd -4.0                 ; DATA XREF: test_floats+54↑r
flt_410D58      dd -0.5                 ; DATA XREF: test_floats+5E↑r
                                        ; test_floats+122↑r
flt_410D5C      dd 0.5                  ; DATA XREF: test_floats+114↑r
flt_410D60      dd 32768.0              ; DATA XREF: test_floats+158↑r
                align 8
aGccGnu64020170 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu730      db 'GCC: (GNU) 7.3.0',0
                align 10h
aGccGnu730_0    db 'GCC: (GNU) 7.3.0',0
                align 4
aGccGnu64020170_0 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu64020170_1 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu64020170_2 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 10h
aGccGnu64020170_3 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu64020170_4 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu64020170_5 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu64020170_6 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 10h
aGccGnu64020170_7 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu64020170_8 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu64020170_9 db 'GCC: (GNU) 6.4.0 20170704 (Fedora Cygwin 6.4.0-1)',0
                align 4
aGccGnu730_1    db 'GCC: (GNU) 7.3.0',0
                align 10h
aGccGnu730_2    db 'GCC: (GNU) 7.3.0',0
                align 4
unk_410FF4      db    0                 ; DATA XREF: _cygwin_crt0_common@8+1B1↑o
                                        ; _cygwin_crt0_common@8+1BB↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
_rdata          ends

; Section 5. (virtual address 00011000)
; Virtual size                  : 00000035 (     53.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 0000DE00
; Flags 40300040: Data Readable
; Alignment     : 4 bytes
; Debug Directory entries
; ===========================================================================
; Section 6. (virtual address 00012000)
; Virtual size                  : 00001AE0 (   6880.)
; Section size in file          : 00001C00 (   7168.)
; Offset to raw data for section: 0000E000
; Flags 40300040: Data Readable
; Alignment     : 4 bytes
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame       segment dword public 'DATA' use32
                assume cs:_eh_frame
                ;org 412000h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0E0h ; а
                db 0EFh ; п
                db 0FEh ; ю
                db 0FFh ; я
                db  87h ; ‡
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    2
                db  83h ; ѓ
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
unk_412038      db  14h                 ; DATA XREF: sub_401090+71↑o
                                        ; sub_401150+F↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  38h ; 8
                db 0F0h ; р
                db 0FEh ; ю
                db 0FFh ; я
                db 0B1h ; ±
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  91h ; ‘
                db  0Ah
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  43h ; C
                db  0Bh
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  4Ch ; L
                db    0
                db    0
                db    0
                db 0C8h ; И
                db 0F0h ; р
                db 0FEh ; ю
                db 0FFh ; я
                db  2Fh ; /
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  6Bh ; k
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0C0h ; А
                db 0F0h ; р
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db 0E7h ; з
                db 0F0h ; р
                db 0FEh ; ю
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  6Ch ; l
                db    0
                db    0
                db    0
                db  0Fh
                db 0F1h ; с
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  94h ; ”
                db    0
                db    0
                db    0
                db  36h ; 6
                db 0F1h ; с
                db 0FEh ; ю
                db 0FFh ; я
                db  51h ; Q
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  46h ; F
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db 0BCh ; ј
                db    0
                db    0
                db    0
                db  5Fh ; _
                db 0F1h ; с
                db 0FEh ; ю
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0DCh ; Ь
                db    0
                db    0
                db    0
                db  3Fh ; ?
                db 0F4h ; ф
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db    4
                db    1
                db    0
                db    0
                db  66h ; f
                db 0F4h ; ф
                db 0FEh ; ю
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    1
                db    0
                db    0
                db  8Eh ; Ћ
                db 0F4h ; ф
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  54h ; T
                db    1
                db    0
                db    0
                db 0B5h ; µ
                db 0F4h ; ф
                db 0FEh ; ю
                db 0FFh ; я
                db  51h ; Q
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  46h ; F
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db  7Ch ; |
                db    1
                db    0
                db    0
                db 0DEh ; Ю
                db 0F4h ; ф
                db 0FEh ; ю
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  9Ch ; њ
                db    1
                db    0
                db    0
                db 0BEh ; ѕ
                db 0F7h ; ч
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0C4h ; Д
                db    1
                db    0
                db    0
                db 0E5h ; е
                db 0F7h ; ч
                db 0FEh ; ю
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0ECh ; м
                db    1
                db    0
                db    0
                db  0Dh
                db 0F8h ; ш
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  14h
                db    2
                db    0
                db    0
                db  34h ; 4
                db 0F8h ; ш
                db 0FEh ; ю
                db 0FFh ; я
                db  51h ; Q
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  46h ; F
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    2
                db    0
                db    0
                db  5Dh ; ]
                db 0F8h ; ш
                db 0FEh ; ю
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  5Ch ; \
                db    2
                db    0
                db    0
                db  3Dh ; =
                db 0FBh ; ы
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  84h ; „
                db    2
                db    0
                db    0
                db  64h ; d
                db 0FBh ; ы
                db 0FEh ; ю
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0ACh ; ¬
                db    2
                db    0
                db    0
                db  8Ch ; Њ
                db 0FBh ; ы
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0D4h ; Ф
                db    2
                db    0
                db    0
                db 0B3h ; і
                db 0FBh ; ы
                db 0FEh ; ю
                db 0FFh ; я
                db  51h ; Q
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  46h ; F
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db 0FCh ; ь
                db    2
                db    0
                db    0
                db 0DCh ; Ь
                db 0FBh ; ы
                db 0FEh ; ю
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db    3
                db    0
                db    0
                db 0BCh ; ј
                db 0FEh ; ю
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  44h ; D
                db    3
                db    0
                db    0
                db 0E3h ; г
                db 0FEh ; ю
                db 0FEh ; ю
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  6Ch ; l
                db    3
                db    0
                db    0
                db  0Bh
                db 0FFh ; я
                db 0FEh ; ю
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  94h ; ”
                db    3
                db    0
                db    0
                db  32h ; 2
                db 0FFh ; я
                db 0FEh ; ю
                db 0FFh ; я
                db  51h ; Q
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  46h ; F
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db 0BCh ; ј
                db    3
                db    0
                db    0
                db  5Bh ; [
                db 0FFh ; я
                db 0FEh ; ю
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0DCh ; Ь
                db    3
                db    0
                db    0
                db  3Bh ; ;
                db    2
                db 0FFh ; я
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db    4
                db    4
                db    0
                db    0
                db  62h ; b
                db    2
                db 0FFh ; я
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    4
                db    0
                db    0
                db  8Ah ; Љ
                db    2
                db 0FFh ; я
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  54h ; T
                db    4
                db    0
                db    0
                db 0B1h ; ±
                db    2
                db 0FFh ; я
                db 0FFh ; я
                db  51h ; Q
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  46h ; F
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db  7Ch ; |
                db    4
                db    0
                db    0
                db 0DAh ; Ъ
                db    2
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  9Ch ; њ
                db    4
                db    0
                db    0
                db 0BAh ; є
                db    5
                db 0FFh ; я
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0C4h ; Д
                db    4
                db    0
                db    0
                db 0E1h ; б
                db    5
                db 0FFh ; я
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0ECh ; м
                db    4
                db    0
                db    0
                db    9
                db    6
                db 0FFh ; я
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  14h
                db    5
                db    0
                db    0
                db  30h ; 0
                db    6
                db 0FFh ; я
                db 0FFh ; я
                db  8Dh ; Ќ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  82h ; ‚
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    5
                db    0
                db    0
                db  95h ; •
                db    6
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  5Ch ; \
                db    5
                db    0
                db    0
                db  75h ; u
                db    9
                db 0FFh ; я
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  84h ; „
                db    5
                db    0
                db    0
                db  9Ch ; њ
                db    9
                db 0FFh ; я
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  45h ; E
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0ACh ; ¬
                db    5
                db    0
                db    0
                db 0C4h ; Д
                db    9
                db 0FFh ; я
                db 0FFh ; я
                db  4Fh ; O
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  44h ; D
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0D4h ; Ф
                db    5
                db    0
                db    0
                db 0EBh ; л
                db    9
                db 0FFh ; я
                db 0FFh ; я
                db  8Dh ; Ќ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  82h ; ‚
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db 0FCh ; ь
                db    5
                db    0
                db    0
                db  50h ; P
                db  0Ah
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  1Ch
                db    6
                db    0
                db    0
                db  30h ; 0
                db  0Dh
                db 0FFh ; я
                db 0FFh ; я
                db  45h ; E
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Ch ; |
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  40h ; @
                db    6
                db    0
                db    0
                db  51h ; Q
                db  0Dh
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  64h ; d
                db    6
                db    0
                db    0
                db  73h ; s
                db  0Dh
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  88h ; €
                db    6
                db    0
                db    0
                db  95h ; •
                db  0Dh
                db 0FFh ; я
                db 0FFh ; я
                db  8Dh ; Ќ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  82h ; ‚
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db 0B0h ; °
                db    6
                db    0
                db    0
                db 0FAh ; ъ
                db  0Dh
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db 0D0h ; Р
                db    6
                db    0
                db    0
                db 0DAh ; Ъ
                db  10h
                db 0FFh ; я
                db 0FFh ; я
                db  45h ; E
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Ch ; |
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0F4h ; ф
                db    6
                db    0
                db    0
                db 0FBh ; ы
                db  10h
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  18h
                db    7
                db    0
                db    0
                db  1Dh
                db  11h
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    7
                db    0
                db    0
                db  3Fh ; ?
                db  11h
                db 0FFh ; я
                db 0FFh ; я
                db  8Dh ; Ќ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  82h ; ‚
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db  64h ; d
                db    7
                db    0
                db    0
                db 0A4h ; ¤
                db  11h
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  84h ; „
                db    7
                db    0
                db    0
                db  84h ; „
                db  14h
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0A8h ; Ё
                db    7
                db    0
                db    0
                db 0A6h ; ¦
                db  14h
                db 0FFh ; я
                db 0FFh ; я
                db  47h ; G
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Eh ; ~
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0CCh ; М
                db    7
                db    0
                db    0
                db 0C9h ; Й
                db  14h
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db 0F0h ; р
                db    7
                db    0
                db    0
                db 0EBh ; л
                db  14h
                db 0FFh ; я
                db 0FFh ; я
                db  8Dh ; Ќ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  82h ; ‚
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db  18h
                db    8
                db    0
                db    0
                db  50h ; P
                db  15h
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  38h ; 8
                db    8
                db    0
                db    0
                db  30h ; 0
                db  18h
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  5Ch ; \
                db    8
                db    0
                db    0
                db  52h ; R
                db  18h
                db 0FFh ; я
                db 0FFh ; я
                db  47h ; G
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Eh ; ~
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  80h ; Ђ
                db    8
                db    0
                db    0
                db  75h ; u
                db  18h
                db 0FFh ; я
                db 0FFh ; я
                db  46h ; F
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db 0A4h ; ¤
                db    8
                db    0
                db    0
                db  97h ; —
                db  18h
                db 0FFh ; я
                db 0FFh ; я
                db  8Dh ; Ќ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  82h ; ‚
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db 0CCh ; М
                db    8
                db    0
                db    0
                db 0FCh ; ь
                db  18h
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0FCh ; ь
                db    2
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0ECh ; м
                db    8
                db    0
                db    0
                db 0DCh ; Ь
                db  1Bh
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  14h
                db    9
                db    0
                db    0
                db  0Bh
                db  1Ch
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Dh ; M
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    9
                db    0
                db    0
                db  3Bh ; ;
                db  1Ch
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  64h ; d
                db    9
                db    0
                db    0
                db  6Ah ; j
                db  1Ch
                db 0FFh ; я
                db 0FFh ; я
                db  5Bh ; [
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ah ; J
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  90h ; ђ
                db    9
                db    0
                db    0
                db  99h ; ™
                db  1Ch
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0B4h ; ґ
                db    9
                db    0
                db    0
                db  62h ; b
                db  1Dh
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0DCh ; Ь
                db    9
                db    0
                db    0
                db  91h ; ‘
                db  1Dh
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Dh ; M
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db    4
                db  0Ah
                db    0
                db    0
                db 0C1h ; Б
                db  1Dh
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db  0Ah
                db    0
                db    0
                db 0F0h ; р
                db  1Dh
                db 0FFh ; я
                db 0FFh ; я
                db  5Bh ; [
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ah ; J
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  58h ; X
                db  0Ah
                db    0
                db    0
                db  1Fh
                db  1Eh
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  7Ch ; |
                db  0Ah
                db    0
                db    0
                db 0E8h ; и
                db  1Eh
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0A4h ; ¤
                db  0Ah
                db    0
                db    0
                db  17h
                db  1Fh
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Dh ; M
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0CCh ; М
                db  0Ah
                db    0
                db    0
                db  47h ; G
                db  1Fh
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db 0F4h ; ф
                db  0Ah
                db    0
                db    0
                db  76h ; v
                db  1Fh
                db 0FFh ; я
                db 0FFh ; я
                db  5Bh ; [
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ah ; J
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  20h
                db  0Bh
                db    0
                db    0
                db 0A5h ; Ґ
                db  1Fh
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  44h ; D
                db  0Bh
                db    0
                db    0
                db  6Eh ; n
                db  20h
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  6Ch ; l
                db  0Bh
                db    0
                db    0
                db  9Dh ; ќ
                db  20h
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Dh ; M
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  94h ; ”
                db  0Bh
                db    0
                db    0
                db 0CDh ; Н
                db  20h
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db 0BCh ; ј
                db  0Bh
                db    0
                db    0
                db 0FCh ; ь
                db  20h
                db 0FFh ; я
                db 0FFh ; я
                db  5Bh ; [
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ah ; J
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db 0E8h ; и
                db  0Bh
                db    0
                db    0
                db  2Bh ; +
                db  21h ; !
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  0Ch
                db  0Ch
                db    0
                db    0
                db 0F4h ; ф
                db  21h ; !
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  34h ; 4
                db  0Ch
                db    0
                db    0
                db  23h ; #
                db  22h ; "
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Dh ; M
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  5Ch ; \
                db  0Ch
                db    0
                db    0
                db  53h ; S
                db  22h ; "
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  84h ; „
                db  0Ch
                db    0
                db    0
                db  82h ; ‚
                db  22h ; "
                db 0FFh ; я
                db 0FFh ; я
                db  5Bh ; [
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ah ; J
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db 0B0h ; °
                db  0Ch
                db    0
                db    0
                db 0B1h ; ±
                db  22h ; "
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0D4h ; Ф
                db  0Ch
                db    0
                db    0
                db  7Ah ; z
                db  23h ; #
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0FCh ; ь
                db  0Ch
                db    0
                db    0
                db 0A9h ; ©
                db  23h ; #
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Dh ; M
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  24h ; $
                db  0Dh
                db    0
                db    0
                db 0D9h ; Щ
                db  23h ; #
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  4Ch ; L
                db  0Dh
                db    0
                db    0
                db    8
                db  24h ; $
                db 0FFh ; я
                db 0FFh ; я
                db  9Fh ; џ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  8Eh ; Ћ
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  78h ; x
                db  0Dh
                db    0
                db    0
                db  7Bh ; {
                db  24h ; $
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  9Ch ; њ
                db  0Dh
                db    0
                db    0
                db  44h ; D
                db  25h ; %
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0C4h ; Д
                db  0Dh
                db    0
                db    0
                db  73h ; s
                db  25h ; %
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Dh ; M
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0ECh ; м
                db  0Dh
                db    0
                db    0
                db 0A3h ; Ј
                db  25h ; %
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  14h
                db  0Eh
                db    0
                db    0
                db 0D2h ; Т
                db  25h ; %
                db 0FFh ; я
                db 0FFh ; я
                db  9Fh ; џ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  8Eh ; Ћ
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  40h ; @
                db  0Eh
                db    0
                db    0
                db  45h ; E
                db  26h ; &
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  64h ; d
                db  0Eh
                db    0
                db    0
                db  0Eh
                db  27h ; '
                db 0FFh ; я
                db 0FFh ; я
                db  61h ; a
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  54h ; T
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  90h ; ђ
                db  0Eh
                db    0
                db    0
                db  43h ; C
                db  27h ; '
                db 0FFh ; я
                db 0FFh ; я
                db  62h ; b
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  55h ; U
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db 0BCh ; ј
                db  0Eh
                db    0
                db    0
                db  79h ; y
                db  27h ; '
                db 0FFh ; я
                db 0FFh ; я
                db  4Ah ; J
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0E8h ; и
                db  0Eh
                db    0
                db    0
                db  97h ; —
                db  27h ; '
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  0Ch
                db  0Fh
                db    0
                db    0
                db  60h ; `
                db  28h ; (
                db 0FFh ; я
                db 0FFh ; я
                db  61h ; a
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  54h ; T
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  38h ; 8
                db  0Fh
                db    0
                db    0
                db  95h ; •
                db  28h ; (
                db 0FFh ; я
                db 0FFh ; я
                db  62h ; b
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  55h ; U
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  64h ; d
                db  0Fh
                db    0
                db    0
                db 0CBh ; Л
                db  28h ; (
                db 0FFh ; я
                db 0FFh ; я
                db  4Ah ; J
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  90h ; ђ
                db  0Fh
                db    0
                db    0
                db 0E9h ; й
                db  28h ; (
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0B4h ; ґ
                db  0Fh
                db    0
                db    0
                db 0B2h ; І
                db  29h ; )
                db 0FFh ; я
                db 0FFh ; я
                db  56h ; V
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Bh ; K
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0DCh ; Ь
                db  0Fh
                db    0
                db    0
                db 0E0h ; а
                db  29h ; )
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db    4
                db  10h
                db    0
                db    0
                db  0Fh
                db  2Ah ; *
                db 0FFh ; я
                db 0FFh ; я
                db  4Ah ; J
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  30h ; 0
                db  10h
                db    0
                db    0
                db  2Dh ; -
                db  2Ah ; *
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  54h ; T
                db  10h
                db    0
                db    0
                db 0F6h ; ц
                db  2Ah ; *
                db 0FFh ; я
                db 0FFh ; я
                db  56h ; V
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Bh ; K
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  7Ch ; |
                db  10h
                db    0
                db    0
                db  24h ; $
                db  2Bh ; +
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db 0A4h ; ¤
                db  10h
                db    0
                db    0
                db  53h ; S
                db  2Bh ; +
                db 0FFh ; я
                db 0FFh ; я
                db  4Ah ; J
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0D0h ; Р
                db  10h
                db    0
                db    0
                db  71h ; q
                db  2Bh ; +
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0F4h ; ф
                db  10h
                db    0
                db    0
                db  3Ah ; :
                db  2Ch ; ,
                db 0FFh ; я
                db 0FFh ; я
                db  56h ; V
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Bh ; K
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db  11h
                db    0
                db    0
                db  68h ; h
                db  2Ch ; ,
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  44h ; D
                db  11h
                db    0
                db    0
                db  97h ; —
                db  2Ch ; ,
                db 0FFh ; я
                db 0FFh ; я
                db  4Ah ; J
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  70h ; p
                db  11h
                db    0
                db    0
                db 0B5h ; µ
                db  2Ch ; ,
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db  94h ; ”
                db  11h
                db    0
                db    0
                db  7Eh ; ~
                db  2Dh ; -
                db 0FFh ; я
                db 0FFh ; я
                db  56h ; V
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Bh ; K
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0BCh ; ј
                db  11h
                db    0
                db    0
                db 0ACh ; ¬
                db  2Dh ; -
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  45h ; E
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db 0E4h ; д
                db  11h
                db    0
                db    0
                db 0DBh ; Ы
                db  2Dh ; -
                db 0FFh ; я
                db 0FFh ; я
                db  4Ah ; J
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  10h
                db  12h
                db    0
                db    0
                db 0F9h ; щ
                db  2Dh ; -
                db 0FFh ; я
                db 0FFh ; я
                db 0EDh ; н
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db 0E4h ; д
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  34h ; 4
                db  12h
                db    0
                db    0
                db 0C2h ; В
                db  2Eh ; .
                db 0FFh ; я
                db 0FFh ; я
                db  3Fh ; ?
                db    7
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  47h ; G
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db  2Dh ; -
                db    7
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  64h ; d
                db  12h
                db    0
                db    0
                db 0D1h ; С
                db  35h ; 5
                db 0FFh ; я
                db 0FFh ; я
                db 0DDh ; Э
                db  18h
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db 0D0h ; Р
                db  18h
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  94h ; ”
                db  12h
                db    0
                db    0
                db  7Eh ; ~
                db  4Eh ; N
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db    4
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  47h ; G
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db 0EEh ; о
                db    3
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0C4h ; Д
                db  12h
                db    0
                db    0
                db  4Eh ; N
                db  52h ; R
                db 0FFh ; я
                db 0FFh ; я
                db  47h ; G
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Ch ; |
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                db 0E8h ; и
                db  12h
                db    0
                db    0
                db  71h ; q
                db  52h ; R
                db 0FFh ; я
                db 0FFh ; я
                db  59h ; Y
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  14h
                db  13h
                db    0
                db    0
                db  9Eh ; ћ
                db  52h ; R
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Bh ; K
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  40h ; @
                db  13h
                db    0
                db    0
                db 0CAh ; К
                db  52h ; R
                db 0FFh ; я
                db 0FFh ; я
                db  47h ; G
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Ch ; |
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                db  64h ; d
                db  13h
                db    0
                db    0
                db 0EDh ; н
                db  52h ; R
                db 0FFh ; я
                db 0FFh ; я
                db  59h ; Y
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ch ; L
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  90h ; ђ
                db  13h
                db    0
                db    0
                db  1Ah
                db  53h ; S
                db 0FFh ; я
                db 0FFh ; я
                db  58h ; X
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Bh ; K
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db 0BCh ; ј
                db  13h
                db    0
                db    0
                db  46h ; F
                db  53h ; S
                db 0FFh ; я
                db 0FFh ; я
                db  49h ; I
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Eh ; ~
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0E0h ; а
                db  13h
                db    0
                db    0
                db  6Bh ; k
                db  53h ; S
                db 0FFh ; я
                db 0FFh ; я
                db  48h ; H
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Dh ; }
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  20h
                db    0
                db    0
                db    0
                db    4
                db  14h
                db    0
                db    0
                db  8Fh ; Џ
                db  53h ; S
                db 0FFh ; я
                db 0FFh ; я
                db  45h ; E
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Ch ; |
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                db  28h ; (
                db  14h
                db    0
                db    0
                db 0B0h ; °
                db  53h ; S
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ah ; J
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db  54h ; T
                db  14h
                db    0
                db    0
                db 0DBh ; Ы
                db  53h ; S
                db 0FFh ; я
                db 0FFh ; я
                db  56h ; V
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  49h ; I
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  80h ; Ђ
                db  14h
                db    0
                db    0
                db    5
                db  54h ; T
                db 0FFh ; я
                db 0FFh ; я
                db  45h ; E
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db  7Ch ; |
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                db 0A4h ; ¤
                db  14h
                db    0
                db    0
                db  26h ; &
                db  54h ; T
                db 0FFh ; я
                db 0FFh ; я
                db  57h ; W
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  4Ah ; J
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  28h ; (
                db    0
                db    0
                db    0
                db 0D0h ; Р
                db  14h
                db    0
                db    0
                db  51h ; Q
                db  54h ; T
                db 0FFh ; я
                db 0FFh ; я
                db  56h ; V
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    2
                db  49h ; I
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db 0FCh ; ь
                db  14h
                db    0
                db    0
                db  7Bh ; {
                db  54h ; T
                db 0FFh ; я
                db 0FFh ; я
                db    0
                db  0Fh
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db 0F3h ; у
                db  0Eh
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db  15h
                db    0
                db    0
                db  4Bh ; K
                db  63h ; c
                db 0FFh ; я
                db 0FFh ; я
                db  4Ch ; L
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db  3Fh ; ?
                db    3
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  5Ch ; \
                db  15h
                db    0
                db    0
                db  67h ; g
                db  66h ; f
                db 0FFh ; я
                db 0FFh ; я
                db  34h ; 4
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  6Eh ; n
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  7Ch ; |
                db  15h
                db    0
                db    0
                db  7Bh ; {
                db  66h ; f
                db 0FFh ; я
                db 0FFh ; я
                db 0CCh ; М
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0C8h ; И
                db    1
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  1Ch
                db    0
                db    0
                db    0
                db  9Ch ; њ
                db  15h
                db    0
                db    0
                db  27h ; '
                db  68h ; h
                db 0FFh ; я
                db 0FFh ; я
                db  13h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  4Fh ; O
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0BCh ; ј
                db  15h
                db    0
                db    0
                db  1Ah
                db  68h ; h
                db 0FFh ; я
                db 0FFh ; я
                db  10h
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db    8
                db    1
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  24h ; $
                db    0
                db    0
                db    0
                db 0DCh ; Ь
                db  15h
                db    0
                db    0
                db  0Ah
                db  69h ; i
                db 0FFh ; я
                db 0FFh ; я
                db  25h ; %
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    3
                db  1Ch
                db    1
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db    4
                db  16h
                db    0
                db    0
                db    7
                db  6Ah ; j
                db 0FFh ; я
                db 0FFh ; я
                db  86h ; †
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    2
                db  82h ; ‚
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  24h ; $
                db  16h
                db    0
                db    0
                db  6Dh ; m
                db  6Ah ; j
                db 0FFh ; я
                db 0FFh ; я
                db  50h ; P
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    2
                db  4Ch ; L
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  44h ; D
                db  16h
                db    0
                db    0
                db  9Dh ; ќ
                db  6Ah ; j
                db 0FFh ; я
                db 0FFh ; я
                db 0D1h ; С
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  49h ; I
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db 0BFh ; ї
                db    1
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                db  74h ; t
                db  16h
                db    0
                db    0
                db  3Eh ; >
                db  6Ch ; l
                db 0FFh ; я
                db 0FFh ; я
                db 0E3h ; г
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  42h ; B
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    3
                db 0DBh ; Ы
                db    1
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0A0h ;  
                db  16h
                db    0
                db    0
                db 0F5h ; х
                db  6Dh ; m
                db 0FFh ; я
                db 0FFh ; я
                db 0AEh ; ®
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db    3
                db 0A6h ; ¦
                db    1
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db 0C0h ; А
                db  16h
                db    0
                db    0
                db  83h ; ѓ
                db  6Fh ; o
                db 0FFh ; я
                db 0FFh ; я
                db 0B4h ; ґ
                db  0Ah
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  47h ; G
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db 0A2h ; ў
                db  0Ah
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db 0F0h ; р
                db  16h
                db    0
                db    0
                db    7
                db  7Ah ; z
                db 0FFh ; я
                db 0FFh ; я
                db  83h ; ѓ
                db    5
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db  76h ; v
                db    5
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  20h
                db  17h
                db    0
                db    0
                db  5Ah ; Z
                db  7Fh ; 
                db 0FFh ; я
                db 0FFh ; я
                db  84h ; „
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  47h ; G
                db  83h ; ѓ
                db    3
                db    2
                db  76h ; v
                db 0C3h ; Г
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  44h ; D
                db  17h
                db    0
                db    0
                db 0BAh ; є
                db  7Fh ; 
                db 0FFh ; я
                db 0FFh ; я
                db 0E8h ; и
                db  15h
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  44h ; D
                db  0Dh
                db    5
                db  46h ; F
                db  87h ; ‡
                db    3
                db  86h ; †
                db    4
                db  83h ; ѓ
                db    5
                db    3
                db 0D9h ; Щ
                db  15h
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C7h ; З
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  74h ; t
                db  17h
                db    0
                db    0
                db  72h ; r
                db  95h ; •
                db 0FFh ; я
                db 0FFh ; я
                db 0DAh ; Ъ
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  42h ; B
                db  86h ; †
                db    3
                db  83h ; ѓ
                db    4
                db    2
                db 0D2h ; Т
                db 0C3h ; Г
                db  41h ; A
                db 0C6h ; Ж
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db  9Ch ; њ
                db  17h
                db    0
                db    0
                db  20h
                db  9Dh ; ќ
                db 0FFh ; я
                db 0FFh ; я
                db  5Fh ; _
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h ; ѓ
                db    3
                db    2
                db  57h ; W
                db 0C5h ; Е
                db 0C3h ; Г
                db  0Ch
                db    4
                db    4
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  18h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  74h ; t
                db  97h ; —
                db 0FFh ; я
                db 0FFh ; я
                db  20h
                db    0
                db    0
                db    0
                db    0
                db  43h ; C
                db  0Eh
                db  20h
                db  54h ; T
                db  0Eh
                db  18h
                db  43h ; C
                db  0Eh
                db  20h
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  60h ; `
                db  97h ; —
                db 0FFh ; я
                db 0FFh ; я
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  44h ; D
                db  97h ; —
                db 0FFh ; я
                db 0FFh ; я
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  28h ; (
                db  97h ; —
                db 0FFh ; я
                db 0FFh ; я
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  0Ch
                db  97h ; —
                db 0FFh ; я
                db 0FFh ; я
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  34h ; 4
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0F0h ; р
                db  96h ; –
                db 0FFh ; я
                db 0FFh ; я
                db  1Dh
                db    3
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  86h ; †
                db    2
                db  41h ; A
                db  0Eh
                db  0Ch
                db  83h ; ѓ
                db    3
                db  43h ; C
                db  0Eh
                db  20h
                db    3
                db  8Ah ; Љ
                db    1
                db  0Eh
                db  1Ch
                db  43h ; C
                db  0Eh
                db  20h
                db    2
                db  4Ch ; L
                db  0Ah
                db  0Eh
                db  0Ch
                db  46h ; F
                db 0C3h ; Г
                db  0Eh
                db    8
                db  41h ; A
                db 0C6h ; Ж
                db  0Eh
                db    4
                db  4Bh ; K
                db  0Bh
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0C0h ; А
                db  99h ; ™
                db 0FFh ; я
                db 0FFh ; я
                db  29h ; )
                db    0
                db    0
                db    0
                db    0
                db  43h ; C
                db  0Eh
                db  20h
                db  5Fh ; _
                db  0Eh
                db  14h
                db  43h ; C
                db  0Eh
                db  20h
                db  43h ; C
                db  0Eh
                db    4
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    0
                db    0
                db    0
                db 0D0h ; Р
                db  99h ; ™
                db 0FFh ; я
                db 0FFh ; я
                db 0F6h ; ц
                db    0
                db    0
                db    0
                db    0
                db  43h ; C
                db  0Eh
                db  30h ; 0
                db  74h ; t
                db  0Ah
                db  0Eh
                db    4
                db  49h ; I
                db  0Bh
                db  53h ; S
                db  0Ah
                db  0Eh
                db    4
                db  4Dh ; M
                db  0Bh
                db  48h ; H
                db  0Ah
                db  0Eh
                db    4
                db  48h ; H
                db  0Bh
                db  54h ; T
                db  0Eh
                db  24h ; $
                db  43h ; C
                db  0Eh
                db  30h ; 0
                db    2
                db  69h ; i
                db  0Eh
                db    4
                db  10h
                db    0
                db    0
                db    0
                db  6Ch ; l
                db    0
                db    0
                db    0
                db 0A0h ;  
                db  9Ah ; љ
                db 0FFh ; я
                db 0FFh ; я
                db    5
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  84h ; „
                db  9Ah ; љ
                db 0FFh ; я
                db 0FFh ; я
                db    8
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  68h ; h
                db  9Ah ; љ
                db 0FFh ; я
                db 0FFh ; я
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  8Ch ; Њ
                db  9Ah ; љ
                db 0FFh ; я
                db 0FFh ; я
                db  34h ; 4
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  83h ; ѓ
                db    2
                db  43h ; C
                db  0Eh
                db  20h
                db  58h ; X
                db  0Eh
                db  18h
                db  43h ; C
                db  0Eh
                db  20h
                db  4Fh ; O
                db  0Eh
                db    8
                db  41h ; A
                db 0C3h ; Г
                db  0Eh
                db    4
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h ; €
                db    1
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0F8h ; ш
                db  9Ah ; љ
                db 0FFh ; я
                db 0FFh ; я
                db    9
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h ; …
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  41h ; A
                db 0C5h ; Е
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
_eh_frame       ends

; Section 7. (virtual address 00014000)
; Virtual size                  : 00005120 (  20768.)
; Section size in file          : 00000000 (      0.)
; Offset to raw data for section: 00000000
; Flags C0600080: Bss Readable Writable
; Alignment     : 32 bytes
; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss            segment para public 'BSS' use32
                assume cs:_bss
                ;org 414000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
unk_414000      db    ? ;               ; DATA XREF: sub_401090+69↑o
                                        ; _cygwin_crt0_common@8+1A3↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
; int fmode
_fmode          dd ?                    ; DATA XREF: _cygwin_crt0_common@8+89↑o
                                        ; _cygwin_crt0_common@8+262↑o
; char **environ
environ         dd ?                    ; DATA XREF: _cygwin_crt0_common@8+60↑o
                                        ; _cygwin_crt0_common@8+23A↑o
; int _dynamically_loaded
__dynamically_loaded dd ?               ; DATA XREF: _cygwin_crt0_common@8:loc_40D11D↑r
                                        ; _cygwin_dll_entry@12+D8↑w
; PVOID dll_index
dll_index       dd ?                    ; DATA XREF: _cygwin_dll_entry@12+8B↑r
                                        ; _cygwin_dll_entry@12+9D↑w ...
; void *storedPtr
storedPtr       dd ?                    ; DATA XREF: __dllMain+3↑r
                                        ; _cygwin_dll_entry@12+D2↑w
; DWORD storedReason
storedReason    dd ?                    ; DATA XREF: __dllMain+C↑r
                                        ; _cygwin_dll_entry@12+C8↑w
; HINSTANCE storedHandle
storedHandle    dd ?                    ; DATA XREF: __dllMain+15↑r
                                        ; _cygwin_dll_entry@12+C2↑w
                align 10h
; Function-local static variable
; per_process_0 u
uu               per_process_0 <?>       ; DATA XREF: cygwin_attach_dll+C↑o
                                        ; cygwin_attach_dll+23↑o
                align 20h
; HMODULE hLibModule
hLibModule      dd ?                    ; DATA XREF: sub_401090+39↑w
                                        ; sub_401150:loc_401168↑r
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
byte_41411F     db ?                    ; DATA XREF: test_string+F↑w
; uint8_t str_buffer[4096]
str_buffer      db 1000h dup(?)
; int enter_stack[4096]
enter_stack     dd 1000h dup(?)
unk_419120      db    ? ;               ; DATA XREF: _cygwin_crt0_common@8+1AA↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
_bss            ends

                end main
