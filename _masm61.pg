module: directivelist?  enddir;
addop: '+' | '-';
aexpr: term '&&' aexpr | term;
aliasdir: ALIAS;
altidq: '(' label ')';
arbitrarytext: charlist;
asminstruction: mnemonic  exprlist? ;
assdir: label '=' expr linereminder;
assumedir: ASSUME assumelist linereminder| ASSUMENOTHING linereminder;
assumelist : assumeregister| assumeregister ',' assumelist;
assumereg: register ':' assumeval;
assumeregister: assumesegreg| assumereg;
assumesegreg: segmentregister ':' assumesegval;
assumesegval: NOTHING | ERROR | frameexpr;
assumeval: NOTHING | ERROR | qualifiedtype;
//bcdconst: sign?  decnumber;
binaryop: '=='| '!='| '>='| '<='| '>'| '<'| '&' ;
//bitdef: bitfieldid ':' expr eqconstexpr?;
bitdef: bitfieldid ':' expr;
bitdeflist: bitdef| bitdef ',' linereminder? bitdeflist;
bitfieldid : label ;
blockstatements: U_CONTINUE ifcexpr? | U_BREAK ifcexpr? | directivelist;
bool: TRUE | FALSE ;
brmacroarglist: '<' macroarglist '>';
byteregister: AL | AH | BL | BH | CL | CH | DL | DH ;
cexpr: aexpr ':' cexpr | aexpr;
charlist: CHARACTER+;
classname: STRING;
commaidvararg: ','  linereminder?   label? U_VARARG;
commainvokelist: ',' linereminder? invokelist;
commamodeloptlist: ',' modeloptlist;
commanonuniq: ',' NONUNIQUE;
commapagewidth: ',' expr;
commaparmidvararg: ','  linereminder?  label U_VARARG;
commaparmlist: ','  linereminder?  parmlist;
commaprotolist: ','  linereminder?  protolist;
commatextlen: ',' expr;
commdecl: nearfar?   langtype?  label ':' commtype eqconstexpr?;
commdir: COMM commlist linereminder;
comment: ';' text linereminder;
//commentdir: COMMENT DELIMITER text text DELIMITER text linereminder; TODO
commentdir: COMMENT text linereminder;
commlist: commdecl| commdecl ',' commlist;
commtype: type | expr;
//constant: digits  radixoverride? ;
contextdir: PUSHCONTEXT contextitemlist linereminder| POPCONTEXT contextitemlist linereminder;
contextitem: ASSUMES | RADIX | LISTING | CPU | ALL ;
contextitemlist: contextitem| contextitem ',' contextitemlist;
controlblock: whileblock| repeatblock;
controldir: controlif| controlblock;
controlelseif: U_ELSEIF cexpr linereminder directivelist controlelseif? ;
controlif: U_IF cexpr linereminder directivelist controlelseif? elsedirectivelist? U_ENDIF linereminder;
coprocessor: U_8087 | U_287 | U_387 | U_NO87 ;
crefdir: crefoption linereminder;
crefoption: U_CREF | U_XCREF idlist? | U_NOCREF idlist? ;
cxzexpr: '!' expr| expr  '==' expr| expr  '!=' expr | expr;
datadecl: DB | DW | DD | DF | DQ | DT | datatype;
datadir: label?  dataitem linereminder;
dataitem: datadecl scalarinstlist| label structinstlist| label recordinstlist;
datatype: BYTE | SBYTE | WORD | SWORD | DWORD | SDWORD | FWORD | QWORD | TBYTE | REAL4 | REAL8 | REAL10;
decnumber: INTEGER;
digits: decnumber| digits hexdigit;
directive: generaldir| segmentdef |linereminder;
directivelist: directive+;
distance: nearfar| NEAR16 | NEAR32 | FAR16 | FAR32;
dotdotforparmtype: ':' forparmtype;
dotdotparmtype: ':' parmtype;
dotdotqualifiedtype: ':' qualifiedtype;

// Precedence Operators
// 1 ( ), [ ]
// 2 LENGTH , SIZE , WIDTH , MASK, LENGTHOF, SIZEOF
// 3 . (structure-field-name operator)
// 4 : (segment-override operator), PTR
// 5 LROFFSET , OFFSET , SEG , THIS , TYPE
// 6 HIGH , HIGHWORD , LOW , LOWWORD
// 7 +, - (unary)
// 8 *, /, MOD , SHL , SHR
// 9 +, - (binary)
// 10 EQ , NE , LT , LE , GT , GE
// 11 NOT
// 12 AND
// 13 OR , XOR
// 14 OPATTR , SHORT , .TYPE

expr: SHORT expr {2,left}
| U_TYPE expr {2,left}
| OPATTR expr {2,left}
| expr orop expr {4,left}
| expr AND expr {6,left}
| NOT expr {8,left}
| expr relop expr {10,left}
| expr addop expr {12,left}
| expr mulop expr {14,left}
| expr shiftop expr {14,left}
| expr addop expr {16,right}
| HIGH expr {18,left}
| LOW expr {18,left}
| HIGHWORD expr {18,left}
| LOWWORD expr {18,left}
| OFFSET expr {20,left}
| SEG expr {20,left}
| LROFFSET expr {20,left}
| TYPE expr {20,left}
| THIS expr {20,left}
| expr PTR expr {20,left}
| expr ":" expr {20,left}
| expr U_DOT expr {22,left}
| WIDTH label {23,left}
| MASK label {23,left}
| SIZE sizearg {23,left}
| SIZEOF sizearg {23,left}
| LENGTH label {23,left}
| LENGTHOF label  {23,left}
//| recordconst {23,left}
| STRING {23,left}
| INTEGER {23,left}
| type {23,left}
| label {23,left}
| "$" {23,left}
| segmentregister {23,left}
| register {23,left}
| ST  {23,left}
| ST "(" expr ")" {23,left}
| "(" expr ")" {24,left}
  ; 
sizearg: label| type
| expr {left};

//exponent: 'E'  sign?  decnumber;
echodir: ECHO arbitrarytext linereminder | U_OUT arbitrarytext linereminder;
elsedirectivelist: U_ELSE linereminder directivelist;
elseifblock: elseifstatement linereminder directivelist elseifblock? ;
elseifstatement: ELSEIF expr| ELSEIFE expr| ELSEIFB textitem| ELSEIFNB textitem | ELSEIFDEF label| ELSEIFNDEF label| ELSEIFDIF textitem ',' textitem| ELSEIFDIFI textitem ',' textitem| ELSEIFIDN textitem ',' textitem| ELSEIFIDNI textitem ',' textitem| ELSEIF1 | ELSEIF2 ;
enddir: END expr?  linereminder;
endpdir: label ENDP linereminder;
endsdir: label ENDS linereminder;
eqconstexpr: '=' expr;
equdir: label EQU equtype linereminder;
equtype: expr| textliteral;
errordir: erroropt linereminder;
erroropt: U_ERR textitem? | U_ERRE expr opttext? | U_ERRNZ expr opttext? | U_ERRB textitem opttext? | U_ERRNB textitem opttext? | U_ERRDEF label  opttext? | U_ERRNDEF label opttext? | U_ERRDIF textitem ',' textitem  opttext? | U_ERRDIFI textitem ',' textitem  opttext? | U_ERRIDN textitem ',' textitem  opttext? | U_ERRIDNI textitem ',' textitem  opttext? | U_ERR1 textitem? | U_ERR2 textitem?  ;
exitdir: U_EXIT expr?  linereminder;
exitmdir: EXITM | EXITM textitem;
//exponent: 'E'  sign?  decnumber;
exprlist: expr | expr  ','  exprlist;
externdef: langtype?  label altidq? ':' externtype;
externdir: externkey externlist linereminder;
externkey: EXTRN | EXTERN | EXTERNDEF ;
externlist: externdef| externdef  ',' linereminder?  externlist;
externtype: ABS | qualifiedtype;
fieldinit: initvalue | structinstance;
fieldinitlist: fieldinit ','  linereminder?  fieldinitlist | fieldinit;
filechar: CHARACTER;
filecharlist: filechar+;
filespec: filecharlist| textliteral;
flagname: ZERO_ | CARRY_ | OVERFLOW_ | SIGN_ | PARITY_;
floatnumber : FLOAT | digits 'R'| digits 'r';
forcdir: FORC | IRPC ;
fordir: FOR | IRP ;
forparm: label dotdotforparmtype?;
forparmtype: REQ | '=' textliteral;
frameexpr: SEG label | DGROUP ':' label| segmentregister ':' label| label;
generaldir: modeldir | segorderdir | namedir| includelibdir | commentdir| groupdir | assumedir| structdir | recorddir | typedefdir| externdir | publicdir | commdir | prototypedir| equdir | assdir | textdir| contextdir | optiondir | processordir| radixdir | titledir | pagedir | listdir | crefdir | echodir| ifdir | errordir | includedir | macrodir | macrocall | macrorepeat | purgedir| macrowhile | macrofor | macroforc| aliasdir;
gpregister: AX | EAX | BX | EBX | CX | ECX | DX | EDX| BP | EBP | SP | ESP | DI | EDI | SI | ESI;
groupdir : label GROUP segidlist;
idlist: label ',' idlist | label;
ifcexpr: U_IF cexpr;
ifdir: ifstatement linereminder directivelist elseifblock? elsedirectivelist? ENDIF linereminder;
ifstatement: IF expr| IFE expr| IFB textitem| IFNB textitem| IFDEF label| IFNDEF label| IFDIF textitem ',' textitem| IFDIFI textitem ',' textitem| IFIDN textitem ',' textitem| IFIDNI textitem ',' textitem| IF1 | IF2 ;
includedir: INCLUDE filespec linereminder;
includelibdir: INCLUDELIB filespec linereminder;
initvalue: expr| STRING| '?'| expr  DUP '(' scalarinstlist ')'| floatnumber| INTEGER;
insegdir: labeldef  insegmentdir | insegmentdir;
insegdirlist: insegdir+;
insegmentdir: instruction| datadir| controldir| startupdir| exitdir| offsetdir| labeldir| procdir  localdirlist? insegdirlist? endpdir|invokedir| generaldir ;
instrprefix: REP | REPE | REPZ | REPNE | REPNZ | LOCK ;
instruction: instrprefix?  asminstruction;
invokearg: register '::' register| ADDR expr | expr;
invokedir: INVOKE expr commainvokelist? linereminder;
invokelist: invokearg  ',' linereminder?  invokelist | invokearg;
//label: letter {1,left}| label letter {2,left} | label decdigit {2,left} ;
labeldef: label ':' | label '::' | MONKEY;
labeldir: label LABEL qualifiedtype linereminder;
langtype: C | PASCAL | FORTRAN | BASIC | SYSCALL | STDCALL ;
linereminder: COMMENT | ENDOFLINE;
listdir: listoption linereminder;
listoption: U_LIST | U_NOLIST | U_XLIST | U_LISTALL | U_LISTIF | U_LFCOND | U_NOLISTIF | U_SFCOND | U_TFCOND | U_LISTMACROALL | U_LALL | U_NOLISTMACRO | U_SALL | U_LISTMACRO | U_XALL ;
localdef: LOCAL idlist linereminder;
localdir: LOCAL parmlist linereminder;
localdirlist: localdir+;
locallist: localdef+;
macroarg: '%' expr| '%' label| '%' label '(' macroarglist ')'| STRING| '<' arbitrarytext '>' | arbitrarytext;
macroarglist: macroarg  ',' macroarglist | macroarg;
macrobody: locallist? macrostmtlist;
macrocall: label  '(' macroarglist ')' | label macroarglist linereminder;
macrodir: label MACRO macroparmlist?  linereminder macrobody ENDM linereminder;
macrofor: fordir forparm  ',' '<' macroarglist '>' linereminder macrobody ENDM linereminder;
macroforc: forcdir label  ',' textliteral linereminder macrobody ENDM linereminder;
macroidlist: label  ','  macroidlist | label;
macroparm: label dotdotparmtype?;
macroparmlist: macroparm  ',' linereminder?  macroparmlist | macroparm;
macrorepeat: repeatdir expr linereminder macrobody ENDM linereminder;
macrostmt: directive| exitmdir| ':' label| GOTO label;
macrostmtlist: macrostmt macrostmtlist linereminder | macrostmt linereminder;
macrowhile: WHILE expr linereminder macrobody ENDM linereminder;
maptype: ALL | NONE | NOTPUBLIC ;
memoption: TINY | SMALL | MEDIUM | COMPACT | LARGE | HUGE | FLAT ;
mnemonic: AAA| AAD| AAM| AAS| ADC| ADD| AND| CALL| CBW| CLC| CLD| CLI| CMC| CMP| CMPS| CMPSB| CMPSW| CWD| DAA| DAS| DEC| DIV| ESC| HLT| IDIV| IMUL| IN| INC| INT| INTO| IRET| JA| JAE| JB| JBE| JC| JCXZ| JE| JG| JGE| JL| JLE| JMP| JNA| JNAE| JNB| JNBE| JNC| JNE| JNG| JNGE| JNL| JNLE| JNO| JNP| JNS| JNZ| JO| JP| JPE| JPO| JS| JZ| LAHF| LDS| LEA| LES| LODS| LODSB| LODSW| LOOP| LOOPE| LOOPEW| LOOPNE| LOOPNEW| LOOPNZ| LOOPNZW| LOOPW| LOOPZ| LOOPZW| MOV| MOVS| MOVSB| MOVSW| MUL| NEG| NOP| NOT| OR| OUT| POP| POPF| PUSH| PUSHF| RCL| RCR| RET| RETF| RETN| ROL| ROR| SAHF| SAL| SAR| SBB| SCAS| SCASB| SCASW| SHL| SHR| STC| STD| STI| STOS| STOSB| STOSW| SUB| TEST| WAIT| XCHG| XLAT| XLATB| XOR| BOUND| ENTER| INS| INSB| INSW| LEAVE| OUTS| OUTSB| OUTSW| POPA| PUSHA| PUSHW| ARPL| LAR| LSL| SGDT| SIDT| SLDT| SMSW| STR| VERR| VERW| CLTS| LGDT| LIDT| LLDT| LMSW| LTR| BSF| BSR| BT| BTC| BTR| BTS| CDQ| CMPSD| CWDE| INSD| IRETD| IRETDF| IRETF| JECXZ| LFS| LGS| LODSD| LOOPD| LOOPED| LOOPNED| LOOPNZD| LOOPZD| LSS| MOVSD| MOVSX| MOVZX| OUTSD| POPAD| POPFD| PUSHAD| PUSHD| PUSHFD| SCASD| SETA| SETAE| SETB| SETBE| SETC| SETE| SETG| SETGE| SETL| SETLE| SETNA| SETNAE| SETNB| SETNBE| SETNC| SETNE| SETNG| SETNGE| SETNL| SETNLE| SETNO| SETNP| SETNS| SETNZ| SETO| SETP| SETPE| SETPO| SETS| SETZ| SHLD| SHRD| STOSD| BSWAP| CMPXCHG| INVD| INVLPG| WBINVD| XADD| F2XM1| FABS| FADD| FADDP| FBLD| FBSTP| FCHS| FCLEX| FCOM| FCOMP| FCOMPP| FDECSTP| FDISI| FDIV| FDIVP| FDIVR| FDIVRP| FENI| FFREE| FIADD| FICOM| FICOMP| FIDIV| FIDIVR| FILD| FIMUL| FINCSTP| FINIT| FIST| FISTP| FISUB| FISUBR| FLD| FLD1| FLDCW| FLDENV| FLDENVW| FLDL2E| FLDL2T| FLDLG2| FLDLN2| FLDPI| FLDZ| FMUL| FMULP| FNCLEX| FNDISI| FNENI| FNINIT| FNOP| FNSAVE| FNSAVEW| FNSTCW| FNSTENV| FNSTENVW| FNSTSW| FPATAN| FPREM| FPTAN| FRNDINT| FRSTOR| FRSTORW| FSAVE| FSAVEW| FSCALE| FSQRT| FST| FSTCW| FSTENV| FSTENVW| FSTP| FSTSW| FSUB| FSUBP| FSUBR| FSUBRP| FTST| FWAIT| FXAM| FXCH| FXTRACT| FYL2X| FYL2XP1| FSETPM| FCOS| FLDENVD| FNSAVED| FNSTENVD| FPREM1| FRSTORD| FSAVED| FSIN| FSINCOS| FSTENVD| FUCOM| FUCOMP| FUCOMPP;
modeldir: U_MODEL memoption commamodeloptlist? linereminder;
modelopt: langtype| stackoption ;
modeloptlist: modelopt| modelopt  ',' modeloptlist;
mulop: '*'| '/' | MOD ;
namedir: NAME label linereminder;
nearfar: NEAR | FAR ;
nestedstruct: structhdr  label?  linereminder structbody ENDS linereminder;
offsetdir: offsetdirtype linereminder;
offsetdirtype: EVEN | ORG expr| ALIGN expr? ;
offsettype: GROUP | SEGMENT | FLAT ;
oldrecordfieldlist: expr ',' oldrecordfieldlist | expr;
optiondir: OPTION optionlist linereminder;
optionitem: CASEMAP ':' maptype| DOTNAME | NODOTNAME | EMULATOR | NOEMULATOR | EPILOGUE ':' label| EXPR16 | EXPR32 | LANGUAGE ':' langtype| LJMP | NOLJMP | M510 | NOM510 | NOSIGNEXTEND | OFFSET ':' offsettype| OLDMACROS | NOOLDMACROS | OLDSTRUCTS | NOOLDSTRUCTS | PROC ':' ovisibility| PROLOGUE ':' label| readonly | NOREADONLY | SCOPED | NOSCOPED | SEGMENT ':' segsize| SETIF2 ':' bool;
optionlist: optionitem| optionitem  ',' linereminder?  optionlist;
opttext: ',' textitem;
orop: OR | XOR ;
ovisibility: PUBLIC | PRIVATE | EXPORT ;
pagedir: PAGE pageexpr? linereminder;
pageexpr: '+'|  expr commapagewidth? | commapagewidth;
parm: label  expr? dotdotqualifiedtype?;
parmlist: parm  ',' linereminder? parmlist | parm;
parmtype: REQ | '=' textliteral| VARARG ;
poptions: distance?  langtype?  ovisibility? ;
primary: expr binaryop expr| flagname| expr;
procdir: label PROC poptions  brmacroarglist?  usesregs?   procparmlist? ;
processor: U_8086 | U_186 | U_286 | U_286C | U_286P | U_386 | U_386C | U_386P | U_486 | U_486P | U_586 | U_586P | U_686 | U_686P | U_K3D | U_MMX | U_XMM;
processordir: processor linereminder | coprocessor linereminder;
procparmlist: ',' commaparmlist? ',' commaparmidvararg?;
protoarg : label? ':' qualifiedtype ;
protoarglist: ',' commaprotolist? ',' commaidvararg?;
protolist: protoarg| protoarg  ',' linereminder?  protolist;
protospec: label | distance?   langtype?   protoarglist?;
prototypedir: label PROTO protospec;
pubdef: langtype?  label;
publicdir: PUBLIC publist linereminder;
publist: pubdef  ',' linereminder?  publist | pubdef;
purgedir: PURGE macroidlist;
qualifiedtype: distance? PTR qualifiedtype? | type;
qualifier: PROTO protospec | qualifiedtype;
quote: '\'' | '"';
radixdir: U_RADIX expr linereminder;
readonly: READONLY;
recordconst: label '{' oldrecordfieldlist '}'| label '<' oldrecordfieldlist '>';
recorddir: label RECORD bitdeflist linereminder ;
recordfieldlist: expr  ','  linereminder? recordfieldlist | expr;
recordinstance: '{'  linereminder?  recordfieldlist  linereminder?  '}'| '<' oldrecordfieldlist '>'| expr DUP '(' recordinstance ')';
recordinstlist: recordinstance| recordinstance ','  linereminder?  recordinstlist;
register: specialregister| gpregister| byteregister;
reglist: register+;
relop: EQ | NE | LT | LE | GT | GE ;
repeatblock: U_REPEAT linereminder blockstatements linereminder untildir linereminder;
repeatdir: REPEAT | REPT ;
//scalarinstlist: initvalue ','  linereminder? scalarinstlist | initvalue;
scalarinstlist: initvalue+[scalarinstlist_sep];
scalarinstlist_sep: ','  linereminder?;
segalign: BYTE | WORD | DWORD | PARA | PAGE ;
segattrib: PUBLIC | STACK | COMMON | MEMORY | AT expr| PRIVATE ;
segdir: U_CODE label? | U_DATA | U_DATA_| U_CONST | U_FARDATA label? | U_FARDATA_ label? | U_STACK expr?;
segidlist : label  ',' segidlist | label;
segmentdef: segmentdir  insegdirlist?  endsdir| simplesegdir  insegdirlist?   endsdir? ;
segmentdir: label SEGMENT segoptionlist?  linereminder;
segmentregister: CS | DS | ES | FS | GS | SS;
segoption: segalign| segro| segattrib| segsize| classname;
segoptionlist: segoption+;
segorderdir: U_ALPHA | U_SEQ | U_DOSSEG | DOSSEG ;
segro: readonly;
segsize : USE16 | USE32 | FLAT;
shiftop: SHR | SHL ;
sign: '-' | '+';
simpleexpr: '(' cexpr ')'| primary;
simplesegdir: segdir linereminder;
specialregister: CR0 | CR2 | CR3 | DR0 | DR1 | DR2 | DR3 | DR6 | DR7| TR3 | TR4 | TR5 | TR6 | TR7;
stackoption: NEARSTACK | FARSTACK ;
startupdir: U_STARTUP linereminder;
//stext: STRINGCHAR+;
//string: quote  stext?  quote;
structbody: structitem structbody | structitem linereminder;
structdir: label structhdr  expr?  commanonuniq? linereminder structbody label ENDS linereminder;
structhdr: STRUC | STRUCT | UNION ;
structinstance: '<'  fieldinitlist?  '>'| '{' linereminder?   fieldinitlist?   linereminder?  '}'| expr DUP '(' structinstlist ')';
structinstlist: structinstance| structinstance  ','  linereminder?  structinstlist;
structitem : datadir| generaldir| offsetdir| nestedstruct;
term: '!' simpleexpr | simpleexpr;
text: '!' CHARACTER text| '!' CHARACTER| textliteral | CHARACTER+;
text: CHARACTER+;
textdir: label textmacrodir linereminder;
textitem: textliteral| '%' expr| label;
textlist: textitem  ',' linereminder?  textlist | textitem;
textliteral: '<' text '>' linereminder;
textmacrodir: CATSTR textlist? | TEXTEQU textlist? | SIZESTR textitem| SUBSTR textitem  ',' expr commatextlen| INSTR textstartcomma? textitem  ',' textitem;
textstartcomma: expr  ',';
titledir: titletype arbitrarytext linereminder;
titletype: TITLE | SUBTITLE | SUBTTL ;
type: label| distance| datatype;
typedefdir: label TYPEDEF qualifier;
untildir: U_UNTIL cexpr linereminder U_UNTILCXZ cxzexpr?  linereminder;
usesregs: USES reglist ;
whileblock: U_WHILE cexpr linereminder blockstatements linereminder U_ENDW ;
WHITESPACECHARACTER: WS;

LAYOUT: LayoutItem | LAYOUT LayoutItem;
LayoutItem: WS | Comment | EMPTY;

terminals
AAA: 'AAA';
AAD: 'AAD';
AAM: 'AAM';
AAS: 'AAS';
ABS: 'ABS';
ADC: 'ADC';
ADD: 'ADD';
ADDR: 'ADDR';
AH: 'AH';
AL: 'AL';
ALIAS: 'ALIAS';
ALIGN: 'ALIGN';
ALL: 'ALL';
AND: 'AND';
ARPL: 'ARPL';
ASSUMENOTHING: 'ASSUME NOTHING';
ASSUME: 'ASSUME';
ASSUMES: 'ASSUMES';
AT: 'AT';
AX: 'AX';
BASIC: 'BASIC';
BH: 'BH';
BL: 'BL';
BOUND: 'BOUND';
BP: 'BP';
BSF: 'BSF';
BSR: 'BSR';
BSWAP: 'BSWAP';
BT: 'BT';
BTC: 'BTC';
BTR: 'BTR';
BTS: 'BTS';
BX: 'BX';
BYTE: 'BYTE';
CALL: 'CALL';
CARRY_: 'CARRY?';
CASEMAP: 'CASEMAP';
CATSTR: 'CATSTR';
CBW: 'CBW';
CDQ: 'CDQ';
CH: 'CH';
CL: 'CL';
CLC: 'CLC';
CLD: 'CLD';
CLI: 'CLI';
CLTS: 'CLTS';
CMC: 'CMC';
CMP: 'CMP';
CMPS: 'CMPS';
CMPSB: 'CMPSB';
CMPSD: 'CMPSD';
CMPSW: 'CMPSW';
CMPXCHG: 'CMPXCHG';
COMM: 'COMM';
COMMENT: 'COMMENT';
COMMON: 'COMMON';
COMPACT: 'COMPACT';
CPU: 'CPU';
CR0: 'CR0';
CR2: 'CR2';
CR3: 'CR3';
CS: 'CS';
CWD: 'CWD';
CWDE: 'CWDE';
CX: 'CX';
DAA: 'DAA';
DAS: 'DAS';
DB: 'DB';
DD: 'DD';
DEC: 'DEC';
DF: 'DF';
DGROUP: 'DGROUP';
DH: 'DH';
DI: 'DI';
DIV: 'DIV';
DL: 'DL';
DOSSEG: 'DOSSEG';
DOTNAME: 'DOTNAME';
DQ: 'DQ';
DR0: 'DR0';
DR1: 'DR1';
DR2: 'DR2';
DR3: 'DR3';
DR6: 'DR6';
DR7: 'DR7';
DS: 'DS';
DT: 'DT';
DUP: 'DUP';
DW: 'DW';
DWORD: 'DWORD';
DX: 'DX';
EAX: 'EAX';
EBP: 'EBP';
EBX: 'EBX';
ECHO: 'ECHO';
ECX: 'ECX';
EDI: 'EDI';
EDX: 'EDX';
ELSEIF1: 'ELSEIF1';
ELSEIF2: 'ELSEIF2';
ELSEIF: 'ELSEIF';
ELSEIFB: 'ELSEIFB';
ELSEIFDEF: 'ELSEIFDEF';
ELSEIFDIF: 'ELSEIFDIF';
ELSEIFDIFI: 'ELSEIFDIFI';
ELSEIFE: 'ELSEIFE';
ELSEIFIDN: 'ELSEIFIDN';
ELSEIFIDNI: 'ELSEIFIDNI';
ELSEIFNB: 'ELSEIFNB';
ELSEIFNDEF: 'ELSEIFNDEF';
EMULATOR: 'EMULATOR';
END: 'END';
ENDIF: 'ENDIF';
ENDM: 'ENDM';
ENDP: 'ENDP';
ENDS: 'ENDS';
ENTER: 'ENTER';
EPILOGUE: 'EPILOGUE';
EQ: 'EQ';
EQU: 'EQU';
ERROR: 'ERROR';
ES: 'ES';
ESC: 'ESC';
ESI: 'ESI';
ESP: 'ESP';
EVEN: 'EVEN';
EXITM: 'EXITM';
EXPORT: 'EXPORT';
EXPR16: 'EXPR16';
EXPR32: 'EXPR32';
EXTERN: 'EXTERN';
EXTERNDEF: 'EXTERNDEF';
EXTRN: 'EXTRN';
F2XM1: 'F2XM1';
FABS: 'FABS';
FADD: 'FADD';
FADDP: 'FADDP';
FALSE: 'FALSE';
FAR16: 'FAR16';
FAR32: 'FAR32';
FAR: 'FAR';
FARSTACK: 'FARSTACK';
FBLD: 'FBLD';
FBSTP: 'FBSTP';
FCHS: 'FCHS';
FCLEX: 'FCLEX';
FCOM: 'FCOM';
FCOMP: 'FCOMP';
FCOMPP: 'FCOMPP';
FCOS: 'FCOS';
FDECSTP: 'FDECSTP';
FDISI: 'FDISI';
FDIV: 'FDIV';
FDIVP: 'FDIVP';
FDIVR: 'FDIVR';
FDIVRP: 'FDIVRP';
FENI: 'FENI';
FFREE: 'FFREE';
FIADD: 'FIADD';
FICOM: 'FICOM';
FICOMP: 'FICOMP';
FIDIV: 'FIDIV';
FIDIVR: 'FIDIVR';
FILD: 'FILD';
FIMUL: 'FIMUL';
FINCSTP: 'FINCSTP';
FINIT: 'FINIT';
FIST: 'FIST';
FISTP: 'FISTP';
FISUB: 'FISUB';
FISUBR: 'FISUBR';
FLAT: 'FLAT';
FLD1: 'FLD1';
FLD: 'FLD';
FLDCW: 'FLDCW';
FLDENV: 'FLDENV';
FLDENVD: 'FLDENVD';
FLDENVW: 'FLDENVW';
FLDL2E: 'FLDL2E';
FLDL2T: 'FLDL2T';
FLDLG2: 'FLDLG2';
FLDLN2: 'FLDLN2';
FLDPI: 'FLDPI';
FLDZ: 'FLDZ';
FMUL: 'FMUL';
FMULP: 'FMULP';
FNCLEX: 'FNCLEX';
FNDISI: 'FNDISI';
FNENI: 'FNENI';
FNINIT: 'FNINIT';
FNOP: 'FNOP';
FNSAVE: 'FNSAVE';
FNSAVED: 'FNSAVED';
FNSAVEW: 'FNSAVEW';
FNSTCW: 'FNSTCW';
FNSTENV: 'FNSTENV';
FNSTENVD: 'FNSTENVD';
FNSTENVW: 'FNSTENVW';
FNSTSW: 'FNSTSW';
FOR: 'FOR';
FORC: 'FORC';
FORTRAN: 'FORTRAN';
FPATAN: 'FPATAN';
FPREM1: 'FPREM1';
FPREM: 'FPREM';
FPTAN: 'FPTAN';
FRNDINT: 'FRNDINT';
FRSTOR: 'FRSTOR';
FRSTORD: 'FRSTORD';
FRSTORW: 'FRSTORW';
FS: 'FS';
FSAVE: 'FSAVE';
FSAVED: 'FSAVED';
FSAVEW: 'FSAVEW';
FSCALE: 'FSCALE';
FSETPM: 'FSETPM';
FSIN: 'FSIN';
FSINCOS: 'FSINCOS';
FSQRT: 'FSQRT';
FST: 'FST';
FSTCW: 'FSTCW';
FSTENV: 'FSTENV';
FSTENVD: 'FSTENVD';
FSTENVW: 'FSTENVW';
FSTP: 'FSTP';
FSTSW: 'FSTSW';
FSUB: 'FSUB';
FSUBP: 'FSUBP';
FSUBR: 'FSUBR';
FSUBRP: 'FSUBRP';
FTST: 'FTST';
FUCOM: 'FUCOM';
FUCOMP: 'FUCOMP';
FUCOMPP: 'FUCOMPP';
FWAIT: 'FWAIT';
FWORD: 'FWORD';
FXAM: 'FXAM';
FXCH: 'FXCH';
FXTRACT: 'FXTRACT';
FYL2X: 'FYL2X';
FYL2XP1: 'FYL2XP1';
GE: 'GE';
GOTO: 'GOTO';
GROUP: 'GROUP';
GS: 'GS';
GT: 'GT';
HIGH: 'HIGH';
HIGHWORD: 'HIGHWORD';
HLT: 'HLT';
HUGE: 'HUGE';
IDIV: 'IDIV';
IF1: 'IF1';
IF2: 'IF2';
IF: 'IF';
IFB: 'IFB';
IFDEF: 'IFDEF';
IFDIF: 'IFDIF';
IFDIFI: 'IFDIFI';
IFE: 'IFE';
IFIDN: 'IFIDN';
IFIDNI: 'IFIDNI';
IFNB: 'IFNB';
IFNDEF: 'IFNDEF';
IMUL: 'IMUL';
IN: 'IN';
INC: 'INC';
INCLUDE: 'INCLUDE';
INCLUDELIB: 'INCLUDELIB';
INS: 'INS';
INSB: 'INSB';
INSD: 'INSD';
INSTR: 'INSTR';
INSW: 'INSW';
INT: 'INT';
INTO: 'INTO';
INVD: 'INVD';
INVLPG: 'INVLPG';
INVOKE: 'INVOKE';
IRET: 'IRET';
IRETD: 'IRETD';
IRETDF: 'IRETDF';
IRETF: 'IRETF';
IRP: 'IRP';
IRPC: 'IRPC';
JA: 'JA';
JAE: 'JAE';
JB: 'JB';
JBE: 'JBE';
JC: 'JC';
JCXZ: 'JCXZ';
JE: 'JE';
JECXZ: 'JECXZ';
JG: 'JG';
JGE: 'JGE';
JL: 'JL';
JLE: 'JLE';
JMP: 'JMP';
JNA: 'JNA';
JNAE: 'JNAE';
JNB: 'JNB';
JNBE: 'JNBE';
JNC: 'JNC';
JNE: 'JNE';
JNG: 'JNG';
JNGE: 'JNGE';
JNL: 'JNL';
JNLE: 'JNLE';
JNO: 'JNO';
JNP: 'JNP';
JNS: 'JNS';
JNZ: 'JNZ';
JO: 'JO';
JP: 'JP';
JPE: 'JPE';
JPO: 'JPO';
JS: 'JS';
JZ: 'JZ';
LABEL: 'LABEL';
LAHF: 'LAHF';
LANGUAGE: 'LANGUAGE';
LAR: 'LAR';
LARGE: 'LARGE';
LDS: 'LDS';
LE: 'LE';
LEA: 'LEA';
LEAVE: 'LEAVE';
LENGTH: 'LENGTH';
LENGTHOF: 'LENGTHOF';
LES: 'LES';
LFS: 'LFS';
LGDT: 'LGDT';
LGS: 'LGS';
LIDT: 'LIDT';
LISTING: 'LISTING';
LJMP: 'LJMP';
LLDT: 'LLDT';
LMSW: 'LMSW';
LOCAL: 'LOCAL';
LOCK: 'LOCK';
LODS: 'LODS';
LODSB: 'LODSB';
LODSD: 'LODSD';
LODSW: 'LODSW';
LOOP: 'LOOP';
LOOPD: 'LOOPD';
LOOPE: 'LOOPE';
LOOPED: 'LOOPED';
LOOPEW: 'LOOPEW';
LOOPNE: 'LOOPNE';
LOOPNED: 'LOOPNED';
LOOPNEW: 'LOOPNEW';
LOOPNZ: 'LOOPNZ';
LOOPNZD: 'LOOPNZD';
LOOPNZW: 'LOOPNZW';
LOOPW: 'LOOPW';
LOOPZ: 'LOOPZ';
LOOPZD: 'LOOPZD';
LOOPZW: 'LOOPZW';
LOW: 'LOW';
LOWWORD: 'LOWWORD';
LROFFSET: 'LROFFSET';
LSL: 'LSL';
LSS: 'LSS';
LT: 'LT';
LTR: 'LTR';
M510: 'M510';
MACRO: 'MACRO';
MASK: 'MASK';
MEDIUM: 'MEDIUM';
MEMORY: 'MEMORY';
MOD: 'MOD';
MONKEY: '@@:';
MOV: 'MOV';
MOVS: 'MOVS';
MOVSB: 'MOVSB';
MOVSD: 'MOVSD';
MOVSW: 'MOVSW';
MOVSX: 'MOVSX';
MOVZX: 'MOVZX';
MUL: 'MUL';
NAME: 'NAME';
NE: 'NE';
NEAR16: 'NEAR16';
NEAR32: 'NEAR32';
NEAR: 'NEAR';
NEARSTACK: 'NEARSTACK';
NEG: 'NEG';
NODOTNAME: 'NODOTNAME';
NOEMULATOR: 'NOEMULATOR';
NOLJMP: 'NOLJMP';
NOM510: 'NOM510';
NONE: 'NONE';
NONUNIQUE: 'NONUNIQUE';
NOOLDMACROS: 'NOOLDMACROS';
NOOLDSTRUCTS: 'NOOLDSTRUCTS';
NOP: 'NOP';
NOREADONLY: 'NOREADONLY';
NOSCOPED: 'NOSCOPED';
NOSIGNEXTEND: 'NOSIGNEXTEND';
NOT: 'NOT';
NOTHING: 'NOTHING';
NOTPUBLIC: 'NOTPUBLIC';
OFFSET: 'OFFSET';
OLDMACROS: 'OLDMACROS';
OLDSTRUCTS: 'OLDSTRUCTS';
OPATTR: 'OPATTR';
OPTION: 'OPTION';
OR: 'OR';
ORG: 'ORG';
OUT: 'OUT';
OUTS: 'OUTS';
OUTSB: 'OUTSB';
OUTSD: 'OUTSD';
OUTSW: 'OUTSW';
OVERFLOW_: 'OVERFLOW?';
PAGE: 'PAGE';
PARA: 'PARA';
PARITY_: 'PARITY?';
PASCAL: 'PASCAL';
POP: 'POP';
POPA: 'POPA';
POPAD: 'POPAD';
POPCONTEXT: 'POPCONTEXT';
POPF: 'POPF';
POPFD: 'POPFD';
PRIVATE: 'PRIVATE';
PROC: 'PROC';
PROLOGUE: 'PROLOGUE';
PROTO: 'PROTO';
PTR: 'PTR';
PUBLIC: 'PUBLIC';
PURGE: 'PURGE';
PUSH: 'PUSH';
PUSHA: 'PUSHA';
PUSHAD: 'PUSHAD';
PUSHCONTEXT: 'PUSHCONTEXT';
PUSHD: 'PUSHD';
PUSHF: 'PUSHF';
PUSHFD: 'PUSHFD';
PUSHW: 'PUSHW';
QWORD: 'QWORD';
RADIX: 'RADIX';
RCL: 'RCL';
RCR: 'RCR';
READONLY: 'READONLY';
REAL10: 'REAL10';
REAL4: 'REAL4';
REAL8: 'REAL8';
RECORD: 'RECORD';
REP: 'REP';
REPE: 'REPE';
REPEAT: 'REPEAT';
REPNE: 'REPNE';
REPNZ: 'REPNZ';
REPT: 'REPT';
REPZ: 'REPZ';
REQ: 'REQ';
RET: 'RET';
RETF: 'RETF';
RETN: 'RETN';
ROL: 'ROL';
ROR: 'ROR';
SAHF: 'SAHF';
SAL: 'SAL';
SAR: 'SAR';
SBB: 'SBB';
SBYTE: 'SBYTE';
SCAS: 'SCAS';
SCASB: 'SCASB';
SCASD: 'SCASD';
SCASW: 'SCASW';
SCOPED: 'SCOPED';
SDWORD: 'SDWORD';
SEG: 'SEG';
SEGMENT: 'SEGMENT';
SETA: 'SETA';
SETAE: 'SETAE';
SETB: 'SETB';
SETBE: 'SETBE';
SETC: 'SETC';
SETE: 'SETE';
SETG: 'SETG';
SETGE: 'SETGE';
SETIF2: 'SETIF2';
SETL: 'SETL';
SETLE: 'SETLE';
SETNA: 'SETNA';
SETNAE: 'SETNAE';
SETNB: 'SETNB';
SETNBE: 'SETNBE';
SETNC: 'SETNC';
SETNE: 'SETNE';
SETNG: 'SETNG';
SETNGE: 'SETNGE';
SETNL: 'SETNL';
SETNLE: 'SETNLE';
SETNO: 'SETNO';
SETNP: 'SETNP';
SETNS: 'SETNS';
SETNZ: 'SETNZ';
SETO: 'SETO';
SETP: 'SETP';
SETPE: 'SETPE';
SETPO: 'SETPO';
SETS: 'SETS';
SETZ: 'SETZ';
SGDT: 'SGDT';
SHL: 'SHL';
SHLD: 'SHLD';
SHORT: 'SHORT';
SHR: 'SHR';
SHRD: 'SHRD';
SI: 'SI';
SIDT: 'SIDT';
SIGN_: 'SIGN?';
SIZE: 'SIZE';
SIZEOF: 'SIZEOF';
SIZESTR: 'SIZESTR';
SLDT: 'SLDT';
SMALL: 'SMALL';
SMSW: 'SMSW';
SP: 'SP';
SS: 'SS';
ST: 'ST';
STACK: 'STACK';
STC: 'STC';
STD: 'STD';
STDCALL: 'STDCALL';
STI: 'STI';
STOS: 'STOS';
STOSB: 'STOSB';
STOSD: 'STOSD';
STOSW: 'STOSW';
STR: 'STR';
STRUC: 'STRUC';
STRUCT: 'STRUCT';
SUB: 'SUB';
SUBSTR: 'SUBSTR';
SUBTITLE: 'SUBTITLE';
SUBTTL: 'SUBTTL';
SWORD: 'SWORD';
SYSCALL: 'SYSCALL';
TBYTE: 'TBYTE';
TEST: 'TEST';
TEXTEQU: 'TEXTEQU';
THIS: 'THIS';
TINY: 'TINY';
TITLE: 'TITLE';
TR3: 'TR3';
TR4: 'TR4';
TR5: 'TR5';
TR6: 'TR6';
TR7: 'TR7';
TRUE: 'TRUE';
TYPE: 'TYPE';
TYPEDEF: 'TYPEDEF';
UNION: 'UNION';
USE16: 'USE16';
USE32: 'USE32';
USES: 'USES';
VARARG: 'VARARG';
VERR: 'VERR';
VERW: 'VERW';
WAIT: 'WAIT';
WBINVD: 'WBINVD';
WHILE: 'WHILE';
WIDTH: 'WIDTH';
WORD: 'WORD';
XADD: 'XADD';
XCHG: 'XCHG';
XLAT: 'XLAT';
XLATB: 'XLATB';
XOR: 'XOR';
ZERO_: 'ZERO?';
U_186: '.186';
U_286: '.286';
U_286C: '.286C';
U_286P: '.286P';
U_287: '.287';
U_386: '.386';
U_386C: '.386C';
U_386P: '.386P';
U_387: '.387';
U_486: '.486';
U_486P: '.486P';
U_586: '.586';
U_586P: '.586P';
U_686: '.686';
U_686P: '.686P';
U_8086: '.8086';
U_8087: '.8087';
U_ALPHA: '.ALPHA';
U_BREAK: '.BREAK';
U_CODE: '.CODE';
U_CONST: '.CONST';
U_CONTINUE: '.CONTINUE';
U_CREF: '.CREF';
U_DATA: '.DATA';
U_DATA_: '.DATA?';
U_DOSSEG: '.DOSSEG';
U_ELSE: '.ELSE';
U_ELSEIF: '.ELSEIF';
U_ENDIF: '.ENDIF';
U_ENDW: '.ENDW';
U_ERR1: '.ERR1';
U_ERR2: '.ERR2';
U_ERR: '.ERR';
U_ERRB: '.ERRB';
U_ERRDEF: '.ERRDEF';
U_ERRDIF: '.ERRDIF';
U_ERRDIFI: '.ERRDIFI';
U_ERRE: '.ERRE';
U_ERRIDN: '.ERRIDN';
U_ERRIDNI: '.ERRIDNI';
U_ERRNB: '.ERRNB';
U_ERRNDEF: '.ERRNDEF';
U_ERRNZ: '.ERRNZ';
U_EXIT: '.EXIT';
U_FARDATA: '.FARDATA';
U_FARDATA_: '.FARDATA?';
U_IF: '.IF';
U_K3D: '.K3D';
U_LALL: '.LALL';
U_LFCOND: '.LFCOND';
U_LIST: '.LIST';
U_LISTALL: '.LISTALL';
U_LISTIF: '.LISTIF';
U_LISTMACRO: '.LISTMACRO';
U_LISTMACROALL: '.LISTMACROALL';
U_MMX: '.MMX';
U_MODEL: '.MODEL';
U_NO87: '.NO87';
U_NOCREF: '.NOCREF';
U_NOLIST: '.NOLIST';
U_NOLISTIF: '.NOLISTIF';
U_NOLISTMACRO: '.NOLISTMACRO';
U_OUT: '%OUT';
U_RADIX: '.RADIX';
U_REPEAT: '.REPEAT';
U_SALL: '.SALL';
U_SEQ: '.SEQ';
U_SFCOND: '.SFCOND';
U_STACK: '.STACK';
U_STARTUP: '.STARTUP';
U_TFCOND: '.TFCOND';
U_TYPE: '.TYPE';
U_UNTIL: '.UNTIL';
U_UNTILCXZ: '.UNTILCXZ';
U_VARARG: ':VARARG';
U_WHILE: '.WHILE';
U_XALL: '.XALL';
U_XCREF: '.XCREF';
U_XLIST: '.XLIST';
U_XMM: '.XMM';
U_DOT: '.';
C: 'C';
CHARACTER: /[^\r\n]/;
STRING: /(\'.*?\')|(\".*?\")/;
label: /[A-Za-z_][A-Za-z_0-9]*/;

decdigit: /[0-9]/; 
hexdigit: /[A-Fa-f]/; 
DELIMITER: /[^\t\n\rA-Za-z0-9 ]/;
ENDOFLINE: /[\r\n]+/;
FLOAT: /[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\b/;
INTEGER: /[-+]?[0-9]+[hoqtyHOQTY]?\b/ {prefer};
WS: /[\t ]+/;
Comment: /;[^\r\n]*/;